import { Browser, ChildProperty, Collection, Complex, Component, Draggable, Droppable, Event, EventHandler, Internationalization, KeyboardEvents, L10n, NotifyPropertyChanges, Property, addClass, append, attributes, blazorTemplates, classList, closest, compile, createElement, debounce, detach, extend, formatUnit, getEnumValue, getValue, isNullOrUndefined, isObject, isUndefined, matches, merge, print, remove, removeClass, resetBlazorTemplate, select, selectAll, setCulture, setStyleAttribute, setValue, updateBlazorTemplate } from '@syncfusion/ej2-base';
import { DataManager, DataUtil, Deferred, Predicate, Query, UrlAdaptor } from '@syncfusion/ej2-data';
import { Dialog, Tooltip, calculatePosition, calculateRelativeBasedPosition, createSpinner, hideSpinner, showSpinner } from '@syncfusion/ej2-popups';
import { Button, CheckBox, RadioButton, Switch, createCheckBox } from '@syncfusion/ej2-buttons';
import { FormValidator, Input, MaskedTextBox, NumericTextBox, TextBox } from '@syncfusion/ej2-inputs';
import { AutoComplete, ComboBox, DropDownList, MultiSelect } from '@syncfusion/ej2-dropdowns';
import { DatePicker, DateTimePicker, TimePicker } from '@syncfusion/ej2-calendars';
import { ContextMenu, Toolbar } from '@syncfusion/ej2-navigations';
import { Workbook } from '@syncfusion/ej2-excel-export';
import { PdfBitmap, PdfBorders, PdfColor, PdfCompositeField, PdfDocument, PdfFontFamily, PdfFontStyle, PdfGrid, PdfPaddings, PdfPageCountField, PdfPageNumberField, PdfPageOrientation, PdfPageSettings, PdfPageTemplateElement, PdfPen, PdfSolidBrush, PdfStandardFont, PdfStringFormat, PdfTextAlignment, PdfTextWebLink, PdfTrueTypeFont, PdfVerticalAlignment, PointF, RectangleF, SizeF } from '@syncfusion/ej2-pdf-export';

/**
 * ValueFormatter class to globalize the value.
 *
 * @hidden
 */
class ValueFormatter {
    constructor(cultureName) {
        this.intl = new Internationalization();
        if (!isNullOrUndefined(cultureName)) {
            this.intl.culture = cultureName;
        }
    }
    getFormatFunction(format) {
        if (format.type) {
            return this.intl.getDateFormat(format);
        }
        else {
            return this.intl.getNumberFormat(format);
        }
    }
    getParserFunction(format) {
        if (format.type) {
            return this.intl.getDateParser(format);
        }
        else {
            return this.intl.getNumberParser(format);
        }
    }
    fromView(value, format, type) {
        if ((type === 'date' || type === 'datetime' || type === 'number') && (!isNullOrUndefined(format))) {
            return format(value);
        }
        else {
            return value;
        }
    }
    toView(value, format) {
        let result = value;
        if (!isNullOrUndefined(format) && !isNullOrUndefined(value)) {
            result = format(value);
        }
        return result;
    }
    setCulture(cultureName) {
        if (!isNullOrUndefined(cultureName)) {
            setCulture(cultureName);
        }
    }
}

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents Grid `Column` model class.
 */
class Column {
    constructor(options, parent) {
        /**
         * If `disableHtmlEncode` is set to true, it encodes the HTML of the header and content cells.
         *
         * @default true
         */
        this.disableHtmlEncode = true;
        /**
         * If `allowSorting` set to false, then it disables sorting option of a particular column.
         * By default all columns are sortable.
         *
         * @default true
         */
        this.allowSorting = true;
        /**
         * If `allowResizing` is set to false, it disables resize option of a particular column.
         * By default all the columns can be resized.
         *
         * @default true
         */
        this.allowResizing = true;
        /**
         * If `allowFiltering` set to false, then it disables filtering option and filter bar element of a particular column.
         * By default all columns are filterable.
         *
         * @default true
         */
        this.allowFiltering = true;
        /**
         * If `allowGrouping` set to false, then it disables grouping of a particular column.
         * By default all columns are groupable.
         *
         * @default true
         */
        this.allowGrouping = true;
        /**
         * If `allowReordering` set to false, then it disables reorder of a particular column.
         * By default all columns can be reorder.
         *
         * @default true
         */
        this.allowReordering = true;
        /**
         * If `showColumnMenu` set to false, then it disable the column menu of a particular column.
         * By default column menu will show for all columns
         *
         * @default true
         */
        this.showColumnMenu = true;
        /**
         * If `enableGroupByFormat` set to true, then it groups the particular column by formatted values.
         *
         * @default true
         */
        this.enableGroupByFormat = false;
        /**
         * If `allowEditing` set to false, then it disables editing of a particular column.
         * By default all columns are editable.
         *
         * @default true
         */
        this.allowEditing = true;
        /**
         *  It is used to customize the default filter options for a specific columns.
         * * type -  Specifies the filter type as menu or checkbox.
         * * ui - to render custom component for specific column it has following functions.
         * * ui.create â€“ It is used for creating custom components.
         * * ui.read -  It is used for read the value from the component.
         * * ui.write - It is used to apply component model as dynamically.
         * {% codeBlock src="grid/filter-menu-api/index.ts" %}{% endcodeBlock %}
         *
         * > Check the [`Filter UI`](../../grid/filtering/filter-menu/#custom-component-in-filter-menu) for its customization.
         *
         *  @default {}
         */
        this.filter = {};
        /**
         * If `showInColumnChooser` set to false, then hide the particular column in column chooser.
         *  By default all columns are displayed in column Chooser.
         *
         * @default true
         */
        this.showInColumnChooser = true;
        /**
         * Defines the `IEditCell` object to customize default edit cell.
         *
         * @default {}
         */
        this.edit = {};
        /**
         * If `allowSearching` set to false, then it disables Searching of a particular column.
         * By default all columns allow Searching.
         *
         * @default true
         */
        this.allowSearching = true;
        /**
         * If `autoFit` set to true, then the particular column content width will be
         * adjusted based on its content in the initial rendering itself.
         * Setting this property as true is equivalent to calling `autoFitColumns` method in the `dataBound` event.
         *
         * @default false
         */
        this.autoFit = false;
        this.sortDirection = 'Descending';
        /**
         * @returns {Function} returns the edit template
         * @hidden */
        this.getEditTemplate = () => this.editTemplateFn;
        /**
         * @returns {Function} returns the filter template
         * @hidden */
        this.getFilterTemplate = () => this.filterTemplateFn;
        merge(this, options);
        this.parent = parent;
        if (this.type === 'none') {
            this.type = null;
        }
        else if (this.type) {
            this.type = typeof (this.type) === 'string' ? this.type.toLowerCase() : undefined;
        }
        if (this.editType) {
            this.editType = this.editType.toLowerCase();
        }
        if (isNullOrUndefined(this.uid)) {
            this.uid = getUid('grid-column');
        }
        const valueFormatter = new ValueFormatter();
        if (options.format && (options.format.skeleton || (options.format.format &&
            typeof options.format.format === 'string'))) {
            this.setFormatter(valueFormatter.getFormatFunction(extend({}, options.format)));
            this.setParser(valueFormatter.getParserFunction(options.format));
        }
        this.toJSON = () => {
            const col = {};
            const skip = ['filter', 'dataSource', 'headerText', 'template', 'headerTemplate', 'edit',
                'editTemplate', 'filterTemplate', 'commandsTemplate', 'parent'];
            const keys = Object.keys(this);
            for (let i = 0; i < keys.length; i++) {
                if (keys[i] === 'columns') {
                    col[keys[i]] = [];
                    for (let j = 0; j < this[keys[i]].length; j++) {
                        col[keys[i]].push(this[keys[i]][j].toJSON());
                    }
                }
                else if (skip.indexOf(keys[i]) < 0) {
                    col[keys[i]] = this[keys[i]];
                }
            }
            return col;
        };
        if (!this.field) {
            this.allowFiltering = false;
            this.allowGrouping = false;
            this.allowSorting = false;
            if (this.columns) {
                this.allowResizing = this.columns.some((col) => {
                    return col.allowResizing;
                });
            }
        }
        if (this.commands && !this.textAlign) {
            this.textAlign = 'Right';
        }
        if (this.template || this.commandsTemplate) {
            this.templateFn = templateCompiler(this.template || this.commandsTemplate);
        }
        if (this.headerTemplate) {
            this.headerTemplateFn = templateCompiler(this.headerTemplate);
        }
        if (!isNullOrUndefined(this.filter) && this.filter.itemTemplate) {
            this.fltrTemplateFn = templateCompiler(this.filter.itemTemplate);
        }
        if (this.editTemplate) {
            this.editTemplateFn = templateCompiler(this.editTemplate);
        }
        if (this.filterTemplate) {
            this.filterTemplateFn = templateCompiler(this.filterTemplate);
        }
        if (this.isForeignColumn() &&
            (isNullOrUndefined(this.editType) || this.editType === 'dropdownedit' || this.editType === 'defaultedit')) {
            this.editType = 'dropdownedit';
            if (this.edit.params && this.edit.params.dataSource) {
                this.edit.params.ddEditedData = true;
            }
            this.edit.params = extend({
                dataSource: this.dataSource,
                query: new Query(), fields: { value: this.foreignKeyField || this.field, text: this.foreignKeyValue }
            }, this.edit.params);
        }
        if (this.sortComparer) {
            let a = this.sortComparer;
            this.sortComparer = (x, y, xObj, yObj) => {
                if (typeof a === 'string') {
                    a = getObject(a, window);
                }
                if (this.sortDirection === 'Descending') {
                    const z = x;
                    x = y;
                    y = z;
                    const obj = xObj;
                    xObj = yObj;
                    yObj = obj;
                }
                return a(x, y, xObj, yObj);
            };
        }
        if (!this.sortComparer && this.isForeignColumn()) {
            this.sortComparer = (x, y) => {
                x = getObject(this.foreignKeyValue, getForeignData(this, {}, x)[0]);
                y = getObject(this.foreignKeyValue, getForeignData(this, {}, y)[0]);
                return this.sortDirection === 'Descending' ? DataUtil.fnDescending(x, y) : DataUtil.fnAscending(x, y);
            };
        }
    }
    /**
     * @returns {string} returns the sort direction
     * @hidden */
    getSortDirection() {
        return this.sortDirection;
    }
    /**
     * @param {string} direction - specifies the direction
     * @returns {void}
     * @hidden
     */
    setSortDirection(direction) {
        this.sortDirection = direction;
    }
    /**
     * @returns {freezeTable} returns the FreezeTable
     * @hidden */
    getFreezeTableName() {
        return this.freezeTable;
    }
    /**
     * @param {Column} column - specifies the column
     * @returns {void}
     * @hidden
     */
    setProperties(column) {
        //Angular two way binding
        const keys = Object.keys(column);
        for (let i = 0; i < keys.length; i++) {
            this[keys[i]] = column[keys[i]];
            //Refresh the react columnTemplates on state change
            if (this.parent && this.parent.isReact) {
                if (keys[i] === 'template') {
                    this.parent.refreshReactColumnTemplateByUid(this.uid);
                }
                else if (keys[i] === 'headerTemplate') {
                    this.headerTemplateFn = templateCompiler(column[keys[i]]);
                    this.parent.refreshReactHeaderTemplateByUid(this.uid);
                }
            }
        }
    }
    /**
     * @returns {boolean} returns true for foreign column
     * @hidden
     * It defines the column is foreign key column or not.
     */
    isForeignColumn() {
        return !!(this.dataSource && this.foreignKeyValue);
    }
    /**
     * @returns {Function} returns the function
     * @hidden
     */
    getFormatter() {
        return this.formatFn;
    }
    /**
     * @param {Function} value - specifies the value
     * @returns {void}
     * @hidden
     */
    setFormatter(value) {
        this.formatFn = value;
    }
    /**
     * @returns {Function} returns the function
     * @hidden */
    getParser() {
        return this.parserFn;
    }
    /**
     * @param {Function} value - specifies the value
     * @returns {void}
     * @hidden
     */
    setParser(value) {
        this.parserFn = value;
    }
    /**
     * @returns {Function} returns the function
     * @hidden */
    getColumnTemplate() {
        return this.templateFn;
    }
    /**
     * @returns {Function} returns the function
     * @hidden */
    getHeaderTemplate() {
        return this.headerTemplateFn;
    }
    /**
     * @returns {Function} returns the function
     * @hidden */
    getFilterItemTemplate() {
        return this.fltrTemplateFn;
    }
    /**
     * @returns {string} returns the string
     * @hidden */
    getDomSetter() {
        return this.disableHtmlEncode ? 'textContent' : 'innerHTML';
    }
}
/**
 * Define options for custom command buttons.
 */
class CommandColumnModel {
}
__decorate([
    Property()
], CommandColumnModel.prototype, "title", void 0);
__decorate([
    Property()
], CommandColumnModel.prototype, "type", void 0);
__decorate([
    Property()
], CommandColumnModel.prototype, "buttonOption", void 0);
/**
 * Defines Grid column
 */
class GridColumn extends Column {
}
__decorate([
    Property(null)
], GridColumn.prototype, "columns", void 0);
/**
 * Defines stacked grid column
 */
class StackedColumn extends GridColumn {
}

/** @hidden */
const created = 'create';
/** @hidden */
const destroyed = 'destroy';
/** @hidden */
const load = 'load';
/** @hidden */
const rowDataBound = 'rowDataBound';
/** @hidden */
const queryCellInfo = 'queryCellInfo';
/** @hidden */
const headerCellInfo = 'headerCellInfo';
/** @hidden */
const actionBegin = 'actionBegin';
/** @hidden */
const actionComplete = 'actionComplete';
/** @hidden */
const actionFailure = 'actionFailure';
/** @hidden */
const dataBound = 'dataBound';
/** @hidden */
const rowSelecting = 'rowSelecting';
/** @hidden */
const rowSelected = 'rowSelected';
/** @hidden */
const rowDeselecting = 'rowDeselecting';
/** @hidden */
const rowDeselected = 'rowDeselected';
/** @hidden */
const cellSelecting = 'cellSelecting';
/** @hidden */
const cellSelected = 'cellSelected';
/** @hidden */
const cellDeselecting = 'cellDeselecting';
/** @hidden */
const cellDeselected = 'cellDeselected';
/** @hidden */
const columnSelecting = 'columnSelecting';
/** @hidden */
const columnSelected = 'columnSelected';
/** @hidden */
const columnDeselecting = 'columnDeselecting';
/** @hidden */
const columnDeselected = 'columnDeselected';
/** @hidden */
const columnDragStart = 'columnDragStart';
/** @hidden */
const columnDrag = 'columnDrag';
/** @hidden */
const columnDrop = 'columnDrop';
/** @hidden */
const rowDragStartHelper = 'rowDragStartHelper';
/** @hidden */
const rowDragStart = 'rowDragStart';
/** @hidden */
const rowDrag = 'rowDrag';
/** @hidden */
const rowDrop = 'rowDrop';
/** @hidden */
const beforePrint = 'beforePrint';
/** @hidden */
const printComplete = 'printComplete';
/** @hidden */
const detailDataBound = 'detailDataBound';
/** @hidden */
const toolbarClick = 'toolbarClick';
/** @hidden */
const batchAdd = 'batchAdd';
/** @hidden */
const batchCancel = 'batchCancel';
/** @hidden */
const batchDelete = 'batchDelete';
/** @hidden */
const beforeBatchAdd = 'beforeBatchAdd';
/** @hidden */
const beforeBatchDelete = 'beforeBatchDelete';
/** @hidden */
const beforeBatchSave = 'beforeBatchSave';
/** @hidden */
const beginEdit = 'beginEdit';
/** @hidden */
const cellEdit = 'cellEdit';
/** @hidden */
const cellSave = 'cellSave';
/** @hidden */
const cellSaved = 'cellSaved';
/** @hidden */
const endAdd = 'endAdd';
/** @hidden */
const endDelete = 'endDelete';
/** @hidden */
const endEdit = 'endEdit';
/** @hidden */
const recordDoubleClick = 'recordDoubleClick';
/** @hidden */
const recordClick = 'recordClick';
/** @hidden */
const beforeDataBound = 'beforeDataBound';
/** @hidden */
const beforeOpenColumnChooser = 'beforeOpenColumnChooser';
/** @hidden */
const beforeOpenAdaptiveDialog = 'beforeOpenAdaptiveDialog';
/** @hidden */
const resizeStart = 'resizeStart';
/** @hidden */
const onResize = 'resizing';
/** @hidden */
const resizeStop = 'resizeStop';
/** @hidden */
const checkBoxChange = 'checkBoxChange';
/** @hidden */
const beforeCopy = 'beforeCopy';
/** @hidden */
const beforePaste = 'beforePaste';
/** @hidden */
const beforeAutoFill = 'beforeAutoFill';
/** @hidden */
const filterChoiceRequest = 'filterchoicerequest';
/** @hidden */
const filterAfterOpen = 'filterafteropen';
/** @hidden */
const filterBeforeOpen = 'filterbeforeopen';
/** @hidden */
const filterSearchBegin = 'filtersearchbegin';
/** @hidden */
const commandClick = 'commandClick';
/** @hidden */
const exportGroupCaption = 'exportGroupCaption';
/** @hidden */
const lazyLoadGroupExpand = 'lazyLoadGroupExpand';
/** @hidden */
const lazyLoadGroupCollapse = 'lazyLoadGroupCollapse';
/**
 * Specifies grid internal events
 */
/** @hidden */
const initialLoad = 'initial-load';
/** @hidden */
const initialEnd = 'initial-end';
/** @hidden */
const dataReady = 'data-ready';
/** @hidden */
const contentReady = 'content-ready';
/** @hidden */
const uiUpdate = 'ui-update';
/** @hidden */
const onEmpty = 'on-empty';
/** @hidden */
const inBoundModelChanged = 'inbound-model-changed';
/** @hidden */
const modelChanged = 'model-changed';
/** @hidden */
const colGroupRefresh = 'colgroup-refresh';
/** @hidden */
const headerRefreshed = 'header-refreshed';
/** @hidden */
const pageBegin = 'paging-begin';
/** @hidden */
const pageComplete = 'paging-complete';
/** @hidden */
const sortBegin = 'sorting-begin';
/** @hidden */
const sortComplete = 'sorting-complete';
/** @hidden */
const filterBegin = 'filtering-begin';
/** @hidden */
const filterComplete = 'filtering-complete';
/** @hidden */
const searchBegin = 'searching-begin';
/** @hidden */
const searchComplete = 'searching-complete';
/** @hidden */
const reorderBegin = 'reorder-begin';
/** @hidden */
const reorderComplete = 'reorder-complete';
/** @hidden */
const rowDragAndDropBegin = 'rowdraganddrop-begin';
/** @hidden */
const rowDragAndDropComplete = 'rowdraganddrop-complete';
/** @hidden */
const groupBegin = 'grouping-begin';
/** @hidden */
const groupComplete = 'grouping-complete';
/** @hidden */
const ungroupBegin = 'ungrouping-begin';
/** @hidden */
const ungroupComplete = 'ungrouping-complete';
/** @hidden */
const groupAggregates = 'group-aggregates';
/** @hidden */
const refreshFooterRenderer = 'refresh-footer-rendered';
/** @hidden */
const refreshAggregateCell = 'refresh-aggregate-cell';
/** @hidden */
const refreshAggregates = 'refresh-aggregates';
/** @hidden */
const rowSelectionBegin = 'rowselecting';
/** @hidden */
const rowSelectionComplete = 'rowselected';
/** @hidden */
const columnSelectionBegin = 'columnselecting';
/** @hidden */
const columnSelectionComplete = 'columnselected';
/** @hidden */
const cellSelectionBegin = 'cellselecting';
/** @hidden */
const cellSelectionComplete = 'cellselected';
/** @hidden */
const beforeCellFocused = 'beforecellfocused';
/** @hidden */
const cellFocused = 'cellfocused';
/** @hidden */
const keyPressed = 'key-pressed';
/** @hidden */
const click = 'click';
/** @hidden */
const destroy = 'destroy';
/** @hidden */
const columnVisibilityChanged = 'column-visible-changed';
/** @hidden */
const scroll = 'scroll';
/** @hidden */
const columnWidthChanged = 'column-width-changed';
/** @hidden */
const columnPositionChanged = 'column-position-changed';
/** @hidden */
const rowDragAndDrop = 'row-drag-and-drop';
/** @hidden */
const rowsAdded = 'rows-added';
/** @hidden */
const rowsRemoved = 'rows-removed';
/** @hidden */
const columnDragStop = 'column-drag-stop';
/** @hidden */
const headerDrop = 'header-drop';
/** @hidden */
const dataSourceModified = 'datasource-modified';
/** @hidden */
const refreshComplete = 'refresh-complete';
/** @hidden */
const refreshVirtualBlock = 'refresh-virtual-block';
/** @hidden */
const dblclick = 'dblclick';
/** @hidden */
const toolbarRefresh = 'toolbar-refresh';
/** @hidden */
const bulkSave = 'bulk-save';
/** @hidden */
const autoCol = 'auto-col';
/** @hidden */
const tooltipDestroy = 'tooltip-destroy';
/** @hidden */
const updateData = 'update-data';
/** @hidden */
const editBegin = 'edit-begin';
/** @hidden */
const editComplete = 'edit-complete';
/** @hidden */
const addBegin = 'add-begin';
/** @hidden */
const addComplete = 'add-complete';
/** @hidden */
const saveComplete = 'save-complete';
/** @hidden */
const deleteBegin = 'delete-begin';
/** @hidden */
const deleteComplete = 'delete-complete';
/** @hidden */
const preventBatch = 'prevent-batch';
/** @hidden */
const dialogDestroy = 'dialog-destroy';
/** @hidden */
const crudAction = 'crud-Action';
/** @hidden */
const addDeleteAction = 'add-delete-Action';
/** @hidden */
const destroyForm = 'destroy-form';
/** @hidden */
const doubleTap = 'double-tap';
/** @hidden */
const beforeExcelExport = 'beforeExcelExport';
/** @hidden */
const excelExportComplete = 'excelExportComplete';
/** @hidden */
const excelQueryCellInfo = 'excelQueryCellInfo';
/** @hidden */
const excelHeaderQueryCellInfo = 'excelHeaderQueryCellInfo';
/** @hidden */
const exportDetailDataBound = 'exportDetailDataBound';
/** @hidden */
const beforePdfExport = 'beforePdfExport';
/** @hidden */
const pdfExportComplete = 'pdfExportComplete';
/** @hidden */
const pdfQueryCellInfo = 'pdfQueryCellInfo';
/** @hidden */
const pdfHeaderQueryCellInfo = 'pdfHeaderQueryCellInfo';
/** @hidden */
const accessPredicate = 'access-predicate';
/** @hidden */
const contextMenuClick = 'contextMenuClick';
/** @hidden */
const freezeRender = 'freezerender';
/** @hidden */
const freezeRefresh = 'freezerefresh';
/** @hidden */
const contextMenuOpen = 'contextMenuOpen';
/** @hidden */
const columnMenuClick = 'columnMenuClick';
/** @hidden */
const columnMenuOpen = 'columnMenuOpen';
/** @hidden */
const filterOpen = 'filterOpen';
/** @hidden */
const filterDialogCreated = 'filterDialogCreated';
/** @hidden */
const filterMenuClose = 'filter-menu-close';
/** @hidden */
const initForeignKeyColumn = 'initForeignKeyColumn';
/** @hidden */
const getForeignKeyData = 'getForeignKeyData';
/** @hidden */
const generateQuery = 'generateQuery';
/** @hidden */
const showEmptyGrid = 'showEmptyGrid';
/** @hidden */
const foreignKeyData = 'foreignKeyData';
/** @hidden */
const columnDataStateChange = 'columnDataStateChange';
/** @hidden */
const dataStateChange = 'dataStateChange';
/** @hidden */
const dataSourceChanged = 'dataSourceChanged';
/** @hidden */
const rtlUpdated = 'rtl-updated';
/** @hidden */
const beforeFragAppend = 'beforeFragAppend';
/** @hidden */
const frozenHeight = 'frozenHeight';
/** @hidden */
const textWrapRefresh = 'textWrapRefresh';
/** @hidden */
const recordAdded = 'recordAdded';
/** @hidden */
const cancelBegin = 'cancel-Begin';
/** @hidden */
const editNextValCell = 'editNextValCell';
/** @hidden */
const hierarchyPrint = 'hierarchyprint';
/** @hidden */
const expandChildGrid = 'expandchildgrid';
/** @hidden */
const printGridInit = 'printGrid-Init';
/** @hidden */
const exportRowDataBound = 'export-RowDataBound';
/** @hidden */
const exportDataBound = 'export-DataBound';
/** @hidden */
const rowPositionChanged = 'row-position-changed';
/** @hidden */
const columnChooserOpened = 'columnChooserOpened';
/** @hidden */
const batchForm = 'batchedit-form';
/** @hidden */
const beforeStartEdit = 'edit-form';
/** @hidden */
const beforeBatchCancel = 'before-batch-cancel';
/** @hidden */
const batchEditFormRendered = 'batcheditform-rendered';
/** @hidden */
const partialRefresh = 'partial-refresh';
/** @hidden */
const beforeCustomFilterOpen = 'beforeCustomFilterOpen';
/** @hidden */
const selectVirtualRow = 'select-virtual-Row';
/** @hidden */
const columnsPrepared = 'columns-prepared';
/** @hidden */
const cBoxFltrBegin = 'cbox-filter-begin';
/** @hidden */
const cBoxFltrComplete = 'cbox-filter-complete';
/** @hidden */
const fltrPrevent = 'filter-Prevent';
/** @hidden */
const beforeFltrcMenuOpen = 'before-filter-cmenu-open';
/** @hidden */
const valCustomPlacement = 'validation-custom-placement';
/** @hidden */
const filterCboxValue = 'filter-cbox-value';
/** @hidden */
const componentRendered = 'component-rendered';
/** @hidden */
const restoreFocus = 'restore-Focus';
/** @hidden */
const detailStateChange = 'detail-state-change';
/** @hidden */
const detailIndentCellInfo = 'detail-indentcell-info';
/** @hidden */
const virtaulKeyHandler = 'virtaul-key-handler';
/** @hidden */
const virtaulCellFocus = 'virtaul-cell-focus';
/** @hidden */
const virtualScrollEditActionBegin = 'virtual-scroll-edit-action-begin';
/** @hidden */
const virtualScrollEditSuccess = 'virtual-scroll-edit-success';
/** @hidden */
const virtualScrollEditCancel = 'virtual-scroll-edit-cancel';
/** @hidden */
const virtualScrollEdit = 'virtual-scroll-edit';
/** @hidden */
const refreshVirtualCache = 'refresh-virtual-cache';
/** @hidden */
const editReset = 'edit-reset';
/** @hidden */
const virtualScrollAddActionBegin = 'virtual-scroll-add-action-begin';
/** @hidden */
const getVirtualData = 'get-virtual-data';
/** @hidden */
const refreshInfiniteModeBlocks = 'refresh-infinite-mode-blocks';
/** @hidden */
const resetInfiniteBlocks = 'reset-infinite-blocks';
/** @hidden */
const infiniteScrollHandler = 'infinite-scroll-handler';
/** @hidden */
const infinitePageQuery = 'infinite-page-query';
/** @hidden */
const infiniteShowHide = 'infinite-show-hide';
/** @hidden */
const appendInfiniteContent = 'append-infinite-content';
/** @hidden */
const removeInfiniteRows = 'remove-infinite-rows';
/** @hidden */
const setInfiniteCache = 'set-infinite-cache';
/** @hidden */
const infiniteEditHandler = 'infinite-edit-handler';
/** @hidden */
const initialCollapse = 'initial-collapse';
/** @hidden */
const getAggregateQuery = 'get-aggregate-query';
/** @hidden */
const closeFilterDialog = 'close-filter-dialog';
/** @hidden */
const columnChooserCancelBtnClick = 'columnChooserCancelBtnClick';
/** @hidden */
const getFilterBarOperator = 'get-filterbar-operator';
/** @hidden */
const resetColumns = 'reset-columns';
/** @hidden */
const pdfAggregateQueryCellInfo = 'pdfAggregateQueryCellInfo';
/** @hidden */
const excelAggregateQueryCellInfo = 'excelAggregateQueryCellInfo';
/** @hidden */
const setGroupCache = 'group-cache';
/** @hidden */
const lazyLoadScrollHandler = 'lazy-load-scroll-handler';
/** @hidden */
const groupCollapse = 'group-collapse';
/** @hidden */
const beforeCheckboxRenderer = 'beforeCheckboxRenderer';
/** @hidden */
const refreshHandlers = 'refreshResizeHandlers';
/** @hidden */
const refreshFrozenColumns = 'refresh-frozen-columns';
/** @hidden */
const setReorderDestinationElement = 'set-reorder-destination-element';
/** @hidden */
const refreshVirtualFrozenHeight = 'refresh-virtual-frozen-height';
/** @hidden */
const setFreezeSelection = 'set-freeze-selection';
/** @hidden */
const setInfiniteFrozenHeight = 'set-infinite-frozen-height';
/** @hidden */
const setInfiniteColFrozenHeight = 'set-infinite-col-frozen-height';
/** @hidden */
const beforeRefreshOnDataChange = 'before-refresh-on-data-change';
/** @hidden */
const immutableBatchCancel = 'immutable-batch-cancel';
/** @hidden */
const refreshVirtualFrozenRows = 'refresh-virtual-frozenrows';
/** @hidden */
const checkScrollReset = 'check-scroll-reset';
/** @hidden */
const refreshFrozenHeight = 'refresh-frozen-height';
/** @hidden */
const setHeightToFrozenElement = 'set-height-to-frozen-element';
/** @hidden */
const preventFrozenScrollRefresh = 'prevent-frozen-scroll-refresh';
/** @hidden */
const nextCellIndex = 'next-cell-index';
/** @hidden */
const refreshInfiniteCurrentViewData = 'refresh-infinite-current-view-data';
/** @hidden */
const infiniteCrudCancel = 'infinite-crud-cancel';
/** @hidden */
const filterDialogClose = 'filter-dialog-close';
/** @hidden */
const refreshCustomFilterOkBtn = 'refresh-cutsom-filter-ok-button';
/** @hidden */
const refreshCustomFilterClearBtn = 'refresh-cutsom-filter-clear-button';
/** @hidden */
const renderResponsiveCmenu = 'render-responsive-cmenu';
/** @hidden */
const filterCmenuSelect = 'filter-cmenu-select';
/** @hidden */
const customFilterClose = 'custom-filter-close';
/** @hidden */
const setFullScreenDialog = 'set-fullscreen-dialog';
/** @hidden */
const refreshExpandandCollapse = 'refresh-Expand-and-Collapse';
/** @hidden */
const rowModeChange = 'row-mode-change';
/** @hidden */
const enterKeyHandler = 'enter-key-handler';
/** @hidden */
const refreshVirtualMaxPage = 'refresh-virtual-max-page';
/** @hidden */
const setVirtualPageQuery = 'set-virtual-page-query';
/** @hidden */
const selectRowOnContextOpen = 'select-row-on-context-open';
/** @hidden */
const pagerRefresh = 'pager-refresh';
/** @hidden */
const closeInline = 'closeinline';
/** @hidden */
const closeBatch = 'closebatch';
/** @hidden */
const closeEdit = 'close-edit';
/** @hidden */
const resetVirtualFocus = 'reset-virtual-focus';
/** @hidden */
const afterContentRender = 'after-content-renderer';
/** @hidden */
const refreshVirtualEditFormCells = 'refresh-virtual-editform-cells';
/** @hidden */
const scrollToEdit = 'scroll-to-edit';
/** @hidden */
const beforeCheckboxRendererQuery = 'before-checkbox-renderer-query';
/** @hidden */
const createVirtualValidationForm = 'create-virtual-validation-form';
/** @hidden */
const validateVirtualForm = 'validate-virtual-form';
/** @hidden */
const destroyChildGrid = 'destroy-child-grid';
/** @hidden */
const stickyScrollComplete = 'sticky-scroll-complete';
/** @hidden */
const captionActionComplete = 'infinite-group-collapse';
/** @hidden */
const refreshInfinitePersistSelection = 'refresh-infinite-persist-selection';
/** @hidden */
const refreshInfiniteEditrowindex = 'refresh-infinite-editrowindex';
/** @hidden */
const afterFilterColumnMenuClose = 'after-filter-column-menu-close';
/** @hidden */
const beforeCheckboxfilterRenderer = 'beforeCheckboxfilterRenderer';

/**
 * Defines types of Cell
 *
 * @hidden
 */
var CellType;
(function (CellType) {
    /**  Defines CellType as Data */
    CellType[CellType["Data"] = 0] = "Data";
    /**  Defines CellType as Header */
    CellType[CellType["Header"] = 1] = "Header";
    /**  Defines CellType as Summary */
    CellType[CellType["Summary"] = 2] = "Summary";
    /**  Defines CellType as GroupSummary */
    CellType[CellType["GroupSummary"] = 3] = "GroupSummary";
    /**  Defines CellType as CaptionSummary */
    CellType[CellType["CaptionSummary"] = 4] = "CaptionSummary";
    /**  Defines CellType as Filter */
    CellType[CellType["Filter"] = 5] = "Filter";
    /**  Defines CellType as Indent */
    CellType[CellType["Indent"] = 6] = "Indent";
    /**  Defines CellType as GroupCaption */
    CellType[CellType["GroupCaption"] = 7] = "GroupCaption";
    /**  Defines CellType as GroupCaptionEmpty */
    CellType[CellType["GroupCaptionEmpty"] = 8] = "GroupCaptionEmpty";
    /**  Defines CellType as Expand */
    CellType[CellType["Expand"] = 9] = "Expand";
    /**  Defines CellType as HeaderIndent */
    CellType[CellType["HeaderIndent"] = 10] = "HeaderIndent";
    /**  Defines CellType as StackedHeader */
    CellType[CellType["StackedHeader"] = 11] = "StackedHeader";
    /**  Defines CellType as DetailHeader */
    CellType[CellType["DetailHeader"] = 12] = "DetailHeader";
    /**  Defines CellType as DetailExpand */
    CellType[CellType["DetailExpand"] = 13] = "DetailExpand";
    /**  Defines CellType as CommandColumn */
    CellType[CellType["CommandColumn"] = 14] = "CommandColumn";
    /**  Defines CellType as DetailFooterIntent */
    CellType[CellType["DetailFooterIntent"] = 15] = "DetailFooterIntent";
    /**  Defines CellType as RowDrag */
    CellType[CellType["RowDragIcon"] = 16] = "RowDragIcon";
    /**  Defines CellType as RowDragHeader */
    CellType[CellType["RowDragHIcon"] = 17] = "RowDragHIcon";
})(CellType || (CellType = {}));
/**
 * Defines types of Render
 *
 * @hidden
 */
var RenderType;
(function (RenderType) {
    /**  Defines RenderType as Header */
    RenderType[RenderType["Header"] = 0] = "Header";
    /**  Defines RenderType as Content */
    RenderType[RenderType["Content"] = 1] = "Content";
    /**  Defines RenderType as Summary */
    RenderType[RenderType["Summary"] = 2] = "Summary";
})(RenderType || (RenderType = {}));
/**
 * Defines Predefined toolbar items.
 *
 * @hidden
 */
var ToolbarItem;
(function (ToolbarItem) {
    ToolbarItem[ToolbarItem["Add"] = 0] = "Add";
    ToolbarItem[ToolbarItem["Edit"] = 1] = "Edit";
    ToolbarItem[ToolbarItem["Update"] = 2] = "Update";
    ToolbarItem[ToolbarItem["Delete"] = 3] = "Delete";
    ToolbarItem[ToolbarItem["Cancel"] = 4] = "Cancel";
    ToolbarItem[ToolbarItem["Print"] = 5] = "Print";
    ToolbarItem[ToolbarItem["Search"] = 6] = "Search";
    ToolbarItem[ToolbarItem["ColumnChooser"] = 7] = "ColumnChooser";
    ToolbarItem[ToolbarItem["PdfExport"] = 8] = "PdfExport";
    ToolbarItem[ToolbarItem["ExcelExport"] = 9] = "ExcelExport";
    ToolbarItem[ToolbarItem["CsvExport"] = 10] = "CsvExport";
    ToolbarItem[ToolbarItem["WordExport"] = 11] = "WordExport";
})(ToolbarItem || (ToolbarItem = {}));
/**
 * Defines types of responsive dialogs
 *
 * @hidden
 */
var ResponsiveDialogAction;
(function (ResponsiveDialogAction) {
    /**  Defines dialog type as Edit */
    ResponsiveDialogAction[ResponsiveDialogAction["isEdit"] = 0] = "isEdit";
    /**  Defines dialog type as Add */
    ResponsiveDialogAction[ResponsiveDialogAction["isAdd"] = 1] = "isAdd";
    /**  Defines dialog type as Sort */
    ResponsiveDialogAction[ResponsiveDialogAction["isSort"] = 2] = "isSort";
    /**  Defines dialog type as Filter */
    ResponsiveDialogAction[ResponsiveDialogAction["isFilter"] = 3] = "isFilter";
})(ResponsiveDialogAction || (ResponsiveDialogAction = {}));
/**
 * Defines responsive toolbar actions
 *
 * @hidden
 */
var ResponsiveToolbarAction;
(function (ResponsiveToolbarAction) {
    /**  Defines initial responsive toolbar buttons */
    ResponsiveToolbarAction[ResponsiveToolbarAction["isInitial"] = 0] = "isInitial";
    /**  Defines responsive toolbar search */
    ResponsiveToolbarAction[ResponsiveToolbarAction["isSearch"] = 1] = "isSearch";
})(ResponsiveToolbarAction || (ResponsiveToolbarAction = {}));

/**
 * Grid data module is used to generate query and data source.
 *
 * @hidden
 */
class Data {
    /**
     * Constructor for data module.
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {ServiceLocator} serviceLocator - specifies the service locator
     * @hidden
     */
    constructor(parent, serviceLocator) {
        this.dataState = { isPending: false, resolver: null, group: [] };
        this.foreignKeyDataState = { isPending: false, resolver: null };
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.initDataManager();
        if (this.parent.isDestroyed || this.getModuleName() === 'foreignKey') {
            return;
        }
        this.parent.on(rowsAdded, this.addRows, this);
        this.parent.on(rowPositionChanged, this.reorderRows, this);
        this.parent.on(rowsRemoved, this.removeRows, this);
        this.parent.on(dataSourceModified, this.initDataManager, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(updateData, this.crudActions, this);
        this.parent.on(addDeleteAction, this.getData, this);
        this.parent.on(autoCol, this.refreshFilteredCols, this);
        this.parent.on(columnsPrepared, this.refreshFilteredCols, this);
    }
    reorderRows(e) {
        this.dataManager.dataSource.json.splice(e.toIndex, 0, this.dataManager.dataSource.json.splice(e.fromIndex, 1)[0]);
    }
    getModuleName() {
        return 'data';
    }
    /**
     * The function used to initialize dataManager and external query
     *
     * @returns {void}
     */
    initDataManager() {
        const gObj = this.parent;
        this.dataManager = gObj.dataSource instanceof DataManager ? gObj.dataSource :
            (isNullOrUndefined(gObj.dataSource) ? new DataManager() : new DataManager(gObj.dataSource));
        if (gObj.isAngular && !(gObj.query instanceof Query)) {
            gObj.setProperties({ query: new Query() }, true);
        }
        else {
            this.isQueryInvokedFromData = true;
            gObj.query = gObj.query instanceof Query ? gObj.query : new Query();
        }
    }
    /**
     * The function is used to generate updated Query from Grid model.
     *
     * @param {boolean} skipPage - specifies the boolean to skip the page
     * @returns {Query} returns the Query
     * @hidden
     */
    generateQuery(skipPage) {
        const gObj = this.parent;
        const query = gObj.getQuery().clone();
        if (this.parent.columnQueryMode === 'ExcludeHidden') {
            query.select(this.parent.getColumns().filter((column) => !(column.isPrimaryKey !== true && column.visible === false || column.field === undefined)).map((column) => column.field));
        }
        else if (this.parent.columnQueryMode === 'Schema') {
            const selectQueryFields = [];
            const columns = this.parent.columns;
            for (let i = 0; i < columns.length; i++) {
                selectQueryFields.push(columns[i].field);
            }
            query.select(selectQueryFields);
        }
        this.filterQuery(query);
        this.searchQuery(query);
        this.aggregateQuery(query);
        this.sortQuery(query);
        if (isGroupAdaptive(this.parent)) {
            this.virtualGroupPageQuery(query);
        }
        else {
            this.pageQuery(query, skipPage);
        }
        this.groupQuery(query);
        return query;
    }
    /**
     * @param {Query} query - specifies the query
     * @returns {Query} - returns the query
     * @hidden
     */
    aggregateQuery(query) {
        const rows = this.parent.aggregates;
        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            for (let j = 0; j < row.columns.length; j++) {
                const cols = row.columns[j];
                const types = cols.type instanceof Array ? cols.type : [cols.type];
                for (let k = 0; k < types.length; k++) {
                    query.aggregate(types[k].toLowerCase(), cols.field);
                }
            }
        }
        return query;
    }
    virtualGroupPageQuery(query) {
        const fName = 'fn';
        if (query.queries.length) {
            for (let i = 0; i < query.queries.length; i++) {
                if (query.queries[i][fName] === 'onPage') {
                    query.queries.splice(i, 1);
                }
            }
        }
        return query;
    }
    pageQuery(query, skipPage) {
        const gObj = this.parent;
        const fName = 'fn';
        const args = { query: query, skipPage: false };
        gObj.notify(setVirtualPageQuery, args);
        if (args.skipPage) {
            return query;
        }
        if ((gObj.allowPaging || gObj.enableVirtualization || gObj.enableInfiniteScrolling) && skipPage !== true) {
            gObj.pageSettings.currentPage = Math.max(1, gObj.pageSettings.currentPage);
            if (gObj.pageSettings.pageCount <= 0) {
                gObj.pageSettings.pageCount = 8;
            }
            if (gObj.pageSettings.pageSize <= 0) {
                gObj.pageSettings.pageSize = 12;
            }
            if (query.queries.length) {
                for (let i = 0; i < query.queries.length; i++) {
                    if (query.queries[i][fName] === 'onPage') {
                        query.queries.splice(i, 1);
                    }
                }
            }
            if (!isNullOrUndefined(gObj.infiniteScrollModule) && gObj.enableInfiniteScrolling) {
                this.parent.notify(infinitePageQuery, query);
            }
            else {
                query.page(gObj.pageSettings.currentPage, gObj.allowPaging && gObj.pagerModule &&
                    gObj.pagerModule.pagerObj.isAllPage && !this.dataManager.dataSource.offline ? null :
                    gObj.pageSettings.pageSize);
            }
        }
        return query;
    }
    groupQuery(query) {
        const gObj = this.parent;
        if (gObj.allowGrouping && gObj.groupSettings.columns.length) {
            if (this.parent.groupSettings.enableLazyLoading) {
                query.lazyLoad.push({ key: 'isLazyLoad', value: this.parent.groupSettings.enableLazyLoading });
            }
            const columns = gObj.groupSettings.columns;
            for (let i = 0, len = columns.length; i < len; i++) {
                const column = this.getColumnByField(columns[i]);
                if (!column) {
                    this.parent.log('initial_action', { moduleName: 'group', columnName: columns[i] });
                }
                const isGrpFmt = column.enableGroupByFormat;
                const format = column.format;
                if (isGrpFmt) {
                    query.group(columns[i], this.formatGroupColumn.bind(this), format);
                }
                else {
                    query.group(columns[i], null);
                }
            }
        }
        return query;
    }
    sortQuery(query) {
        const gObj = this.parent;
        if ((gObj.allowSorting || gObj.allowGrouping) && gObj.sortSettings.columns.length) {
            const columns = gObj.sortSettings.columns;
            const sortGrp = [];
            for (let i = columns.length - 1; i > -1; i--) {
                const col = this.getColumnByField(columns[i].field);
                if (col) {
                    col.setSortDirection(columns[i].direction);
                }
                else {
                    this.parent.log('initial_action', { moduleName: 'sort', columnName: columns[i].field });
                    return query;
                }
                let fn = columns[i].direction;
                if (col.sortComparer) {
                    this.parent.log('grid_sort_comparer');
                    fn = !this.isRemote() ? col.sortComparer.bind(col) : columns[i].direction;
                }
                if (gObj.groupSettings.columns.indexOf(columns[i].field) === -1) {
                    if (col.isForeignColumn() || col.sortComparer) {
                        query.sortByForeignKey(col.field, fn, undefined, columns[i].direction.toLowerCase());
                    }
                    else {
                        query.sortBy(col.field, fn);
                    }
                }
                else {
                    sortGrp.push({ direction: fn, field: col.field });
                }
            }
            for (let i = 0, len = sortGrp.length; i < len; i++) {
                if (typeof sortGrp[i].direction === 'string') {
                    query.sortBy(sortGrp[i].field, sortGrp[i].direction);
                }
                else {
                    const col = this.getColumnByField(sortGrp[i].field);
                    query.sortByForeignKey(sortGrp[i].field, sortGrp[i].direction, undefined, col.getSortDirection().toLowerCase());
                }
            }
        }
        return query;
    }
    searchQuery(query, fcolumn, isForeignKey) {
        const sSettings = this.parent.searchSettings;
        let fields = sSettings.fields.length ? sSettings.fields : this.getSearchColumnFieldNames();
        let predicateList = [];
        let needForeignKeySearch = false;
        if (this.parent.searchSettings.key.length) {
            needForeignKeySearch = this.parent.getForeignKeyColumns().some((col) => fields.indexOf(col.field) > -1);
            const adaptor = !isForeignKey ? this.dataManager.adaptor : fcolumn.dataSource.adaptor;
            if (needForeignKeySearch || (adaptor.getModuleName &&
                adaptor.getModuleName() === 'ODataV4Adaptor')) {
                fields = isForeignKey ? [fcolumn.foreignKeyValue] : fields;
                for (let i = 0; i < fields.length; i++) {
                    const column = isForeignKey ? fcolumn : this.getColumnByField(fields[i]);
                    if (column.isForeignColumn() && !isForeignKey) {
                        predicateList = this.fGeneratePredicate(column, predicateList);
                    }
                    else {
                        predicateList.push(new Predicate(fields[i], sSettings.operator, sSettings.key, sSettings.ignoreCase, sSettings.ignoreAccent));
                    }
                }
                const predList = Predicate.or(predicateList);
                predList.key = sSettings.key;
                query.where(predList);
            }
            else {
                query.search(sSettings.key, fields, sSettings.operator, sSettings.ignoreCase, sSettings.ignoreAccent);
            }
        }
        return query;
    }
    filterQuery(query, column, skipFoerign) {
        const gObj = this.parent;
        let predicateList = [];
        const actualFilter = [];
        const foreignColumn = this.parent.getForeignKeyColumns();
        let foreignColEmpty;
        if (gObj.allowFiltering && gObj.filterSettings.columns.length) {
            const columns = column ? column : gObj.filterSettings.columns;
            const colType = {};
            for (const col of gObj.getColumns()) {
                colType[col.field] = col.filter.type ? col.filter.type : gObj.filterSettings.type;
            }
            const foreignCols = [];
            const defaultFltrCols = [];
            for (const col of columns) {
                const gridColumn = gObj.getColumnByField(col.field);
                if (isNullOrUndefined(col.type) && gridColumn && (gridColumn.type === 'date' || gridColumn.type === 'datetime')) {
                    col.type = gObj.getColumnByField(col.field).type;
                }
                if (col.isForeignKey) {
                    foreignCols.push(col);
                }
                else {
                    defaultFltrCols.push(col);
                }
            }
            if (defaultFltrCols.length) {
                for (let i = 0, len = defaultFltrCols.length; i < len; i++) {
                    defaultFltrCols[i].uid = defaultFltrCols[i].uid ||
                        this.parent.grabColumnByFieldFromAllCols(defaultFltrCols[i].field).uid;
                }
                const excelPredicate = CheckBoxFilterBase.getPredicate(defaultFltrCols);
                for (const prop of Object.keys(excelPredicate)) {
                    predicateList.push(excelPredicate[prop]);
                }
            }
            if (foreignCols.length) {
                for (const col of foreignCols) {
                    col.uid = col.uid || this.parent.grabColumnByFieldFromAllCols(col.field).uid;
                    const column = this.parent.grabColumnByUidFromAllCols(col.uid);
                    if (!column) {
                        this.parent.log('initial_action', { moduleName: 'filter', columnName: col.field });
                    }
                    if (column.isForeignColumn() && getColumnByForeignKeyValue(col.field, foreignColumn) && !skipFoerign) {
                        actualFilter.push(col);
                        if (!column.columnData.length) {
                            foreignColEmpty = true;
                        }
                        predicateList = this.fGeneratePredicate(column, predicateList);
                    }
                    else {
                        const excelPredicate = CheckBoxFilterBase.getPredicate(columns);
                        for (const prop of Object.keys(excelPredicate)) {
                            predicateList.push(excelPredicate[prop]);
                        }
                    }
                }
            }
            if (predicateList.length && !foreignColEmpty) {
                query.where(Predicate.and(predicateList));
            }
            else {
                this.parent.notify(showEmptyGrid, {});
            }
        }
        return query;
    }
    fGeneratePredicate(col, predicateList) {
        const fPredicate = {};
        if (col) {
            this.parent.notify(generateQuery, { predicate: fPredicate, column: col });
            if (fPredicate.predicate.predicates.length) {
                predicateList.push(fPredicate.predicate);
            }
        }
        return predicateList;
    }
    /**
     * The function is used to get dataManager promise by executing given Query.
     *
     * @param {object} args - specifies the object
     * @param {string} args.requestType - Defines the request type
     * @param {string[]} args.foreignKeyData - Defines the foreignKeyData.string
     * @param {Object} args.data - Defines the data.
     * @param {number} args.index - Defines the index .
     * @param {Query} query - Defines the query which will execute along with data processing.
     * @returns {Promise<Object>} - returns the object
     * @hidden
     */
    getData(args = { requestType: '' }, query) {
        const key = this.getKey(args.foreignKeyData &&
            Object.keys(args.foreignKeyData).length ?
            args.foreignKeyData : this.parent.getPrimaryKeyFieldNames());
        this.parent.log('datasource_syntax_mismatch', { dataState: this.parent });
        if (this.parent.dataSource && 'result' in this.parent.dataSource) {
            const def = this.eventPromise(args, query, key);
            return def.promise;
        }
        else {
            let crud;
            switch (args.requestType) {
                case 'delete':
                    query = query ? query : this.generateQuery();
                    // eslint-disable-next-line no-case-declarations
                    const len = Object.keys(args.data).length;
                    if (len === 1) {
                        crud = this.dataManager.remove(key, args.data[0], query.fromTable, query);
                    }
                    else {
                        const changes = {
                            addedRecords: [],
                            deletedRecords: [],
                            changedRecords: []
                        };
                        changes.deletedRecords = args.data;
                        crud = this.dataManager.saveChanges(changes, key, query.fromTable, query.requiresCount());
                    }
                    break;
                case 'save':
                    query = query ? query : this.generateQuery();
                    args.index = isNullOrUndefined(args.index) ? 0 : args.index;
                    crud = this.dataManager.insert(args.data, query.fromTable, query, args.index);
                    break;
            }
            const promise = 'promise';
            args[promise] = crud;
            // eslint-disable-next-line no-prototype-builtins
            if (crud && !Array.isArray(crud) && !crud.hasOwnProperty('deletedRecords')) {
                return crud.then(() => {
                    return this.insert(query, args);
                });
            }
            else {
                return this.insert(query, args);
            }
        }
    }
    insert(query, args) {
        if (args.requestType === 'save') {
            this.parent.notify(recordAdded, args);
        }
        return this.executeQuery(query);
    }
    executeQuery(query) {
        if (this.dataManager.ready) {
            const deferred = new Deferred();
            const ready = this.dataManager.ready;
            ready.then(() => {
                this.dataManager.executeQuery(query).then((result) => {
                    deferred.resolve(result);
                });
            }).catch((e) => {
                deferred.reject(e);
            });
            return deferred.promise;
        }
        else {
            return this.dataManager.executeQuery(query);
        }
    }
    formatGroupColumn(value, field) {
        const serviceLocator = this.serviceLocator;
        const column = this.getColumnByField(field);
        const date = value;
        if (!column.type) {
            column.type = date.getDay ? (date.getHours() > 0 || date.getMinutes() > 0 ||
                date.getSeconds() > 0 || date.getMilliseconds() > 0 ? 'datetime' : 'date') : typeof (value);
        }
        if (isNullOrUndefined(column.getFormatter())) {
            setFormatter(serviceLocator, column);
        }
        const formatVal = ValueFormatter.prototype.toView(value, column.getFormatter());
        return formatVal;
    }
    crudActions(args) {
        const query = this.generateQuery();
        let promise = null;
        const pr = 'promise';
        const key = this.getKey(args.foreignKeyData &&
            Object.keys(args.foreignKeyData).length ? args.foreignKeyData :
            this.parent.getPrimaryKeyFieldNames());
        if (this.parent.dataSource && 'result' in this.parent.dataSource) {
            this.eventPromise(args, query, key);
        }
        switch (args.requestType) {
            case 'save':
                promise = this.dataManager.update(key, args.data, query.fromTable, query, args.previousData);
                break;
        }
        args[pr] = promise ? promise : args[pr];
        this.parent.notify(crudAction, args);
    }
    /**
     * @param {object} changes - specifies the changes
     * @param {string} key - specifies the key
     * @param {object} original - specifies the original data
     * @param {Query} query - specifies the query
     * @returns {Promise<Object>} returns the object
     * @hidden
     */
    saveChanges(changes, key, original, query = this.generateQuery()) {
        query.requiresCount();
        if ('result' in this.parent.dataSource) {
            const deff = new Deferred();
            const args = {
                requestType: 'batchsave', changes: changes, key: key, query: query,
                endEdit: deff.resolve
            };
            this.setState({ isPending: true, resolver: deff.resolve });
            this.parent.trigger(dataSourceChanged, args);
            return deff.promise;
        }
        else {
            const promise = this.dataManager.saveChanges(changes, key, query.fromTable, query, original);
            return promise;
        }
    }
    getKey(keys) {
        if (keys && keys.length) {
            return keys[0];
        }
        return undefined;
    }
    /**
     * @returns {boolean} returns whether its remote data
     * @hidden
     */
    isRemote() {
        return this.dataManager.dataSource.offline !== true && this.dataManager.dataSource.url !== undefined &&
            this.dataManager.dataSource.url !== '';
    }
    addRows(e) {
        for (let i = e.records.length; i > 0; i--) {
            this.dataManager.dataSource.json.splice(e.toIndex, 0, e.records[i - 1]);
        }
    }
    removeRows(e) {
        const json = this.dataManager.dataSource.json;
        this.dataManager.dataSource.json = json.filter((value) => e.records.indexOf(value) === -1);
    }
    getColumnByField(field) {
        let col;
        return (this.parent.columnModel).some((column) => {
            col = column;
            return column.field === field;
        }) && col;
    }
    destroy() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(rowsAdded, this.addRows);
        this.parent.off(rowsRemoved, this.removeRows);
        this.parent.off(dataSourceModified, this.initDataManager);
        this.parent.off(destroy, this.destroy);
        this.parent.off(updateData, this.crudActions);
        this.parent.off(addDeleteAction, this.getData);
        this.parent.off(autoCol, this.refreshFilteredCols);
        this.parent.off(columnsPrepared, this.refreshFilteredCols);
    }
    getState() {
        return this.dataState;
    }
    setState(state) {
        return this.dataState = state;
    }
    getForeignKeyDataState() {
        return this.foreignKeyDataState;
    }
    setForeignKeyDataState(state) {
        this.foreignKeyDataState = state;
    }
    getStateEventArgument(query) {
        const adaptr = new UrlAdaptor();
        const dm = new DataManager({ url: '', adaptor: new UrlAdaptor });
        const state = adaptr.processQuery(dm, query);
        const data = JSON.parse(state.data);
        return extend(data, state.pvtData);
    }
    eventPromise(args, query, key) {
        const dataArgs = args;
        const state = this.getStateEventArgument(query);
        const def = new Deferred();
        const deff = new Deferred();
        if (args.requestType !== undefined && this.dataState.isDataChanged !== false) {
            state.action = args;
            if (args.requestType === 'save' || args.requestType === 'delete') {
                const editArgs = args;
                editArgs.key = key;
                const promise = 'promise';
                editArgs[promise] = deff.promise;
                editArgs.state = state;
                this.setState({ isPending: true, resolver: deff.resolve });
                dataArgs.endEdit = deff.resolve;
                dataArgs.cancelEdit = deff.reject;
                this.parent.trigger(dataSourceChanged, editArgs);
                deff.promise.then(() => {
                    this.setState({ isPending: true, resolver: def.resolve, group: state.group, aggregates: state.aggregates });
                    if (editArgs.requestType === 'save') {
                        this.parent.notify(recordAdded, editArgs);
                    }
                    this.parent.trigger(dataStateChange, state);
                })
                    .catch(() => void 0);
            }
            else {
                this.setState({ isPending: true, resolver: def.resolve, group: state.group, aggregates: state.aggregates });
                this.parent.trigger(dataStateChange, state);
            }
        }
        else {
            this.setState({});
            def.resolve(this.parent.dataSource);
        }
        return def;
    }
    /**
     * Gets the columns where searching needs to be performed from the Grid.
     *
     * @returns {string[]} returns the searched column field names
     */
    getSearchColumnFieldNames() {
        const colFieldNames = [];
        const columns = this.parent.getColumns();
        for (const col of columns) {
            if (col.allowSearching && !isNullOrUndefined(col.field)) {
                colFieldNames.push(col.field);
            }
        }
        return colFieldNames;
    }
    refreshFilteredCols() {
        if (this.parent.allowFiltering && this.parent.filterSettings.columns.length) {
            refreshFilteredColsUid(this.parent, this.parent.filterSettings.columns);
        }
    }
}

/**
 * Row
 *
 * @hidden
 */
class Row {
    constructor(options, parent) {
        merge(this, options);
        this.parent = parent;
    }
    clone() {
        const row = new Row({});
        merge(row, this);
        row.cells = this.cells.map((cell) => cell.clone());
        return row;
    }
    /**
     * Replaces the row data and grid refresh the particular row element only.
     *
     * @param  {Object} data - To update new data for the particular row.
     * @returns {void}
     */
    setRowValue(data) {
        if (!this.parent) {
            return;
        }
        const key = this.data[this.parent.getPrimaryKeyFieldNames()[0]];
        this.parent.setRowData(key, data);
    }
    /**
     * Replaces the given field value and refresh the particular cell element only.
     *
     * @param {string} field - Specifies the field name which you want to update.
     * @param {string | number | boolean | Date} value - To update new value for the particular cell.
     * @returns {void}
     */
    setCellValue(field, value) {
        if (!this.parent) {
            return;
        }
        const isValDiff = !(this.data[field].toString() === value.toString());
        if (isValDiff) {
            const pKeyField = this.parent.getPrimaryKeyFieldNames()[0];
            const key = this.data[pKeyField];
            this.parent.setCellValue(key, field, value);
            this.makechanges(pKeyField, this.data);
        }
        else {
            return;
        }
    }
    makechanges(key, data) {
        if (!this.parent) {
            return;
        }
        const gObj = this.parent;
        const dataManager = gObj.getDataModule().dataManager;
        dataManager.update(key, data);
    }
}

/**
 * Cell
 *
 * @hidden
 */
class Cell {
    constructor(options) {
        this.isSpanned = false;
        this.isRowSpanned = false;
        merge(this, options);
    }
    clone() {
        const cell = new Cell({});
        merge(cell, this);
        return cell;
    }
}

/**
 * `CellMergeRender` module.
 *
 * @hidden
 */
class CellMergeRender {
    constructor(serviceLocator, parent) {
        this.serviceLocator = serviceLocator;
        this.parent = parent;
    }
    render(cellArgs, row, i, td) {
        const cellRendererFact = this.serviceLocator.getService('cellRendererFactory');
        const cellRenderer = cellRendererFact.getCellRenderer(row.cells[i].cellType || CellType.Data);
        let colSpan = row.cells[i].cellSpan ? row.cells[i].cellSpan :
            (cellArgs.colSpan + i) <= row.cells.length ? cellArgs.colSpan : row.cells.length - i;
        const rowSpan = cellArgs.rowSpan;
        let visible = 0;
        let spannedCell;
        if (row.index > 0) {
            const cells = this.parent.groupSettings.columns.length > 0 &&
                !this.parent.getRowsObject()[row.index - 1].isDataRow ? this.parent.getRowsObject()[row.index].cells :
                this.parent.getRowsObject()[row.index - 1].cells;
            const targetCell = row.cells[i];
            const uid = 'uid';
            spannedCell = cells.filter((cell) => cell.column.uid === targetCell.column[uid])[0];
        }
        const colSpanLen = spannedCell && spannedCell.colSpanRange > 1 && spannedCell.rowSpanRange > 1 ?
            spannedCell.colSpanRange : colSpan;
        for (let j = i + 1; j < i + colSpanLen && j < row.cells.length; j++) {
            if (row.cells[j].visible === false) {
                visible++;
            }
            else {
                row.cells[j].isSpanned = true;
            }
        }
        if (visible > 0) {
            for (let j = i + colSpan; j < i + colSpan + visible && j < row.cells.length; j++) {
                row.cells[j].isSpanned = true;
            }
            if (i + colSpan + visible >= row.cells.length) {
                colSpan -= (i + colSpan + visible) - row.cells.length;
            }
        }
        if (row.cells[i].cellSpan) {
            row.data[cellArgs.column.field] = row.cells[i].spanText;
            td = cellRenderer.render(row.cells[i], row.data, { 'index': !isNullOrUndefined(row.index) ? row.index.toString() : '' });
        }
        if (colSpan > 1) {
            attributes(td, { 'colSpan': colSpan.toString(), 'aria-colSpan': colSpan.toString() });
        }
        if (rowSpan > 1) {
            attributes(td, { 'rowspan': rowSpan.toString(), 'aria-rowspan': rowSpan.toString() });
            row.cells[i].isRowSpanned = true;
            row.cells[i].rowSpanRange = Number(rowSpan);
            if (colSpan > 1) {
                row.cells[i].colSpanRange = Number(colSpan);
            }
        }
        if (row.index > 0 && (spannedCell.rowSpanRange > 1)) {
            row.cells[i].isSpanned = true;
            row.cells[i].rowSpanRange = Number(spannedCell.rowSpanRange - 1);
            row.cells[i].colSpanRange = spannedCell.rowSpanRange > 0 ? spannedCell.colSpanRange : 1;
        }
        if (this.parent.enableColumnVirtualization && !row.cells[i].cellSpan &&
            !this.containsKey(cellArgs.column.field, cellArgs.data[cellArgs.column.field])) {
            this.backupMergeCells(cellArgs.column.field, cellArgs.data[cellArgs.column.field], cellArgs.colSpan);
        }
        return td;
    }
    backupMergeCells(fName, data, span) {
        this.setMergeCells(this.generteKey(fName, data), span);
    }
    generteKey(fname, data) {
        return fname + '__' + data.toString();
    }
    splitKey(key) {
        return key.split('__');
    }
    containsKey(fname, data) {
        // eslint-disable-next-line no-prototype-builtins
        return this.getMergeCells().hasOwnProperty(this.generteKey(fname, data));
    }
    getMergeCells() {
        return this.parent.mergeCells;
    }
    setMergeCells(key, span) {
        this.parent.mergeCells[key] = span;
    }
    updateVirtualCells(rows) {
        const mCells = this.getMergeCells();
        for (const key of Object.keys(mCells)) {
            const value = mCells[key];
            const merge$$1 = this.splitKey(key);
            const columnIndex = this.getIndexFromAllColumns(merge$$1[0]);
            const vColumnIndices = this.parent.getColumnIndexesInView();
            const span = value - (vColumnIndices[0] - columnIndex);
            if (columnIndex < vColumnIndices[0] && span > 1) {
                for (const row of rows) {
                    if (row.data[merge$$1[0]].toString() === merge$$1[1].toString()) {
                        row.cells[0].cellSpan = span;
                        row.cells[0].spanText = merge$$1[1];
                        break;
                    }
                }
            }
        }
        return rows;
    }
    getIndexFromAllColumns(field) {
        const index = iterateArrayOrObject(this.parent.getVisibleColumns(), (item, index) => {
            if (item.field === field) {
                return index;
            }
            return undefined;
        })[0];
        return index;
    }
}

/**
 * Specifies class names
 */
/** @hidden */
const rowCell = 'e-rowcell';
/** @hidden */
const gridHeader = 'e-gridheader';
/** @hidden */
const gridContent = 'e-gridcontent';
/** @hidden */
const gridFooter = 'e-gridfooter';
/** @hidden */
const headerContent = 'e-headercontent';
/** @hidden */
const movableContent = 'e-movablecontent';
/** @hidden */
const movableHeader = 'e-movableheader';
/** @hidden */
const frozenContent = 'e-frozencontent';
/** @hidden */
const frozenHeader = 'e-frozenheader';
/** @hidden */
const content = 'e-content';
/** @hidden */
const table = 'e-table';
/** @hidden */
const row = 'e-row';
/** @hidden */
const gridChkBox = 'e-gridchkbox';
/** @hidden */
const editedRow = 'e-editedrow';
/** @hidden */
const addedRow = 'e-addedrow';
/**
 * Specifies repeated strings
 */
/** @hidden */
const changedRecords = 'changedRecords';
/** @hidden */
const addedRecords = 'addedRecords';
/** @hidden */
const deletedRecords = 'deletedRecords';
/** @hidden */
const leftRight = 'Left-Right';
/** @hidden */
const frozenRight = 'frozen-right';
/** @hidden */
const frozenLeft = 'frozen-left';
/** @hidden */
const ariaColIndex = 'aria-colindex';
/** @hidden */
const ariaRowIndex = 'aria-rowindex';
/** @hidden */
const tbody = 'tbody';
/** @hidden */
const colGroup = 'colgroup';
/** @hidden */
const open = 'open';
/** @hidden */
const change = 'change';
/** @hidden */
const focus = 'focus';
/** @hidden */
const create = 'created';
/** @hidden */
const beforeOpen = 'beforeOpen';
/** @hidden */
const downArrow = 'downArrow';
/** @hidden */
const upArrow = 'upArrow';
/** @hidden */
const pageUp = 'PageUp';
/** @hidden */
const pageDown = 'PageDown';
/** @hidden */
const enter = 'enter';
/** @hidden */
const shiftEnter = 'shiftEnter';
/** @hidden */
const tab = 'tab';
/** @hidden */
const shiftTab = 'shiftTab';

/**
 * RowRenderer class which responsible for building row content.
 *
 * @hidden
 */
class RowRenderer {
    constructor(serviceLocator, cellType, parent) {
        this.isSpan = false;
        this.cellType = cellType;
        this.serviceLocator = serviceLocator;
        this.parent = parent;
        this.element = this.parent.createElement('tr', { attrs: { role: 'row' } });
    }
    /* eslint-disable */
    /**
     * Function to render the row content based on Column[] and data.
     *
     * @param {Row<T>} row - specifies the row
     * @param {Column[]} columns - specifies the columns
     * @param {Object} attributes - specifies the attributes
     * @param {string} rowTemplate - specifies the rowTemplate
     * @param {Element} cloneNode - specifies the cloneNode
     * @returns {Element} returns the element
     */
    /* eslint-enable */
    render(row$$1, columns, attributes$$1, rowTemplate, cloneNode) {
        return this.refreshRow(row$$1, columns, attributes$$1, rowTemplate, cloneNode);
    }
    /* eslint-disable */
    /**
     * Function to refresh the row content based on Column[] and data.
     *
     * @param {Row<T>} row - specifies the row
     * @param {Column[]} columns - specifies the column
     * @param {boolean} isChanged - specifies isChanged
     * @param {Object} attributes - specifies the attributes
     * @param {string} rowTemplate - specifies the rowTemplate
     * @returns {void}
     */
    /* eslint-enable */
    refresh(row$$1, columns, isChanged, attributes$$1, rowTemplate) {
        if (isChanged) {
            row$$1.data = extendObjWithFn({}, row$$1.changes);
            this.refreshMergeCells(row$$1);
        }
        const node = this.parent.element.querySelector('[data-uid=' + row$$1.uid + ']');
        const tr = this.refreshRow(row$$1, columns, attributes$$1, rowTemplate, null, isChanged);
        const cells = [].slice.call(tr.cells);
        const tempCells = [].slice.call(node.querySelectorAll('.e-templatecell'));
        if (this.parent.isReact && tempCells.length) {
            for (let i = 0, len = columns.length; i < len; i++) {
                if (columns[i].template) {
                    this.parent.refreshReactColumnTemplateByUid(columns[i].uid);
                }
            }
        }
        node.innerHTML = '';
        for (const cell of cells) {
            node.appendChild(cell);
        }
    }
    // tslint:disable-next-line:max-func-body-length
    refreshRow(row$$1, columns, attributes$$1, rowTemplate, cloneNode, isEdit) {
        const tr = !isNullOrUndefined(cloneNode) ? cloneNode : this.element.cloneNode();
        const rowArgs = { data: row$$1.data };
        const cellArgs = { data: row$$1.data };
        const chekBoxEnable = this.parent.getColumns().filter((col) => col.type === 'checkbox' && col.field)[0];
        let value = false;
        if (chekBoxEnable) {
            value = getObject(chekBoxEnable.field, rowArgs.data);
        }
        const selIndex = this.parent.getSelectedRowIndexes();
        if (row$$1.isDataRow) {
            row$$1.isSelected = selIndex.indexOf(row$$1.index) > -1 || value;
        }
        if (row$$1.isDataRow && this.parent.isCheckBoxSelection
            && this.parent.checkAllRows === 'Check' && this.parent.enableVirtualization) {
            row$$1.isSelected = true;
            if (selIndex.indexOf(row$$1.index) === -1) {
                selIndex.push(row$$1.index);
            }
        }
        this.buildAttributeFromRow(tr, row$$1);
        attributes(tr, extend({}, attributes$$1, {}));
        setStyleAndAttributes(tr, row$$1.attributes);
        const cellRendererFact = this.serviceLocator.getService('cellRendererFactory');
        for (let i = 0, len = row$$1.cells.length; i < len; i++) {
            const cell = row$$1.cells[i];
            cell.isSelected = row$$1.isSelected;
            cell.isColumnSelected = cell.column.isSelected;
            const cellRenderer = cellRendererFact.getCellRenderer(row$$1.cells[i].cellType || CellType.Data);
            const attrs = { 'index': !isNullOrUndefined(row$$1.index) ? row$$1.index.toString() : '' };
            if (row$$1.isExpand && row$$1.cells[i].cellType === CellType.DetailExpand) {
                attrs['class'] = this.parent.isPrinting ? 'e-detailrowcollapse' : 'e-detailrowexpand';
            }
            let td = cellRenderer.render(row$$1.cells[i], row$$1.data, attrs, row$$1.isExpand, isEdit);
            if (row$$1.cells[i].cellType !== CellType.Filter) {
                if (row$$1.cells[i].cellType === CellType.Data || row$$1.cells[i].cellType === CellType.CommandColumn) {
                    this.parent.trigger(queryCellInfo, extend(cellArgs, {
                        cell: td, column: cell.column, colSpan: 1,
                        rowSpan: 1, foreignKeyData: row$$1.cells[i].foreignKeyData,
                        requestType: this.parent.requestTypeAction
                    }));
                    let isRowSpanned = false;
                    if (row$$1.index > 0 && this.isSpan) {
                        const prevRowCells = this.parent.groupSettings.columns.length > 0 &&
                            !this.parent.getRowsObject()[row$$1.index - 1].isDataRow ?
                            this.parent.getRowsObject()[row$$1.index].cells : this.parent.getRowsObject()[row$$1.index - 1].cells;
                        const uid = 'uid';
                        const prevRowCell = prevRowCells.filter((cell) => cell.column.uid === row$$1.cells[i].column[uid])[0];
                        isRowSpanned = prevRowCell.isRowSpanned ? prevRowCell.isRowSpanned : prevRowCell.rowSpanRange > 1;
                    }
                    if (cellArgs.colSpan > 1 || row$$1.cells[i].cellSpan > 1 || cellArgs.rowSpan > 1 || isRowSpanned) {
                        this.isSpan = true;
                        const cellMerge = new CellMergeRender(this.serviceLocator, this.parent);
                        td = cellMerge.render(cellArgs, row$$1, i, td);
                    }
                }
                if (!row$$1.cells[i].isSpanned) {
                    tr.appendChild(td);
                }
            }
        }
        const args = { row: tr, rowHeight: this.parent.rowHeight };
        if (row$$1.isDataRow) {
            this.parent.trigger(rowDataBound, extend(rowArgs, args));
            if (this.parent.childGrid || this.parent.isRowDragable() || this.parent.detailTemplate) {
                const td = tr.querySelectorAll('.e-rowcell:not(.e-hide)')[0];
                if (td) {
                    td.classList.add('e-detailrowvisible');
                }
            }
        }
        if (this.parent.enableVirtualization) {
            rowArgs.rowHeight = this.parent.rowHeight;
        }
        if (rowArgs.rowHeight) {
            tr.style.height = rowArgs.rowHeight + 'px';
        }
        else if (this.parent.rowHeight && (tr.querySelector('.e-headercell') || tr.querySelector('.e-groupcaption'))) {
            tr.style.height = this.parent.rowHeight + 'px';
        }
        if (row$$1.cssClass) {
            tr.classList.add(row$$1.cssClass);
        }
        if (row$$1.lazyLoadCssClass) {
            tr.classList.add(row$$1.lazyLoadCssClass);
        }
        const vFTable = this.parent.enableColumnVirtualization && this.parent.frozenColumns !== 0;
        if (!vFTable && this.parent.aggregates.length && this.parent.element.scrollHeight > this.parent.height) {
            for (let i = 0; i < this.parent.aggregates.length; i++) {
                const property = 'properties';
                const column = 'columns';
                if (this.parent.aggregates[i][property][column][0].footerTemplate) {
                    const summarycell = [].slice.call(tr.getElementsByClassName('e-summarycell'));
                    if (summarycell.length) {
                        const lastSummaryCell = (summarycell[summarycell.length - 1]);
                        addClass([lastSummaryCell], ['e-lastsummarycell']);
                        const firstSummaryCell = (summarycell[0]);
                        addClass([firstSummaryCell], ['e-firstsummarycell']);
                    }
                }
            }
        }
        return tr;
    }
    refreshMergeCells(row$$1) {
        for (const cell of row$$1.cells) {
            cell.isSpanned = false;
        }
        return row$$1;
    }
    /* eslint-disable */
    /**
     * Function to check and add alternative row css class.
     *
     * @param {Element} tr - specifies the tr element
     * @param {Row<T>} row - specifies the row
     * @returns {void}
     */
    /* eslint-enable */
    buildAttributeFromRow(tr, row$$1) {
        const attr = {};
        const prop = { 'rowindex': ariaRowIndex, 'dataUID': 'data-uid', 'ariaSelected': 'aria-selected' };
        const classes = [];
        if (row$$1.isDataRow) {
            classes.push(row);
        }
        if (row$$1.isAltRow) {
            classes.push('e-altrow');
        }
        if (!isNullOrUndefined(row$$1.index)) {
            attr[prop.rowindex] = row$$1.index;
        }
        if (row$$1.rowSpan) {
            attr.rowSpan = row$$1.rowSpan;
        }
        if (row$$1.uid) {
            attr[prop.dataUID] = row$$1.uid;
        }
        if (row$$1.isSelected) {
            attr[prop.ariaSelected] = true;
        }
        if (row$$1.visible === false) {
            classes.push('e-hide');
        }
        attr.class = classes;
        setStyleAndAttributes(tr, attr);
    }
}

/**
 * RowModelGenerator is used to generate grid data rows.
 *
 * @hidden
 */
class RowModelGenerator {
    /**
     * Constructor for header renderer module
     *
     * @param {IGrid} parent - specifies the IGrid
     */
    constructor(parent) {
        this.parent = parent;
    }
    generateRows(data, args) {
        const rows = [];
        let startIndex = this.parent.enableVirtualization && args ? args.startIndex : 0;
        startIndex = this.parent.enableInfiniteScrolling && args ? this.getInfiniteIndex(args) : startIndex;
        for (let i = 0, len = Object.keys(data).length; i < len; i++, startIndex++) {
            rows[i] = this.generateRow(data[i], startIndex);
        }
        return rows;
    }
    ensureColumns() {
        //TODO: generate dummy column for group, detail here;
        const cols = [];
        if (this.parent.detailTemplate || this.parent.childGrid) {
            const args = {};
            this.parent.notify(detailIndentCellInfo, args);
            cols.push(this.generateCell(args, null, CellType.DetailExpand));
        }
        if (this.parent.isRowDragable()) {
            cols.push(this.generateCell({}, null, CellType.RowDragIcon));
        }
        return cols;
    }
    generateRow(data, index, cssClass, indent, pid, tIndex, parentUid) {
        const options = {};
        options.foreignKeyData = {};
        options.uid = getUid('grid-row');
        options.data = data;
        options.index = index;
        options.indent = indent;
        options.tIndex = tIndex;
        options.isDataRow = true;
        options.parentGid = pid;
        options.parentUid = parentUid;
        if (this.parent.isPrinting) {
            if (this.parent.hierarchyPrintMode === 'All') {
                options.isExpand = true;
            }
            else if (this.parent.hierarchyPrintMode === 'Expanded' && this.parent.expandedRows && this.parent.expandedRows[index]) {
                options.isExpand = this.parent.expandedRows[index].isExpand;
            }
        }
        options.cssClass = cssClass;
        options.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;
        options.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;
        options.isSelected = this.parent.getSelectedRowIndexes().indexOf(index) > -1;
        this.refreshForeignKeyRow(options);
        const cells = this.ensureColumns();
        const row = new Row(options, this.parent);
        row.cells = this.parent.getFrozenMode() === 'Right' ? this.generateCells(options).concat(cells)
            : cells.concat(this.generateCells(options));
        return row;
    }
    refreshForeignKeyRow(options) {
        const foreignKeyColumns = this.parent.getForeignKeyColumns();
        for (let i = 0; i < foreignKeyColumns.length; i++) {
            setValue(foreignKeyColumns[i].field, getForeignData(foreignKeyColumns[i], options.data), options.foreignKeyData);
        }
    }
    generateCells(options) {
        const dummies = this.parent.getColumns();
        const tmp = [];
        for (let i = 0; i < dummies.length; i++) {
            tmp.push(this.generateCell(dummies[i], options.uid, isNullOrUndefined(dummies[i].commands) ? undefined : CellType.CommandColumn, null, i, options.foreignKeyData));
        }
        return tmp;
    }
    /**
     *
     * @param {Column} column - Defines column details
     * @param {string} rowId - Defines row id
     * @param {CellType} cellType  - Defines cell type
     * @param {number} colSpan - Defines colSpan
     * @param {number} oIndex - Defines index
     * @param {Object} foreignKeyData - Defines foreign key data
     * @returns {Cell<Column>} returns cell model
     * @hidden
     */
    generateCell(column, rowId, cellType, colSpan, oIndex, foreignKeyData$$1) {
        const opt = {
            'visible': column.visible,
            'isDataCell': !isNullOrUndefined(column.field || column.template),
            'isTemplate': !isNullOrUndefined(column.template),
            'rowID': rowId,
            'column': column,
            'cellType': !isNullOrUndefined(cellType) ? cellType : CellType.Data,
            'colSpan': colSpan,
            'commands': column.commands,
            'isForeignKey': column.isForeignColumn && column.isForeignColumn(),
            'foreignKeyData': column.isForeignColumn && column.isForeignColumn() && getValue(column.field, foreignKeyData$$1)
        };
        if (opt.isDataCell || opt.column.type === 'checkbox' || opt.commands) {
            opt.index = oIndex;
        }
        return new Cell(opt);
    }
    refreshRows(input) {
        for (let i = 0; i < input.length; i++) {
            this.refreshForeignKeyRow(input[i]);
            input[i].cells = this.generateCells(input[i]);
        }
        return input;
    }
    getInfiniteIndex(args) {
        return args.requestType === 'infiniteScroll' || args.requestType === 'delete' || args.action === 'add'
            ? args.startIndex : 0;
    }
}

/**
 * Summary row model generator
 *
 * @hidden
 */
class SummaryModelGenerator {
    /**
     * Constructor for Summary row model generator
     *
     * @param {IGrid} parent - specifies the IGrid
     */
    constructor(parent) {
        this.parent = parent;
    }
    getData() {
        const rows = [];
        const row = this.parent.aggregates.slice();
        for (let i = 0; i < row.length; i++) {
            const columns = row[i].columns.filter((column) => {
                return !(column.footerTemplate || column.groupFooterTemplate || column.groupCaptionTemplate)
                    || this.columnSelector(column);
            });
            if (columns.length) {
                rows.push({ columns: columns });
            }
        }
        return rows;
    }
    columnSelector(column) {
        return column.footerTemplate !== undefined;
    }
    getColumns(start, end) {
        const columns = [];
        if (this.parent.allowGrouping) {
            for (let i = 0; i < this.parent.groupSettings.columns.length; i++) {
                columns.push(new Column({}));
            }
        }
        if (this.parent.detailTemplate || !isNullOrUndefined(this.parent.childGrid)) {
            columns.push(new Column({}));
        }
        if (this.parent.isRowDragable() && !start) {
            columns.push(new Column({}));
        }
        columns.push(...this.parent.getColumns());
        end = end && !start ? end + this.parent.getIndentCount() : end;
        return isNullOrUndefined(start) ? columns : columns.slice(start, end);
    }
    generateRows(input, args, start, end, columns) {
        if (input.length === 0) {
            if (args === undefined || !args.count) {
                return [];
            }
        }
        const data = this.buildSummaryData(input, args);
        const rows = [];
        const row = this.getData();
        for (let i = 0; i < row.length; i++) {
            rows.push(this.getGeneratedRow(row[i], data[i], args ? args.level : undefined, start, end, args ? args.parentUid : undefined, columns));
        }
        return rows;
    }
    getGeneratedRow(summaryRow, data, raw, start, end, parentUid, columns) {
        const tmp = [];
        let indents = this.getIndentByLevel();
        const isDetailGridAlone = !isNullOrUndefined(this.parent.childGrid);
        const indentLength = !start ? this.parent.getIndentCount() : 0;
        if (this.parent.isRowDragable() && !start) {
            indents = ['e-indentcelltop'];
        }
        const values = columns ? columns : this.getColumns(start, end);
        for (let i = 0; i < values.length; i++) {
            tmp.push(this.getGeneratedCell(values[i], summaryRow, i >= indentLength ? this.getCellType() :
                i < this.parent.groupSettings.columns.length ? CellType.Indent : CellType.DetailFooterIntent, indents[i], isDetailGridAlone));
        }
        const row = new Row({ data: data, attributes: { class: 'e-summaryrow' } });
        row.cells = tmp;
        row.uid = getUid('grid-row');
        row.parentUid = parentUid;
        row.isAggregateRow = true;
        row.visible = tmp.some((cell) => cell.isDataCell && cell.visible);
        return row;
    }
    getGeneratedCell(column, summaryRow, cellType, indent, isDetailGridAlone) {
        //Get the summary column by display
        const sColumn = summaryRow.columns.filter((scolumn) => scolumn.columnName === column.field)[0];
        const attrs = {
            'style': { 'textAlign': column.textAlign },
            'e-mappinguid': column.uid, index: column.index
        };
        if (indent) {
            attrs.class = indent;
        }
        if (isNullOrUndefined(indent) && isDetailGridAlone) {
            attrs.class = 'e-detailindentcelltop';
        }
        const opt = {
            'visible': column.visible,
            'isDataCell': !isNullOrUndefined(sColumn),
            'isTemplate': sColumn && !isNullOrUndefined(sColumn.footerTemplate
                || sColumn.groupFooterTemplate || sColumn.groupCaptionTemplate),
            'column': sColumn || {},
            'attributes': attrs,
            'cellType': cellType
        };
        opt.column.headerText = column.headerText;
        return new Cell(opt);
    }
    buildSummaryData(data, args) {
        const dummy = [];
        const summaryRows = this.getData();
        let single = {};
        for (let i = 0; i < summaryRows.length; i++) {
            single = {};
            const column = summaryRows[i].columns;
            for (let j = 0; j < column.length; j++) {
                single = this.setTemplate(column[j], (args && args.aggregates) ? args : data, single);
            }
            dummy.push(single);
        }
        return dummy;
    }
    getIndentByLevel() {
        return this.parent.groupSettings.columns.map(() => 'e-indentcelltop');
    }
    setTemplate(column, data, single) {
        let types = column.type;
        const helper = {};
        const formatFn = column.getFormatter() || (() => (a) => a)();
        const group = data;
        if (!(types instanceof Array)) {
            types = [column.type];
        }
        for (let i = 0; i < types.length; i++) {
            const key = column.field + ' - ' + types[i].toLowerCase();
            const disp = column.columnName;
            const val = types[i] !== 'Custom' && group.aggregates && key in group.aggregates ? group.aggregates[key] :
                calculateAggregate(types[i], group.aggregates ? group : data, column, this.parent);
            single[disp] = single[disp] || {};
            single[disp][key] = val;
            single[disp][types[i]] = !isNullOrUndefined(val) ? formatFn(val) : ' ';
            if (group.field) {
                single[disp].field = group.field;
                single[disp].key = group.key;
            }
        }
        helper.format = column.getFormatter();
        column.setTemplate(helper);
        return single;
    }
    getCellType() {
        return CellType.Summary;
    }
}
class GroupSummaryModelGenerator extends SummaryModelGenerator {
    columnSelector(column) {
        return column.groupFooterTemplate !== undefined;
    }
    getIndentByLevel(level = this.parent.groupSettings.columns.length) {
        return this.parent.groupSettings.columns.map((v, indx) => indx <= level - 1 ? '' : 'e-indentcelltop');
    }
    getCellType() {
        return CellType.GroupSummary;
    }
}
class CaptionSummaryModelGenerator extends SummaryModelGenerator {
    columnSelector(column) {
        return column.groupCaptionTemplate !== undefined;
    }
    getData() {
        const initVal = { columns: [] };
        return [super.getData().reduce((prev, cur) => {
                prev.columns = [...prev.columns, ...cur.columns];
                return prev;
            }, initVal)];
    }
    isEmpty() {
        return (this.getData()[0].columns || []).length === 0;
    }
    getCellType() {
        return CellType.CaptionSummary;
    }
}

/**
 * GroupModelGenerator is used to generate group caption rows and data rows.
 *
 * @hidden
 */
class GroupModelGenerator extends RowModelGenerator {
    constructor(parent) {
        super(parent);
        this.rows = [];
        /** @hidden */
        this.index = 0;
        this.infiniteChildCount = 0;
        this.renderInfiniteAgg = true;
        this.parent = parent;
        this.summaryModelGen = new GroupSummaryModelGenerator(parent);
        this.captionModelGen = new CaptionSummaryModelGenerator(parent);
    }
    generateRows(data, args) {
        if (this.parent.groupSettings.columns.length === 0) {
            return super.generateRows(data, args);
        }
        this.isInfiniteScroll = (args.requestType === 'infiniteScroll');
        this.rows = [];
        this.index = this.parent.enableVirtualization || this.isInfiniteScroll ? args.startIndex : 0;
        for (let i = 0, len = data.length; i < len; i++) {
            this.infiniteChildCount = 0;
            this.renderInfiniteAgg = true;
            this.getGroupedRecords(0, data[i], data.level, i, undefined, this.rows.length);
        }
        this.index = 0;
        if (this.parent.isCollapseStateEnabled()) {
            this.ensureRowVisibility();
        }
        return this.rows;
    }
    getGroupedRecords(index, data, raw, parentid, childId, tIndex, parentUid) {
        const level = raw;
        if (isNullOrUndefined(data.items)) {
            if (isNullOrUndefined(data.GroupGuid)) {
                this.rows = this.rows.concat(this.generateDataRows(data, index, parentid, this.rows.length, parentUid));
            }
            else {
                for (let j = 0, len = data.length; j < len; j++) {
                    this.getGroupedRecords(index, data[j], data.level, parentid, index, this.rows.length, parentUid);
                }
            }
        }
        else {
            let preCaption;
            const captionRow = this.generateCaptionRow(data, index, parentid, childId, tIndex, parentUid);
            if (this.isInfiniteScroll) {
                preCaption = this.getPreCaption(index, captionRow.data.key);
            }
            if (!preCaption) {
                this.rows = this.rows.concat(captionRow);
            }
            else {
                captionRow.uid = preCaption.uid;
            }
            if (data.items && data.items.length) {
                this.getGroupedRecords(index + 1, data.items, data.items.level, parentid, index + 1, this.rows.length, captionRow.uid);
            }
            if (this.parent.aggregates.length && this.isRenderAggregate(captionRow)) {
                const rowCnt = this.rows.length;
                this.rows.push(...this.summaryModelGen.generateRows(data, { level: level, parentUid: captionRow.uid }));
                for (let i = rowCnt - 1; i >= 0; i--) {
                    if (this.rows[i].isCaptionRow) {
                        this.rows[i].aggregatesCount = this.rows.length - rowCnt;
                    }
                    else if (!this.rows[i].isCaptionRow && !this.rows[i].isDataRow) {
                        break;
                    }
                }
            }
            if (preCaption) {
                this.setInfiniteRowVisibility(preCaption);
            }
        }
    }
    isRenderAggregate(data) {
        if (this.parent.enableInfiniteScrolling) {
            if (!this.renderInfiniteAgg) {
                return false;
            }
            this.getPreCaption(data.indent, data.data.key);
            this.renderInfiniteAgg = data.data.count === this.infiniteChildCount;
            return this.renderInfiniteAgg;
        }
        return !this.parent.enableInfiniteScrolling;
    }
    getPreCaption(indent, key) {
        const rowObj = [...this.parent.getRowsObject(), ...this.rows];
        let preCap;
        this.infiniteChildCount = 0;
        let i = rowObj.length;
        while (i--) {
            if (rowObj[i].isCaptionRow && rowObj[i].indent === indent
                && rowObj[i].data.key === key) {
                preCap = rowObj[i];
            }
            if (rowObj[i].indent === indent || rowObj[i].indent < indent) {
                break;
            }
            if (rowObj[i].indent === indent + 1) {
                this.infiniteChildCount++;
            }
        }
        return preCap;
    }
    getCaptionRowCells(field, indent, data) {
        const cells = [];
        let visibles = [];
        let column = this.parent.getColumnByField(field);
        const indexes = this.parent.getColumnIndexesInView();
        if (this.parent.enableColumnVirtualization) {
            column = this.parent.columns.filter((c) => c.field === field)[0];
        }
        const groupedLen = this.parent.groupSettings.columns.length;
        const gObj = this.parent;
        if (!this.parent.enableColumnVirtualization || indexes.indexOf(indent) !== -1) {
            for (let i = 0; i < indent; i++) {
                cells.push(this.generateIndentCell());
            }
            cells.push(this.generateCell({}, null, CellType.Expand));
        }
        indent = this.parent.enableColumnVirtualization ? 1 :
            (this.parent.getVisibleColumns().length + groupedLen + (gObj.detailTemplate || gObj.childGrid ? 1 : 0) -
                indent + (this.parent.getVisibleColumns().length ? -1 : 0));
        //Captionsummary cells will be added here.
        if (this.parent.aggregates.length && !this.captionModelGen.isEmpty()) {
            const captionCells = this.captionModelGen.generateRows(data)[0];
            extend(data, captionCells.data);
            let cIndex = 0;
            captionCells.cells.some((cell, index) => { cIndex = index; return cell.visible && cell.isDataCell; });
            visibles = captionCells.cells.slice(cIndex).filter((cell) => cell.visible);
            if (captionCells.visible && visibles[0].column.field === this.parent.getVisibleColumns()[0].field) {
                visibles = visibles.slice(1);
            }
            if (this.parent.getVisibleColumns().length === 1) {
                visibles = [];
            }
            indent = indent - visibles.length;
        }
        const cols = (!this.parent.enableColumnVirtualization ? [column] : this.parent.getColumns());
        let wFlag = true;
        for (let j = 0; j < cols.length; j++) {
            const tmpFlag = wFlag && indexes.indexOf(indent) !== -1;
            if (tmpFlag) {
                wFlag = false;
            }
            const cellType = !this.parent.enableColumnVirtualization || tmpFlag ?
                CellType.GroupCaption : CellType.GroupCaptionEmpty;
            indent = this.parent.enableColumnVirtualization && cellType === CellType.GroupCaption ? indent + groupedLen : indent;
            if (gObj.isRowDragable()) {
                indent++;
            }
            cells.push(this.generateCell(column, null, cellType, indent));
        }
        cells.push(...visibles);
        return cells;
    }
    /**
     * @param {GroupedData} data - specifies the data
     * @param {number} indent - specifies the indent
     * @param {number} parentID - specifies the parentID
     * @param {number} childID - specifies the childID
     * @param {number} tIndex - specifies the TIndex
     * @param {string} parentUid - specifies the ParentUid
     * @returns {Row<Column>} returns the Row object
     * @hidden
     */
    generateCaptionRow(data, indent, parentID, childID, tIndex, parentUid) {
        const options = {};
        const records = 'records';
        const col = this.parent.getColumnByField(data.field);
        options.data = extend({}, data);
        if (col) {
            options.data.field = data.field;
        }
        options.isDataRow = false;
        options.isExpand = !this.parent.groupSettings.enableLazyLoading && !this.parent.isCollapseStateEnabled();
        options.parentGid = parentID;
        options.childGid = childID;
        options.tIndex = tIndex;
        options.isCaptionRow = true;
        options.parentUid = parentUid;
        options.gSummary = !isNullOrUndefined(data.items[records]) ? data.items[records].length : data.items.length;
        options.uid = getUid('grid-row');
        const row = new Row(options);
        row.indent = indent;
        this.getForeignKeyData(row);
        row.cells = this.getCaptionRowCells(data.field, indent, row.data);
        return row;
    }
    getForeignKeyData(row) {
        const data = row.data;
        const col = this.parent.getColumnByField(data.field);
        if (col && col.isForeignColumn && col.isForeignColumn()) {
            const fkValue = (isNullOrUndefined(data.key) ? '' : col.valueAccessor(col.foreignKeyValue, getForeignData(col, {}, data.key)[0], col));
            setValue('foreignKey', fkValue, row.data);
        }
    }
    /**
     * @param {Object[]} data - specifies the data
     * @param {number} indent - specifies the indent
     * @param {number} childID - specifies the childID
     * @param {number} tIndex - specifies the tIndex
     * @param {string} parentUid - specifies the ParentUid
     * @returns {Row<Column>[]} returns the row object
     * @hidden
     */
    generateDataRows(data, indent, childID, tIndex, parentUid) {
        const rows = [];
        const indexes = this.parent.getColumnIndexesInView();
        for (let i = 0, len = data.length; i < len; i++, tIndex++) {
            rows[i] = this.generateRow(data[i], this.index, i ? undefined : 'e-firstchildrow', indent, childID, tIndex, parentUid);
            for (let j = 0; j < indent; j++) {
                if (this.parent.enableColumnVirtualization && indexes.indexOf(indent) === -1) {
                    continue;
                }
                rows[i].cells.unshift(this.generateIndentCell());
            }
            this.index++;
        }
        return rows;
    }
    generateIndentCell() {
        return this.generateCell({}, null, CellType.Indent);
    }
    refreshRows(input) {
        const indexes = this.parent.getColumnIndexesInView();
        for (let i = 0; i < input.length; i++) {
            if (input[i].isDataRow) {
                input[i].cells = this.generateCells(input[i]);
                for (let j = 0; j < input[i].indent; j++) {
                    if (this.parent.enableColumnVirtualization && indexes.indexOf(input[i].indent) === -1) {
                        continue;
                    }
                    input[i].cells.unshift(this.generateIndentCell());
                }
            }
            else {
                const cRow = this.generateCaptionRow(input[i].data, input[i].indent);
                input[i].cells = cRow.cells;
            }
        }
        return input;
    }
    setInfiniteRowVisibility(caption) {
        if (!caption.isExpand || caption.visible === false) {
            for (const row of this.rows) {
                if (row.parentUid === caption.uid) {
                    row.visible = false;
                    if (row.isCaptionRow) {
                        this.setInfiniteRowVisibility(row);
                    }
                }
            }
        }
    }
    ensureRowVisibility() {
        for (let i = 0; i < this.rows.length; i++) {
            const row = this.rows[i];
            if (!row.isCaptionRow) {
                continue;
            }
            for (let j = i + 1; j < this.rows.length; j++) {
                const childRow = this.rows[j];
                if (row.uid === childRow.parentUid) {
                    this.rows[j].visible = row.isExpand;
                }
            }
        }
    }
}

// eslint-disable-next-line valid-jsdoc
/**
 * Content module is used to render grid content
 *
 * @hidden
 */
class ContentRender {
    /**
     * Constructor for content renderer module
     *
     * @param {IGrid} parent - specifies the Igrid
     * @param {ServiceLocator} serviceLocator - specifies the service locator
     */
    constructor(parent, serviceLocator) {
        this.rows = [];
        this.freezeRows = [];
        this.movableRows = [];
        this.freezeRowElements = [];
        /** @hidden */
        this.currentInfo = {};
        /** @hidden */
        this.prevCurrentView = [];
        this.isLoaded = true;
        this.viewColIndexes = [];
        this.drop = (e) => {
            this.parent.notify(columnDrop, { target: e.target, droppedElement: e.droppedElement });
            remove(e.droppedElement);
        };
        this.infiniteCache = {};
        this.isRemove = false;
        /** @hidden */
        this.visibleRows = [];
        this.visibleFrozenRows = [];
        this.rightFreezeRows = [];
        this.isAddRows = false;
        this.isInfiniteFreeze = false;
        this.useGroupCache = false;
        this.rafCallback = (args) => {
            const arg = args;
            return () => {
                if (this.parent.isFrozenGrid() && this.parent.enableVirtualization) {
                    const tableName = args.tableName;
                    this.isLoaded = this.parent.getFrozenMode() === leftRight ? tableName === 'frozen-right' : tableName === 'movable';
                    if (this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll' && this.isLoaded) {
                        const mHdr = [].slice.call(this.parent.getMovableVirtualHeader().getElementsByClassName(row));
                        const fHdr = [].slice.call(this.parent.getFrozenVirtualHeader().getElementsByClassName(row));
                        this.isLoaded = mHdr.length === fHdr.length;
                    }
                }
                this.ariaService.setBusy(this.getPanel().querySelector('.' + content), false);
                if (this.parent.isDestroyed) {
                    return;
                }
                let rows = this.rows.slice(0);
                if (this.parent.enableInfiniteScrolling) {
                    rows = this.parent.getRowsObject();
                    const prevPage = arg.prevPage;
                    if (this.parent.infiniteScrollSettings.enableCache && prevPage) {
                        const maxBlock = this.parent.infiniteScrollSettings.maxBlocks;
                        rows = [];
                        const rowIdx = (parseInt(this.rowElements[0].getAttribute('aria-rowindex'), 10) + 1);
                        const startIdx = Math.ceil(rowIdx / this.parent.pageSettings.pageSize);
                        for (let i = 0, count = startIdx; i < maxBlock; i++, count++) {
                            if (this.infiniteCache[count]) {
                                rows = [...rows, ...this.infiniteCache[count]];
                            }
                        }
                    }
                }
                if (this.parent.isFrozenGrid()) {
                    rows = args.isFrozen ? this.freezeRows : args.renderFrozenRightContent ? this.parent.getFrozenRightRowsObject()
                        : this.movableRows;
                }
                this.parent.notify(contentReady, { rows: rows, args: arg });
                if (this.isLoaded) {
                    this.parent.isManualRefresh = false;
                    this.parent.trigger(dataBound, {}, () => {
                        if (this.parent.allowTextWrap) {
                            this.parent.notify(freezeRender, { case: 'textwrap' });
                        }
                    });
                }
                if (arg) {
                    const action = (arg.requestType || '').toLowerCase() + '-complete';
                    this.parent.notify(action, arg);
                    if (args.requestType === 'batchsave') {
                        args.cancel = false;
                        this.parent.trigger(actionComplete, args);
                    }
                }
                if (this.isLoaded) {
                    this.parent.hideSpinner();
                }
            };
        };
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.ariaService = this.serviceLocator.getService('ariaService');
        this.parent.enableDeepCompare = this.parent.getDataModule().isRemote();
        this.generator = this.getModelGenerator();
        if (this.parent.isDestroyed) {
            return;
        }
        if (!this.parent.enableColumnVirtualization && !this.parent.enableVirtualization
            && !this.parent.groupSettings.enableLazyLoading) {
            this.parent.on(columnVisibilityChanged, this.setVisible, this);
        }
        this.parent.on(colGroupRefresh, this.colGroupRefresh, this);
        this.parent.on(uiUpdate, this.enableAfterRender, this);
        this.parent.on(refreshInfiniteModeBlocks, this.refreshContentRows, this);
        this.parent.on(beforeCellFocused, this.beforeCellFocused, this);
        this.parent.on(destroy, this.droppableDestroy, this);
    }
    beforeCellFocused(e) {
        if (e.byKey && (e.keyArgs.action === 'upArrow' || e.keyArgs.action === 'downArrow')) {
            this.pressedKey = e.keyArgs.action;
        }
        else {
            this.pressedKey = undefined;
        }
    }
    /**
     * The function is used to render grid content div
     *
     * @returns {void}
     */
    renderPanel() {
        const gObj = this.parent;
        let div = this.parent.element.querySelector('.' + gridContent);
        if (div) {
            this.ariaService.setOptions(this.parent.element.querySelector('.' + content), { busy: false });
            this.setPanel(div);
            return;
        }
        div = this.parent.createElement('div', { className: gridContent });
        const innerDiv = this.parent.createElement('div', {
            className: content
        });
        this.ariaService.setOptions(innerDiv, { busy: false });
        div.appendChild(innerDiv);
        this.setPanel(div);
        gObj.element.appendChild(div);
    }
    /**
     * The function is used to render grid content table
     *
     * @returns {void}
     */
    renderTable() {
        const contentDiv = this.getPanel();
        const virtualTable = contentDiv.querySelector('.e-virtualtable');
        const virtualTrack = contentDiv.querySelector('.e-virtualtrack');
        if (this.parent.enableVirtualization && !isNullOrUndefined(virtualTable) && !isNullOrUndefined(virtualTrack)) {
            remove(virtualTable);
            remove(virtualTrack);
        }
        contentDiv.appendChild(this.createContentTable('_content_table'));
        this.setTable(contentDiv.querySelector('.' + table));
        this.ariaService.setOptions(this.getTable(), {
            multiselectable: this.parent.selectionSettings.type === 'Multiple'
        });
        this.initializeContentDrop();
        if (this.parent.frozenRows) {
            this.parent.getHeaderContent().classList.add('e-frozenhdrcont');
        }
    }
    /**
     * The function is used to create content table elements
     *
     * @param {string} id - specifies the id
     * @returns {Element} returns the element
     * @hidden
     */
    createContentTable(id) {
        const innerDiv = this.getPanel().firstElementChild;
        if (this.getTable()) {
            remove(this.getTable());
        }
        const table$$1 = innerDiv.querySelector('.' + table) ? innerDiv.querySelector('.' + table) :
            this.parent.createElement('table', {
                className: table, attrs: {
                    cellspacing: '0.25px', role: 'grid',
                    id: this.parent.element.id + id
                }
            });
        this.setColGroup(this.parent.getHeaderTable().querySelector(colGroup).cloneNode(true));
        table$$1.appendChild(this.getColGroup());
        table$$1.appendChild(this.parent.createElement(tbody, { attrs: { role: 'rowgroup' } }));
        innerDiv.appendChild(table$$1);
        return innerDiv;
    }
    /**
     * Refresh the content of the Grid.
     *
     * @param {NotifyArgs} args - specifies the args
     * @returns {void}
     */
    // tslint:disable-next-line:max-func-body-length
    refreshContentRows(args = {}) {
        const gObj = this.parent;
        if (gObj.currentViewData.length === 0) {
            return;
        }
        const dataSource = this.currentMovableRows || gObj.currentViewData;
        const contentModule = this.parent.contentModule;
        const isReact = gObj.isReact && !isNullOrUndefined(gObj.rowTemplate);
        let frag = isReact ? gObj.createElement(tbody, { attrs: { role: 'rowgroup' } }) : document.createDocumentFragment();
        if (!this.initialPageRecords) {
            this.initialPageRecords = extend([], dataSource);
        }
        const hdrfrag = isReact ? gObj.createElement(tbody, { attrs: { role: 'rowgroup' } }) : document.createDocumentFragment();
        const columns = gObj.getColumns();
        let tr;
        let hdrTbody;
        const frzCols = gObj.getFrozenColumns();
        const isFrozenGrid = this.parent.isFrozenGrid();
        let trElement;
        const row$$1 = new RowRenderer(this.serviceLocator, null, this.parent);
        const isInfiniteScroll = this.parent.enableInfiniteScrolling
            && args.requestType === 'infiniteScroll';
        gObj.notify(destroyChildGrid, {});
        this.rowElements = [];
        this.rows = [];
        const fCont = this.getPanel().querySelector('.' + frozenContent);
        const mCont = this.getPanel().querySelector('.' + movableContent);
        const cont = this.getPanel().querySelector('.' + content);
        let tbdy;
        let tableName;
        if (isGroupAdaptive(gObj)) {
            if (['sorting', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder']
                .some((value) => { return args.requestType === value; })) {
                this.emptyVcRows();
            }
        }
        let modelData;
        if (this.parent.enableVirtualization && this.parent.isFrozenGrid()) {
            if (this.parent.enableColumnVirtualization && args.requestType === 'virtualscroll'
                && args.virtualInfo.sentinelInfo.axis === 'X') {
                modelData = this.parent.contentModule.generateRows(dataSource, args);
                args.renderMovableContent = true;
            }
            modelData = this.parent.contentModule.generateRows(dataSource, args);
        }
        else {
            modelData = this.checkCache(modelData, args);
            if (!this.isAddRows && !this.useGroupCache) {
                modelData = this.generator.generateRows(dataSource, args);
            }
        }
        this.setGroupCache(modelData, args);
        this.parent.notify(setInfiniteCache, { isInfiniteScroll: isInfiniteScroll, modelData: modelData, args: args });
        const idx = modelData[0].cells[0].index;
        if (isFrozenGrid) {
            tableName = contentModule.setTbody(modelData, args);
            tbdy = contentModule.getTbody(tableName);
        }
        const isFrozenLeft = this.parent.getFrozenMode() === leftRight && tableName === frozenRight;
        /* eslint-disable */
        if (args.requestType !== 'infiniteScroll' && this.parent.registeredTemplate
            && this.parent.registeredTemplate.template && !args.isFrozen && !isFrozenLeft) {
            const templatetoclear = [];
            for (let i = 0; i < this.parent.registeredTemplate.template.length; i++) {
                for (let j = 0; j < this.parent.registeredTemplate.template[i].rootNodes.length; j++) {
                    if (isNullOrUndefined(this.parent.registeredTemplate.template[i].rootNodes[j].parentNode)) {
                        templatetoclear.push(this.parent.registeredTemplate.template[i]);
                        /* eslint-enable */
                    }
                }
            }
            this.parent.destroyTemplate(['template'], templatetoclear);
        }
        if ((this.parent.isReact || this.parent.isVue) && args.requestType !== 'infiniteScroll' && !args.isFrozen) {
            const templates = [
                this.parent.isVue ? 'template' : 'columnTemplate', 'rowTemplate', 'detailTemplate',
                'captionTemplate', 'commandsTemplate', 'groupFooterTemplate', 'groupCaptionTemplate'
            ];
            clearReactVueTemplates(this.parent, templates);
        }
        if (this.parent.enableColumnVirtualization) {
            const cellMerge = new CellMergeRender(this.serviceLocator, this.parent);
            cellMerge.updateVirtualCells(modelData);
        }
        if (!isFrozenGrid) {
            this.tbody = this.getTable().querySelector(tbody);
        }
        let startIndex = 0;
        let blockLoad = true;
        if (isGroupAdaptive(gObj) && gObj.vcRows.length) {
            const top = 'top';
            const scrollTop = !isNullOrUndefined(args.virtualInfo.offsets) ? args.virtualInfo.offsets.top :
                (!isNullOrUndefined(args.scrollTop) ? args.scrollTop[top] : 0);
            if (scrollTop !== 0) {
                const offsets = gObj.vGroupOffsets;
                const bSize = gObj.pageSettings.pageSize / 2;
                const values = Object.keys(offsets).map((key) => offsets[key]);
                for (let m = 0; m < values.length; m++) {
                    if (scrollTop < values[m]) {
                        if (!isNullOrUndefined(args.virtualInfo) && args.virtualInfo.direction === 'up') {
                            startIndex = m > 0 ? ((m - 1) * bSize) : (m * bSize);
                            break;
                        }
                        else {
                            startIndex = m * bSize;
                            if (this.parent.contentModule.isEndBlock(m) || this.parent.contentModule.isEndBlock(m + 1)) {
                                args.virtualInfo.blockIndexes = [m, m + 1];
                            }
                            break;
                        }
                    }
                }
                if (Math.round(scrollTop + this.contentPanel.firstElementChild.offsetHeight) >=
                    this.contentPanel.firstElementChild.scrollHeight && !args.rowObject) {
                    blockLoad = false;
                }
            }
        }
        const isVFFrozenOnly = gObj.frozenRows && !gObj.isFrozenGrid() && this.parent.enableVirtualization
            && args.requestType === 'reorder';
        if ((gObj.frozenRows && args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo.axis === 'X') || isVFFrozenOnly) {
            const bIndex = args.virtualInfo.blockIndexes;
            const page = args.virtualInfo.page;
            args.virtualInfo.blockIndexes = [1, 2];
            if (isVFFrozenOnly) {
                args.virtualInfo.page = 1;
            }
            const data = isVFFrozenOnly ? this.initialPageRecords : dataSource;
            const mhdrData = this.vgenerator
                .generateRows(data, args);
            mhdrData.splice(this.parent.frozenRows);
            for (let i = 0; i < this.parent.frozenRows; i++) {
                mhdrData[i].cells.splice(0, this.parent.getFrozenColumns());
                tr = row$$1.render(mhdrData[i], columns);
                hdrfrag.appendChild(tr);
            }
            args.virtualInfo.blockIndexes = bIndex;
            args.virtualInfo.page = page;
            if (isVFFrozenOnly && args.virtualInfo.page === 1) {
                modelData.splice(0, this.parent.frozenRows);
            }
        }
        this.virtualFrozenHdrRefresh(hdrfrag, modelData, row$$1, args, dataSource, columns);
        for (let i = startIndex, len = modelData.length; i < len; i++) {
            this.rows.push(modelData[i]);
            if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {
                this.setRowsInLazyGroup(modelData[i], i);
                if (isNullOrUndefined(modelData[i].indent)) {
                    continue;
                }
            }
            this.setInfiniteVisibleRows(args, modelData[i], tableName);
            if (isGroupAdaptive(gObj) && args.virtualInfo && args.virtualInfo.blockIndexes
                && (this.rowElements.length >= (args.virtualInfo.blockIndexes.length * this.parent.contentModule.getBlockSize()))
                && blockLoad) {
                this.parent.currentViewData['records'] = this.rows.map((m) => m.data);
                break;
            }
            if (!gObj.rowTemplate) {
                tr = row$$1.render(modelData[i], columns);
                const isVFreorder = this.ensureFrozenHeaderRender(args);
                if (gObj.frozenRows && i < gObj.frozenRows && !isInfiniteScroll && args.requestType !== 'virtualscroll' && isVFreorder
                    && this.ensureVirtualFrozenHeaderRender(args)) {
                    hdrfrag.appendChild(tr);
                }
                else {
                    frag.appendChild(tr);
                }
                if (modelData[i].isExpand) {
                    gObj.notify(expandChildGrid, tr.cells[gObj.groupSettings.columns.length]);
                }
            }
            else {
                const rowTemplateID = gObj.element.id + 'rowTemplate';
                let elements;
                if (gObj.isReact) {
                    const isHeader = gObj.frozenRows && i < gObj.frozenRows;
                    const copied = extend({ index: i }, dataSource[i]);
                    gObj.getRowTemplate()(copied, gObj, 'rowTemplate', rowTemplateID, null, null, isHeader ? hdrfrag : frag);
                    gObj.renderTemplates();
                }
                else {
                    elements = gObj.getRowTemplate()(extend({ index: i }, dataSource[i]), gObj, 'rowTemplate', rowTemplateID, undefined, undefined, undefined, this.parent['root']);
                }
                if (!gObj.isReact && elements[0].tagName === 'TBODY') {
                    for (let j = 0; j < elements.length; j++) {
                        const isTR = elements[j].nodeName.toLowerCase() === 'tr';
                        if (isTR || (elements[j].querySelectorAll && elements[j].querySelectorAll('tr').length)) {
                            tr = isTR ? elements[j] : elements[j].querySelector('tr');
                        }
                    }
                    if (gObj.frozenRows && i < gObj.frozenRows) {
                        hdrfrag.appendChild(tr);
                    }
                    else {
                        frag.appendChild(tr);
                    }
                }
                else {
                    if (gObj.frozenRows && i < gObj.frozenRows) {
                        tr = !gObj.isReact ? appendChildren(hdrfrag, elements) : hdrfrag.lastElementChild;
                    }
                    else {
                        // frag.appendChild(tr);
                        if (!gObj.isReact) {
                            tr = appendChildren(frag, elements);
                        }
                        trElement = gObj.isReact ? frag.lastElementChild : tr.lastElementChild;
                    }
                }
                const arg = { data: modelData[i].data, row: trElement ? trElement : tr };
                this.parent.trigger(rowDataBound, arg);
            }
            if (modelData[i].isDataRow) {
                this.rowElements.push(tr);
            }
            this.ariaService.setOptions(this.getTable(), { colcount: gObj.getColumns().length.toString() });
        }
        if (isFrozenGrid) {
            contentModule.splitRows(tableName);
        }
        if ((gObj.frozenRows && args.requestType !== 'virtualscroll' && !isInfiniteScroll && this.ensureVirtualFrozenHeaderRender(args))
            || (args.requestType === 'virtualscroll' && args.virtualInfo.sentinelInfo && args.virtualInfo.sentinelInfo.axis === 'X')) {
            hdrTbody = isFrozenGrid ? contentModule.getFrozenHeader(tableName) : gObj.getHeaderTable().querySelector(tbody);
            if (isReact) {
                const parentTable = hdrTbody.parentElement;
                remove(hdrTbody);
                parentTable.appendChild(hdrfrag);
            }
            else {
                hdrTbody.innerHTML = '';
                hdrTbody.appendChild(hdrfrag);
            }
        }
        if (!gObj.enableVirtualization && gObj.frozenRows && idx === 0 && cont.offsetHeight === Number(gObj.height)) {
            cont.style.height = (cont.offsetHeight - hdrTbody.offsetHeight) + 'px';
        }
        args.rows = this.rows.slice(0);
        if (isFrozenGrid) {
            contentModule.setIsFrozen(args, tableName);
        }
        this.index = idx;
        getUpdateUsingRaf(() => {
            this.parent.notify(beforeFragAppend, args);
            const isVFTable = this.parent.enableVirtualization && this.parent.isFrozenGrid();
            if (!this.parent.enableVirtualization && !isInfiniteScroll) {
                if (this.parent.isFrozenGrid()) {
                    remove(contentModule.getTbody(tableName));
                    tbdy = this.parent.createElement(tbody, { attrs: { role: 'rowgroup' } });
                }
                else {
                    this.tbody.innerHTML = '';
                    remove(this.tbody);
                    this.tbody = this.parent.createElement(tbody, { attrs: { role: 'rowgroup' } });
                }
            }
            if (isFrozenGrid && !isVFTable && !this.parent.enableInfiniteScrolling) {
                this.appendContent(tbdy, frag, args, tableName);
            }
            else {
                if (gObj.rowTemplate) {
                    updateBlazorTemplate(gObj.element.id + 'rowTemplate', 'RowTemplate', gObj);
                }
                if (isVFTable) {
                    if (args.renderFrozenRightContent) {
                        const frCont = gObj.getContent().querySelector('.e-frozen-right-content').querySelector(tbody);
                        this.appendContent(frCont, frag, args);
                    }
                    else if (!args.renderMovableContent) {
                        this.appendContent(fCont.querySelector(tbody), frag, args);
                    }
                    else {
                        this.appendContent(mCont.querySelector(tbody), frag, args);
                        args.renderMovableContent = false;
                    }
                    if (!this.parent.getFrozenColumns()) {
                        contentModule.renderNextFrozentPart(args, tableName);
                    }
                }
                else {
                    if (!isNullOrUndefined(this.parent.infiniteScrollModule) && this.parent.enableInfiniteScrolling) {
                        this.isAddRows = false;
                        this.parent.notify(removeInfiniteRows, { args: args });
                        this.parent.notify(appendInfiniteContent, {
                            tbody: tbdy ? tbdy : this.tbody, frag: frag, args: args, rows: this.rows,
                            rowElements: this.rowElements, visibleRows: this.visibleRows,
                            tableName: tableName
                        });
                        if (!frzCols && isFrozenGrid) {
                            if ((gObj.getFrozenMode() !== leftRight
                                && (tableName === frozenLeft || tableName === frozenRight))
                                || (gObj.getFrozenMode() === leftRight
                                    && (tableName === frozenLeft || tableName === 'movable'))) {
                                this.refreshContentRows(extend({}, args));
                            }
                        }
                    }
                    else {
                        this.useGroupCache = false;
                        this.appendContent(this.tbody, frag, args);
                    }
                }
            }
            if (frzCols) {
                contentModule.renderNextFrozentPart(args, tableName);
            }
            frag = null;
        }, this.rafCallback(extend({}, args)));
    }
    emptyVcRows() {
        this.parent.vcRows = [];
        this.parent.vRows = [];
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    appendContent(tbody$$1, frag, args, tableName) {
        const isReact = this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate);
        if (isReact) {
            this.getTable().appendChild(frag);
        }
        else {
            tbody$$1.appendChild(frag);
            this.getTable().appendChild(tbody$$1);
        }
    }
    setRowsInLazyGroup(row$$1, index) {
        if (this.parent.groupSettings.enableLazyLoading && !this.useGroupCache && this.parent.groupSettings.columns.length) {
            this.parent.contentModule.maintainRows(row$$1, index);
        }
    }
    setGroupCache(data, args) {
        if (!this.useGroupCache && this.parent.groupSettings.enableLazyLoading) {
            this.parent.notify(setGroupCache, { args: args, data: data });
        }
    }
    ensureFrozenHeaderRender(args) {
        return !((this.parent.enableVirtualization
            && (args.requestType === 'reorder' || args.requestType === 'refresh')) || (this.parent.infiniteScrollSettings.enableCache
            && this.parent.frozenRows && this.parent.infiniteScrollModule.requestType === 'delete'
            && this.parent.pageSettings.currentPage !== 1));
    }
    ensureVirtualFrozenHeaderRender(args) {
        return !(this.parent.enableVirtualization && args.requestType === 'delete');
    }
    checkCache(modelData, args) {
        if (this.parent.infiniteScrollSettings.enableCache && args.requestType === 'infiniteScroll') {
            const index = args.isFrozen ? 1 : 0;
            const frozenCols = this.parent.isFrozenGrid();
            this.isAddRows = !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage]);
            if (frozenCols && !isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {
                this.isAddRows = this.infiniteCache[this.parent.pageSettings.currentPage][index].length !== 0;
            }
            if (this.isAddRows) {
                const data = !frozenCols ? this.infiniteCache[this.parent.pageSettings.currentPage]
                    : this.infiniteCache[this.parent.pageSettings.currentPage][index];
                modelData = this.parent.pageSettings.currentPage === 1 ? data.slice(this.parent.frozenRows) : data;
            }
            return modelData;
        }
        if (this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length &&
            (args.requestType === 'paging' || args.requestType === 'columnstate' || args.requestType === 'reorder')
            && this.parent.contentModule.getGroupCache()[this.parent.pageSettings.currentPage]) {
            this.useGroupCache = true;
            return this.parent.contentModule.initialGroupRows(args.requestType === 'reorder');
        }
        return null;
    }
    setInfiniteVisibleRows(args, data, tableName) {
        const frozenCols = this.parent.isFrozenGrid();
        if (this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache) {
            if (frozenCols) {
                if (tableName === frozenLeft || (this.parent.getFrozenMode() === 'Right' && tableName === frozenRight)) {
                    this.visibleFrozenRows.push(data);
                }
                else if (tableName === 'movable') {
                    this.visibleRows.push(data);
                }
                else {
                    this.rightFreezeRows.push(data);
                }
            }
            else if (!this.parent.infiniteScrollSettings.enableCache) {
                this.visibleRows.push(data);
            }
        }
    }
    getCurrentBlockInfiniteRecords(isFreeze) {
        let data = [];
        if (this.parent.infiniteScrollSettings.enableCache) {
            if (!Object.keys(this.infiniteCache).length) {
                return [];
            }
            const frozenCols = this.parent.isFrozenGrid();
            const rows = this.parent.getRows();
            let index = parseInt(rows[this.parent.frozenRows].getAttribute(ariaRowIndex), 10);
            const first = Math.ceil((index + 1) / this.parent.pageSettings.pageSize);
            index = parseInt(rows[rows.length - 1].getAttribute(ariaRowIndex), 10);
            const last = Math.ceil(index / this.parent.pageSettings.pageSize);
            if (frozenCols) {
                const idx = isFreeze ? 0 : 1;
                for (let i = first; i <= last; i++) {
                    data = !data.length ? this.infiniteCache[i][idx]
                        : data.concat(this.infiniteCache[i][idx]);
                }
                if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {
                    data = this.infiniteCache[1][idx].slice(0, this.parent.frozenRows).concat(data);
                }
            }
            else {
                for (let i = first; i <= last; i++) {
                    data = !data.length ? this.infiniteCache[i] : data.concat(this.infiniteCache[i]);
                }
                if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {
                    data = this.infiniteCache[1].slice(0, this.parent.frozenRows).concat(data);
                }
            }
        }
        return data;
    }
    getReorderedVFRows(args) {
        return this.parent.contentModule.getReorderedFrozenRows(args);
    }
    getReorderedRows(args) {
        return this.parent.contentModule.getReorderedFrozenRows(args);
    }
    virtualFrozenHdrRefresh(hdrfrag, modelData, row$$1, args, dataSource, columns) {
        if (this.parent.frozenRows && this.parent.enableVirtualization
            && (args.requestType === 'reorder' || args.requestType === 'refresh')) {
            let tr;
            let fhdrData = [];
            if (this.parent.isFrozenGrid()) {
                this.currentMovableRows = dataSource;
                fhdrData = this.getReorderedVFRows(args);
            }
            else {
                fhdrData = this.getReorderedRows(args);
            }
            for (let i = 0; i < fhdrData.length; i++) {
                tr = row$$1.render(fhdrData[i], columns);
                hdrfrag.appendChild(tr);
            }
            if (args.virtualInfo.page === 1) {
                modelData.splice(0, this.parent.frozenRows);
            }
            if (args.renderMovableContent) {
                this.parent.currentViewData = this.currentMovableRows;
                this.currentMovableRows = null;
            }
        }
    }
    getInfiniteRows() {
        let rows = [];
        const frozenCols = this.parent.isFrozenGrid();
        if (this.parent.enableInfiniteScrolling) {
            if (this.parent.infiniteScrollSettings.enableCache) {
                const keys = Object.keys(this.infiniteCache);
                for (let i = 0; i < keys.length; i++) {
                    rows = !frozenCols ? [...rows, ...this.infiniteCache[keys[i]]] : [...rows, ...this.infiniteCache[keys[i]][0]];
                }
            }
            else {
                rows = frozenCols ? this.visibleFrozenRows : this.visibleRows;
            }
        }
        return rows;
    }
    getInfiniteMovableRows() {
        const infiniteCacheRows = this.getCurrentBlockInfiniteRecords();
        const infiniteRows = this.parent.enableInfiniteScrolling ? infiniteCacheRows.length ? infiniteCacheRows
            : this.visibleRows : [];
        return infiniteRows;
    }
    /**
     * Get the content div element of grid
     *
     * @returns {Element} returns the element
     */
    getPanel() {
        return this.contentPanel;
    }
    /**
     * Set the content div element of grid
     *
     * @param  {Element} panel - specifies the panel
     * @returns {void}
     */
    setPanel(panel) {
        this.contentPanel = panel;
    }
    /**
     * Get the content table element of grid
     *
     * @returns {Element} returns the element
     */
    getTable() {
        return this.contentTable;
    }
    /**
     * Set the content table element of grid
     *
     * @param  {Element} table - specifies the table
     * @returns {void}
     */
    setTable(table$$1) {
        this.contentTable = table$$1;
    }
    /**
     * Get the Movable Row collection in the Freeze pane Grid.
     *
     * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row
     */
    getRows() {
        const infiniteRows = this.getInfiniteRows();
        return infiniteRows.length ? infiniteRows : this.parent.getFrozenColumns() ? this.freezeRows : this.rows;
    }
    /**
     * Get the Movable Row collection in the Freeze pane Grid.
     *
     * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row
     */
    getMovableRows() {
        const infiniteRows = this.getInfiniteMovableRows();
        return infiniteRows.length ? infiniteRows : this.movableRows;
    }
    /**
     * Get the content table data row elements
     *
     * @returns {Element} returns the element
     */
    getRowElements() {
        return this.parent.getFrozenColumns() ? this.freezeRowElements : this.rowElements;
    }
    /**
     * Get the Freeze pane movable content table data row elements
     *
     * @returns {Element} returns the element
     */
    getMovableRowElements() {
        return this.rowElements;
    }
    /**
     * Get the content table data row elements
     *
     * @param {Element[]} elements - specifies the elements
     * @returns {void}
     */
    setRowElements(elements) {
        this.rowElements = elements;
    }
    /**
     * Get the header colgroup element
     *
     * @returns {Element} returns the element
     */
    getColGroup() {
        return this.colgroup;
    }
    /**
     * Set the header colgroup element
     *
     * @param {Element} colGroup - specifies the colgroup
     * @returns {Element} returns the element
     */
    setColGroup(colGroup$$1) {
        if (!isNullOrUndefined(colGroup$$1)) {
            colGroup$$1.id = 'content-' + colGroup$$1.id;
        }
        return this.colgroup = colGroup$$1;
    }
    /**
     * Function to hide content table column based on visible property
     *
     * @param {Column[]} columns - specifies the column
     * @returns {void}
     */
    setVisible(columns) {
        const gObj = this.parent;
        const isFrozenGrid = this.parent.isFrozenGrid();
        const frzCols = gObj.getFrozenColumns();
        let rows = [];
        if (isFrozenGrid) {
            const fRows = this.freezeRows;
            const mRows = this.movableRows;
            const rowLen = fRows.length;
            let cellLen;
            let rightRows = [];
            if (gObj.getFrozenMode() === leftRight) {
                rightRows = gObj.getFrozenRightRowsObject();
            }
            for (let i = 0, row$$1; i < rowLen; i++) {
                cellLen = mRows[i].cells.length;
                const rightLen = rightRows.length ? rightRows[i].cells.length : 0;
                row$$1 = fRows[i].clone();
                for (let j = 0; j < cellLen; j++) {
                    row$$1.cells.push(mRows[i].cells[j]);
                }
                for (let k = 0; k < rightLen; k++) {
                    row$$1.cells.push(rightRows[i].cells[k]);
                }
                rows.push(row$$1);
            }
        }
        else {
            rows = this.getRows();
        }
        let testRow;
        rows.some((r) => { if (r.isDataRow) {
            testRow = r;
        } return r.isDataRow; });
        let needFullRefresh = true;
        if (!gObj.groupSettings.columns.length && testRow) {
            needFullRefresh = false;
        }
        let tr = gObj.getDataRows();
        const args = {};
        const infiniteData = this.infiniteRowVisibility();
        let contentrows = infiniteData ? infiniteData
            : this.rows.filter((row$$1) => !row$$1.isDetailRow);
        for (let c = 0, clen = columns.length; c < clen; c++) {
            const column = columns[c];
            let idx = this.parent.getNormalizedColumnIndex(column.uid);
            let colIdx = this.parent.getColumnIndexByUid(column.uid);
            const displayVal = column.visible === true ? '' : 'none';
            if (idx !== -1 && testRow && idx < testRow.cells.length) {
                if (isFrozenGrid) {
                    if (column.getFreezeTableName() !== 'movable') {
                        if (column.getFreezeTableName() === frozenRight) {
                            const left = this.parent.getFrozenLeftColumnsCount();
                            const movable = this.parent.getMovableColumnsCount();
                            colIdx = idx = idx - (left + movable);
                            const colG = this.parent.getContent().querySelector('.e-frozen-right-content').querySelector(colGroup);
                            setStyleAttribute(colG.childNodes[idx], { 'display': displayVal });
                            contentrows = gObj.getFrozenRightRowsObject();
                            tr = gObj.getFrozenRightDataRows();
                        }
                        else {
                            setStyleAttribute(this.getColGroup().childNodes[idx], { 'display': displayVal });
                            const infiniteFreezeData = this.infiniteRowVisibility(true);
                            contentrows = infiniteFreezeData ? infiniteFreezeData : this.freezeRows;
                            tr = gObj.getDataRows();
                        }
                    }
                    else {
                        const mTable = gObj.getContent().querySelector('.' + movableContent).querySelector(colGroup);
                        colIdx = idx = idx - frzCols - this.parent.getFrozenLeftColumnsCount();
                        setStyleAttribute(mTable.childNodes[idx], { 'display': displayVal });
                        tr = gObj.getMovableDataRows();
                        const infiniteMovableData = this.infiniteRowVisibility();
                        contentrows = infiniteMovableData ? infiniteMovableData : this.movableRows;
                    }
                }
                else {
                    setStyleAttribute(this.getColGroup().childNodes[idx], { 'display': displayVal });
                }
            }
            if (!needFullRefresh) {
                this.setDisplayNone(tr, colIdx, displayVal, contentrows);
                if (isFrozenGrid) {
                    this.parent.notify(freezeRender, { case: 'refreshHeight', isModeChg: true });
                }
            }
            if (!this.parent.invokedFromMedia && column.hideAtMedia) {
                this.parent.updateMediaColumns(column);
            }
            this.parent.invokedFromMedia = false;
        }
        if (needFullRefresh) {
            this.refreshContentRows({ requestType: 'refresh' });
        }
        else {
            if (!this.parent.getFrozenColumns()) {
                this.parent.notify(partialRefresh, { rows: contentrows, args: args });
            }
            else {
                this.parent.notify(partialRefresh, { rows: this.freezeRows, args: { isFrozen: true, rows: this.freezeRows } });
                this.parent.notify(partialRefresh, { rows: this.movableRows, args: { isFrozen: false, rows: this.movableRows } });
            }
        }
    }
    /**
     * @param {Object} tr - specifies the trr
     * @param {number} idx - specifies the idx
     * @param {string} displayVal - specifies the displayval
     * @param {Row<Column>} rows - specifies the rows
     * @returns {void}
     * @hidden
     */
    setDisplayNone(tr, idx, displayVal, rows) {
        setDisplayValue(tr, idx, displayVal, rows, this.parent, this.parent.isRowDragable());
        this.parent.notify(infiniteShowHide, { visible: displayVal, index: idx, isFreeze: this.isInfiniteFreeze });
    }
    infiniteRowVisibility(isFreeze) {
        let infiniteData;
        if (this.parent.enableInfiniteScrolling) {
            this.isInfiniteFreeze = isFreeze;
            if (this.parent.infiniteScrollSettings.enableCache) {
                infiniteData = isFreeze ? this.getCurrentBlockInfiniteRecords(true) : this.getCurrentBlockInfiniteRecords();
            }
            else {
                infiniteData = isFreeze ? this.visibleFrozenRows : this.visibleRows;
            }
        }
        return infiniteData;
    }
    colGroupRefresh() {
        if (this.getColGroup()) {
            let colGroup$$1;
            if (this.parent.enableColumnVirtualization && this.parent.getFrozenColumns()
                && this.parent.contentModule.isXaxis()) {
                colGroup$$1 = this.parent.getMovableVirtualHeader().querySelector(colGroup).cloneNode(true);
            }
            else {
                colGroup$$1 = this.getHeaderColGroup();
            }
            this.getTable().replaceChild(colGroup$$1, this.getColGroup());
            this.setColGroup(colGroup$$1);
        }
    }
    getHeaderColGroup() {
        return this.parent.element.querySelector('.' + gridHeader).querySelector(colGroup).cloneNode(true);
    }
    initializeContentDrop() {
        const gObj = this.parent;
        this.droppable = new Droppable(gObj.element, {
            accept: '.e-dragclone',
            drop: this.drop
        });
    }
    droppableDestroy() {
        if (this.droppable && !this.droppable.isDestroyed) {
            this.droppable.destroy();
        }
    }
    canSkip(column, row$$1, index) {
        /**
         * Skip the toggle visiblity operation when one of the following success
         * 1. Grid has empty records
         * 2. column visible property is unchanged
         * 3. cell`s isVisible property is same as column`s visible property.
         */
        return isNullOrUndefined(row$$1) || //(1)
            isNullOrUndefined(column.visible) || //(2)
            row$$1.cells[index].visible === column.visible; //(3)
    }
    getModelGenerator() {
        return this.generator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);
    }
    renderEmpty(tbody$$1) {
        this.getTable().appendChild(tbody$$1);
        if (this.parent.frozenRows) {
            this.parent.getHeaderContent().querySelector(tbody).innerHTML = '';
        }
    }
    setSelection(uid, set, clearAll) {
        this.parent.notify(setFreezeSelection, { uid: uid, set: set, clearAll: clearAll });
        const isFrozen = this.parent.isFrozenGrid();
        if (isFrozen && this.parent.enableVirtualization) {
            return;
        }
        if (isFrozen) {
            const rows = this.getMovableRows().filter((row$$1) => clearAll || uid === row$$1.uid);
            for (let i = 0; i < rows.length; i++) {
                rows[i].isSelected = set;
            }
        }
        const row$$1 = this.getRows().filter((row$$1) => clearAll || uid === row$$1.uid);
        for (let j = 0; j < row$$1.length; j++) {
            row$$1[j].isSelected = set;
            const cells = row$$1[j].cells;
            for (let k = 0; k < cells.length; k++) {
                cells[k].isSelected = set;
            }
        }
    }
    getRowByIndex(index) {
        index = this.getInfiniteRowIndex(index);
        return this.parent.getDataRows()[index];
    }
    getInfiniteRowIndex(index) {
        if (this.parent.infiniteScrollSettings.enableCache) {
            const fRows = this.parent.frozenRows;
            const idx = fRows > index ? 0 : fRows;
            const firstRowIndex = parseInt(this.parent.getRows()[idx].getAttribute(ariaRowIndex), 10);
            index = fRows > index ? index : (index - firstRowIndex) + fRows;
        }
        return index;
    }
    getVirtualRowIndex(index) {
        return index;
    }
    getMovableRowByIndex(index) {
        index = this.getInfiniteRowIndex(index);
        return this.parent.getMovableDataRows()[index];
    }
    enableAfterRender(e) {
        if (e.module === 'group' && e.enable) {
            this.generator = this.getModelGenerator();
        }
    }
    setRowObjects(rows) {
        this.rows = rows;
    }
    /**
     * @param {NotifyArgs} args - specifies the args
     * @returns {void}
     * @hidden
     */
    immutableModeRendering(args = {}) {
        const gObj = this.parent;
        gObj.hideSpinner();
        const key = gObj.getPrimaryKeyFieldNames()[0];
        const oldKeys = {};
        const newKeys = {};
        const newRowObjs = [];
        const oldIndexes = {};
        const oldRowObjs = gObj.getRowsObject().slice();
        const batchChangeKeys = this.getBatchEditedRecords(key, oldRowObjs);
        const newIndexes = {};
        const hasBatch = Object.keys(batchChangeKeys).length !== 0;
        if (gObj.getContent().querySelector('.e-emptyrow') || args.requestType === 'reorder'
            || this.parent.groupSettings.columns.length) {
            this.refreshContentRows(args);
        }
        else {
            if (gObj.currentViewData.length === 0) {
                return;
            }
            const oldRowElements = {};
            const tbody$$1 = gObj.createElement(tbody, { attrs: { role: 'rowgroup' } });
            const dataSource = gObj.currentViewData;
            const trs = [].slice.call(this.getTable().querySelector(tbody).children);
            if (this.prevCurrentView.length) {
                const prevLen = this.prevCurrentView.length;
                const currentLen = dataSource.length;
                if (prevLen === currentLen) {
                    for (let i = 0; i < currentLen; i++) {
                        if (this.parent.editSettings.mode === 'Batch'
                            && trs[i].classList.contains('e-insertedrow')) {
                            trs.splice(i, 1);
                            --i;
                            continue;
                        }
                        newKeys[dataSource[i][key]] = oldKeys[this.prevCurrentView[i][key]] = i;
                        newIndexes[i] = dataSource[i][key];
                        oldRowElements[oldRowObjs[i].uid] = trs[i];
                        oldIndexes[i] = this.prevCurrentView[i][key];
                    }
                }
                else {
                    for (let i = 0; i < currentLen; i++) {
                        newKeys[dataSource[i][key]] = i;
                        newIndexes[i] = dataSource[i][key];
                    }
                    for (let i = 0; i < prevLen; i++) {
                        if (this.parent.editSettings.mode === 'Batch'
                            && trs[i].classList.contains('e-insertedrow')) {
                            trs.splice(i, 1);
                            --i;
                            continue;
                        }
                        oldRowElements[oldRowObjs[i].uid] = trs[i];
                        oldKeys[this.prevCurrentView[i][key]] = i;
                        oldIndexes[i] = this.prevCurrentView[i][key];
                    }
                }
            }
            for (let i = 0; i < dataSource.length; i++) {
                const oldIndex = oldKeys[dataSource[i][key]];
                if (!isNullOrUndefined(oldIndex)) {
                    let isEqual = false;
                    if (this.parent.enableDeepCompare) {
                        isEqual = this.objectEqualityChecker(this.prevCurrentView[oldIndex], dataSource[i]);
                    }
                    const tr = oldRowElements[oldRowObjs[oldIndex].uid];
                    newRowObjs.push(oldRowObjs[oldIndex]);
                    if (this.rowElements[oldIndex] && this.rowElements[oldIndex].getAttribute('data-uid') === newRowObjs[i].uid
                        && ((hasBatch && isNullOrUndefined(batchChangeKeys[newIndexes[i]]))
                            || (!hasBatch && (isEqual || this.prevCurrentView[oldIndex] === dataSource[i])))) {
                        if (oldIndex !== i) {
                            this.refreshImmutableContent(i, tr, newRowObjs[i]);
                        }
                        tbody$$1.appendChild(tr);
                        continue;
                    }
                    if ((hasBatch && !isNullOrUndefined(batchChangeKeys[newIndexes[i]]))
                        || (!this.parent.enableDeepCompare && dataSource[i] !== this.prevCurrentView[oldIndex])
                        || (this.parent.enableDeepCompare && !isEqual)) {
                        oldRowObjs[oldIndex].setRowValue(dataSource[i]);
                    }
                    tbody$$1.appendChild(tr);
                    this.refreshImmutableContent(i, tr, newRowObjs[i]);
                }
                else {
                    const row$$1 = new RowRenderer(this.serviceLocator, null, gObj);
                    const modelData = this.generator.generateRows([dataSource[i]]);
                    newRowObjs.push(modelData[0]);
                    const tr = row$$1.render(modelData[0], gObj.getColumns());
                    tbody$$1.appendChild(tr);
                    this.refreshImmutableContent(i, tr, newRowObjs[i]);
                }
            }
            this.rows = newRowObjs;
            this.rowElements = [].slice.call(tbody$$1.children);
            remove(this.getTable().querySelector(tbody));
            this.getTable().appendChild(tbody$$1);
            this.parent.trigger(dataBound, {}, () => {
                if (this.parent.allowTextWrap) {
                    this.parent.notify(freezeRender, { case: 'textwrap' });
                }
            });
            if (args) {
                const action = (args.requestType || '').toLowerCase() + '-complete';
                this.parent.notify(action, args);
            }
        }
    }
    objectEqualityChecker(old, next) {
        const keys = Object.keys(old);
        let isEqual = true;
        for (let i = 0; i < keys.length; i++) {
            if (old[keys[i]] !== next[keys[i]]) {
                const isDate = old[keys[i]] instanceof Date && next[keys[i]] instanceof Date;
                if (!isDate || (old[keys[i]].getTime() !== next[keys[i]].getTime())) {
                    isEqual = false;
                    break;
                }
            }
        }
        return isEqual;
    }
    getBatchEditedRecords(primaryKey, rows) {
        const keys = {};
        const changes = this.parent.getBatchChanges();
        let changedRecords$$1 = [];
        let addedRecords$$1 = [];
        if (Object.keys(changes).length) {
            changedRecords$$1 = changes.changedRecords;
            addedRecords$$1 = changes.addedRecords;
        }
        const args = { cancel: false };
        this.parent.notify(immutableBatchCancel, { rows: rows, args: args });
        if (addedRecords$$1.length) {
            if (this.parent.editSettings.newRowPosition === 'Bottom') {
                rows.splice(rows.length - 1, addedRecords$$1.length);
            }
            else {
                if (!args.cancel) {
                    rows.splice(0, addedRecords$$1.length);
                }
            }
        }
        for (let i = 0; i < changedRecords$$1.length; i++) {
            keys[changedRecords$$1[i][primaryKey]] = i;
        }
        return keys;
    }
    refreshImmutableContent(index, tr, row$$1) {
        row$$1.isAltRow = this.parent.enableAltRow ? index % 2 !== 0 : false;
        if (row$$1.isAltRow) {
            tr.classList.add('e-altrow');
        }
        else {
            tr.classList.remove('e-altrow');
        }
        row$$1.index = index;
        row$$1.edit = undefined;
        row$$1.isDirty = false;
        tr.setAttribute(ariaRowIndex, index.toString());
        this.updateCellIndex(tr, index);
    }
    updateCellIndex(rowEle, index) {
        for (let i = 0; i < rowEle.cells.length; i++) {
            rowEle.cells[i].setAttribute('index', index.toString());
        }
    }
}

// eslint-disable-next-line valid-jsdoc
/**
 * Content module is used to render grid content
 *
 * @hidden
 */
class HeaderRender {
    /**
     * Constructor for header renderer module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {ServiceLocator} serviceLocator - specifies the serviceLocator
     */
    constructor(parent, serviceLocator) {
        this.frzIdx = 0;
        this.notfrzIdx = 0;
        this.isFirstCol = false;
        this.isReplaceDragEle = true;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.helper = (e) => {
            const gObj = this.parent;
            const target = this.draggable.currentStateTarget;
            const parentEle = parentsUntil(target, 'e-headercell');
            if (!(gObj.allowReordering || gObj.allowGrouping) || (!isNullOrUndefined(parentEle)
                && parentEle.getElementsByClassName('e-checkselectall').length > 0)) {
                return false;
            }
            const visualElement = this.parent.createElement('div', { className: 'e-cloneproperties e-dragclone e-headerclone' });
            const element = target.classList.contains('e-headercell') ? target : parentEle;
            if (!element || (!gObj.allowReordering && element.classList.contains('e-stackedheadercell'))) {
                return false;
            }
            const height = element.offsetHeight;
            const headercelldiv = element.querySelector('.e-headercelldiv') || element.querySelector('.e-stackedheadercelldiv');
            let col;
            if (headercelldiv) {
                if (element.querySelector('.e-stackedheadercelldiv')) {
                    col = gObj.getStackedHeaderColumnByHeaderText(headercelldiv.innerText.trim(), gObj.columns);
                }
                else {
                    col = gObj.getColumnByUid(headercelldiv.getAttribute('e-mappinguid'));
                }
                this.column = col;
                if (this.column.lockColumn) {
                    return false;
                }
                visualElement.setAttribute('e-mappinguid', this.column.uid);
            }
            if (col && !isNullOrUndefined(col.headerTemplate)) {
                if (!isNullOrUndefined(col.headerTemplate)) {
                    const colIndex = gObj.getColumnIndexByField(col.field);
                    const result = col.getHeaderTemplate()(extend({ 'index': colIndex }, col), gObj, 'headerTemplate');
                    appendChildren(visualElement, result);
                }
                else {
                    visualElement.innerHTML = col.headerTemplate;
                }
            }
            else {
                visualElement.innerHTML = headercelldiv ?
                    col.headerText : element.firstElementChild.innerHTML;
            }
            visualElement.style.width = element.offsetWidth + 'px';
            visualElement.style.height = element.offsetHeight + 'px';
            visualElement.style.lineHeight = (height - 6).toString() + 'px';
            gObj.element.appendChild(visualElement);
            return visualElement;
        };
        this.dragStart = (e) => {
            const gObj = this.parent;
            gObj.element.querySelector('.e-gridpopup').style.display = 'none';
            gObj.notify(columnDragStart, { target: this.draggable.currentStateTarget, column: this.column, event: e.event });
        };
        this.drag = (e) => {
            const gObj = this.parent;
            const target = e.target;
            if (target) {
                const closest$$1 = closest(target, '.e-grid');
                const cloneElement = this.parent.element.querySelector('.e-cloneproperties');
                if (!closest$$1 || closest$$1.getAttribute('id') !== gObj.element.getAttribute('id')) {
                    classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
                    if (gObj.allowReordering) {
                        gObj.element.querySelector('.e-reorderuparrow').style.display = 'none';
                        gObj.element.querySelector('.e-reorderdownarrow').style.display = 'none';
                    }
                    if (!gObj.groupSettings.allowReordering) {
                        return;
                    }
                }
                gObj.notify(columnDrag, { target: e.target, column: this.column, event: e.event });
            }
        };
        this.dragStop = (e) => {
            const gObj = this.parent;
            let cancel;
            gObj.element.querySelector('.e-gridpopup').style.display = 'none';
            if ((!parentsUntil(e.target, 'e-headercell') && !parentsUntil(e.target, 'e-groupdroparea')) ||
                (!gObj.allowReordering && parentsUntil(e.target, 'e-headercell')) ||
                (!e.helper.getAttribute('e-mappinguid') && parentsUntil(e.target, 'e-groupdroparea'))) {
                remove(e.helper);
                cancel = true;
            }
            gObj.notify(columnDragStop, { target: e.target, event: e.event, column: this.column, cancel: cancel });
        };
        this.drop = (e) => {
            const gObj = this.parent;
            const uid = e.droppedElement.getAttribute('e-mappinguid');
            const closest$$1 = closest(e.target, '.e-grid');
            remove(e.droppedElement);
            if (closest$$1 && closest$$1.getAttribute('id') !== gObj.element.getAttribute('id') ||
                !(gObj.allowReordering || gObj.allowGrouping)) {
                return;
            }
            gObj.notify(headerDrop, { target: e.target, uid: uid, droppedElement: e.droppedElement });
        };
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.ariaService = this.serviceLocator.getService('ariaService');
        this.widthService = this.serviceLocator.getService('widthService');
        if (this.parent.isDestroyed) {
            return;
        }
        if (!this.parent.enableColumnVirtualization
            && !this.parent.getFrozenLeftColumnsCount() && !this.parent.getFrozenRightColumnsCount()) {
            this.parent.on(columnVisibilityChanged, this.setVisible, this);
        }
        this.parent.on(columnPositionChanged, this.colPosRefresh, this);
        this.parent.on(initialEnd, this.renderCustomToolbar, this);
        if (this.parent.rowRenderingMode === 'Vertical') {
            this.parent.on(uiUpdate, this.updateCustomResponsiveToolbar, this);
        }
    }
    /**
     * The function is used to render grid header div
     *
     * @returns {void}
     */
    renderPanel() {
        let div = this.parent.element.querySelector('.' + gridHeader);
        const isRendered = (div != null);
        div = isRendered ? div : this.parent.createElement('div', { className: 'e-gridheader' });
        const innerDiv = isRendered ? div.querySelector('.' + headerContent) :
            this.parent.createElement('div', { className: headerContent });
        this.toggleStackClass(div);
        div.appendChild(innerDiv);
        this.setPanel(div);
        if (!isRendered) {
            this.parent.element.appendChild(div);
        }
    }
    /**
     * The function is used to render grid header div
     *
     * @returns {void}
     */
    renderTable() {
        const headerDiv = this.getPanel();
        headerDiv.appendChild(this.createHeaderTable());
        this.setTable(headerDiv.querySelector('.' + table));
        if (!this.parent.getFrozenColumns() && !this.parent.getFrozenRightColumnsCount() && !this.parent.getFrozenLeftColumnsCount()) {
            this.initializeHeaderDrag();
            this.initializeHeaderDrop();
        }
        this.parent.notify(headerRefreshed, { rows: this.rows, args: { isFrozen: this.parent.isFrozenGrid() } });
    }
    /**
     * Get the header content div element of grid
     *
     * @returns {Element} returns the element
     */
    getPanel() {
        return this.headerPanel;
    }
    /**
     * Set the header content div element of grid
     *
     * @param  {Element} panel - specifies the panel element
     * @returns {void}
     */
    setPanel(panel) {
        this.headerPanel = panel;
    }
    /**
     * Get the header table element of grid
     *
     * @returns {Element} returns the element
     */
    getTable() {
        return this.headerTable;
    }
    /**
     * Set the header table element of grid
     *
     * @param  {Element} table - specifies the table element
     * @returns {void}
     */
    setTable(table$$1) {
        this.headerTable = table$$1;
    }
    /**
     * Get the header colgroup element
     *
     * @returns {Element} returns the element
     */
    getColGroup() {
        return this.colgroup;
    }
    /**
     * Set the header colgroup element
     *
     * @param {Element} colGroup - specifies the colgroup
     * @returns {Element} returns the element
     */
    setColGroup(colGroup$$1) {
        return this.colgroup = colGroup$$1;
    }
    /**
     * Get the header row element collection.
     *
     * @returns {Element[]} returns the element
     */
    getRows() {
        const table$$1 = this.getTable();
        return table$$1.tHead.rows;
    }
    /**
     * The function is used to create header table elements
     *
     * @returns {Element} returns the element
     * @hidden
     */
    createHeaderTable() {
        const table$$1 = this.createTable();
        const innerDiv = this.getPanel().querySelector('.' + headerContent);
        innerDiv.appendChild(table$$1);
        return innerDiv;
    }
    /**
     * The function is used to create header table elements
     *
     * @param {Element} tableEle - specifies the table Element
     * @param {freezeTable} tableName - specifies the table name
     * @returns {Element} returns the element
     * @hidden
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    createHeader(tableEle = null, tableName) {
        const gObj = this.parent;
        const isFrozen = gObj.isFrozenGrid();
        if (this.getTable() && !isFrozen) {
            remove(this.getTable());
        }
        const table$$1 = this.parent.createElement('table', { className: table, attrs: { cellspacing: '0.25px', role: 'grid' } });
        const tblName = tableName ? tableName : gObj.getFrozenLeftCount() ? 'frozen-left' : 'frozen-right';
        const findHeaderRow = this.createHeaderContent(tblName);
        const thead = findHeaderRow.thead;
        const tbody$$1 = this.parent.createElement(tbody, { className: this.parent.frozenRows ? '' : 'e-hide', attrs: { role: 'rowgroup' } });
        this.caption = this.parent.createElement('caption', { innerHTML: this.parent.element.id + '_header_table', className: 'e-hide' });
        const colGroup$$1 = this.parent.createElement(colGroup);
        const rowBody = this.parent.createElement('tr', { attrs: { role: 'row' } });
        let bodyCell;
        const rows = this.rows = findHeaderRow.rows;
        for (let i = 0, len = rows.length; i < len; i++) {
            for (let j = 0, len = rows[i].cells.length; j < len; j++) {
                bodyCell = this.parent.createElement('td');
                rowBody.appendChild(bodyCell);
            }
        }
        if (gObj.allowFiltering || gObj.allowSorting || gObj.allowGrouping) {
            table$$1.classList.add('e-sortfilter');
        }
        this.updateColGroup(colGroup$$1);
        tbody$$1.appendChild(rowBody);
        table$$1.appendChild(this.setColGroup(colGroup$$1));
        table$$1.appendChild(thead);
        table$$1.appendChild(tbody$$1);
        table$$1.appendChild(this.caption);
        this.ariaService.setOptions(table$$1, { colcount: gObj.getColumns().length.toString() });
        return table$$1;
    }
    /**
     * @param {Element} tableEle - specifies the column
     * @returns {Element} returns the element
     * @hidden
     */
    createTable(tableEle = null) {
        return this.createHeader(tableEle);
    }
    createHeaderContent(tableName) {
        const gObj = this.parent;
        let index = 1;
        const frozenMode = gObj.getFrozenMode();
        const columns = gObj.getColumns();
        const thead = this.parent.createElement('thead', { attrs: { 'role': 'rowgroup' } });
        const colHeader = this.parent.createElement('tr', { className: 'e-columnheader', attrs: { role: 'row' } });
        const rowRenderer = new RowRenderer(this.serviceLocator, CellType.Header, gObj);
        rowRenderer.element = colHeader;
        let rows = [];
        let headerRow;
        this.colDepth = measureColumnDepth(gObj.columns);
        for (let i = 0, len = this.colDepth; i < len; i++) {
            rows[i] = this.generateRow(i);
            rows[i].cells = [];
        }
        if (frozenMode !== 'Right') {
            rows = this.ensureColumns(rows);
        }
        rows = this.getHeaderCells(rows, tableName);
        if (frozenMode === 'Right') {
            index = 0;
            rows = this.ensureColumns(rows);
        }
        const frzCols = this.parent.getFrozenColumns();
        if (this.parent.isRowDragable() && this.parent.isFrozenGrid() && rows[0].cells[index]) {
            const colFreezeMode = rows[0].cells[index].column.getFreezeTableName();
            if (colFreezeMode === 'movable' || (frozenMode === leftRight && colFreezeMode === frozenRight)) {
                if (frozenMode === 'Right') {
                    rows[0].cells.pop();
                }
                else {
                    rows[0].cells.shift();
                }
            }
            else if (!frzCols && colFreezeMode === frozenLeft) {
                rows[0].cells[0].column.freeze = colFreezeMode === frozenLeft ? 'Left' : 'Right';
            }
            else if (frozenMode === 'Right' && colFreezeMode === frozenRight) {
                rows[0].cells[rows[0].cells.length - 1].column.freeze = 'Right';
            }
        }
        for (let i = 0, len = this.colDepth; i < len; i++) {
            headerRow = rowRenderer.render(rows[i], columns);
            if (this.parent.rowHeight && headerRow.querySelector('.e-headercell')) {
                headerRow.style.height = this.parent.rowHeight + 'px';
            }
            thead.appendChild(headerRow);
        }
        const findHeaderRow = {
            thead: thead,
            rows: rows
        };
        return findHeaderRow;
    }
    updateColGroup(colGroup$$1) {
        let cols = this.parent.getColumns();
        let col;
        const indexes = this.parent.getColumnIndexesInView();
        if (this.parent.enableColumnVirtualization && this.parent.getFrozenColumns()
            && this.parent.contentModule.isXaxis()) {
            cols = extend([], this.parent.getColumns());
            cols.splice(0, this.parent.getFrozenColumns());
        }
        colGroup$$1.id = this.parent.element.id + colGroup;
        if (this.parent.allowGrouping) {
            for (let i = 0, len = this.parent.groupSettings.columns.length; i < len; i++) {
                if (this.parent.enableColumnVirtualization && indexes.indexOf(i) === -1) {
                    continue;
                }
                col = this.parent.createElement('col', { className: 'e-group-intent' });
                colGroup$$1.appendChild(col);
            }
        }
        if (this.parent.detailTemplate || this.parent.childGrid) {
            col = this.parent.createElement('col', { className: 'e-detail-intent' });
            colGroup$$1.appendChild(col);
        }
        if (this.parent.isRowDragable() && this.parent.getFrozenMode() !== 'Right') {
            col = this.parent.createElement('col', { className: 'e-drag-intent' });
            colGroup$$1.appendChild(col);
        }
        for (let i = 0, len = cols.length; i < len; i++) {
            col = this.parent.createElement('col');
            if (cols[i].visible === false) {
                setStyleAttribute(col, { 'display': 'none' });
            }
            colGroup$$1.appendChild(col);
        }
        if (this.parent.isRowDragable() && this.parent.getFrozenMode() === 'Right') {
            col = this.parent.createElement('col', { className: 'e-drag-intent' });
            colGroup$$1.appendChild(col);
        }
        return colGroup$$1;
    }
    ensureColumns(rows) {
        //TODO: generate dummy column for group, detail, stacked row here; ensureColumns here
        const gObj = this.parent;
        const indexes = this.parent.getColumnIndexesInView();
        for (let i = 0, len = rows.length; i < len; i++) {
            if (gObj.allowGrouping) {
                for (let c = 0, len = gObj.groupSettings.columns.length; c < len; c++) {
                    if (this.parent.enableColumnVirtualization && indexes.indexOf(c) === -1) {
                        continue;
                    }
                    rows[i].cells.push(this.generateCell({}, CellType.HeaderIndent));
                }
            }
            if (gObj.detailTemplate || gObj.childGrid) {
                const args = {};
                this.parent.notify(detailIndentCellInfo, args);
                rows[i].cells.push(this.generateCell(args, CellType.DetailHeader));
            }
            if (gObj.isRowDragable()) {
                rows[i].cells.push(this.generateCell({}, CellType.RowDragHIcon));
            }
        }
        return rows;
    }
    getHeaderCells(rows, tableName) {
        const thead = this.parent.getHeaderTable() && this.parent.getHeaderTable().querySelector('thead');
        const cols = this.parent.enableColumnVirtualization ?
            this.parent.getColumns(this.parent.enablePersistence) : this.parent.columns;
        this.frzIdx = 0;
        this.notfrzIdx = 0;
        if (this.parent.lockcolPositionCount) {
            for (let i = 0; i < cols.length; i++) {
                this.lockColsRendered = false;
                rows = this.appendCells(cols[i], rows, 0, i === 0, false, i === (cols.length - 1), thead, tableName, false);
            }
        }
        for (let i = 0, len = cols.length; i < len; i++) {
            this.notfrzIdx = 0;
            this.lockColsRendered = true;
            rows = this.appendCells(cols[i], rows, 0, i === 0, false, i === (len - 1), thead, tableName, false);
        }
        return rows;
    }
    appendCells(cols, rows, index, isFirstObj, isFirstCol, isLastCol, isMovable, tableName, isStackLastCol) {
        const lastCol = isLastCol ? isStackLastCol ? 'e-laststackcell' : 'e-lastcell' : '';
        const isFrozen = this.parent.isFrozenGrid();
        const isLockColumn = !this.parent.lockcolPositionCount
            || (cols.lockColumn && !this.lockColsRendered) || (!cols.lockColumn && this.lockColsRendered);
        const isFrozenLockColumn = !this.parent.lockcolPositionCount || (cols.lockColumn && !this.lockColsRendered)
            || (!cols.lockColumn && this.lockColsRendered);
        const scrollbar = this.parent.getContent().querySelector('.e-movablescrollbar');
        let left;
        if (isFrozen && scrollbar && this.parent.enableColumnVirtualization) {
            left = scrollbar.scrollLeft;
        }
        if (!cols.columns) {
            if (left && left > 0 && this.parent.contentModule.isXaxis()
                && this.parent.inViewIndexes[0] !== 0 && cols.getFreezeTableName() === 'movable') {
                rows[index].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, (isFirstObj ? '' : (isFirstCol ? 'e-firstcell' : '')) + lastCol, index, this.parent.getColumnIndexByUid(cols.uid)));
            }
            else {
                if ((!isFrozen && isLockColumn) || (isFrozen && cols.getFreezeTableName() === tableName && isFrozenLockColumn)) {
                    rows[index].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, (isFirstObj ? '' : (isFirstCol ? 'e-firstcell' : '')) + lastCol, index, this.parent.getColumnIndexByUid(cols.uid)));
                }
            }
            if (this.parent.lockcolPositionCount) {
                if ((this.frzIdx + this.notfrzIdx < this.parent.frozenColumns) &&
                    ((cols.lockColumn && !this.lockColsRendered) || (!cols.lockColumn && this.lockColsRendered))) {
                    this.frzIdx++;
                }
                else {
                    this.notfrzIdx++;
                }
            }
            else {
                this.frzIdx++;
            }
        }
        else {
            this.isFirstCol = false;
            const colSpan = this.getCellCnt(cols, 0);
            if (colSpan) {
                const stackedLockColsCount = this.getStackedLockColsCount(cols, 0);
                const isStackedLockColumn = this.parent.lockcolPositionCount === 0
                    || (!this.lockColsRendered && stackedLockColsCount !== 0)
                    || (this.lockColsRendered && (colSpan - stackedLockColsCount) !== 0);
                const isFrozenStack = isFrozen && this.ensureStackedFrozen(cols.columns, tableName, false);
                if ((!isFrozen && isStackedLockColumn) || isFrozenStack) {
                    rows[index].cells.push(new Cell({
                        cellType: CellType.StackedHeader, column: cols,
                        colSpan: this.getColSpan(colSpan, stackedLockColsCount, cols.columns, tableName, isFrozen),
                        className: isFirstObj ? '' : (isFirstCol ? 'e-firstcell' : '')
                    }));
                }
            }
            if (this.parent.lockcolPositionCount && !this.lockColsRendered) {
                for (let i = 0; i < cols.columns.length; i++) {
                    rows = this.appendCells(cols.columns[i], rows, index + 1, isFirstObj, i === 0, i === (cols.columns.length - 1) && isLastCol, isMovable, tableName, false);
                }
            }
            if (this.lockColsRendered) {
                for (let i = 0, len = cols.columns.length; i < len; i++) {
                    isFirstObj = isFirstObj && i === 0;
                    const isFirstCol = this.isFirstCol = cols.columns[i].visible && !isFirstObj;
                    const isLaststackedCol = i === (len - 1) && isLastCol;
                    rows = this.appendCells(cols.columns[i], rows, index + 1, isFirstObj, isFirstCol && !isLaststackedCol, isLaststackedCol, isMovable, tableName, true);
                }
            }
        }
        return rows;
    }
    ensureStackedFrozen(columns, tableName, isTrue) {
        const length = columns.length;
        for (let i = 0; i < length; i++) {
            if (columns[i].columns) {
                isTrue = this.ensureStackedFrozen(columns[i].columns, tableName, isTrue);
            }
            else if (columns[i].getFreezeTableName() === tableName) {
                isTrue = true;
                break;
            }
        }
        return isTrue;
    }
    getStackedLockColsCount(col, lockColsCount) {
        if (col.columns) {
            for (let i = 0; i < col.columns.length; i++) {
                lockColsCount = this.getStackedLockColsCount(col.columns[i], lockColsCount);
            }
        }
        else if (col.lockColumn) {
            lockColsCount++;
        }
        return lockColsCount;
    }
    getColSpan(colSpan, stackedLockColsCount, columns, tableName, isFrozen) {
        if (isFrozen) {
            colSpan = this.getFrozenColSpan(columns, tableName, 0);
        }
        else if (this.parent.lockcolPositionCount) {
            colSpan = !this.lockColsRendered ? stackedLockColsCount : colSpan - stackedLockColsCount;
        }
        return colSpan;
    }
    getFrozenColSpan(columns, tableName, count) {
        const length = columns.length;
        for (let i = 0; i < length; i++) {
            if (columns[i].columns) {
                count = this.getFrozenColSpan(columns[i].columns, tableName, count);
            }
            else if (columns[i].getFreezeTableName() === tableName && columns[i].visible) {
                count++;
            }
        }
        return count;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    generateRow(index) {
        return new Row({});
    }
    generateCell(column, cellType, rowSpan, className, rowIndex, colIndex) {
        const opt = {
            'visible': column.visible,
            'isDataCell': false,
            'isTemplate': !isNullOrUndefined(column.headerTemplate),
            'rowID': '',
            'column': column,
            'cellType': cellType,
            'rowSpan': rowSpan,
            'className': className,
            'index': rowIndex,
            'colIndex': colIndex
        };
        if (!opt.rowSpan || opt.rowSpan < 2) {
            delete opt.rowSpan;
        }
        return new Cell(opt);
    }
    /**
     * Function to hide header table column based on visible property
     *
     * @param {Column[]} columns - specifies the column
     * @returns {void}
     */
    setVisible(columns) {
        const gObj = this.parent;
        let displayVal;
        let idx;
        const frzCols = gObj.getFrozenColumns();
        for (let c = 0, clen = columns.length; c < clen; c++) {
            const column = columns[c];
            idx = gObj.getNormalizedColumnIndex(column.uid);
            displayVal = column.visible ? '' : 'none';
            if (frzCols) {
                const normalizedfrzCols = this.parent.isRowDragable() ? frzCols + 1 : frzCols;
                if (idx < normalizedfrzCols) {
                    setStyleAttribute(this.getColGroup().children[idx], { 'display': displayVal });
                }
                else {
                    const mTblColGrp = gObj.getHeaderContent().querySelector('.' + movableHeader).querySelector(colGroup);
                    setStyleAttribute(mTblColGrp.children[idx - normalizedfrzCols], { 'display': displayVal });
                }
            }
            else {
                setStyleAttribute(this.getColGroup().children[idx], { 'display': displayVal });
            }
        }
        this.refreshUI();
    }
    colPosRefresh() {
        this.refreshUI();
    }
    /**
     * Refresh the header of the Grid.
     *
     * @returns {void}
     */
    refreshUI() {
        const frzCols = this.parent.isFrozenGrid();
        const isVFTable = this.parent.enableColumnVirtualization && frzCols;
        const headerDiv = this.getPanel();
        this.toggleStackClass(headerDiv);
        let table$$1 = this.freezeReorder ? this.headerPanel.querySelector('.' + movableHeader).querySelector('.' + table)
            : this.getTable();
        let tableName = this.parent.isFrozenGrid() ? this.parent.getFrozenLeftCount() ? 'frozen-left'
            : 'frozen-right' : undefined;
        if (isVFTable) {
            table$$1 = this.parent.contentModule.getVirtualFreezeHeader();
            tableName = this.parent.contentModule.isXaxis() ? 'movable' : tableName;
        }
        if (table$$1) {
            remove(table$$1);
            table$$1.removeChild(table$$1.firstChild);
            table$$1.removeChild(table$$1.childNodes[0]);
            const colGroup$$1 = this.parent.createElement(colGroup);
            const findHeaderRow = this.createHeaderContent(tableName);
            this.rows = findHeaderRow.rows;
            table$$1.insertBefore(findHeaderRow.thead, table$$1.firstChild);
            this.updateColGroup(colGroup$$1);
            table$$1.insertBefore(this.setColGroup(colGroup$$1), table$$1.firstChild);
            if (!isVFTable) {
                this.setTable(table$$1);
            }
            this.appendContent(table$$1);
            this.parent.notify(colGroupRefresh, {});
            this.widthService.setWidthToColumns();
            this.parent.updateDefaultCursor();
            if (!frzCols || (this.parent.enableColumnVirtualization && frzCols)) {
                this.initializeHeaderDrag();
            }
            const rows = [].slice.call(headerDiv.querySelectorAll('tr.e-columnheader'));
            for (const row$$1 of rows) {
                const gCells = [].slice.call(row$$1.getElementsByClassName('e-grouptopleftcell'));
                if (gCells.length) {
                    gCells[gCells.length - 1].classList.add('e-lastgrouptopleftcell');
                }
            }
            if (!frzCols) {
                this.parent.notify(headerRefreshed, { rows: this.rows, args: { isFrozen: frzCols } });
            }
            if (this.parent.enableColumnVirtualization && parentsUntil(table$$1, movableHeader)) {
                this.parent.notify(headerRefreshed, { rows: this.rows, args: { isFrozen: false, isXaxis: true } });
            }
            if (this.parent.allowTextWrap && this.parent.textWrapSettings.wrapMode === 'Header') {
                wrap(rows, true);
            }
        }
    }
    toggleStackClass(div) {
        const column = this.parent.columns;
        const stackedHdr = column.some((column) => !isNullOrUndefined(column.columns));
        if (stackedHdr) {
            div.classList.add('e-stackedheader');
        }
        else {
            div.classList.remove('e-stackedheader');
        }
    }
    appendContent(table$$1) {
        this.getPanel().querySelector('.' + headerContent).appendChild(table$$1);
    }
    getCellCnt(col, cnt) {
        if (col.columns) {
            for (let i = 0, len = col.columns.length; i < len; i++) {
                cnt = this.getCellCnt(col.columns[i], cnt);
            }
        }
        else {
            if (col.visible) {
                cnt++;
            }
        }
        return cnt;
    }
    initializeHeaderDrag() {
        const gObj = this.parent;
        if (!(this.parent.allowReordering || (this.parent.allowGrouping && this.parent.groupSettings.showDropArea))) {
            return;
        }
        this.draggable = new Draggable(gObj.getHeaderContent(), {
            dragTarget: '.e-headercell',
            distance: 5,
            helper: this.helper,
            dragStart: this.dragStart,
            drag: this.drag,
            dragStop: this.dragStop,
            abort: '.e-rhandler',
            isReplaceDragEle: this.isReplaceDragEle
        });
    }
    initializeHeaderDrop() {
        const gObj = this.parent;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const drop = new Droppable(gObj.getHeaderContent(), {
            accept: '.e-dragclone',
            drop: this.drop
        });
    }
    renderCustomToolbar() {
        const gObj = this.parent;
        if (gObj.rowRenderingMode === 'Vertical' && !gObj.toolbar
            && (gObj.allowSorting || (gObj.allowFiltering && gObj.filterSettings.type !== 'FilterBar'))) {
            const div = gObj.createElement('div', { className: 'e-res-toolbar e-toolbar' });
            const toolbarItems = gObj.createElement('div', { className: 'e-toolbar-items' });
            const toolbarLeft = gObj.createElement('div', { className: 'e-toolbar-left' });
            const count = this.parent.allowFiltering && this.parent.allowSorting ? 2 : 1;
            for (let i = 0; i < count; i++) {
                const toolbarItem = gObj.createElement('div', { className: 'e-toolbar-item e-gridresponsiveicons e-icons e-tbtn-align' });
                const cls = count === 1 ? this.parent.allowSorting ? 'sort'
                    : 'filter' : i === 1 ? 'sort' : 'filter';
                const button = gObj.createElement('button', { className: 'e-tbar-btn e-control e-btn e-lib e-icon-btn' });
                const span = gObj.createElement('span', { className: 'e-btn-icon e-res' + cls + '-icon e-icons' });
                button.appendChild(span);
                const btnObj = new Button({
                    cssClass: this.parent.cssClass ? this.parent.cssClass : ''
                });
                btnObj.appendTo(button);
                button.onclick = (e) => {
                    if (e.target.classList.contains('e-ressort-btn')
                        || e.target.classList.contains('e-ressort-icon')) {
                        this.parent.showResponsiveCustomSort();
                    }
                    else {
                        this.parent.showResponsiveCustomFilter();
                    }
                };
                toolbarItem.appendChild(button);
                toolbarLeft.appendChild(toolbarItem);
            }
            toolbarItems.appendChild(toolbarLeft);
            div.appendChild(toolbarItems);
            gObj.element.insertBefore(div, this.parent.element.querySelector('.' + gridHeader));
        }
        else {
            if (gObj.enableAdaptiveUI && !gObj.toolbar) {
                gObj.getContent().classList.add('e-responsive-header');
            }
        }
    }
    updateCustomResponsiveToolbar(args) {
        const resToolbar = this.parent.element.querySelector('.e-responsive-toolbar');
        if (args.module === 'toolbar') {
            if (resToolbar) {
                remove(resToolbar);
            }
            else {
                this.renderCustomToolbar();
            }
        }
    }
}

/**
 * CellRenderer class which responsible for building cell content.
 *
 * @hidden
 */
class CellRenderer {
    constructor(parent, locator) {
        this.localizer = locator.getService('localization');
        this.formatter = locator.getService('valueFormatter');
        this.parent = parent;
        this.element = this.parent.createElement('TD', { className: rowCell, attrs: { role: 'gridcell', tabindex: '-1' } });
        this.rowChkBox = this.parent.createElement('input', { className: 'e-checkselect', attrs: { 'type': 'checkbox', 'aria-label': 'checkbox' } });
    }
    /**
     * Function to return the wrapper for the TD content
     *
     * @returns {string | Element} returns the string
     */
    getGui() {
        return '';
    }
    /**
     * Function to format the cell value.
     *
     * @param  {Column} column - specifies the column
     * @param  {Object} value - specifies the value
     * @param  {Object} data - specifies the data
     * @returns {string} returns the format
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    format(column, value, data) {
        if (!isNullOrUndefined(column.format)) {
            if (column.type === 'number' && isNaN(parseInt(value, 10))) {
                value = null;
            }
            value = this.formatter.toView(value, column.getFormatter());
        }
        return isNullOrUndefined(value) ? '' : value.toString();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    evaluate(node, cell, data, attributes$$1, fData, isEdit) {
        let result;
        if (cell.column.template) {
            const isReactCompiler = this.parent.isReact && typeof (cell.column.template) !== 'string';
            const literals = ['index'];
            const dummyData = extendObjWithFn({}, data, { [foreignKeyData]: fData, column: cell.column });
            const templateID = this.parent.element.id + cell.column.uid;
            const str = 'isStringTemplate';
            if (isReactCompiler) {
                const copied = { 'index': attributes$$1[literals[0]] };
                cell.column.getColumnTemplate()(extend(copied, dummyData), this.parent, 'columnTemplate', templateID, this.parent[str], null, node);
                this.parent.renderTemplates();
            }
            else {
                result = cell.column.getColumnTemplate()(extend({ 'index': attributes$$1[literals[0]] }, dummyData), this.parent, 'template', templateID, this.parent[str], undefined, undefined, this.parent['root']);
            }
            if (!isReactCompiler) {
                appendChildren(node, result);
            }
            this.parent.notify('template-result', { template: result });
            result = null;
            node.setAttribute('aria-label', node.innerText + ' is template cell' + ' column header ' +
                cell.column.headerText);
            return false;
        }
        return true;
    }
    /**
     * Function to invoke the custom formatter available in the column object.
     *
     * @param  {Column} column - specifies the column
     * @param  {Object} value - specifies the value
     * @param  {Object} data - specifies the data
     * @returns {Object} returns the object
     */
    invokeFormatter(column, value, data) {
        if (!isNullOrUndefined(column.formatter)) {
            if (doesImplementInterface(column.formatter, 'getValue')) {
                const formatter = column.formatter;
                value = new formatter().getValue(column, data);
            }
            else if (typeof column.formatter === 'function') {
                value = column.formatter(column, data);
            }
            else {
                value = column.formatter.getValue(column, data);
            }
        }
        return value;
    }
    /**
     * Function to render the cell content based on Column object.
     *
     * @param {Cell<Column>} cell - specifies the cell
     * @param {Object} data - specifies the data
     * @param {Object} attributes - specifies the attributes
     * @param {boolean} isExpand - specifies the boolean for expand
     * @param {boolean} isEdit - specifies the boolean for edit
     * @returns {Element} returns the element
     */
    render(cell, data, attributes$$1, isExpand, isEdit) {
        return this.refreshCell(cell, data, attributes$$1, isEdit);
    }
    /**
     * Function to refresh the cell content based on Column object.
     *
     * @param {Element} td - specifies the element
     * @param {Cell<Column>} cell - specifies the cell
     * @param {Object} data - specifies the data
     * @param {Object} attributes - specifies the attribute
     * @returns {void}
     */
    refreshTD(td, cell, data, attributes$$1) {
        const isEdit = this.parent.editSettings.mode === 'Batch' && td.classList.contains('e-editedbatchcell');
        if (this.parent.isReact) {
            td.innerHTML = '';
            const cellIndex = td.cellIndex;
            const parentRow = td.parentElement;
            remove(td);
            const newTD = this.refreshCell(cell, data, attributes$$1, isEdit);
            this.cloneAttributes(newTD, td);
            if (parentRow.cells.length !== cellIndex - 1) {
                parentRow.insertBefore(newTD, parentRow.cells[cellIndex]);
            }
            else {
                parentRow.appendChild(newTD);
            }
        }
        else {
            const node = this.refreshCell(cell, data, attributes$$1, isEdit);
            td.innerHTML = '';
            td.setAttribute('aria-label', node.getAttribute('aria-label'));
            const elements = [].slice.call(node.childNodes);
            for (const elem of elements) {
                td.appendChild(elem);
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    cloneAttributes(target, source) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const attrs = source.attributes;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let i = attrs.length;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        let attr;
        while (i--) {
            attr = attrs[i];
            target.setAttribute(attr.name, attr.value);
        }
    }
    refreshCell(cell, data, attributes$$1, isEdit) {
        const node = this.element.cloneNode();
        const column = cell.column;
        let fData;
        if (cell.isForeignKey) {
            fData = cell.foreignKeyData[0] || { [column.foreignKeyValue]: column.format ? null : '' };
        }
        //Prepare innerHtml
        let innerHtml = this.getGui();
        let value = cell.isForeignKey ? this.getValue(column.foreignKeyValue, fData, column) :
            this.getValue(column.field, data, column);
        if ((column.type === 'date' || column.type === 'datetime') && !isNullOrUndefined(value)) {
            value = new Date(value);
        }
        value = this.format(column, value, data);
        innerHtml = value.toString();
        if (column.type === 'boolean' && !column.displayAsCheckBox) {
            const localeStr = (value !== 'true' && value !== 'false') ? null : value === 'true' ? 'True' : 'False';
            innerHtml = localeStr ? this.localizer.getConstant(localeStr) : innerHtml;
        }
        const fromFormatter = this.invokeFormatter(column, value, data);
        innerHtml = !isNullOrUndefined(column.formatter) ? isNullOrUndefined(fromFormatter) ? '' : fromFormatter.toString() : innerHtml;
        node.setAttribute('aria-label', innerHtml + ' column header ' + cell.column.headerText);
        if (this.evaluate(node, cell, data, attributes$$1, fData, isEdit) && column.type !== 'checkbox') {
            this.appendHtml(node, innerHtml, column.getDomSetter ? column.getDomSetter() : 'innerHTML');
        }
        else if (column.type === 'checkbox') {
            node.classList.add(gridChkBox);
            node.setAttribute('aria-label', 'checkbox');
            if (this.parent.selectionSettings.persistSelection) {
                value = value === 'true';
            }
            else {
                value = false;
            }
            const checkWrap = createCheckBox(this.parent.createElement, false, { checked: value, label: ' ' });
            this.rowChkBox.id = 'checkbox-' + cell.rowID;
            checkWrap.insertBefore(this.rowChkBox.cloneNode(), checkWrap.firstChild);
            node.appendChild(checkWrap);
        }
        if (this.parent.checkAllRows === 'Check' && this.parent.enableVirtualization) {
            cell.isSelected = true;
        }
        this.setAttributes(node, cell, attributes$$1);
        if (column.type === 'boolean' && column.displayAsCheckBox) {
            const checked = isNaN(parseInt(value.toString(), 10)) ? value === 'true' : parseInt(value.toString(), 10) > 0;
            const checkWrap = createCheckBox(this.parent.createElement, false, { checked: checked, label: ' ' });
            node.innerHTML = '';
            checkWrap.classList.add('e-checkbox-disabled');
            node.appendChild(checkWrap);
            node.setAttribute('aria-label', checked + ' column header ' + cell.column.headerText);
        }
        return node;
    }
    /**
     * Function to specifies how the result content to be placed in the cell.
     *
     * @param {Element} node - specifies the node
     * @param {string|Element} innerHtml - specifies the innerHTML
     * @param {string} property - specifies the element
     * @returns {Element} returns the element
     */
    appendHtml(node, innerHtml, property = 'innerHTML') {
        node[property] = innerHtml;
        return node;
    }
    /**
     * @param {HTMLElement} node - specifies the node
     * @param {cell<Column>} cell - specifies the cell
     * @param {Object} attributes - specifies the attributes
     * @returns {void}
     * @hidden
     */
    setAttributes(node, cell, attributes$$1) {
        const column = cell.column;
        this.buildAttributeFromCell(node, cell, column.type === 'checkbox');
        setStyleAndAttributes(node, attributes$$1);
        setStyleAndAttributes(node, cell.attributes);
        if (column.customAttributes) {
            setStyleAndAttributes(node, column.customAttributes);
        }
        if (this.parent.rowRenderingMode === 'Vertical') {
            setStyleAndAttributes(node, { 'data-cell': column.headerText });
        }
        if (column.textAlign) {
            node.style.textAlign = column.textAlign;
        }
        if (column.clipMode === 'Clip' || (!column.clipMode && this.parent.clipMode === 'Clip')) {
            node.classList.add('e-gridclip');
        }
        else if (column.clipMode === 'EllipsisWithTooltip' || (!column.clipMode && this.parent.clipMode === 'EllipsisWithTooltip')) {
            if (column.type !== 'checkbox') {
                node.classList.add('e-ellipsistooltip');
            }
        }
    }
    buildAttributeFromCell(node, cell, isCheckBoxType) {
        const attr = {};
        const prop = { 'colindex': ariaColIndex };
        const classes = [];
        if (cell.colSpan) {
            attr.colSpan = cell.colSpan;
        }
        if (cell.rowSpan) {
            attr.rowSpan = cell.rowSpan;
        }
        if (cell.isTemplate) {
            classes.push('e-templatecell');
        }
        if (cell.isSelected) {
            classes.push(...['e-selectionbackground', 'e-active']);
            if (isCheckBoxType) {
                node.querySelector('.e-frame').classList.add('e-check');
            }
        }
        if (cell.isColumnSelected) {
            classes.push(...['e-columnselection']);
        }
        if (cell.cellType === CellType.Header) {
            attr[prop.colindex] = cell.colIndex;
        }
        else if (!isNullOrUndefined(cell.index)) {
            attr[prop.colindex] = cell.index;
        }
        if (!cell.visible) {
            classes.push('e-hide');
        }
        attr.class = classes;
        setStyleAndAttributes(node, attr);
    }
    getValue(field, data, column) {
        return column.valueAccessor(field, data, column);
    }
}

/**
 * AriaService
 *
 * @hidden
 */
class AriaService {
    setOptions(target, options) {
        const props = Object.keys(options);
        for (let i = 0; i < props.length; i++) {
            setStateAndProperties(target, config[props[i]], options[props[i]]);
        }
    }
    setExpand(target, expand) {
        setStateAndProperties(target, config.expand, expand);
    }
    setSort(target, direction) {
        setStateAndProperties(target, config.sort, direction, typeof direction === 'boolean');
    }
    setBusy(target, isBusy) {
        setStateAndProperties(target, config.busy, isBusy);
        setStateAndProperties(target, config.invalid, null, true);
    }
    setGrabbed(target, isGrabbed, remove$$1) {
        setStateAndProperties(target, config.grabbed, isGrabbed, remove$$1);
    }
    setDropTarget(target, isTarget) {
        setStateAndProperties(target, config.dropeffect, 'copy', !isTarget);
    }
}
/**
 * @param {HTMLElement} target - specifies the target
 * @param {string} attribute - specifies the attribute
 * @param {ValueType} value - specifies the value
 * @param {boolean} remove - specifies the boolean for remove
 * @returns {void}
 * @hidden
 */
function setStateAndProperties(target, attribute, value, remove$$1) {
    if (remove$$1 && target) {
        target.removeAttribute(attribute);
        return;
    }
    if (target) {
        target.setAttribute(attribute, value);
    }
}
const config = {
    expand: 'aria-expanded',
    role: 'role',
    datarole: 'data-role',
    selected: 'aria-selected',
    multiselectable: 'aria-multiselectable',
    sort: 'aria-sort',
    busy: 'aria-busy',
    invalid: 'aria-invalid',
    grabbed: 'aria-grabbed',
    dropeffect: 'aria-dropeffect',
    haspopup: 'aria-haspopup',
    level: 'aria-level',
    colcount: 'aria-colcount',
    rowcount: 'aria-rowcount'
};

/**
 * HeaderCellRenderer class which responsible for building header cell content.
 *
 * @hidden
 */
class HeaderCellRenderer extends CellRenderer {
    constructor() {
        super(...arguments);
        this.element = this.parent
            .createElement('TH', { className: 'e-headercell', attrs: { role: 'columnheader', tabindex: '-1' } });
        this.ariaService = new AriaService();
        this.hTxtEle = this.parent.createElement('span', { className: 'e-headertext' });
        this.sortEle = this.parent.createElement('div', { className: 'e-sortfilterdiv e-icons' });
        this.gui = this.parent.createElement('div');
        this.chkAllBox = this.parent.createElement('input', { className: 'e-checkselectall', attrs: { 'type': 'checkbox', 'aria-label': 'checkbox' } });
    }
    /**
     * Function to return the wrapper for the TH content.
     *
     * @returns {string | Element} returns the element
     */
    getGui() {
        return this.gui.cloneNode();
    }
    /**
     * Function to render the cell content based on Column object.
     *
     * @param {Cell} cell - specifies the column
     * @param {Object} data - specifies the data
     * @param {object} attributes - specifies the aattributes
     * @returns {Element} returns the element
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    render(cell, data, attributes$$1) {
        const node = this.element.cloneNode();
        const fltrMenuEle = this.parent.createElement('div', { className: 'e-filtermenudiv e-icons e-icon-filter' });
        return this.prepareHeader(cell, node, fltrMenuEle);
    }
    /**
     * Function to refresh the cell content based on Column object.
     *
     * @param  {Cell} cell - specifies the cell
     * @param  {Element} node - specifies the noe
     * @returns {Element} returns the element
     */
    refresh(cell, node) {
        this.clean(node);
        const fltrMenuEle = this.parent.createElement('div', { className: 'e-filtermenudiv e-icons e-icon-filter' });
        return this.prepareHeader(cell, node, fltrMenuEle);
    }
    clean(node) {
        node.innerHTML = '';
    }
    /* tslint:disable-next-line:max-func-body-length */
    prepareHeader(cell, node, fltrMenuEle) {
        const column = cell.column;
        const ariaAttr = {};
        //Prepare innerHtml
        const innerDIV = this.getGui();
        let hValueAccer;
        attributes(innerDIV, {
            'e-mappinguid': column.uid,
            'class': 'e-headercelldiv'
        });
        if (!isNullOrUndefined(column.headerValueAccessor)) {
            hValueAccer = this.getValue(column.headerText, column);
        }
        if (column.type !== 'checkbox') {
            let value = column.headerText;
            if (!isNullOrUndefined(hValueAccer)) {
                value = hValueAccer;
            }
            const headerText = this.hTxtEle.cloneNode();
            headerText[column.getDomSetter()] = value;
            innerDIV.appendChild(headerText);
        }
        else {
            column.editType = 'booleanedit';
            const checkAllWrap = createCheckBox(this.parent.createElement, false, { checked: false, label: ' ' });
            this.chkAllBox.id = 'checkbox-' + column.uid;
            checkAllWrap.insertBefore(this.chkAllBox.cloneNode(), checkAllWrap.firstChild);
            innerDIV.appendChild(checkAllWrap);
            innerDIV.classList.add('e-headerchkcelldiv');
        }
        this.buildAttributeFromCell(node, cell);
        this.appendHtml(node, innerDIV);
        node.appendChild(this.sortEle.cloneNode());
        if ((this.parent.allowFiltering && this.parent.filterSettings.type !== 'FilterBar') &&
            (column.allowFiltering && !isNullOrUndefined(column.field)) &&
            !(this.parent.showColumnMenu && column.showColumnMenu)) {
            attributes(fltrMenuEle, {
                'e-mappinguid': 'e-flmenu-' + column.uid
            });
            node.classList.add('e-fltr-icon');
            const matchFlColumns = [];
            if (this.parent.filterSettings.columns.length && this.parent.filterSettings.columns.length !== matchFlColumns.length) {
                const foreignColumn = this.parent.getForeignKeyColumns();
                for (let index = 0; index < this.parent.columns.length; index++) {
                    for (let count = 0; count < this.parent.filterSettings.columns.length; count++) {
                        if (this.parent.filterSettings.columns[count].field === column.field || (foreignColumn.length
                            && column.foreignKeyValue === this.parent.filterSettings.columns[count].field)) {
                            fltrMenuEle.classList.add('e-filtered');
                            matchFlColumns.push(column.field);
                            break;
                        }
                    }
                }
            }
            node.appendChild(fltrMenuEle.cloneNode());
        }
        if (cell.className) {
            node.classList.add(cell.className);
        }
        if (column.customAttributes) {
            setStyleAndAttributes(node, column.customAttributes);
        }
        if (column.allowSorting) {
            ariaAttr.sort = 'none';
        }
        if ((this.parent.allowGrouping && column.allowGrouping) || column.allowReordering) {
            ariaAttr.grabbed = false;
        }
        node = this.extendPrepareHeader(column, node);
        let result;
        const gridObj = this.parent;
        const colIndex = gridObj.getColumnIndexByField(column.field);
        if (!isNullOrUndefined(column.headerTemplate)) {
            //need to pass the template id for blazor headertemplate
            const headerTempID = gridObj.element.id + column.uid + 'headerTemplate';
            const str = 'isStringTemplate';
            const col = column;
            const isReactCompiler = this.parent.isReact && typeof (column.headerTemplate) !== 'string';
            if (isReactCompiler) {
                const copied = { 'index': colIndex };
                node.firstElementChild.innerHTML = '';
                column.getHeaderTemplate()(extend(copied, col), gridObj, 'headerTemplate', headerTempID, this.parent[str], null, node.firstElementChild);
                this.parent.renderTemplates();
            }
            else {
                result = column.getHeaderTemplate()(extend({ 'index': colIndex }, col), gridObj, 'headerTemplate', headerTempID, this.parent[str], undefined, undefined, this.parent['root']);
                node.firstElementChild.innerHTML = '';
                appendChildren(node.firstElementChild, result);
            }
        }
        this.ariaService.setOptions(node, ariaAttr);
        if (!isNullOrUndefined(column.headerTextAlign) || !isNullOrUndefined(column.textAlign)) {
            const alignment = column.headerTextAlign || column.textAlign;
            innerDIV.style.textAlign = alignment;
            if (alignment === 'Right' || alignment === 'Left') {
                node.classList.add(alignment === 'Right' ? 'e-rightalign' : 'e-leftalign');
            }
            else if (alignment === 'Center') {
                node.classList.add('e-centeralign');
            }
        }
        if (column.clipMode === 'Clip' || (!column.clipMode && this.parent.clipMode === 'Clip')) {
            node.classList.add('e-gridclip');
        }
        else if (column.clipMode === 'EllipsisWithTooltip' || (!column.clipMode && this.parent.clipMode === 'EllipsisWithTooltip')) {
            if (column.type !== 'checkbox') {
                node.classList.add('e-ellipsistooltip');
            }
        }
        node.setAttribute('aria-rowspan', (!isNullOrUndefined(cell.rowSpan) ? cell.rowSpan : 1).toString());
        node.setAttribute('aria-colspan', '1');
        this.parent.trigger(headerCellInfo, { cell, node });
        return node;
    }
    getValue(field, column) {
        return column.headerValueAccessor(field, column);
    }
    extendPrepareHeader(column, node) {
        if (this.parent.showColumnMenu && column.showColumnMenu && !isNullOrUndefined(column.field)) {
            const element = (this.parent.createElement('div', { className: 'e-icons e-columnmenu' }));
            const matchFilteredColumns = [];
            if (this.parent.filterSettings.columns.length && this.parent.filterSettings.columns.length !== matchFilteredColumns.length) {
                for (let i = 0; i < this.parent.columns.length; i++) {
                    for (let j = 0; j < this.parent.filterSettings.columns.length; j++) {
                        if (this.parent.filterSettings.columns[j].field === column.field) {
                            element.classList.add('e-filtered');
                            matchFilteredColumns.push(column.field);
                            break;
                        }
                    }
                }
            }
            node.classList.add('e-fltr-icon');
            node.appendChild(element);
        }
        if (this.parent.allowResizing) {
            const handler = this.parent.createElement('div');
            handler.className = column.allowResizing ? 'e-rhandler e-rcursor' : 'e-rsuppress';
            node.appendChild(handler);
        }
        return node;
    }
    /**
     * Function to specifies how the result content to be placed in the cell.
     *
     * @param  {Element} node - specifies the node
     * @param  {string|Element} innerHtml - specifies the innerHtml
     * @returns {Element} returns the element
     */
    appendHtml(node, innerHtml) {
        node.appendChild(innerHtml);
        return node;
    }
}

/**
 * StackedHeaderCellRenderer class which responsible for building stacked header cell content.
 *
 * @hidden
 */
class StackedHeaderCellRenderer extends CellRenderer {
    constructor() {
        super(...arguments);
        this.element = this.parent.createElement('TH', {
            className: 'e-headercell e-stackedheadercell', attrs: {
                role: 'columnheader',
                tabindex: '-1'
            }
        });
    }
    /**
     * Function to render the cell content based on Column object.
     *
     * @param {Cell<Column>} cell - specifies the cell
     * @param {Object} data - specifies the data
     * @param {object} attributes - specifies the attributes
     * @returns {Element} returns the element
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    render(cell, data, attributes$$1) {
        const node = this.element.cloneNode();
        const div = this.parent.createElement('div', {
            className: 'e-stackedheadercelldiv',
            attrs: { 'e-mappinguid': cell.column.uid }
        });
        const column = cell.column;
        node.appendChild(div);
        if (!isNullOrUndefined(column.headerTemplate)) {
            appendChildren(div, column.getHeaderTemplate()(column, this.parent, 'headerTemplate'));
        }
        else {
            this.appendHtml(div, column.headerText, column.getDomSetter());
        }
        if (cell.column.toolTip) {
            node.setAttribute('title', cell.column.toolTip);
        }
        if (column.clipMode === 'Clip' || (!column.clipMode && this.parent.clipMode === 'Clip')) {
            node.classList.add('e-gridclip');
        }
        else if (column.clipMode === 'EllipsisWithTooltip' || (!column.clipMode && this.parent.clipMode === 'EllipsisWithTooltip')) {
            node.classList.add('e-ellipsistooltip');
        }
        if (!isNullOrUndefined(cell.column.textAlign)) {
            div.style.textAlign = cell.column.textAlign;
        }
        if (cell.column.customAttributes) {
            setStyleAndAttributes(node, cell.column.customAttributes);
        }
        node.setAttribute('colspan', cell.colSpan.toString());
        node.setAttribute('aria-colspan', cell.colSpan.toString());
        node.setAttribute('aria-rowspan', '1');
        if (this.parent.allowResizing) {
            const handler = this.parent.createElement('div');
            handler.className = cell.column.allowResizing ? 'e-rhandler e-rcursor' : 'e-rsuppress';
            node.appendChild(handler);
        }
        if (cell.className) {
            node.classList.add(cell.className);
        }
        this.parent.trigger(headerCellInfo, { cell, node });
        return node;
    }
}

/**
 * IndentCellRenderer class which responsible for building group indent cell.
 *
 * @hidden
 */
class IndentCellRenderer extends CellRenderer {
    constructor() {
        super(...arguments);
        this.element = this.parent.createElement('TD', { className: 'e-indentcell' });
    }
    /**
     * Function to render the indent cell
     *
     * @param  {Cell} cell - specifies the cell
     * @param  {Object} data - specifies the data
     * @returns {Element} returns the element
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    render(cell, data) {
        const node = this.element.cloneNode();
        setStyleAndAttributes(node, cell.attributes);
        return node;
    }
}

/**
 * GroupCaptionCellRenderer class which responsible for building group caption cell.
 *
 * @hidden
 */
class GroupCaptionCellRenderer extends CellRenderer {
    constructor() {
        super(...arguments);
        this.cellUid = 0;
        this.element = this.parent
            .createElement('TD', { className: 'e-groupcaption',
            attrs: { id: this.parent.element.id + 'captioncell', role: 'gridcell', tabindex: '-1' } });
    }
    /**
     * Function to render the cell content based on Column object.
     *
     * @param  {Cell} cell - specifies the cell
     * @param  {Object} data - specifies the GroupedData
     * @returns {Element} returns the element
     */
    render(cell, data) {
        this.element.id = this.parent.element.id + 'captioncell' + this.cellUid++;
        const node = this.element.cloneNode();
        const gObj = this.parent;
        let result;
        let fKeyValue;
        let gTemplateValue;
        data.headerText = cell.column.headerText;
        if (cell.isForeignKey) {
            fKeyValue = this.format(cell.column, cell.column.valueAccessor('foreignKey', data, cell.column));
        }
        const value = cell.isForeignKey ? fKeyValue : cell.column.enableGroupByFormat ? data.key :
            this.format(cell.column, cell.column.valueAccessor('key', data, cell.column));
        for (var j = 0; j < gObj.aggregates.length; j++) {
            for (var i = 0; i < gObj.aggregates[j].columns.length; i++) {
                if (gObj.getVisibleColumns()[0].field == gObj.aggregates[j].columns[i].field && gObj.aggregates[j].columns[i].groupCaptionTemplate) {
                    if (gObj.aggregates[j].columns[i].groupCaptionTemplate.includes("$")) {
                        gTemplateValue = gObj.aggregates[j].columns[i].groupCaptionTemplate.split("$")[0] + data[gObj.getVisibleColumns()[0].field][gObj.aggregates[j].columns[i].type] +
                            gObj.aggregates[j].columns[i].groupCaptionTemplate.split("}")[1];
                    }
                    else {
                        gTemplateValue = gObj.aggregates[j].columns[i].groupCaptionTemplate;
                    }
                    break;
                }
            }
        }
        if (!isNullOrUndefined(gObj.groupSettings.captionTemplate)) {
            const isReactCompiler = this.parent.isReact && typeof (gObj.groupSettings.captionTemplate) !== 'string';
            if (isReactCompiler) {
                const tempID = gObj.element.id + 'captionTemplate';
                templateCompiler(gObj.groupSettings.captionTemplate)(data, this.parent, 'captionTemplate', tempID, null, null, node);
                this.parent.renderTemplates();
            }
            else if (this.parent.isVue) {
                result = templateCompiler(gObj.groupSettings.captionTemplate)(data, this.parent);
            }
            else {
                result = templateCompiler(gObj.groupSettings.captionTemplate)(data);
            }
            if (!isReactCompiler) {
                appendChildren(node, result);
            }
        }
        else {
            if (gObj.groupSettings.enableLazyLoading) {
                node.innerHTML = cell.column.headerText + ': ' + value + (gTemplateValue ? '   ' + gTemplateValue : '');
            }
            else {
                node.innerHTML = cell.column.headerText + ': ' + value + ' - ' + data.count + ' ' +
                    (data.count < 2 ? this.localizer.getConstant('Item') : this.localizer.getConstant('Items'))
                    + (gTemplateValue ? '   ' + gTemplateValue : '');
            }
        }
        node.setAttribute('colspan', cell.colSpan.toString());
        node.setAttribute('aria-label', node.innerHTML + ' is groupcaption cell');
        node.setAttribute('title', node.innerHTML);
        return node;
    }
}
/**
 * GroupCaptionEmptyCellRenderer class which responsible for building group caption empty cell.
 *
 * @hidden
 */
class GroupCaptionEmptyCellRenderer extends CellRenderer {
    constructor() {
        super(...arguments);
        this.element = this.parent.createElement('TD', { className: 'e-groupcaption' });
    }
    /**
     * Function to render the cell content based on Column object.
     *
     * @param {Cell} cell - specifies the cell
     * @param {Object} data - specifies the Object
     * @param {string} data.field - Defines the field
     * @param {string} data.key - Defines the key
     * @param {number} data.count - Defines the count
     * @returns {Element} returns the element
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    render(cell, data) {
        const node = this.element.cloneNode();
        node.innerHTML = '&nbsp;';
        node.setAttribute('colspan', cell.colSpan.toString());
        return node;
    }
}

/**
 * ExpandCellRenderer class which responsible for building group expand cell.
 *
 * @hidden
 */
class ExpandCellRenderer extends IndentCellRenderer {
    /**
     * Function to render the expand cell
     *
     * @param {Cell} cell - specifies the cell
     * @param {Object} data - specifies the data
     * @param {string} data.field - Defines the field
     * @param {string} data.key - Defines the key
     * @param {Object} attr - specifies the attribute
     * @param {boolean} isExpand - specifies isexpand
     * @returns {Element} returns the element
     */
    render(cell, data, attr, isExpand) {
        const node = this.element.cloneNode();
        node.className = isExpand ? 'e-recordplusexpand' : 'e-recordpluscollapse';
        node.setAttribute('ej-mappingname', data.field);
        node.setAttribute('ej-mappingvalue', data.key);
        node.setAttribute('aria-expanded', isExpand ? 'true' : 'false');
        node.setAttribute('tabindex', '-1');
        node.appendChild(this.parent.createElement('div', {
            className: isExpand ? 'e-icons e-gdiagonaldown e-icon-gdownarrow' : 'e-icons e-gnextforward e-icon-grightarrow'
        }));
        return node;
    }
}

/**
 * HeaderIndentCellRenderer class which responsible for building header indent cell.
 *
 * @hidden
 */
class HeaderIndentCellRenderer extends CellRenderer {
    constructor() {
        super(...arguments);
        this.element = this.parent.createElement('TH', { className: 'e-grouptopleftcell' });
    }
    /**
     * Function to render the indent cell
     *
     * @param  {Cell} cell - specifies the cell
     * @param  {Object} data - specifies the data
     * @returns {Element} returns the element
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    render(cell, data) {
        const node = this.element.cloneNode();
        node.appendChild(this.parent.createElement('div', { className: 'e-headercelldiv e-emptycell', innerHTML: '' }));
        return node;
    }
}

/**
 * DetailHeaderIndentCellRenderer class which responsible for building detail header indent cell.
 *
 * @hidden
 */
class DetailHeaderIndentCellRenderer extends CellRenderer {
    constructor() {
        super(...arguments);
        this.element = this.parent.createElement('TH', { className: 'e-detailheadercell' });
    }
    /**
     * Function to render the detail indent cell
     *
     * @param  {Cell} cell - specifies the cell
     * @param  {Object} data - specifies the data
     * @returns {Element} returns the element
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    render(cell, data) {
        const node = this.element.cloneNode();
        node.appendChild(this.parent.createElement('div', { className: 'e-emptycell' }));
        return node;
    }
}

/**
 * ExpandCellRenderer class which responsible for building group expand cell.
 *
 * @hidden
 */
class DetailExpandCellRenderer extends CellRenderer {
    constructor() {
        super(...arguments);
        this.element = this.parent.createElement('TD', {
            className: 'e-detailrowcollapse',
            attrs: { 'aria-expanded': 'false', role: 'gridcell', tabindex: '-1' }
        });
    }
    /**
     * Function to render the detail expand cell
     *
     * @param {Cell<Column>} cell - specifies the cell
     * @param {Object} data - specifies the data
     * @param {Object} attributes - specifies the attributes
     * @returns {Element} returns the element
     */
    render(cell, data, attributes$$1) {
        const node = this.element.cloneNode();
        if (attributes$$1 && !isNullOrUndefined(attributes$$1['class'])) {
            node.className = '';
            node.className = attributes$$1['class'];
            node.appendChild(this.parent.createElement('div', { className: 'e-icons e-dtdiagonaldown e-icon-gdownarrow' }));
        }
        else {
            node.appendChild(this.parent.createElement('div', { className: 'e-icons e-dtdiagonalright e-icon-grightarrow' }));
        }
        return node;
    }
}

/**
 * ExpandCellRenderer class which responsible for building group expand cell.
 *
 * @hidden
 */
class RowDragDropRenderer extends CellRenderer {
    constructor() {
        super(...arguments);
        this.element = this.parent.createElement('TD', {
            className: 'e-rowdragdrop e-rowdragdropcell',
            attrs: { role: 'gridcell', tabindex: '-1' }
        });
    }
    /**
     * Function to render the detail expand cell
     *
     * @param {Cell<Column>} cell - specifies the cell
     * @param {Object} data - specifies the data
     * @returns {Element} returns the element
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    render(cell, data) {
        const nodeElement = this.element.cloneNode();
        nodeElement.appendChild(this.parent.createElement('div', {
            className: 'e-icons e-rowcelldrag e-dtdiagonalright e-icon-rowdragicon'
        }));
        if (cell.isSelected) {
            nodeElement.classList.add('e-selectionbackground');
            nodeElement.classList.add('e-active');
        }
        return nodeElement;
    }
}

/**
 * DetailHeaderIndentCellRenderer class which responsible for building detail header indent cell.
 *
 * @hidden
 */
class RowDragDropHeaderRenderer extends CellRenderer {
    constructor() {
        super(...arguments);
        this.element = this.parent.createElement('TH', { className: 'e-rowdragheader' });
    }
    /**
     * Function to render the detail indent cell
     *
     * @param  {Cell} cell - specifies the cell
     * @param  {Object} data - specifies the data
     * @returns {Element} returns the element
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    render(cell, data) {
        const node = this.element.cloneNode();
        node.appendChild(createElement('div', { className: 'e-emptycell' }));
        return node;
    }
}

/**
 * Content module is used to render grid content
 *
 * @hidden
 */
class Render {
    /**
     * Constructor for render module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {ServiceLocator} locator - specifies the serviceLocator
     */
    constructor(parent, locator) {
        this.emptyGrid = false;
        this.counter = 0;
        this.parent = parent;
        this.locator = locator;
        this.data = new Data(parent, locator);
        this.l10n = locator.getService('localization');
        this.ariaService = this.locator.getService('ariaService');
        this.renderer = this.locator.getService('rendererFactory');
        this.addEventListener();
    }
    /**
     * To initialize grid header, content and footer rendering
     *
     * @returns {void}
     */
    render() {
        const gObj = this.parent;
        this.headerRenderer = this.renderer.getRenderer(RenderType.Header);
        this.contentRenderer = this.renderer.getRenderer(RenderType.Content);
        this.headerRenderer.renderPanel();
        this.contentRenderer.renderPanel();
        if (gObj.getColumns().length) {
            this.isLayoutRendered = true;
            this.headerRenderer.renderTable();
            this.contentRenderer.renderTable();
            this.emptyRow(false);
        }
        this.parent.scrollModule.setWidth();
        this.parent.scrollModule.setHeight();
        if (this.parent.height !== 'auto') {
            this.parent.scrollModule.setPadding();
        }
        this.refreshDataManager();
    }
    /**
     * Refresh the entire Grid.
     *
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     */
    refresh(e = { requestType: 'refresh' }) {
        const gObj = this.parent;
        gObj.notify(`${e.requestType}-begin`, e);
        gObj.trigger(actionBegin, e, (args = { requestType: 'refresh' }) => {
            if (args.cancel) {
                gObj.notify(cancelBegin, args);
                return;
            }
            if (args.requestType === 'delete' && gObj.allowPaging) {
                const dataLength = args.data.length;
                const count = gObj.pageSettings.totalRecordsCount - dataLength;
                const currentViewData = gObj.getCurrentViewRecords().length;
                // eslint-disable-next-line max-len
                if (!(currentViewData - dataLength) && count && ((gObj.pageSettings.currentPage - 1) * gObj.pageSettings.pageSize) === count) {
                    gObj.prevPageMoving = true;
                    gObj.setProperties({
                        pageSettings: {
                            totalRecordsCount: count, currentPage: Math.ceil(count / gObj.pageSettings.pageSize)
                        }
                    }, true);
                    gObj.pagerModule.pagerObj.totalRecordsCount = count;
                }
            }
            if (args.requestType === 'reorder' && this.parent.dataSource && 'result' in this.parent.dataSource) {
                this.contentRenderer.refreshContentRows(args);
            }
            else if ((args.requestType === 'paging' || args.requestType === 'columnstate' || args.requestType === 'reorder')
                && this.parent.groupSettings.enableLazyLoading && this.parent.groupSettings.columns.length
                && this.parent.contentModule.getGroupCache()[this.parent.pageSettings.currentPage]) {
                this.contentRenderer.refreshContentRows(args);
            }
            else {
                this.refreshDataManager(args);
            }
        });
    }
    /**
     * @returns {void}
     * @hidden
     */
    resetTemplates() {
        const gObj = this.parent;
        const gridColumns = gObj.getColumns();
        if (gObj.detailTemplate) {
            const detailTemplateID = gObj.element.id + 'detailTemplate';
            blazorTemplates[detailTemplateID] = [];
            resetBlazorTemplate(detailTemplateID, 'DetailTemplate');
        }
        if (gObj.groupSettings.captionTemplate) {
            resetBlazorTemplate(gObj.element.id + 'captionTemplate', 'CaptionTemplate');
        }
        if (gObj.rowTemplate) {
            resetBlazorTemplate(gObj.element.id + 'rowTemplate', 'RowTemplate');
        }
        if (gObj.toolbarTemplate) {
            resetBlazorTemplate(gObj.element.id + 'toolbarTemplate', 'ToolbarTemplate');
        }
        if (gObj.pageSettings.template) {
            resetBlazorTemplate(gObj.element.id + '_template', 'pageSettings');
        }
        for (let i = 0; i < gridColumns.length; i++) {
            if (gridColumns[i].template) {
                blazorTemplates[gObj.element.id + gridColumns[i].uid] = [];
                resetBlazorTemplate(gObj.element.id + gridColumns[i].uid, 'Template');
            }
            if (gridColumns[i].headerTemplate) {
                resetBlazorTemplate(gObj.element.id + gridColumns[i].uid + 'headerTemplate', 'HeaderTemplate');
            }
            if (gridColumns[i].filterTemplate) {
                resetBlazorTemplate(gObj.element.id + gridColumns[i].uid + 'filterTemplate', 'FilterTemplate');
            }
        }
        const guid = 'guid';
        for (let k = 0; k < gObj.aggregates.length; k++) {
            for (let j = 0; j < gObj.aggregates[k].columns.length; j++) {
                if (gObj.aggregates[k].columns[j].footerTemplate) {
                    const tempID = gObj.element.id + gObj.aggregates[k].columns[j][guid] + 'footerTemplate';
                    resetBlazorTemplate(tempID, 'FooterTemplate');
                }
                if (gObj.aggregates[k].columns[j].groupFooterTemplate) {
                    const tempID = gObj.element.id + gObj.aggregates[k].columns[j][guid] + 'groupFooterTemplate';
                    resetBlazorTemplate(tempID, 'GroupFooterTemplate');
                }
                if (gObj.aggregates[k].columns[j].groupCaptionTemplate) {
                    const tempID = gObj.element.id + gObj.aggregates[k].columns[j][guid] + 'groupCaptionTemplate';
                    resetBlazorTemplate(tempID, 'GroupCaptionTemplate');
                }
            }
        }
    }
    refreshComplete(e) {
        this.parent.trigger(actionComplete, e);
    }
    /**
     * The function is used to refresh the dataManager
     *
     * @param {NotifyArgs} args - specifies the args
     * @returns {void}
     */
    refreshDataManager(args = {}) {
        if (args.requestType !== 'virtualscroll' && !args.isCaptionCollapse) {
            this.parent.showSpinner();
        }
        this.parent.notify(resetInfiniteBlocks, args);
        this.emptyGrid = false;
        let dataManager;
        const isFActon = this.isNeedForeignAction();
        this.ariaService.setBusy(this.parent.getContent().querySelector('.' + content), true);
        if (isFActon) {
            const deffered = new Deferred();
            dataManager = this.getFData(deffered, args);
        }
        if (!dataManager) {
            dataManager = this.data.getData(args, this.data.generateQuery().requiresCount());
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            dataManager = dataManager.then((e) => {
                const query = this.data.generateQuery().requiresCount();
                if (this.emptyGrid) {
                    const def = new Deferred();
                    def.resolve({ result: [], count: 0 });
                    return def.promise;
                }
                return this.data.getData(args, query);
            });
        }
        if (this.parent.getForeignKeyColumns().length && (!isFActon || this.parent.searchSettings.key.length)) {
            const deffered = new Deferred();
            dataManager = dataManager.then((e) => {
                this.parent.notify(getForeignKeyData, { dataManager: dataManager, result: e, promise: deffered, action: args });
                return deffered.promise;
            });
        }
        if (this.parent.groupSettings.disablePageWiseAggregates && this.parent.groupSettings.columns.length) {
            dataManager = dataManager.then((e) => this.validateGroupRecords(e));
        }
        dataManager.then((e) => this.dataManagerSuccess(e, args))
            .catch((e) => this.dataManagerFailure(e, args));
    }
    getFData(deferred, args) {
        this.parent.notify(getForeignKeyData, { isComplex: true, promise: deferred, action: args });
        return deferred.promise;
    }
    isNeedForeignAction() {
        const gObj = this.parent;
        return !!((gObj.allowFiltering && gObj.filterSettings.columns.length) ||
            (gObj.searchSettings.key.length)) && this.foreignKey(this.parent.getForeignKeyColumns());
    }
    foreignKey(columns) {
        return columns.some((col) => {
            let fbool = false;
            fbool = this.parent.filterSettings.columns.some((value) => {
                return col.uid === value.uid;
            });
            return !!(fbool || this.parent.searchSettings.key.length);
        });
    }
    sendBulkRequest(args) {
        args.requestType = 'batchsave';
        const promise = this.data.saveChanges(args.changes, this.parent.getPrimaryKeyFieldNames()[0], args.original);
        const query = this.data.generateQuery().requiresCount();
        if (this.data.dataManager.dataSource.offline) {
            this.refreshDataManager({ requestType: 'batchsave' });
            return;
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            promise.then((e) => {
                this.data.getData(args, query)
                    .then((e) => this.dmSuccess(e, args))
                    .catch((e) => this.dmFailure(e, args));
            })
                .catch((e) => this.dmFailure(e, args));
        }
    }
    dmSuccess(e, args) {
        this.dataManagerSuccess(e, args);
    }
    dmFailure(e, args) {
        this.dataManagerFailure(e, args);
    }
    /**
     * Render empty row to Grid which is used at the time to represent to no records.
     *
     * @returns {void}
     * @hidden
     */
    renderEmptyRow() {
        this.emptyRow(true);
    }
    emptyRow(isTrigger) {
        const gObj = this.parent;
        let tbody$$1 = this.contentRenderer.getTable().querySelector(tbody);
        if (!isNullOrUndefined(tbody$$1)) {
            remove(tbody$$1);
        }
        tbody$$1 = this.parent.createElement(tbody, { attrs: { role: 'rowgroup' } });
        let spanCount = 0;
        if (gObj.detailTemplate || gObj.childGrid) {
            ++spanCount;
        }
        const tr = this.parent.createElement('tr', { className: 'e-emptyrow', attrs: { role: 'row' } });
        tr.appendChild(this.parent.createElement('td', {
            innerHTML: this.l10n.getConstant('EmptyRecord'),
            attrs: { colspan: (gObj.getVisibleColumns().length + spanCount + gObj.groupSettings.columns.length).toString() }
        }));
        tbody$$1.appendChild(tr);
        this.contentRenderer.renderEmpty(tbody$$1);
        if (isTrigger) {
            this.parent.trigger(dataBound, {});
            this.parent.notify(onEmpty, { rows: [new Row({ isDataRow: true, cells: [new Cell({ isDataCell: true, visible: true })] })] });
        }
    }
    dynamicColumnChange() {
        if (this.parent.getCurrentViewRecords().length) {
            this.updateColumnType(this.parent.getCurrentViewRecords()[0]);
        }
    }
    updateColumnType(record) {
        const columns = this.parent.getColumns();
        let value;
        const cFormat = 'customFormat';
        const equalTo = 'equalTo';
        const data = record && record.items ? record.items[0] : record;
        const fmtr = this.locator.getService('valueFormatter');
        for (let i = 0, len = columns.length; i < len; i++) {
            value = getObject(columns[i].field || '', data);
            if (!isNullOrUndefined(columns[i][cFormat])) {
                columns[i].format = columns[i][cFormat];
            }
            if (!isNullOrUndefined(columns[i].validationRules) && !isNullOrUndefined(columns[i].validationRules[equalTo])) {
                columns[i].validationRules[equalTo][0] = this.parent.element.id + columns[i].validationRules[equalTo][0];
            }
            if (columns[i].isForeignColumn() && columns[i].columnData) {
                value = getObject(columns[i].foreignKeyValue || '', columns[i].columnData[0]);
            }
            if (!isNullOrUndefined(value)) {
                this.isColTypeDef = true;
                if (!columns[i].type) {
                    columns[i].type = value.getDay ? (value.getHours() > 0 || value.getMinutes() > 0 ||
                        value.getSeconds() > 0 || value.getMilliseconds() > 0 ? 'datetime' : 'date') : typeof (value);
                }
            }
            else {
                columns[i].type = columns[i].type || null;
            }
            const valueFormatter = new ValueFormatter();
            if (columns[i].format && (columns[i].format.skeleton || (columns[i].format.format &&
                typeof columns[i].format.format === 'string'))) {
                columns[i].setFormatter(valueFormatter.getFormatFunction(extend({}, columns[i].format)));
                columns[i].setParser(valueFormatter.getParserFunction(columns[i].format));
            }
            if (typeof (columns[i].format) === 'string') {
                setFormatter(this.locator, columns[i]);
            }
            else if (!columns[i].format && columns[i].type === 'number') {
                columns[i].setParser(fmtr.getParserFunction({ format: 'n2' }));
            }
        }
    }
    /**
     * @param {ReturnType} e - specifies the return type
     * @param {NotifyArgs} args - specifies the Notifyargs
     * @returns {void}
     * @hidden
     */
    // tslint:disable-next-line:max-func-body-length
    dataManagerSuccess(e, args) {
        const gObj = this.parent;
        this.contentRenderer = this.renderer.getRenderer(RenderType.Content);
        this.headerRenderer = this.renderer.getRenderer(RenderType.Header);
        e.actionArgs = args;
        const isInfiniteDelete = this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache
            && (args.requestType === 'delete' || (args.requestType === 'save' && this.parent.infiniteScrollModule.requestType === 'add'));
        // tslint:disable-next-line:max-func-body-length
        gObj.trigger(beforeDataBound, e, (dataArgs) => {
            if (dataArgs.cancel) {
                return;
            }
            dataArgs.result = isNullOrUndefined(dataArgs.result) ? [] : dataArgs.result;
            const len = Object.keys(dataArgs.result).length;
            if (this.parent.isDestroyed) {
                return;
            }
            if ((!gObj.getColumns().length && !len) && !(gObj.columns.length && gObj.columns[0] instanceof Column)) {
                gObj.hideSpinner();
                return;
            }
            if (this.isInfiniteEnd(args) && !len) {
                this.parent.notify(infiniteEditHandler, { e: args, result: e.result, count: e.count, agg: e.aggregates });
                return;
            }
            this.parent.isEdit = false;
            this.parent.notify(editReset, {});
            this.parent.notify(tooltipDestroy, {});
            this.contentRenderer.prevCurrentView = this.parent.currentViewData.slice();
            gObj.currentViewData = dataArgs.result;
            gObj.notify(refreshInfiniteCurrentViewData, { args: args, data: dataArgs.result });
            if (!len && dataArgs.count && gObj.allowPaging && args && args.requestType !== 'delete') {
                if (this.parent.groupSettings.enableLazyLoading
                    && (args.requestType === 'grouping' || args.requestType === 'ungrouping')) {
                    this.parent.notify(groupComplete, args);
                }
                gObj.prevPageMoving = true;
                gObj.pageSettings.totalRecordsCount = dataArgs.count;
                if (args.requestType !== 'paging') {
                    gObj.pageSettings.currentPage = Math.ceil(dataArgs.count / gObj.pageSettings.pageSize);
                }
                gObj.dataBind();
                return;
            }
            if ((!gObj.getColumns().length && len || !this.isLayoutRendered) && !isGroupAdaptive(gObj)) {
                this.updatesOnInitialRender(dataArgs);
            }
            if (!this.isColTypeDef && gObj.getCurrentViewRecords()) {
                if (this.data.dataManager.dataSource.offline && gObj.dataSource && gObj.dataSource.length) {
                    this.updateColumnType(gObj.dataSource[0]);
                }
                else {
                    this.updateColumnType(gObj.getCurrentViewRecords()[0]);
                }
            }
            if (!this.parent.isInitialLoad && this.parent.groupSettings.disablePageWiseAggregates &&
                !this.parent.groupSettings.columns.length) {
                dataArgs.result = this.parent.dataSource instanceof Array ? this.parent.dataSource : this.parent.currentViewData;
            }
            if ((this.parent.isReact || this.parent.isVue) && !isNullOrUndefined(args) && args.requestType !== 'infiniteScroll' && !args.isFrozen) {
                clearReactVueTemplates(this.parent, ['footerTemplate']);
            }
            this.parent.notify(dataReady, extend({ count: dataArgs.count, result: dataArgs.result, aggregates: dataArgs.aggregates }, args));
            if ((gObj.groupSettings.columns.length || (args && args.requestType === 'ungrouping'))
                && (args && args.requestType !== 'filtering')) {
                this.headerRenderer.refreshUI();
            }
            if (len) {
                if (isGroupAdaptive(gObj)) {
                    const content$$1 = 'content';
                    args.scrollTop = { top: this.contentRenderer[content$$1].scrollTop };
                }
                if (!isInfiniteDelete) {
                    if (this.parent.enableImmutableMode) {
                        this.contentRenderer.immutableModeRendering(args);
                    }
                    else {
                        this.contentRenderer.refreshContentRows(args);
                    }
                }
                else {
                    this.parent.notify(infiniteEditHandler, { e: args, result: e.result, count: e.count, agg: e.aggregates });
                }
            }
            else {
                if (args && args.isCaptionCollapse) {
                    return;
                }
                if (!gObj.getColumns().length) {
                    gObj.element.innerHTML = '';
                    alert(this.l10n.getConstant('EmptyDataSourceError')); //ToDO: change this alert as dialog
                    return;
                }
                this.contentRenderer.setRowElements([]);
                this.contentRenderer.setRowObjects([]);
                this.ariaService.setBusy(this.parent.getContent().querySelector('.' + content), false);
                this.renderEmptyRow();
                if (args) {
                    const action = (args.requestType || '').toLowerCase() + '-complete';
                    this.parent.notify(action, args);
                    if (args.requestType === 'batchsave') {
                        args.cancel = false;
                        args.rows = [];
                        args.isFrozen = this.parent.getFrozenColumns() !== 0 && !args.isFrozen;
                        this.parent.trigger(actionComplete, args);
                    }
                }
                this.parent.hideSpinner();
            }
            this.parent.notify(toolbarRefresh, {});
            this.setRowCount(this.parent.getCurrentViewRecords().length);
            this.parent.getDataModule().isQueryInvokedFromData = false;
        });
    }
    /**
     * @param {object} e - specifies the object
     * @param {Object[]} e.result - specifies the result
     * @param {NotifyArgs} args - specifies the args
     * @returns {void}
     * @hidden
     */
    dataManagerFailure(e, args) {
        this.ariaService.setOptions(this.parent.getContent().querySelector('.' + content), { busy: false, invalid: true });
        this.setRowCount(1);
        this.parent.trigger(actionFailure, { error: e });
        this.parent.hideSpinner();
        if (args.requestType === 'save' || args.requestType === 'delete'
            || args.name === 'bulk-save') {
            return;
        }
        this.parent.currentViewData = [];
        this.renderEmptyRow();
        this.parent.log('actionfailure', { error: e });
    }
    setRowCount(dataRowCount) {
        this.ariaService.setOptions(this.parent.getHeaderTable(), {
            rowcount: dataRowCount ? dataRowCount.toString() : '1'
        });
    }
    isInfiniteEnd(args) {
        return this.parent.enableInfiniteScrolling && !this.parent.infiniteScrollSettings.enableCache && args.requestType === 'delete';
    }
    updatesOnInitialRender(e) {
        this.isLayoutRendered = true;
        if (this.parent.columns.length < 1) {
            this.buildColumns(e.result[0]);
        }
        prepareColumns(this.parent.columns, null, this.parent);
        this.headerRenderer.renderTable();
        this.contentRenderer.renderTable();
        this.parent.isAutoGen = true;
        this.parent.notify(autoCol, {});
    }
    iterateComplexColumns(obj, field, split) {
        const keys = Object.keys(obj);
        for (let i = 0; i < keys.length; i++) {
            const childKeys = typeof obj[keys[i]] === 'object' && obj[keys[i]] && !(obj[keys[i]] instanceof Date) ?
                Object.keys(obj[keys[i]]) : [];
            if (childKeys.length) {
                this.iterateComplexColumns(obj[keys[i]], field + (keys[i] + '.'), split);
            }
            else {
                split[this.counter] = field + keys[i];
                this.counter++;
            }
        }
    }
    buildColumns(record) {
        const cols = [];
        const complexCols = {};
        this.iterateComplexColumns(record, '', complexCols);
        const columns = Object.keys(complexCols).filter((e) => complexCols[e] !== 'BlazId').
            map((field) => complexCols[field]);
        for (let i = 0, len = columns.length; i < len; i++) {
            cols[i] = { 'field': columns[i] };
            if (this.parent.enableColumnVirtualization) {
                cols[i].width = !isNullOrUndefined(cols[i].width) ? cols[i].width : 200;
            }
        }
        this.parent.setProperties({ 'columns': cols }, true);
    }
    instantiateRenderer() {
        this.renderer.addRenderer(RenderType.Header, new HeaderRender(this.parent, this.locator));
        this.renderer.addRenderer(RenderType.Content, new ContentRender(this.parent, this.locator));
        const cellrender = this.locator.getService('cellRendererFactory');
        cellrender.addCellRenderer(CellType.Header, new HeaderCellRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.Data, new CellRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.StackedHeader, new StackedHeaderCellRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.Indent, new IndentCellRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.GroupCaption, new GroupCaptionCellRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.GroupCaptionEmpty, new GroupCaptionEmptyCellRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.Expand, new ExpandCellRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.HeaderIndent, new HeaderIndentCellRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.StackedHeader, new StackedHeaderCellRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.DetailHeader, new DetailHeaderIndentCellRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.RowDragHIcon, new RowDragDropHeaderRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.DetailExpand, new DetailExpandCellRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.DetailFooterIntent, new IndentCellRenderer(this.parent, this.locator));
        cellrender.addCellRenderer(CellType.RowDragIcon, new RowDragDropRenderer(this.parent, this.locator));
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(initialLoad, this.instantiateRenderer, this);
        this.parent.on('refreshdataSource', this.dataManagerSuccess, this);
        this.parent.on(modelChanged, this.refresh, this);
        this.parent.on(refreshComplete, this.refreshComplete, this);
        this.parent.on(bulkSave, this.sendBulkRequest, this);
        this.parent.on(showEmptyGrid, () => { this.emptyGrid = true; }, this);
        this.parent.on(autoCol, this.dynamicColumnChange, this);
    }
    /**
     * @param {ReturnType} e - specifies the Return type
     * @returns {Promise<Object>} returns the object
     * @hidden
     */
    validateGroupRecords(e) {
        const index = e.result.length - 1;
        if (index < 0) {
            return Promise.resolve(e);
        }
        const group0 = e.result[0];
        const groupN = e.result[index];
        const predicate = [];
        const addWhere = (input) => {
            const groups = [group0, groupN];
            for (let i = 0; i < groups.length; i++) {
                predicate.push(new Predicate('field', '==', groups[i].field).and(this.getPredicate('key', 'equal', groups[i].key)));
            }
            input.where(Predicate.or(predicate));
        };
        const query = new Query();
        addWhere(query);
        const curDm = new DataManager(e.result);
        const curFilter = curDm.executeLocal(query);
        const newQuery = this.data.generateQuery(true);
        const rPredicate = [];
        if (this.data.isRemote()) {
            const groups = [group0, groupN];
            for (let i = 0; i < groups.length; i++) {
                rPredicate.push(this.getPredicate(groups[i].field, 'equal', groups[i].key));
            }
            newQuery.where(Predicate.or(rPredicate));
        }
        else {
            addWhere(newQuery);
        }
        const deferred = new Deferred();
        this.data.getData({}, newQuery).then((r) => {
            this.updateGroupInfo(curFilter, r.result);
            deferred.resolve(e);
        }).catch((e) => deferred.reject(e));
        return deferred.promise;
    }
    getPredicate(key, operator, value) {
        if (value instanceof Date) {
            return getDatePredicate({ field: key, operator: operator, value: value });
        }
        return new Predicate(key, operator, value);
    }
    updateGroupInfo(current, untouched) {
        const dm = new DataManager(untouched);
        const elements = current;
        for (let i = 0; i < elements.length; i++) {
            const uGroup = dm.executeLocal(new Query()
                .where(new Predicate('field', '==', elements[i].field).and(this.getPredicate('key', 'equal', elements[i].key))))[0];
            elements[i].count = uGroup.count;
            const itemGroup = elements[i].items;
            const uGroupItem = uGroup.items;
            if (itemGroup.GroupGuid) {
                elements[i].items = this.updateGroupInfo(elements[i].items, uGroup.items);
            }
            const rows = this.parent.aggregates;
            for (let j = 0; j < rows.length; j++) {
                const row$$1 = rows[j];
                for (let k = 0; k < row$$1.columns.length; k++) {
                    const types = row$$1.columns[k].type instanceof Array ? (row$$1.columns[k].type) :
                        [(row$$1.columns[k].type)];
                    for (let l = 0; l < types.length; l++) {
                        const key = row$$1.columns[k].field + ' - ' + types[l].toLowerCase();
                        const data = itemGroup.level ? uGroupItem.records : uGroup.items;
                        const context = this.parent;
                        if (types[l] === 'Custom') {
                            const data = itemGroup.level ? uGroupItem : uGroup;
                            let temp = row$$1.columns[k].customAggregate;
                            if (typeof temp === 'string') {
                                temp = getValue(temp, window);
                            }
                            elements[i].aggregates[key] = temp ? temp.call(context, data, row$$1.columns[k]) : '';
                        }
                        else {
                            // eslint-disable-next-line max-len
                            elements[i].aggregates[key] = DataUtil.aggregates[types[l].toLowerCase()](data, row$$1.columns[k].field);
                        }
                    }
                }
            }
        }
        return current;
    }
}

/**
 * CellRendererFactory
 *
 * @hidden
 */
class CellRendererFactory {
    constructor() {
        this.cellRenderMap = {};
    }
    addCellRenderer(name, type) {
        name = typeof name === 'string' ? name : getEnumValue(CellType, name);
        if (isNullOrUndefined(this.cellRenderMap[name])) {
            this.cellRenderMap[name] = type;
        }
    }
    getCellRenderer(name) {
        name = typeof name === 'string' ? name : getEnumValue(CellType, name);
        if (isNullOrUndefined(this.cellRenderMap[name])) {
            // eslint-disable-next-line no-throw-literal
            throw `The cellRenderer ${name} is not found`;
        }
        else {
            return this.cellRenderMap[name];
        }
    }
}

/**
 *
 * The `ResponsiveDialogRenderer` module is used to render the responsive dialogs.
 */
class ResponsiveDialogRenderer {
    constructor(parent, serviceLocator) {
        this.sortedCols = [];
        this.sortPredicate = [];
        /** @hidden */
        this.isCustomDialog = false;
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.addEventListener();
    }
    addEventListener() {
        this.evtHandlers = [{ event: filterDialogClose, handler: this.closeCustomDialog },
            { event: refreshCustomFilterOkBtn, handler: this.refreshCustomFilterOkBtn },
            { event: renderResponsiveCmenu, handler: this.renderResponsiveContextMenu },
            { event: filterCmenuSelect, handler: this.renderCustomFilterDiv },
            { event: customFilterClose, handler: this.customExFilterClose },
            { event: refreshCustomFilterClearBtn, handler: this.refreshCustomFilterClearBtn }];
        addRemoveEventListener(this.parent, this.evtHandlers, true, this);
        this.onActionCompleteFn = this.editComplate.bind(this);
        this.parent.addEventListener(actionComplete, this.onActionCompleteFn);
    }
    customExFilterClose() {
        this.isCustomDlgRender = false;
    }
    renderCustomFilterDiv() {
        const header = this.customResponsiveDlg.element.querySelector('.e-dlg-header-content');
        const title = header.querySelector('.e-dlg-custom-header');
        const closeBtn = header.querySelector('.e-dlg-closeicon-btn');
        this.isCustomDlgRender = true;
        this.parent.filterModule.filterModule.closeDialog();
        this.saveBtn.element.style.display = '';
        this.refreshCustomFilterOkBtn({ disabled: false });
        this.backBtn.element.style.display = 'none';
        closeBtn.style.display = '';
        title.innerHTML = this.parent.localeObj.getConstant('CustomFilter');
        const content = this.customResponsiveDlg.element.querySelector('.e-dlg-content');
        this.customExcelFilterParent = this.parent.createElement('div', { className: 'e-xl-customfilterdiv e-default-filter' });
        content.appendChild(this.customExcelFilterParent);
    }
    renderResponsiveContextMenu(args) {
        if (this.action === ResponsiveDialogAction.isFilter) {
            const content = this.customResponsiveDlg.element.querySelector('.e-dlg-content');
            const header = this.customResponsiveDlg.element.querySelector('.e-dlg-header-content');
            const closeBtn = header.querySelector('.e-dlg-closeicon-btn');
            const text = header.querySelector('.e-dlg-custom-header');
            if (args.isOpen) {
                content.firstChild.style.display = 'none';
                content.appendChild(args.target);
                closeBtn.style.display = 'none';
                this.saveBtn.element.style.display = 'none';
                this.filterClearBtn.element.style.display = 'none';
                text.innerHTML = args.header;
                const backBtn = this.parent.createElement('button');
                const span = this.parent.createElement('span', { className: 'e-btn-icon e-resfilterback e-icons' });
                backBtn.appendChild(span);
                this.backBtn = new Button({
                    cssClass: this.parent.cssClass ? 'e-res-back-btn' + ' ' + this.parent.cssClass : 'e-res-back-btn'
                });
                this.backBtn.appendTo(backBtn);
                text.parentElement.insertBefore(backBtn, text);
            }
            else if (this.backBtn && !this.isCustomDlgRender) {
                content.firstChild.style.display = '';
                remove(this.backBtn.element);
                closeBtn.style.display = '';
                this.saveBtn.element.style.display = '';
                if (this.isFiltered) {
                    this.filterClearBtn.element.style.display = '';
                }
                text.innerHTML = this.getHeaderTitle({ action: ResponsiveDialogAction.isFilter }, args.col);
            }
        }
    }
    refreshCustomFilterClearBtn(args) {
        if (this.filterClearBtn) {
            this.isFiltered = args.isFiltered;
            this.filterClearBtn.element.style.display = args.isFiltered ? '' : 'none';
        }
    }
    refreshCustomFilterOkBtn(args) {
        if (this.saveBtn) {
            this.saveBtn.disabled = args.disabled;
        }
    }
    renderResponsiveContent(col) {
        const gObj = this.parent;
        if (col) {
            this.filterParent = this.parent.createElement('div', { className: 'e-mainfilterdiv e-default-filter', id: col.uid + '-main-filter' });
            return this.filterParent;
        }
        else {
            const cols = gObj.getColumns();
            this.customColumnDiv = gObj.createElement('div', { className: 'columndiv', styles: 'width: 100%' });
            const sortBtnParent = gObj.createElement('div', { className: 'e-ressortbutton-parent' });
            const filteredCols = [];
            const isSort = this.action === ResponsiveDialogAction.isSort;
            const isFilter = this.action === ResponsiveDialogAction.isFilter;
            if (isFilter) {
                for (let i = 0; i < gObj.filterSettings.columns.length; i++) {
                    filteredCols.push(gObj.filterSettings.columns[i].field);
                }
            }
            for (let i = 0; i < cols.length; i++) {
                if (!cols[i].visible || (!cols[i].allowSorting && isSort) || (!cols[i].allowFiltering && isFilter)) {
                    continue;
                }
                const cDiv = gObj.createElement('div', { className: 'e-responsivecoldiv' });
                cDiv.setAttribute('data-e-mappingname', cols[i].field);
                cDiv.setAttribute('data-e-mappinguid', cols[i].uid);
                const span = gObj.createElement('span', { innerHTML: cols[i].headerText, className: 'e-res-header-text' });
                cDiv.appendChild(span);
                this.customColumnDiv.appendChild(cDiv);
                if (isSort) {
                    const fields = this.getSortedFieldsAndDirections('field');
                    const index = fields.indexOf(cols[i].field);
                    const button = gObj.createElement('button', { id: gObj.element.id + cols[i].field + 'sortbutton' });
                    const clone = sortBtnParent.cloneNode();
                    clone.appendChild(button);
                    cDiv.appendChild(clone);
                    const btnObj = new Button({
                        cssClass: this.parent.cssClass ? 'e-ressortbutton' + ' ' + this.parent.cssClass : 'e-ressortbutton'
                    });
                    btnObj.appendTo(button);
                    button.innerHTML = index > -1 ? this.parent.sortSettings.columns[index].direction : 'None';
                    button.onclick = (e) => {
                        this.sortButtonClickHandler(e.target);
                    };
                }
                if (isFilter && filteredCols.indexOf(cols[i].field) > -1) {
                    const divIcon = gObj.createElement('div', { className: 'e-icons e-res-icon e-filtersetdiv' });
                    const iconSpan = gObj.createElement('span', { className: 'e-icons e-res-icon e-filterset' });
                    iconSpan.setAttribute('colType', cols[i].type);
                    divIcon.appendChild(iconSpan);
                    cDiv.appendChild(divIcon);
                }
            }
            EventHandler.add(this.customColumnDiv, 'click', this.customFilterColumnClickHandler, this);
            return this.customColumnDiv;
        }
    }
    getSortedFieldsAndDirections(name) {
        const fields = [];
        for (let i = 0; i < this.parent.sortSettings.columns.length; i++) {
            fields.push(this.parent.sortSettings.columns[i][name]);
        }
        return fields;
    }
    sortButtonClickHandler(target) {
        if (target) {
            const columndiv = parentsUntil(target, 'e-responsivecoldiv');
            const field = columndiv.getAttribute('data-e-mappingname');
            if (!this.parent.allowMultiSorting) {
                this.sortPredicate = [];
                this.sortedCols = [];
                this.isSortApplied = false;
                this.resetSortButtons(target);
            }
            const txt = target.textContent;
            const direction = txt === 'None' ? 'Ascending' : txt === 'Ascending' ? 'Descending' : 'None';
            target.innerHTML = direction;
            this.setSortedCols(field, direction);
        }
    }
    resetSortButtons(target) {
        const buttons = [].slice.call(this.customColumnDiv.getElementsByClassName('e-ressortbutton'));
        for (let i = 0; i < buttons.length; i++) {
            if (buttons[i] !== target) {
                buttons[i].innerHTML = 'None';
            }
        }
    }
    setSortedCols(field, direction) {
        const fields = this.getCurrentSortedFields();
        const index = fields.indexOf(field);
        if (this.parent.allowMultiSorting && index > -1) {
            this.sortedCols.splice(index, 1);
            this.sortPredicate.splice(index, 1);
        }
        this.isSortApplied = true;
        if (direction !== 'None') {
            this.sortedCols.push(field);
            this.sortPredicate.push({ field: field, direction: direction });
        }
    }
    getCurrentSortedFields() {
        const fields = [];
        for (let i = 0; i < this.sortedCols.length; i++) {
            fields.push(this.sortedCols[i]);
        }
        return fields;
    }
    customFilterColumnClickHandler(e) {
        if (this.action !== ResponsiveDialogAction.isFilter) {
            return;
        }
        const gObj = this.parent;
        const target = e.target;
        if (gObj.filterSettings.type !== 'FilterBar') {
            if (target.classList.contains('e-responsivecoldiv') || target.parentElement.classList.contains('e-responsivecoldiv')) {
                let field = target.getAttribute('data-e-mappingname');
                if (!field) {
                    field = target.parentElement.getAttribute('data-e-mappingname');
                }
                if (field) {
                    const col = gObj.getColumnByField(field);
                    this.isRowResponsive = true;
                    this.showResponsiveDialog(col);
                }
            }
            else if (target.classList.contains('e-filterset') || target.parentElement.classList.contains('e-filtersetdiv')) {
                const colDiv = parentsUntil(target, 'e-responsivecoldiv');
                if (colDiv) {
                    const field = colDiv.getAttribute('data-e-mappingname');
                    const col = gObj.getColumnByField(field);
                    if (col.filter.type === 'Menu' || (!col.filter.type && gObj.filterSettings.type === 'Menu')) {
                        this.isDialogClose = true;
                    }
                    this.parent.filterModule.filterModule.clearCustomFilter(col);
                    this.removeCustomDlgFilterEle(target);
                }
            }
        }
    }
    /**
     * Function to show the responsive dialog
     *
     * @param {Column} col - specifies the column
     * @returns {void}
     */
    showResponsiveDialog(col) {
        if (this.isCustomDialog && this.action === ResponsiveDialogAction.isFilter && !this.isRowResponsive) {
            this.renderCustomFilterDialog();
        }
        else {
            this.filteredCol = col;
            this.renderResponsiveDialog(col);
            if (this.parent.enableAdaptiveUI && col) {
                this.parent.filterModule.setFilterModel(col);
                this.parent.filterModule.filterModule.openDialog(this.parent.filterModule.createOptions(col, undefined));
            }
            if (this.action === ResponsiveDialogAction.isSort) {
                const args = {
                    cancel: false, dialogObj: this.customResponsiveDlg, requestType: 'beforeOpenAptiveSortDialog'
                };
                this.parent.trigger(beforeOpenAdaptiveDialog, args);
                if (args.cancel) {
                    return;
                }
            }
            this.customResponsiveDlg.show(true);
            this.customResponsiveDlg.element.style.maxHeight = '100%';
            this.setTopToChildDialog(this.customResponsiveDlg.element);
        }
    }
    setTopToChildDialog(dialogEle) {
        const child = dialogEle.querySelector('.e-dialog');
        if (child) {
            const top = dialogEle.querySelector('.e-dlg-header-content').getBoundingClientRect().height;
            child.style.top = top + 'px';
        }
    }
    renderCustomFilterDialog(col) {
        const gObj = this.parent;
        if (this.action === ResponsiveDialogAction.isFilter && gObj.filterSettings.type === 'FilterBar') {
            return;
        }
        const outerDiv = this.parent.createElement('div', {
            id: gObj.element.id + 'customfilter', className: 'e-customfilterdiv e-responsive-dialog'
        });
        this.parent.element.appendChild(outerDiv);
        this.customFilterDlg = this.getDialogOptions(col, true);
        const args = {
            cancel: false, dialogObj: this.customFilterDlg, requestType: 'beforeOpenAptiveFilterDialog'
        };
        this.parent.trigger(beforeOpenAdaptiveDialog, args);
        if (args.cancel) {
            return;
        }
        this.customFilterDlg.appendTo(outerDiv);
        this.customFilterDlg.show(true);
        this.customFilterDlg.element.style.maxHeight = '100%';
    }
    getDialogOptions(col, isCustomFilter, id) {
        const options = new Dialog({
            isModal: true,
            showCloseIcon: true,
            closeOnEscape: false,
            locale: this.parent.locale,
            target: this.parent.adaptiveDlgTarget ? this.parent.adaptiveDlgTarget : document.body,
            visible: false,
            enableRtl: this.parent.enableRtl,
            content: this.renderResponsiveContent(col),
            open: this.dialogOpen.bind(this),
            created: this.dialogCreated.bind(this),
            close: this.beforeDialogClose.bind(this),
            width: '100%',
            height: '100%',
            animationSettings: { effect: 'None' },
            cssClass: this.parent.cssClass ? this.parent.cssClass : ''
        });
        const isStringTemplate = 'isStringTemplate';
        options[isStringTemplate] = true;
        if (isCustomFilter) {
            options.header = this.renderResponsiveHeader(col, undefined, true);
            options.cssClass = 'e-customfilter';
        }
        else {
            options.header = this.renderResponsiveHeader(col);
            options.cssClass = this.parent.rowRenderingMode === 'Vertical' && this.action === ResponsiveDialogAction.isFilter
                ? 'e-res' + id + ' e-row-responsive-filter' : 'e-res' + id;
        }
        return options;
    }
    renderResponsiveDialog(col) {
        const gObj = this.parent;
        if (this.action === ResponsiveDialogAction.isFilter && gObj.filterSettings.type === 'FilterBar') {
            return;
        }
        const id = this.action === ResponsiveDialogAction.isFilter ? 'filter' : 'sort';
        const outerDiv = this.parent.createElement('div', {
            id: gObj.element.id + 'responsive' + id, className: 'e-res' + id + 'div e-responsive-dialog'
        });
        this.parent.element.appendChild(outerDiv);
        this.customResponsiveDlg = this.getDialogOptions(col, false, id);
        this.customResponsiveDlg.appendTo(outerDiv);
    }
    dialogCreated() {
        addBiggerDialog(this.parent);
    }
    dialogOpen() {
        if (this.action === ResponsiveDialogAction.isSort && this.parent.allowMultiSorting) {
            for (let i = 0; i < this.parent.sortSettings.columns.length; i++) {
                this.sortedCols.push(this.parent.sortSettings.columns[i].field);
                const sortField = this.parent.sortSettings.columns[i].field;
                const sortDirection = this.parent.sortSettings.columns[i].direction;
                this.sortPredicate.push({ field: sortField, direction: sortDirection });
            }
        }
    }
    beforeDialogClose(args) {
        this.isDialogClose = args.element && !args.element.querySelector('.e-xl-customfilterdiv')
            && args.element.classList.contains('e-resfilterdiv');
        if (this.action === ResponsiveDialogAction.isFilter) {
            if (args.element.classList.contains('e-resfilterdiv')) {
                this.parent.filterModule.filterModule.closeResponsiveDialog(this.isCustomDlgRender);
            }
            else if (args.element.classList.contains('e-customfilterdiv')) {
                this.closeCustomFilter();
            }
        }
        else if (this.action === ResponsiveDialogAction.isSort) {
            this.closeCustomDialog();
        }
        this.parent.off(enterKeyHandler, this.keyHandler);
    }
    sortColumn() {
        if (!this.isSortApplied) {
            this.closeCustomDialog();
            return;
        }
        if (this.sortPredicate.length) {
            this.parent.setProperties({ sortSettings: { columns: [] } }, true);
        }
        for (let i = 0; i < this.sortPredicate.length; i++) {
            this.parent.sortColumn(this.sortPredicate[i].field, this.sortPredicate[i].direction, this.parent.allowMultiSorting);
        }
        if (!this.sortPredicate.length) {
            this.parent.clearSorting();
        }
        this.closeCustomDialog();
    }
    getHeaderTitle(args, col) {
        const gObj = this.parent;
        let title;
        if (this.action === ResponsiveDialogAction.isEdit) {
            title = gObj.localeObj.getConstant('EditFormTitle') + args.primaryKeyValue[0];
        }
        else if (this.action === ResponsiveDialogAction.isAdd) {
            title = gObj.localeObj.getConstant('AddFormTitle');
        }
        else if (this.action === ResponsiveDialogAction.isFilter) {
            title = col ? col.headerText || col.field : gObj.localeObj.getConstant('FilterButton');
        }
        else if (this.action === ResponsiveDialogAction.isSort) {
            title = gObj.localeObj.getConstant('Sort');
        }
        return title;
    }
    getDialogName(action) {
        let name;
        if (action === ResponsiveDialogAction.isAdd || action === ResponsiveDialogAction.isEdit) {
            name = 'dialogEdit_wrapper_title';
        }
        else if (action === ResponsiveDialogAction.isFilter) {
            name = 'responsive_filter_dialog_wrapper';
        }
        return name;
    }
    getButtonText(action) {
        let text;
        if (action === ResponsiveDialogAction.isAdd || action === ResponsiveDialogAction.isEdit) {
            text = 'Save';
        }
        else if (action === ResponsiveDialogAction.isFilter || this.action === ResponsiveDialogAction.isSort) {
            text = 'OKButton';
        }
        return text;
    }
    /**
     * Function to render the responsive header
     *
     * @param {Column} col - specifies the column
     * @param {ResponsiveDialogArgs} args - specifies the responsive dialog arguments
     * @param {boolean} isCustomFilter - specifies whether it is custom filter or not
     * @returns {HTMLElement | string} returns the html element or string
     */
    renderResponsiveHeader(col, args, isCustomFilter) {
        const gObj = this.parent;
        gObj.on(enterKeyHandler, this.keyHandler, this);
        const id = gObj.element.id + this.getDialogName(this.action);
        const header = gObj.createElement('div', { className: 'e-res-custom-element' });
        const titleDiv = gObj.createElement('div', { className: 'e-dlg-custom-header', id: id });
        titleDiv.innerHTML = this.getHeaderTitle(args, col);
        header.appendChild(titleDiv);
        const saveBtn = gObj.createElement('button');
        if (!isCustomFilter) {
            this.saveBtn = new Button({
                cssClass: this.parent.cssClass ?
                    'e-primary e-flat e-res-apply-btn' + ' ' + this.parent.cssClass : 'e-primary e-flat e-res-apply-btn'
            });
            saveBtn.innerHTML = gObj.localeObj.getConstant(this.getButtonText(this.action));
            this.saveBtn.appendTo(saveBtn);
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            saveBtn.onclick = (e) => {
                this.dialogHdrBtnClickHandler();
            };
        }
        const isSort = this.action === ResponsiveDialogAction.isSort;
        const isFilter = this.action === ResponsiveDialogAction.isFilter;
        if (isFilter || isSort) {
            const id = isSort ? 'sort' : 'filter';
            const clearBtn = gObj.createElement('button');
            this.filterClearBtn = new Button({
                cssClass: this.parent.cssClass ? 'e-primary e-flat e-res-' + id + '-clear-btn' + ' ' + this.parent.cssClass
                    : 'e-primary e-flat e-res-' + id + '-clear-btn'
            });
            if (isFilter) {
                const span = gObj.createElement('span', { className: 'e-btn-icon e-icon-filter-clear e-icons' });
                clearBtn.appendChild(span);
            }
            else {
                clearBtn.innerHTML = gObj.localeObj.getConstant('Clear');
            }
            header.appendChild(clearBtn);
            this.filterClearBtn.appendTo(clearBtn);
            clearBtn.onclick = (e) => {
                if ((parentsUntil(e.target, 'e-customfilter'))) {
                    this.parent.filterModule.clearFiltering();
                    this.removeCustomDlgFilterEle();
                }
                else {
                    if (isFilter) {
                        this.filterClear();
                    }
                    else {
                        this.resetSortButtons();
                        this.sortedCols = [];
                        this.sortPredicate = [];
                        this.isSortApplied = true;
                    }
                }
            };
            header.appendChild(clearBtn);
        }
        if (!isCustomFilter) {
            header.appendChild(saveBtn);
        }
        return header;
    }
    filterClear() {
        this.parent.filterModule.filterModule.clearCustomFilter(this.filteredCol);
        this.parent.filterModule.filterModule.closeResponsiveDialog();
    }
    dialogHdrBtnClickHandler() {
        if (this.action === ResponsiveDialogAction.isEdit || this.action === ResponsiveDialogAction.isAdd) {
            this.parent.endEdit();
        }
        else if (this.action === ResponsiveDialogAction.isFilter) {
            this.parent.filterModule.filterModule.applyCustomFilter({ col: this.filteredCol, isCustomFilter: this.isCustomDlgRender });
        }
        else if (this.action === ResponsiveDialogAction.isSort) {
            this.sortColumn();
        }
    }
    closeCustomDialog() {
        if (this.isCustomDlgRender) {
            const mainfilterdiv = this.customResponsiveDlg.element.querySelector('.e-mainfilterdiv');
            remove(mainfilterdiv);
            return;
        }
        this.isRowResponsive = false;
        this.isCustomDlgRender = false;
        this.destroyCustomFilterDialog();
    }
    destroyCustomFilterDialog() {
        if (!this.customResponsiveDlg) {
            return;
        }
        const elem = document.getElementById(this.customResponsiveDlg.element.id);
        if (this.customResponsiveDlg && !this.customResponsiveDlg.isDestroyed && elem) {
            this.customResponsiveDlg.destroy();
            remove(elem);
        }
        this.closeCustomFilter();
        if (this.action === ResponsiveDialogAction.isSort) {
            this.sortPredicate = [];
            this.sortedCols = [];
            this.isSortApplied = false;
        }
    }
    closeCustomFilter() {
        if (!this.isDialogClose && this.customFilterDlg) {
            const customEle = document.getElementById(this.customFilterDlg.element.id);
            if (this.customFilterDlg && !this.customFilterDlg.isDestroyed && customEle) {
                this.customFilterDlg.destroy();
                remove(customEle);
            }
        }
        this.isCustomDialog = false;
        this.isDialogClose = false;
    }
    removeCustomDlgFilterEle(target) {
        if (target) {
            if (target.parentElement.classList.contains('e-filtersetdiv')) {
                remove(target.parentElement);
            }
            else {
                remove(target);
            }
        }
        else {
            const child = this.customColumnDiv.children;
            for (let i = 0; i < child.length; i++) {
                target = child[i].querySelector('.e-filtersetdiv');
                if (target) {
                    remove(target);
                    i--;
                }
            }
        }
    }
    keyHandler(e) {
        if (e.keyCode === 13 && ((this.action === ResponsiveDialogAction.isFilter
            && e.target.classList.contains('e-searchinput'))
            || (this.action === ResponsiveDialogAction.isEdit || this.action === ResponsiveDialogAction.isAdd))) {
            this.dialogHdrBtnClickHandler();
        }
    }
    editComplate(args) {
        if (args.requestType === 'save' || args.requestType === 'cancel') {
            this.parent.off(enterKeyHandler, this.keyHandler);
        }
    }
    removeEventListener() {
        if (this.customColumnDiv) {
            EventHandler.remove(this.customColumnDiv, 'click', this.customFilterColumnClickHandler);
        }
        addRemoveEventListener(this.parent, this.evtHandlers, true, this);
        this.parent.removeEventListener(actionComplete, this.onActionCompleteFn);
    }
}

/**
 * ServiceLocator
 *
 * @hidden
 */
class ServiceLocator {
    constructor() {
        this.services = {};
    }
    register(name, type) {
        if (isNullOrUndefined(this.services[name])) {
            this.services[name] = type;
        }
    }
    getService(name) {
        if (isNullOrUndefined(this.services[name])) {
            // eslint-disable-next-line no-throw-literal
            throw `The service ${name} is not registered`;
        }
        return this.services[name];
    }
    registerAdaptiveService(type, isAdaptiveUI, action) {
        if (isAdaptiveUI) {
            type.responsiveDialogRenderer = new ResponsiveDialogRenderer(type.parent, type.serviceLocator);
            type.responsiveDialogRenderer.action = action;
        }
        else {
            if (type.responsiveDialogRenderer) {
                type.responsiveDialogRenderer.removeEventListener();
                type.responsiveDialogRenderer = undefined;
            }
        }
    }
}

/**
 * RendererFactory
 *
 * @hidden
 */
class RendererFactory {
    constructor() {
        this.rendererMap = {};
    }
    addRenderer(name, type) {
        const rName = getEnumValue(RenderType, name);
        if (isNullOrUndefined(this.rendererMap[rName])) {
            this.rendererMap[rName] = type;
        }
    }
    getRenderer(name) {
        const rName = getEnumValue(RenderType, name);
        if (isNullOrUndefined(this.rendererMap[rName])) {
            // eslint-disable-next-line no-throw-literal
            throw `The renderer ${rName} is not found`;
        }
        else {
            return this.rendererMap[rName];
        }
    }
}

/**
 * ColumnWidthService
 *
 * @hidden
 */
class ColumnWidthService {
    constructor(parent) {
        this.parent = parent;
    }
    setWidthToColumns() {
        let i = 0;
        const indexes = this.parent.getColumnIndexesInView();
        let wFlag = true;
        let totalColumnsWidth = 0;
        if (this.parent.allowGrouping) {
            for (let len = this.parent.groupSettings.columns.length; i < len; i++) {
                if (this.parent.enableColumnVirtualization && indexes.indexOf(i) === -1) {
                    wFlag = false;
                    continue;
                }
                this.setColumnWidth(new Column({ width: '30px' }), i);
            }
        }
        if (this.parent.detailTemplate || this.parent.childGrid) {
            this.setColumnWidth(new Column({ width: '30px' }), i);
            i++;
        }
        if (this.parent.isRowDragable() && this.parent.getFrozenMode() !== 'Right') {
            this.setColumnWidth(new Column({ width: '30px' }), i);
            i++;
        }
        const columns = this.parent.getColumns();
        for (let j = 0; j < columns.length; j++) {
            this.setColumnWidth(columns[j], wFlag && this.parent.enableColumnVirtualization ? undefined : j + i);
        }
        if (this.parent.isRowDragable() && this.parent.getFrozenMode() === 'Right') {
            this.setColumnWidth(new Column({ width: '30px' }), columns.length);
        }
        totalColumnsWidth = this.getTableWidth(this.parent.getColumns());
        if (this.parent.width !== 'auto' && this.parent.width.toString().indexOf('%') === -1) {
            this.setMinwidthBycalculation(totalColumnsWidth);
        }
    }
    setMinwidthBycalculation(tWidth) {
        let difference = 0;
        const collection = this.parent.getColumns().filter((a) => {
            return isNullOrUndefined(a.width) || a.width === 'auto';
        });
        if (collection.length) {
            if (!isNullOrUndefined(this.parent.width) && this.parent.width !== 'auto' &&
                typeof (this.parent.width) === 'string' && this.parent.width.indexOf('%') === -1) {
                difference = (typeof this.parent.width === 'string' ? parseInt(this.parent.width, 10) : this.parent.width) - tWidth;
            }
            else {
                difference = this.parent.element.getBoundingClientRect().width - tWidth;
            }
            let tmWidth = 0;
            for (const cols of collection) {
                tmWidth += !isNullOrUndefined(cols.minWidth) ?
                    ((typeof cols.minWidth === 'string' ? parseInt(cols.minWidth, 10) : cols.minWidth)) : 0;
            }
            for (let i = 0; i < collection.length; i++) {
                if (tWidth === 0 && this.parent.allowResizing && this.isWidthUndefined() && (i !== collection.length - 1)) {
                    this.setUndefinedColumnWidth(collection);
                }
                const index = this.parent.getColumnIndexByField(collection[i].field) + this.parent.getIndentCount();
                if (tWidth !== 0 && difference < tmWidth) {
                    this.setWidth(collection[i].minWidth, index);
                }
                else if (tWidth !== 0 && difference > tmWidth) {
                    this.setWidth('', index, true);
                }
            }
        }
    }
    setUndefinedColumnWidth(collection) {
        for (let k = 0; k < collection.length; k++) {
            if (k !== collection.length - 1) {
                collection[k].width = 200;
                this.setWidth(200, this.parent.getColumnIndexByField(collection[k].field));
            }
        }
    }
    setColumnWidth(column, index, module) {
        if (this.parent.getColumns().length < 1) {
            return;
        }
        const columnIndex = isNullOrUndefined(index) ? this.parent.getNormalizedColumnIndex(column.uid) : index;
        const cWidth = this.getWidth(column);
        const tgridWidth = this.getTableWidth(this.parent.getColumns());
        if (cWidth !== null) {
            this.setWidth(cWidth, columnIndex);
            if (this.parent.width !== 'auto' && this.parent.width.toString().indexOf('%') === -1) {
                this.setMinwidthBycalculation(tgridWidth);
            }
            if ((this.parent.allowResizing && module === 'resize') || (this.parent.getFrozenColumns() && this.parent.allowResizing)) {
                this.setWidthToTable();
            }
            this.parent.notify(columnWidthChanged, { index: columnIndex, width: cWidth, column: column, module: module });
        }
    }
    setWidth(width, index, clear) {
        if (this.parent.groupSettings.columns.length > index && ispercentageWidth(this.parent)) {
            const elementWidth = this.parent.element.offsetWidth;
            width = (30 / elementWidth * 100).toFixed(1) + '%';
        }
        const header = this.parent.getHeaderTable();
        const content$$1 = this.parent.getContentTable();
        const fWidth = formatUnit(width);
        let headerCol;
        let frzCols = this.parent.getFrozenColumns();
        const isDraggable = this.parent.isRowDragable();
        frzCols = frzCols && isDraggable ? frzCols + 1 : frzCols;
        const mHdr = this.parent.getHeaderContent().querySelector('.' + movableHeader);
        const mCont = this.parent.getContent().querySelector('.' + movableContent);
        const freezeLeft = this.parent.getFrozenLeftColumnsCount();
        const freezeRight = this.parent.getFrozenRightColumnsCount();
        const movableCount = this.parent.getMovableColumnsCount();
        const isColFrozen = freezeLeft !== 0 || freezeRight !== 0;
        if (frzCols && index >= frzCols) {
            if (!mHdr || !mHdr.querySelector(colGroup)) {
                return;
            }
            headerCol = mHdr.querySelector(colGroup).children[index - frzCols];
        }
        else if (this.parent.enableColumnVirtualization && frzCols && this.parent.contentModule.isXaxis()
            && mHdr.scrollLeft > 0) {
            const colGroup$$1 = mHdr.querySelector(colGroup);
            headerCol = colGroup$$1.children[(colGroup$$1.children.length - 1) - index];
        }
        else if (isColFrozen) {
            let target;
            if (freezeLeft && !freezeRight) {
                index = isDraggable ? index - 1 : index;
                target = index < freezeLeft ? header : mHdr;
            }
            else if (!freezeLeft && freezeRight) {
                target = index >= movableCount ? header : mHdr;
            }
            else if (freezeLeft && freezeRight) {
                index = isDraggable ? index - 1 : index;
                const frHdr = this.parent.getFrozenRightHeader();
                target = index < freezeLeft ? header : index < (freezeLeft + movableCount) ? mHdr : frHdr;
            }
            headerCol = this.getColumnLevelFrozenColgroup(index, freezeLeft, movableCount, target);
            if (!headerCol) {
                return;
            }
        }
        else {
            headerCol = header.querySelector(colGroup).children[index];
        }
        if (headerCol && !clear) {
            headerCol.style.width = fWidth;
        }
        else if (headerCol && clear) {
            headerCol.style.width = '';
        }
        let contentCol;
        if (frzCols && index >= frzCols) {
            contentCol = this.parent.getContent().querySelector('.' + movableContent)
                .querySelector(colGroup).children[index - frzCols];
        }
        else if (this.parent.enableColumnVirtualization && frzCols && this.parent.contentModule.isXaxis()
            && mCont.scrollLeft > 0) {
            const colGroup$$1 = this.parent.getContent().querySelector('.' + movableContent)
                .querySelector(colGroup);
            contentCol = colGroup$$1.children[(colGroup$$1.children.length - 1) - index];
        }
        else if (isColFrozen) {
            let target;
            if (freezeLeft && !freezeRight) {
                target = index < freezeLeft ? content$$1 : mCont;
            }
            if (!freezeLeft && freezeRight) {
                target = index >= movableCount ? content$$1 : mCont;
            }
            if (freezeLeft && freezeRight) {
                const frCont = this.parent.getContent().querySelector('.e-frozen-right-content');
                target = index < freezeLeft ? content$$1 : index < (freezeLeft + movableCount) ? mCont : frCont;
            }
            contentCol = this.getColumnLevelFrozenColgroup(index, freezeLeft, movableCount, target);
        }
        else {
            contentCol = content$$1.querySelector(colGroup).children[index];
        }
        if (contentCol && !clear) {
            contentCol.style.width = fWidth;
        }
        else if (contentCol && clear) {
            contentCol.style.width = '';
        }
        if (!this.parent.enableColumnVirtualization) {
            const edit = this.parent.element.querySelectorAll('.e-table.e-inline-edit');
            const editTableCol = [];
            for (let i = 0; i < edit.length; i++) {
                if (parentsUntil(edit[i], 'e-grid').id === this.parent.element.id) {
                    for (let j = 0; j < edit[i].querySelector('colgroup').children.length; j++) {
                        editTableCol.push(edit[i].querySelector('colgroup').children[j]);
                    }
                }
            }
            if (edit.length && editTableCol.length) {
                editTableCol[index].style.width = fWidth;
            }
        }
        if (this.parent.isFrozenGrid()) {
            this.refreshFrozenScrollbar();
        }
    }
    getColumnLevelFrozenColgroup(index, left, movable, ele) {
        if (!ele || !ele.querySelector(colGroup)) {
            return null;
        }
        const columns = this.parent.getColumns();
        const isDrag = this.parent.isRowDragable();
        const frzMode = this.parent.getFrozenMode();
        let headerCol;
        const colGroup$$1 = [].slice.call(ele.querySelector(colGroup).children);
        if (frzMode === 'Right' && isDrag && index === (movable + this.parent.getFrozenRightColumnsCount())) {
            headerCol = colGroup$$1[colGroup$$1.length - 1];
        }
        else if (isDrag && index === -1) {
            headerCol = colGroup$$1[0];
        }
        else if (columns[index].freeze === 'Left') {
            headerCol = colGroup$$1[isDrag ? (index + 1) : index];
        }
        else if (columns[index].freeze === 'Right') {
            headerCol = colGroup$$1[index - (left + movable)];
        }
        else {
            headerCol = colGroup$$1[index - left];
        }
        return headerCol;
    }
    /**
     * @returns {void}
     * @hidden
     */
    refreshFrozenScrollbar() {
        const args = { cancel: false };
        this.parent.notify(preventFrozenScrollRefresh, args);
        if (args.cancel) {
            return;
        }
        const scrollWidth = getScrollBarWidth();
        const frozenScrollbar = this.parent.element.querySelector('.e-frozenscrollbar');
        const movableScrollbar = this.parent.element.querySelector('.e-movablescrollbar');
        const frozencontent = this.parent.getContent().querySelector('.' + frozenContent);
        const movableContent$$1 = this.parent.getContent().querySelector('.' + movableContent);
        let frozenWidth = frozencontent.firstElementChild.getBoundingClientRect().width;
        let movableWidth = movableContent$$1.firstElementChild.getBoundingClientRect().width;
        if (this.parent.getFrozenMode() === 'Right') {
            frozenWidth = frozenWidth + scrollWidth;
        }
        frozenScrollbar.style.width = frozenWidth + 'px';
        if (this.parent.getFrozenMode() === leftRight) {
            const frozenRightScrollbar = this.parent.element.querySelector('.e-frozen-right-scrollbar');
            let frozenRightWidth = this.parent.getContent().querySelector('.e-frozen-right-content')
                .firstElementChild.getBoundingClientRect().width;
            if (this.parent.height !== 'auto') {
                frozenRightWidth = frozenRightWidth + scrollWidth;
            }
            frozenRightScrollbar.style.width = frozenRightWidth + 'px';
        }
        else {
            if (this.parent.enableColumnVirtualization) {
                const placeHolder = this.parent.getMovableVirtualContent().querySelector('.e-virtualtrack');
                if (placeHolder) {
                    movableWidth = placeHolder.scrollWidth;
                }
            }
            if (this.parent.getFrozenMode() !== 'Right' && this.parent.height !== 'auto') {
                movableWidth = movableWidth + scrollWidth;
            }
        }
        movableScrollbar.firstElementChild.style.width = movableWidth + 'px';
    }
    getSiblingsHeight(element) {
        const previous = this.getHeightFromDirection(element, 'previous');
        const next = this.getHeightFromDirection(element, 'next');
        return previous + next;
    }
    getHeightFromDirection(element, direction) {
        let sibling = element[direction + 'ElementSibling'];
        let result = 0;
        const classList$$1 = [gridHeader, gridFooter, 'e-groupdroparea', 'e-gridpager', 'e-toolbar'];
        while (sibling) {
            if (classList$$1.some((value) => sibling.classList.contains(value))) {
                result += sibling.offsetHeight;
            }
            sibling = sibling[direction + 'ElementSibling'];
        }
        return result;
    }
    isWidthUndefined() {
        const isWidUndefCount = this.parent.getColumns().filter((col) => {
            return isNullOrUndefined(col.width) && isNullOrUndefined(col.minWidth);
        }).length;
        return (this.parent.getColumns().length === isWidUndefCount);
    }
    getWidth(column) {
        if (isNullOrUndefined(column.width) && this.parent.allowResizing
            && isNullOrUndefined(column.minWidth) && !this.isWidthUndefined()) {
            column.width = 200;
        }
        if (this.parent.isFrozenGrid() && isNullOrUndefined(column.width) &&
            (column.getFreezeTableName() === frozenLeft || column.getFreezeTableName() === frozenRight)) {
            column.width = 200;
        }
        if (!column.width) {
            return null;
        }
        const width = parseInt(column.width.toString(), 10);
        if (column.minWidth && width < parseInt(column.minWidth.toString(), 10)) {
            return column.minWidth;
        }
        else if ((column.maxWidth && width > parseInt(column.maxWidth.toString(), 10))) {
            return column.maxWidth;
        }
        else {
            return column.width;
        }
    }
    getTableWidth(columns) {
        let tWidth = 0;
        for (const column of columns) {
            let cWidth = this.getWidth(column);
            if (column.width === 'auto') {
                cWidth = 0;
            }
            if (column.visible !== false && cWidth !== null) {
                tWidth += parseInt(cWidth.toString(), 10);
            }
        }
        return tWidth;
    }
    calcMovableOrFreezeColWidth(tableType) {
        const columns = this.parent.getColumns().slice();
        const left = this.parent.getFrozenLeftColumnsCount() || this.parent.getFrozenColumns();
        const movable = this.parent.getMovableColumnsCount();
        const right = this.parent.getFrozenRightColumnsCount();
        if (tableType === 'movable') {
            if (right) {
                columns.splice(left + movable, columns.length);
            }
            if (left) {
                columns.splice(0, left);
            }
        }
        else if (tableType === 'freeze-left') {
            columns.splice(left, columns.length);
        }
        else if (tableType === 'freeze-right') {
            columns.splice(0, left + movable);
        }
        return formatUnit(this.getTableWidth(columns));
    }
    setWidthToFrozenRightTable() {
        let freezeWidth = this.calcMovableOrFreezeColWidth('freeze-right');
        freezeWidth = this.isAutoResize() ? '100%' : freezeWidth;
        const headerTbl = this.parent.getHeaderContent().querySelector('.e-frozen-right-header').querySelector('.' + table);
        const cntTbl = this.parent.getContent().querySelector('.e-frozen-right-content').querySelector('.' + table);
        headerTbl.style.width = freezeWidth;
        cntTbl.style.width = freezeWidth;
    }
    setWidthToFrozenLeftTable() {
        let freezeWidth = this.calcMovableOrFreezeColWidth('freeze-left');
        freezeWidth = this.isAutoResize() ? '100%' : freezeWidth;
        this.parent.getHeaderTable().style.width = freezeWidth;
        this.parent.getContentTable().style.width = freezeWidth;
    }
    setWidthToMovableTable() {
        let movableWidth = '';
        const isColUndefined = this.parent.getColumns().filter((a) => { return isNullOrUndefined(a.width); }).length >= 1;
        const isWidthAuto = this.parent.getColumns().filter((a) => { return (a.width === 'auto'); }).length >= 1;
        if (typeof this.parent.width === 'number' && !isColUndefined && !isWidthAuto) {
            movableWidth = formatUnit(this.parent.width - parseInt(this.calcMovableOrFreezeColWidth('freeze').split('px')[0], 10) - 5);
        }
        else if (!isColUndefined && !isWidthAuto) {
            movableWidth = this.calcMovableOrFreezeColWidth('movable');
        }
        movableWidth = this.isAutoResize() ? '100%' : movableWidth;
        if (this.parent.getHeaderContent().querySelector('.' + movableHeader).firstElementChild) {
            this.parent.getHeaderContent().querySelector('.' + movableHeader).firstElementChild.style.width
                = movableWidth;
        }
        this.parent.getContent().querySelector('.' + movableContent).firstElementChild.style.width =
            movableWidth;
    }
    setWidthToFrozenEditTable() {
        let freezeWidth = this.calcMovableOrFreezeColWidth('freeze');
        freezeWidth = this.isAutoResize() ? '100%' : freezeWidth;
        this.parent.element.querySelectorAll('.e-table.e-inline-edit')[0].style.width = freezeWidth;
    }
    setWidthToMovableEditTable() {
        let movableWidth = this.calcMovableOrFreezeColWidth('movable');
        movableWidth = this.isAutoResize() ? '100%' : movableWidth;
        this.parent.element.querySelectorAll('.e-table.e-inline-edit')[1].style.width = movableWidth;
    }
    setWidthToTable() {
        let tWidth = formatUnit(this.getTableWidth(this.parent.getColumns()));
        if (this.parent.isFrozenGrid()) {
            if (this.parent.getFrozenColumns() || this.parent.getFrozenLeftColumnsCount()) {
                this.setWidthToFrozenLeftTable();
            }
            this.setWidthToMovableTable();
            if (this.parent.getFrozenRightColumnsCount()) {
                this.setWidthToFrozenRightTable();
            }
        }
        else {
            if (this.parent.detailTemplate || this.parent.childGrid) {
                this.setColumnWidth(new Column({ width: '30px' }));
            }
            tWidth = this.isAutoResize() ? '100%' : tWidth;
            this.parent.getHeaderTable().style.width = tWidth;
            this.parent.getContentTable().style.width = tWidth;
        }
        const edit = this.parent.element.querySelector('.e-table.e-inline-edit');
        if (edit && this.parent.getFrozenColumns()) {
            this.setWidthToFrozenEditTable();
            this.setWidthToMovableEditTable();
        }
        else if (edit) {
            edit.style.width = tWidth;
        }
    }
    isAutoResize() {
        return this.parent.allowResizing && this.parent.resizeSettings.mode === 'Auto';
    }
}

/**
 * FocusStrategy class
 *
 * @hidden
 */
class FocusStrategy {
    constructor(parent) {
        this.currentInfo = {};
        this.oneTime = true;
        this.swap = {};
        /** @hidden */
        this.isInfiniteScroll = false;
        this.forget = false;
        this.skipFocus = true;
        this.focusByClick = false;
        this.prevIndexes = {};
        this.refMatrix = this.refreshMatrix(true);
        this.actions = ['downArrow', 'upArrow'];
        this.isVirtualScroll = false;
        this.parent = parent;
        this.rowModelGen = new RowModelGenerator(this.parent);
        this.addEventListener();
    }
    focusCheck(e) {
        const target = e.target;
        this.focusByClick = true;
        this.skipFocus = target.classList.contains('e-grid');
    }
    onFocus(e) {
        if (this.parent.isDestroyed || Browser.isDevice || this.parent.enableVirtualization) {
            return;
        }
        this.setActive(!this.parent.enableHeaderFocus && this.parent.frozenRows === 0, this.parent.isFrozenGrid());
        if (!this.parent.enableHeaderFocus && !this.parent.getCurrentViewRecords().length && ((this.parent.editSettings.mode !== 'Batch')
            || (this.parent.editSettings.mode === 'Batch' && !this.parent.editModule.getBatchChanges()[addedRecords].length))) {
            this.getContent().matrix.
                generate(this.rowModelGen.generateRows({ rows: [new Row({ isDataRow: true })] }), this.getContent().selector, false);
        }
        const current = this.getContent().matrix.get(0, -1, [0, 1], null, this.getContent().validator());
        this.getContent().matrix.select(current[0], current[1]);
        if (this.skipFocus) {
            this.focus(e);
            this.skipFocus = false;
        }
    }
    passiveFocus(e) {
        if (this.parent.isDestroyed) {
            return;
        }
        if (e.target && e.target.classList.contains('e-detailcell')) {
            this.currentInfo.skipAction = false;
            addClass([this.currentInfo.element], ['e-focused', 'e-focus']);
        }
    }
    onBlur(e) {
        if ((this.parent.isEdit || e && (!e.relatedTarget || closest(e.relatedTarget, '.e-grid')))
            && !(isNullOrUndefined(e.relatedTarget) && parseInt(e.target.getAttribute('aria-colindex'), 10) === 0 &&
                parseInt(e.target.getAttribute('index'), 10) === 0)) {
            return;
        }
        this.removeFocus();
        this.skipFocus = true;
        this.currentInfo.skipAction = false;
        this.parent.element.tabIndex = 0;
    }
    onClick(e, force) {
        if (parentsUntil(e.target, 'e-filterbarcell') && (parentsUntil(e.target, 'e-multiselect') ||
            e.target.classList.contains('e-input-group-icon'))) {
            return;
        }
        let isContent = !isNullOrUndefined(closest(e.target, '.' + gridContent));
        const isHeader = !isNullOrUndefined(closest(e.target, '.' + gridHeader));
        isContent = isContent && isHeader ? !isContent : isContent;
        let isFrozen = !isNullOrUndefined(closest(e.target, '.' + frozenContent)) ||
            !isNullOrUndefined(closest(e.target, '.' + frozenHeader));
        let isFrozenRight = false;
        if (this.parent.getFrozenMode() === leftRight) {
            isFrozenRight = !isNullOrUndefined(closest(e.target, '.e-frozen-right-content')) ||
                !isNullOrUndefined(closest(e.target, '.e-frozen-right-header'));
            isFrozen = isFrozen && !isFrozenRight;
        }
        if (!isContent && isNullOrUndefined(closest(e.target, '.' + gridHeader)) ||
            e.target.classList.contains(content) ||
            !isNullOrUndefined(closest(e.target, '.e-unboundcell'))) {
            return;
        }
        this.setActive(isContent, isFrozen, isFrozenRight);
        if (!isContent && isNullOrUndefined(closest(e.target, '.' + gridHeader))) {
            this.clearOutline();
            return;
        }
        const beforeArgs = { cancel: false, byKey: false, byClick: !isNullOrUndefined(e.target), clickArgs: e };
        this.parent.notify(beforeCellFocused, beforeArgs);
        if (beforeArgs.cancel || closest(e.target, '.e-inline-edit')) {
            return;
        }
        this.setActive(isContent, isFrozen, isFrozenRight);
        if (this.getContent()) {
            const returnVal = this.getContent().onClick(e, force);
            if (returnVal === false) {
                return;
            }
            this.focus();
        }
    }
    onKeyPress(e) {
        if (this.parent.allowPaging) {
            if (this.parent.pagerModule.pagerObj.checkPagerHasFocus()) {
                this.parent.pagerModule.pagerObj.changePagerFocus(e);
                return;
            }
            if (this.parent.pagerModule.pagerObj.element.tabIndex === 0 && (e.keyCode === 38 || (e.shiftKey && e.keyCode === 9))) {
                e.preventDefault();
                this.getFocusedElement().focus();
                return;
            }
            else if (this.parent.pagerModule.pagerObj.element.tabIndex === 0 && e.keyCode === 9) {
                e.preventDefault();
                this.parent.pagerModule.pagerObj.setPagerFocus();
                return;
            }
            if (this.parent.pagerModule.pagerObj.checkFirstPagerFocus()) {
                const lastRow = this.getContent().matrix.rows;
                const lastColumn = this.getContent().matrix.columns;
                this.getContent().matrix.current = [lastRow, lastColumn];
            }
        }
        if (this.skipOn(e)) {
            return;
        }
        this.activeKey = e.action;
        const beforeArgs = { cancel: false, byKey: true, byClick: false, keyArgs: e };
        this.parent.notify(beforeCellFocused, beforeArgs);
        if (beforeArgs.cancel) {
            return;
        }
        const bValue = this.getContent().matrix.current;
        this.currentInfo.outline = true;
        const swapInfo = this.getContent().jump(e.action, bValue);
        this.swap = swapInfo;
        if (swapInfo.swap) {
            this.setActive(!swapInfo.toHeader, swapInfo.toFrozen, swapInfo.toFrozenRight);
            this.getContent().matrix.current = this.getContent().getNextCurrent(bValue, swapInfo, this.active, e.action);
            this.prevIndexes = {};
        }
        this.setActiveByKey(e.action, this.getContent());
        const returnVal = this.content.lastIdxCell ? false : this.getContent().onKeyPress(e);
        if (returnVal === false) {
            this.clearIndicator();
            if (e.action === 'shiftTab' && bValue.toString() === [0, 0].toString()) {
                this.parent.element.tabIndex = -1;
            }
            if (this.parent.allowPaging && !this.parent.pagerModule.pagerObj.checkPagerHasFocus() && this.allowToPaging(e)
                && bValue.toString() !== [0, 0].toString()) {
                e.preventDefault();
                if (e.keyCode === 40) {
                    this.parent.pagerModule.pagerObj.setPagerContainerFocus();
                }
                else if (e.keyCode === 9) {
                    this.parent.pagerModule.pagerObj.setPagerFocus();
                }
            }
            return;
        }
        e.preventDefault();
        this.focus(e);
    }
    allowToPaging(e) {
        if (this.parent.editSettings.mode === 'Batch' && this.parent.editSettings.allowAdding && e.keyCode !== 40) {
            return false;
        }
        return true;
    }
    skipOn(e) {
        const target = e.target;
        if (!target) {
            return false;
        }
        if (this.currentInfo.skipAction) {
            this.clearIndicator();
            return true;
        }
        if (['pageUp', 'pageDown', 'altDownArrow'].indexOf(e.action) > -1) {
            this.clearIndicator();
            return true;
        }
        const th = closest(target, 'th') && !closest(target, 'th').tabIndex;
        if (e.target.classList.contains('e-filterbaroperator') && (e.keyCode === 13 || e.keyCode === 27)) {
            const inputTarget = closest(e.target, '.e-filterbarcell');
            inputTarget.querySelector('input').focus();
        }
        if (th && closest(document.activeElement, '.e-filterbarcell') !== null) {
            this.removeFocus();
        }
        let filterCell = closest(document.activeElement, '.e-filterbarcell') !== null;
        if (this.parent.enableHeaderFocus && filterCell) {
            const matrix = this.active.matrix;
            const current = matrix.current;
            filterCell = matrix.matrix[current[0]].lastIndexOf(1) !== current[1];
        }
        return (e.action === 'delete'
            || (this.parent.editSettings.mode !== 'Batch' && (this.parent.isEdit || ['insert', 'f2'].indexOf(e.action) > -1))
            || (filterCell ||
                closest(document.activeElement, '#' + this.parent.element.id + '_searchbar') !== null
                    && ['enter', 'leftArrow', 'rightArrow',
                        'shiftLeft', 'shiftRight', 'ctrlPlusA'].indexOf(e.action) > -1)
            || (closest(target, '.' + gridContent) === null && closest(target, '.' + gridHeader) === null)
            || (e.action === 'space' && (!target.classList.contains(gridChkBox) && closest(target, '.' + gridChkBox) === null
                && closest(target, '.e-headerchkcelldiv') === null))) || closest(target, '.e-filter-popup') !== null;
    }
    focusVirtualElement(e) {
        if (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) {
            const data = { virtualData: {}, isAdd: false, isCancel: false };
            this.parent.notify(getVirtualData, data);
            const isKeyFocus = this.actions.some((value) => value === this.activeKey);
            const isSelected = this.parent.contentModule ?
                this.parent.contentModule.selectedRowIndex > -1 : false;
            if (data.isAdd || Object.keys(data.virtualData).length || isKeyFocus || data.isCancel || isSelected) {
                this.parent.notify(resetVirtualFocus, { isCancel: false });
                data.isCancel = false;
                this.parent.contentModule.selectedRowIndex = -1;
                if (isKeyFocus) {
                    this.activeKey = this.empty;
                    this.parent.notify('virtaul-key-handler', e);
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this.currentInfo.elementToFocus.focus({ preventScroll: true });
            }
            else {
                if (this.isVirtualScroll || this.isInfiniteScroll) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    this.currentInfo.elementToFocus.focus({ preventScroll: true });
                }
                else {
                    this.currentInfo.elementToFocus.focus();
                }
            }
        }
        this.isVirtualScroll = this.isInfiniteScroll = false;
    }
    getFocusedElement() {
        return this.currentInfo.elementToFocus;
    }
    getContent() {
        return this.active || this.content;
    }
    setActive(content$$1, isFrozen, isFrozenRight) {
        this.active = content$$1 ? isFrozen ? this.fContent : isFrozenRight ? this.frContent : this.content :
            isFrozen ? this.fHeader : isFrozenRight ? this.frHeader : this.header;
    }
    setFocusedElement(element, e) {
        this.currentInfo.elementToFocus = element;
        setTimeout(() => {
            if (!isNullOrUndefined(this.currentInfo.elementToFocus)) {
                if (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling) {
                    this.focusVirtualElement(e);
                }
                else {
                    this.currentInfo.elementToFocus.focus();
                }
            }
        }, 0);
    }
    focus(e) {
        this.parent.notify(virtaulCellFocus, e);
        this.removeFocus();
        this.addFocus(this.getContent().getFocusInfo(), e);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    removeFocus(e) {
        if (!this.currentInfo.element) {
            return;
        }
        removeClass([this.currentInfo.element, this.currentInfo.elementToFocus], ['e-focused', 'e-focus']);
        this.currentInfo.element.tabIndex = -1;
    }
    /**
     * @returns {void}
     * @hidden */
    addOutline() {
        const info = this.getContent().getFocusInfo();
        if (info.element) {
            addClass([info.element], ['e-focused']);
            addClass([info.elementToFocus], ['e-focus']);
        }
    }
    /**
     * @returns {void}
     * @hidden */
    focusHeader() {
        this.setActive(false, this.parent.isFrozenGrid());
        this.resetFocus();
    }
    /**
     * @returns {void}
     * @hidden */
    focusContent() {
        this.setActive(true, this.parent.isFrozenGrid());
        this.resetFocus();
    }
    resetFocus() {
        const current = this.getContent().matrix.get(0, -1, [0, 1], null, this.getContent().validator());
        this.getContent().matrix.select(current[0], current[1]);
        this.focus();
    }
    addFocus(info, e) {
        this.currentInfo = info;
        this.currentInfo.outline = info.outline && !isNullOrUndefined(e);
        if (this.isInfiniteScroll) {
            this.currentInfo.outline = true;
        }
        if (!info.element) {
            return;
        }
        const isFocused = info.elementToFocus.classList.contains('e-focus');
        if (isFocused) {
            return;
        }
        if (this.currentInfo.outline) {
            addClass([info.element], ['e-focused']);
        }
        addClass([info.elementToFocus], ['e-focus']);
        info.element.tabIndex = 0;
        if (!isFocused) {
            this.setFocusedElement(info.elementToFocus, e);
        }
        this.parent.notify(cellFocused, {
            element: info.elementToFocus,
            parent: info.element,
            indexes: this.getContent().matrix.current,
            byKey: !isNullOrUndefined(e),
            byClick: isNullOrUndefined(e),
            keyArgs: e,
            isJump: this.swap.swap,
            container: this.getContent().getInfo(e),
            outline: !isNullOrUndefined(e),
            swapInfo: this.swap
        });
        const [rowIndex, cellIndex] = this.getContent().matrix.current;
        this.prevIndexes = { rowIndex, cellIndex };
        this.focusedColumnUid = this.parent.getColumnByIndex(cellIndex).uid;
        this.focusByClick = false;
    }
    refreshMatrix(content$$1) {
        return (e) => {
            if (content$$1 && (e.args && e.args.isFrozen) && !this.fContent) {
                this.fContent = new FixedContentFocus(this.parent);
            }
            else if (content$$1 && !this.frContent && (e.args && e.args.renderFrozenRightContent)) {
                this.frContent = new FixedRightContentFocus(this.parent);
            }
            else if (content$$1 && !this.content) {
                this.content = new ContentFocus(this.parent);
            }
            if (!content$$1 && (e.args && e.args.isFrozen) && !this.fHeader) {
                this.fHeader = new FixedHeaderFocus(this.parent);
            }
            else if (!content$$1 && (e.args && e.args.renderFrozenRightContent) && !this.frHeader) {
                this.frHeader = new FixedRightHeaderFocus(this.parent);
            }
            else if (!content$$1 && !this.header) {
                this.header = new HeaderFocus(this.parent);
            }
            const cFocus = content$$1 ? (e.args && e.args.isFrozen) ? this.fContent : (e.args && e.args.renderFrozenRightContent)
                ? this.frContent : this.content : (e.args && e.args.isFrozen) ? this.fHeader : (e.args && e.args.renderFrozenRightContent)
                ? this.frHeader : this.header;
            let rows = content$$1 ? e.rows.slice(this.parent.frozenRows) : e.rows;
            const updateRow = content$$1 ? e.rows.slice(0, this.parent.frozenRows) : e.rows;
            if (this.parent.isCollapseStateEnabled() && content$$1) {
                rows = rows.filter((x) => x.visible !== false);
            }
            const isRowTemplate = !isNullOrUndefined(this.parent.rowTemplate);
            const matrix = cFocus.matrix.generate(updateRow, cFocus.selector, isRowTemplate);
            if (e.name === 'batchAdd' && this.parent.isFrozenGrid()) {
                const mRows = this.parent.getMovableRowsObject();
                const newMovableRows = mRows.map((row$$1) => { return row$$1.clone(); });
                const newFrozenRows = rows.map((row$$1) => { return row$$1.clone(); });
                this.fContent.matrix.generate(newFrozenRows, this.fContent.selector, isRowTemplate);
                this.content.matrix.generate(newMovableRows, this.content.selector, isRowTemplate);
                if (this.parent.getFrozenMode() === leftRight) {
                    const frRows = this.parent.getFrozenRightRowsObject();
                    const newfrRows = frRows.map((row$$1) => { return row$$1.clone(); });
                    this.frContent.matrix.generate(newfrRows, this.frContent.selector, isRowTemplate);
                }
            }
            else {
                cFocus.matrix.generate(rows, cFocus.selector, isRowTemplate);
            }
            cFocus.generateRows(updateRow, {
                matrix, handlerInstance: (e.args && e.args.isFrozen) ? this.fHeader
                    : (e.args && e.args.renderFrozenRightContent) ? this.frHeader : this.header
            });
            if (!Browser.isDevice && e && e.args) {
                if (!this.focusByClick && e.args.requestType === 'paging' && !this.parent.pagerModule.pagerObj.checkPagerHasFocus()) {
                    this.skipFocus = false;
                    this.parent.element.focus();
                }
                if (e.args.requestType === 'grouping') {
                    this.skipFocus = true;
                }
            }
            if (e && e.args && e.args.requestType === 'virtualscroll') {
                if (this.currentInfo.uid) {
                    let index;
                    const bool = e.rows.some((row$$1, i) => {
                        index = i;
                        return row$$1.uid === this.currentInfo.uid;
                    });
                    if (bool) {
                        this.content.matrix.current[0] = index;
                        this.content.matrix.current[1] = this.parent.getColumnIndexByUid(this.focusedColumnUid) || 0;
                        const focusElement = this.getContent().getFocusInfo().elementToFocus;
                        if (focusElement) {
                            const cellPosition = focusElement.getBoundingClientRect();
                            const gridPosition = this.parent.element.getBoundingClientRect();
                            if (cellPosition.top >= 0 && cellPosition.left >= 0 &&
                                cellPosition.right <= Math.min(gridPosition.right, window.innerWidth ||
                                    document.documentElement.clientWidth) &&
                                cellPosition.bottom <= Math.min(gridPosition.bottom, window.innerHeight ||
                                    document.documentElement.clientHeight)) {
                                this.isVirtualScroll = true;
                                this.focus();
                            }
                        }
                    }
                }
                else if (e.args.focusElement && e.args.focusElement.classList.contains('e-filtertext')) {
                    const focusElement = this.parent.element.querySelector('#' + e.args.focusElement.id);
                    if (focusElement) {
                        focusElement.focus();
                    }
                }
            }
        };
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        EventHandler.add(this.parent.element, 'mousedown', this.focusCheck, this);
        EventHandler.add(this.parent.element, 'focus', this.onFocus, this);
        this.parent.element.addEventListener('focus', this.passiveHandler = (e) => this.passiveFocus(e), true);
        EventHandler.add(this.parent.element, 'focusout', this.onBlur, this);
        this.evtHandlers = [{ event: keyPressed, handler: this.onKeyPress },
            { event: click, handler: this.onClick },
            { event: contentReady, handler: this.refMatrix },
            { event: partialRefresh, handler: this.refMatrix },
            { event: refreshExpandandCollapse, handler: this.refMatrix },
            { event: headerRefreshed, handler: this.refreshMatrix() },
            { event: closeEdit, handler: this.restoreFocus },
            { event: restoreFocus, handler: this.restoreFocus },
            { event: 'start-edit', handler: this.clearIndicator },
            { event: 'start-add', handler: this.clearIndicator },
            { event: 'sorting-complete', handler: this.restoreFocus },
            { event: 'filtering-complete', handler: this.filterfocus },
            { event: 'grouping-complete', handler: this.restoreFocusWithAction },
            { event: 'ungrouping-complete', handler: this.restoreFocusWithAction },
            { event: batchAdd, handler: this.refMatrix },
            { event: batchCancel, handler: this.refMatrix },
            { event: batchDelete, handler: this.refMatrix },
            { event: detailDataBound, handler: this.refMatrix },
            { event: onEmpty, handler: this.refMatrix },
            { event: cellFocused, handler: this.internalCellFocus }];
        addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    }
    filterfocus() {
        if (this.parent.filterSettings.type !== 'FilterBar') {
            this.restoreFocus();
        }
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        EventHandler.remove(this.parent.element, 'mousedown', this.focusCheck);
        EventHandler.remove(this.parent.element, 'focus', this.onFocus);
        EventHandler.remove(this.parent.element, 'focusout', this.onBlur);
        this.parent.element.removeEventListener('focus', this.passiveHandler, true);
        addRemoveEventListener(this.parent, this.evtHandlers, false);
    }
    destroy() {
        this.removeEventListener();
    }
    restoreFocus() {
        this.addFocus(this.getContent().getFocusInfo());
    }
    restoreFocusWithAction(e) {
        if (!this.parent.enableInfiniteScrolling) {
            const matrix = this.getContent().matrix;
            const current = matrix.current;
            switch (e.requestType) {
                case 'grouping':
                case 'ungrouping':
                    current[1] = current.length &&
                        !this.parent.groupSettings.showGroupedColumn && !isNullOrUndefined(matrix.matrix[current[0]]) ?
                        matrix.matrix[current[0]].indexOf(1) : e.requestType === 'grouping' ? current[1] + 1 : current[1] - 1;
                    break;
            }
            this.getContent().matrix.current = current;
            this.addFocus(this.getContent().getFocusInfo());
        }
    }
    clearOutline() {
        this.getContent().matrix.current = this.getContent().matrix.get(0, -1, [0, 1], 'downArrow', this.getContent().validator());
        this.clearIndicator();
    }
    clearIndicator() {
        if (!this.currentInfo.element || !this.currentInfo.elementToFocus) {
            return;
        }
        removeClass([this.currentInfo.element, this.currentInfo.elementToFocus], ['e-focus', 'e-focused']);
    }
    getPrevIndexes() {
        const forget = this.forget;
        this.forget = false;
        return forget || !Object.keys(this.prevIndexes).length ? { rowIndex: null, cellIndex: null } : this.prevIndexes;
    }
    forgetPrevious() {
        this.forget = true;
    }
    setActiveByKey(action, active) {
        if (!this.parent.isFrozenGrid() && this.parent.frozenRows === 0) {
            return;
        }
        // eslint-disable-next-line prefer-const
        let info;
        const actions = {
            'home': () => ({ toHeader: !info.isContent, toFrozen: true }),
            'end': () => ({ toHeader: !info.isContent, toFrozen: false }),
            'ctrlHome': () => ({ toHeader: true, toFrozen: this.parent.isFrozenGrid() }),
            'ctrlEnd': () => ({ toHeader: false, toFrozen: false })
        };
        if (!(action in actions)) {
            return;
        }
        info = active.getInfo();
        const swap = actions[action]();
        this.setActive(!swap.toHeader, swap.toFrozen);
        this.getContent().matrix.current = active.matrix.current;
    }
    internalCellFocus(e) {
        if (!(e.byKey && e.container.isContent && e.keyArgs.action === 'enter'
            && (e.parent.classList.contains('e-detailcell') ||
                e.parent.classList.contains('e-unboundcell') || e.parent.classList.contains('e-templatecell')))) {
            return;
        }
        this.clearIndicator();
        const focusEle = this.getContent().getFocusable(this.getFocusedElement());
        this.setFocusedElement(focusEle);
        this.currentInfo.skipAction = true;
    }
}
/**
 * Create matrix from row collection which act as mental model for cell navigation
 *
 * @hidden
 */
class Matrix {
    constructor() {
        this.matrix = [];
        this.current = [];
    }
    set(rowIndex, columnIndex, allow) {
        rowIndex = Math.max(0, Math.min(rowIndex, this.rows));
        columnIndex = Math.max(0, Math.min(columnIndex, this.columns));
        this.matrix[rowIndex] = this.matrix[rowIndex] || [];
        this.matrix[rowIndex][columnIndex] = allow ? 1 : 0;
    }
    get(rowIndex, columnIndex, navigator, action, validator) {
        const tmp = columnIndex;
        if (rowIndex + navigator[0] < 0) {
            return [rowIndex, columnIndex];
        }
        rowIndex = Math.max(0, Math.min(rowIndex + navigator[0], this.rows));
        let emptyTable = true;
        if (isNullOrUndefined(this.matrix[rowIndex])) {
            return null;
        }
        columnIndex = Math.max(0, Math.min(columnIndex + navigator[1], this.matrix[rowIndex].length - 1));
        if (tmp + navigator[1] > this.matrix[rowIndex].length - 1 && validator(rowIndex, columnIndex, action)) {
            return [rowIndex, tmp];
        }
        const first = this.first(this.matrix[rowIndex], columnIndex, navigator, true, action);
        columnIndex = first === null ? tmp : first;
        const val = getValue(`${rowIndex}.${columnIndex}`, this.matrix);
        if (rowIndex === this.rows && (action === 'downArrow' || action === 'enter')) {
            navigator[0] = -1;
        }
        if (first === null) {
            for (let i = 0; i < this.rows; i++) {
                if (this.matrix[i].some((v) => { return v === 1; })) {
                    emptyTable = false;
                    break;
                }
            }
            if (emptyTable) {
                rowIndex = this.current[0];
                return [rowIndex, columnIndex];
            }
        }
        return this.inValid(val) || !validator(rowIndex, columnIndex, action) ?
            this.get(rowIndex, tmp, navigator, action, validator) : [rowIndex, columnIndex];
    }
    first(vector, index, navigator, moveTo, action) {
        if (((index < 0 || index === vector.length) && this.inValid(vector[index])
            && (action !== 'upArrow' && action !== 'downArrow')) || !vector.some((v) => v === 1)) {
            return null;
        }
        return !this.inValid(vector[index]) ? index :
            this.first(vector, (['upArrow', 'downArrow', 'shiftUp', 'shiftDown'].indexOf(action) !== -1) ? moveTo ? 0 : ++index : index + navigator[1], navigator, false, action);
    }
    select(rowIndex, columnIndex) {
        rowIndex = Math.max(0, Math.min(rowIndex, this.rows));
        columnIndex = Math.max(0, Math.min(columnIndex, this.matrix[rowIndex].length - 1));
        this.current = [rowIndex, columnIndex];
    }
    generate(rows, selector, isRowTemplate) {
        this.rows = rows.length - 1;
        this.matrix = [];
        for (let i = 0; i < rows.length; i++) {
            const cells = rows[i].cells.filter((c) => c.isSpanned !== true);
            this.columns = Math.max(cells.length - 1, this.columns | 0);
            for (let j = 0; j < cells.length; j++) {
                this.set(i, j, rows[i].visible === false ? false : selector(rows[i], cells[j], isRowTemplate));
            }
        }
        return this.matrix;
    }
    inValid(value) {
        return value === 0 || value === undefined;
    }
}
/**
 * @hidden
 */
class ContentFocus {
    constructor(parent) {
        this.matrix = new Matrix();
        this.lastIdxCell = false;
        this.parent = parent;
        this.keyActions = {
            'rightArrow': [0, 1],
            'tab': [0, 1],
            'leftArrow': [0, -1],
            'shiftTab': [0, -1],
            'upArrow': [-1, 0],
            'downArrow': [1, 0],
            'shiftUp': [-1, 0],
            'shiftDown': [1, 0],
            'shiftRight': [0, 1],
            'shiftLeft': [0, -1],
            'enter': [1, 0],
            'shiftEnter': [-1, 0]
        };
        this.indexesByKey = (action) => {
            const opt = {
                'home': [this.matrix.current[0], -1, 0, 1],
                'end': [this.matrix.current[0], this.matrix.columns + 1, 0, -1],
                'ctrlHome': [0, -1, 0, 1],
                'ctrlEnd': [this.matrix.rows, this.matrix.columns + 1, 0, -1]
            };
            return opt[action] || null;
        };
    }
    getTable() {
        return (this.parent.isFrozenGrid() ?
            this.parent.getContent().querySelector('.e-movablecontent .e-table') :
            this.parent.getContentTable());
    }
    onKeyPress(e) {
        const navigator = this.keyActions[e.action];
        let current = this.getCurrentFromAction(e.action, navigator, e.action in this.keyActions, e);
        if (!current) {
            return;
        }
        if (((['tab', 'shiftTab'].indexOf(e.action) > -1 && this.matrix.current || []).toString() === current.toString())
            || (this.parent.allowPaging && !this.parent.pagerModule.pagerObj.checkPagerHasFocus()
                && this.matrix.current[0] === this.matrix.rows && ((this.parent.editSettings.mode === 'Batch'
                && this.parent.editSettings.allowAdding && e.keyCode === 40) || (e.keyCode === 40)))) {
            if (current.toString() === [this.matrix.rows, this.matrix.columns].toString() ||
                current.toString() === [0, 0].toString() || (this.matrix.current[0] === this.matrix.rows &&
                this.matrix.current.toString() === current.toString())) {
                return false;
            }
            else {
                current = this.editNextRow(current[0], current[1], e.action);
            }
        }
        this.matrix.select(current[0], current[1]);
    }
    editNextRow(rowIndex, cellIndex, action) {
        const gObj = this.parent;
        const editNextRow = gObj.editSettings.allowNextRowEdit && (gObj.isEdit || gObj.isLastCellPrimaryKey);
        const visibleIndex = gObj.getColumnIndexByField(gObj.getVisibleColumns()[0].field);
        const cell = this.getTable().rows[rowIndex].cells[cellIndex];
        if (action === 'tab' && editNextRow) {
            rowIndex++;
            const index = (this.getTable().rows[rowIndex].getElementsByClassName('e-indentcell').length +
                this.getTable().rows[rowIndex].getElementsByClassName('e-detailrowcollapse').length);
            cellIndex = visibleIndex + index;
        }
        if (action === 'shiftTab' && editNextRow) {
            rowIndex--;
            cellIndex = gObj.getColumnIndexByField(gObj.getVisibleColumns()[gObj.getVisibleColumns().length - 1].field);
        }
        return !cell.classList.contains(rowCell) && !cell.classList.contains('e-headercell') &&
            !cell.classList.contains('e-groupcaption') ?
            this.editNextRow(rowIndex, cellIndex, action) : [rowIndex, cellIndex];
    }
    getCurrentFromAction(action, navigator = [0, 0], isPresent, e) {
        if (!isPresent && !this.indexesByKey(action) || (this.matrix.current.length === 0)) {
            return null;
        }
        if (!this.shouldFocusChange(e)) {
            return this.matrix.current;
        }
        const [rowIndex, cellIndex, rN, cN] = this.indexesByKey(action) || [...this.matrix.current, ...navigator];
        const current = this.matrix.get(rowIndex, cellIndex, [rN, cN], action, this.validator());
        return current;
    }
    onClick(e, force) {
        let target = e.target;
        this.target = target;
        target = (target.classList.contains(rowCell) ? target : closest(target, 'td'));
        target = target ? target : closest(e.target, 'td.e-detailrowcollapse')
            || closest(e.target, 'td.e-detailrowexpand');
        target = closest(e.target, 'td.e-detailcell') ?
            isNullOrUndefined(closest(closest(e.target, '.e-grid'), 'td.e-detailcell')) ? null : target : target;
        target = target && closest(target, 'table').classList.contains(table) ? target : null;
        if (!target) {
            return false;
        }
        const [rowIndex, cellIndex] = [target.parentElement.rowIndex, target.cellIndex];
        const [oRowIndex, oCellIndex] = this.matrix.current;
        const val = getValue(`${rowIndex}.${cellIndex}`, this.matrix.matrix);
        if (this.matrix.inValid(val) || (!force && oRowIndex === rowIndex && oCellIndex === cellIndex) ||
            (!parentsUntil(e.target, rowCell) && !parentsUntil(e.target, 'e-groupcaption'))) {
            return false;
        }
        this.matrix.select(rowIndex, cellIndex);
    }
    getFocusInfo() {
        const info = {};
        const [rowIndex = 0, cellIndex = 0] = this.matrix.current;
        this.matrix.current = [rowIndex, cellIndex];
        info.element = !isNullOrUndefined(this.getTable().rows[rowIndex]) ? this.getTable().rows[rowIndex].cells[cellIndex] : null;
        if (!info.element) {
            return info;
        }
        info.elementToFocus = !info.element.classList.contains('e-unboundcell') && !info.element.classList.contains('e-detailcell')
            ? this.getFocusable(info.element) : info.element;
        info.outline = true;
        info.uid = info.element.parentElement.getAttribute('data-uid');
        return info;
    }
    getFocusable(element) {
        let query = 'button, [href], input:not([type="hidden"]), select, textarea, [tabindex]:not([tabindex="-1"])';
        const isTemplate = !isNullOrUndefined(closest(element, '.e-templatecell'));
        if (this.parent.isEdit) {
            query = 'input:not([type="hidden"]), select:not([aria-hidden="true"]), textarea';
        }
        const child = [].slice.call(element.querySelectorAll(query));
        /* Select the first focusable child element
         * if no child found then select the cell itself.
         * if Grid is in editable state, check for editable control inside child.
         */
        return child.length ? isTemplate && child.length > 1 ? this.target : child[0] : element;
    }
    selector(row$$1, cell, isRowTemplate) {
        const types = [CellType.Expand, CellType.GroupCaption, CellType.CaptionSummary, CellType.GroupSummary];
        return ((row$$1.isDataRow && cell.visible && (cell.isDataCell || cell.isTemplate))
            || (row$$1.isDataRow && cell.cellType === CellType.DetailExpand && isNullOrUndefined(cell.visible))
            || (!row$$1.isDataRow && types.indexOf(cell.cellType) > -1)
            || (cell.column && cell.visible && cell.column.type === 'checkbox')
            || (cell.cellType === CellType.CommandColumn)
            || (row$$1.isDataRow && isRowTemplate))
            && !(row$$1.edit === 'delete' && row$$1.isDirty);
    }
    nextRowFocusValidate(index) {
        const lastIndex = index;
        for (let i = index, len = this.matrix.rows; i <= len; i++) {
            if (this.matrix.matrix[index].indexOf(1) === -1) {
                index = index + 1;
            }
            else {
                return index;
            }
        }
        this.lastIdxCell = true;
        return lastIndex;
    }
    previousRowFocusValidate(index) {
        const firstIndex = index;
        for (let i = index, len = 0; i >= len; i--) {
            if (this.matrix.matrix[index].indexOf(1) === -1) {
                index = index - 1;
                if (index < 0) {
                    this.lastIdxCell = true;
                    return firstIndex;
                }
            }
            else {
                return index;
            }
        }
        return firstIndex;
    }
    jump(action, current) {
        let frozenSwap = this.parent.getFrozenLeftCount() &&
            ((action === 'leftArrow' || action === 'shiftTab') && current[1] === 0);
        const right = ((action === 'rightArrow' || action === 'tab') && current[1] === this.matrix.columns);
        const frSwap = this.parent.getFrozenMode() === leftRight && right;
        if (this.parent.getFrozenMode() === 'Right') {
            frozenSwap = right;
        }
        this.lastIdxCell = false;
        const enterFrozen = this.parent.frozenRows !== 0 && action === 'shiftEnter';
        if (action === 'tab' && !this.parent.isEdit &&
            current[1] === this.matrix.matrix[current[0]].lastIndexOf(1) && this.matrix.matrix.length - 1 !== current[0]) {
            this.matrix.current[0] = this.nextRowFocusValidate(this.matrix.current[0] + 1);
            this.matrix.current[1] = -1;
            frozenSwap = this.parent.isFrozenGrid();
        }
        if (action === 'shiftTab' && !this.parent.isEdit &&
            current[0] !== 0 && this.matrix.matrix[current[0]].indexOf(1) === current[1]) {
            this.matrix.current[0] = this.previousRowFocusValidate(this.matrix.current[0] - 1);
            this.matrix.current[1] = this.matrix.matrix[current[0]].length;
        }
        let isHeaderFocus = false;
        const row$$1 = document.activeElement.parentElement;
        if ((this.parent.enableVirtualization || this.parent.infiniteScrollSettings.enableCache)
            && row$$1.classList.contains(row)) {
            const rowIndex = parseInt(row$$1.getAttribute(ariaRowIndex), 10);
            isHeaderFocus = rowIndex > 0;
        }
        const info = {
            swap: !isHeaderFocus ? ((action === 'upArrow' || enterFrozen) && current[0] === 0) || frozenSwap || frSwap : false,
            toHeader: (action === 'upArrow' || enterFrozen) && current[0] === 0,
            toFrozen: frozenSwap,
            toFrozenRight: frSwap
        };
        return info;
    }
    getNextCurrent(previous = [], swap, active, action) {
        const current = [];
        if (this.parent.getFrozenMode() === 'Right' || this.parent.getFrozenMode() === leftRight) {
            if (action === 'leftArrow' || action === 'shiftTab') {
                current[0] = previous[0];
                current[1] = active.matrix.columns + 1;
            }
            if (this.parent.getFrozenMode() === leftRight && (action === 'rightArrow' || action === 'tab')) {
                current[0] = previous[0];
                current[1] = -1;
            }
        }
        else if (action === 'rightArrow' || action === 'tab') {
            current[0] = previous[0];
            current[1] = -1;
        }
        if (action === 'downArrow' || action === 'enter') {
            current[0] = -1;
            current[1] = previous[1];
        }
        return current;
    }
    generateRows(rows, optionals) {
        const { matrix, handlerInstance } = optionals;
        const len = handlerInstance.matrix.matrix.length;
        const defaultLen = this.parent.allowFiltering && this.parent.filterSettings.type === 'FilterBar' ? len + 1 : len;
        handlerInstance.matrix.matrix = handlerInstance.matrix.matrix.slice(0, defaultLen); //Header matrix update.
        handlerInstance.matrix.rows = defaultLen;
        handlerInstance.matrix.matrix.push(...matrix);
        handlerInstance.matrix.rows += matrix.length;
    }
    getInfo(e) {
        const info = this.getFocusInfo();
        const [rIndex, cIndex] = this.matrix.current;
        const isData = info.element.classList.contains(rowCell);
        const isSelectable = isData || (e && e.action !== 'enter' && (info.element.classList.contains('e-detailrowcollapse')
            || info.element.classList.contains('e-detailrowexpand')));
        // eslint-disable-next-line max-len
        const [rowIndex, cellIndex] = [Math.min(parseInt(info.element.parentElement.getAttribute(ariaRowIndex), 10), rIndex),
            Math.min(parseInt(info.element.getAttribute(ariaColIndex), 10), cIndex)];
        return { isContent: true, isDataCell: isData, indexes: [rowIndex, cellIndex], isSelectable: isSelectable };
    }
    validator() {
        const table$$1 = this.getTable();
        return (rowIndex, cellIndex, action) => {
            if (!isNullOrUndefined(table$$1.rows[rowIndex])) {
                let cell;
                cellIndex = table$$1.querySelector('.e-emptyrow') ? 0 : cellIndex;
                if (table$$1.rows[rowIndex].cells[0].classList.contains('e-editcell')) {
                    cell = table$$1.rows[rowIndex].cells[0].querySelectorAll('td')[cellIndex];
                }
                else {
                    cell = table$$1.rows[rowIndex].cells[cellIndex];
                }
                const isCellWidth = cell.getBoundingClientRect().width !== 0;
                if (action === 'enter' || action === 'shiftEnter') {
                    return isCellWidth && cell.classList.contains(rowCell);
                }
                if ((action === 'shiftUp' || action === 'shiftDown') && cell.classList.contains(rowCell)) {
                    return isCellWidth;
                }
                else if (action !== 'shiftUp' && action !== 'shiftDown') {
                    return isCellWidth;
                }
            }
            return false;
        };
    }
    shouldFocusChange(e) {
        const [rIndex = -1, cIndex = -1] = this.matrix.current;
        if (rIndex < 0 || cIndex < 0) {
            return true;
        }
        const cell = getValue(`${rIndex}.cells.${cIndex}`, this.getTable().rows);
        if (!cell) {
            return true;
        }
        return e.action === 'enter' || e.action === 'shiftEnter' ?
            cell.classList.contains(rowCell) && !cell.classList.contains('e-unboundcell')
                && (!cell.classList.contains('e-templatecell') || cell.classList.contains('e-editedbatchcell'))
                && !cell.classList.contains('e-detailcell') : true;
    }
    getGridSeletion() {
        return this.parent.allowSelection && this.parent.selectionSettings.allowColumnSelection;
    }
}
/**
 * @hidden
 */
class HeaderFocus extends ContentFocus {
    constructor(parent) {
        super(parent);
    }
    getTable() {
        return (this.parent.isFrozenGrid() ?
            this.parent.getHeaderContent().querySelector('.e-movableheader .e-table') :
            this.parent.getHeaderTable());
    }
    onClick(e) {
        let target = e.target;
        this.target = target;
        target = (target.classList.contains('e-headercell') ? target : closest(target, 'th'));
        if (!target && this.parent.frozenRows !== 0) {
            target = (e.target.classList.contains(rowCell) ? e.target :
                closest(e.target, 'td'));
        }
        if (e.target.classList.contains('e-columnheader') ||
            e.target.querySelector('.e-stackedheadercell')) {
            return false;
        }
        if (!target) {
            return;
        }
        const [rowIndex, cellIndex] = [target.parentElement.rowIndex, target.cellIndex];
        const val = getValue(`${rowIndex}.${cellIndex}`, this.matrix.matrix);
        if (this.matrix.inValid(val)) {
            return false;
        }
        this.matrix.select(target.parentElement.rowIndex, target.cellIndex);
    }
    getFocusInfo() {
        const info = {};
        const [rowIndex = 0, cellIndex = 0] = this.matrix.current;
        info.element = this.getTable().rows[rowIndex].cells[cellIndex];
        if (!isNullOrUndefined(info.element)) {
            info.elementToFocus = this.getFocusable(info.element);
            info.outline = !info.element.classList.contains('e-filterbarcell');
        }
        return info;
    }
    selector(row$$1, cell) {
        return (cell.visible && (cell.column.field !== undefined || cell.isTemplate || !isNullOrUndefined(cell.column.template))) ||
            cell.column.type === 'checkbox' || cell.cellType === CellType.StackedHeader;
    }
    jump(action, current) {
        let frozenSwap = this.parent.getFrozenLeftCount() &&
            (action === 'leftArrow' || (action === 'shiftLeft' && this.getGridSeletion()) || action === 'shiftTab') && current[1] === 0;
        const right = (action === 'rightArrow' || (action === 'shiftRight' && this.getGridSeletion())
            || action === 'tab') && current[1] === this.matrix.columns;
        const frSwap = this.parent.getFrozenMode() === leftRight && right;
        if (this.parent.getFrozenMode() === 'Right') {
            frozenSwap = right;
        }
        const enterFrozen = this.parent.frozenRows !== 0 && action === 'enter';
        let isLastCell;
        let lastRow;
        let headerSwap = frozenSwap || frSwap;
        const fMatrix = this.parent.focusModule.fHeader && this.parent.focusModule.fHeader.matrix.matrix;
        const isPresent = fMatrix && !isNullOrUndefined(fMatrix[current[0]]);
        if (this.parent.enableHeaderFocus && action === 'tab') {
            lastRow = this.matrix.matrix.length - 1 === current[0];
            isLastCell = current[1] === this.matrix.matrix[current[0]].lastIndexOf(1);
            if (isLastCell) {
                if (!lastRow) {
                    this.matrix.current[0] = this.matrix.current[0] + 1;
                }
                else {
                    this.matrix.current[0] = 0;
                }
                this.matrix.current[1] = -1;
            }
            if (this.parent.isFrozenGrid() && lastRow && isLastCell) {
                frozenSwap = true;
                headerSwap = false;
            }
        }
        return {
            swap: ((action === 'downArrow' || enterFrozen) && current[0] === this.matrix.matrix.length - 1) ||
                (isPresent && (frozenSwap || frSwap)) || (action === 'tab' && lastRow && isLastCell),
            toHeader: headerSwap,
            toFrozen: frozenSwap,
            toFrozenRight: frSwap
        };
    }
    getNextCurrent(previous = [], swap, active, action) {
        const current1 = [];
        if (this.parent.getFrozenMode() === 'Right' || this.parent.getFrozenMode() === leftRight) {
            if (action === 'leftArrow' || (action === 'shiftLeft' && this.getGridSeletion()) || action === 'shiftTab') {
                current1[0] = previous[0];
                current1[1] = active.matrix.columns + 1;
            }
            if (this.parent.getFrozenMode() === leftRight
                && (action === 'rightArrow' || (action === 'shiftRight' && this.getGridSeletion()) || action === 'tab')) {
                current1[0] = previous[0];
                current1[1] = -1;
            }
        }
        else if (action === 'rightArrow' || (action === 'shiftRight' && this.getGridSeletion()) || action === 'tab') {
            current1[0] = previous[0];
            current1[1] = -1;
        }
        if (action === 'upArrow' || action === 'shiftEnter') {
            current1[0] = this.matrix.matrix.length;
            current1[1] = previous[1];
        }
        return current1;
    }
    generateRows(rows) {
        const length = this.matrix.matrix.length;
        if (this.parent.allowFiltering && this.parent.filterSettings.type === 'FilterBar') {
            this.matrix.rows = ++this.matrix.rows;
            const cells = rows[0].cells;
            for (let i = 0; i < cells.length; i++) {
                this.matrix.set(length, i, cells[i].visible && cells[i].column.allowFiltering !== false);
            }
        }
    }
    getInfo(e) {
        return extend(super.getInfo(e), { isContent: false, isHeader: true });
    }
    validator() {
        return () => true;
    }
    shouldFocusChange(e) {
        const [rowIndex, columnIndex] = this.matrix.current;
        if (rowIndex < 0 || columnIndex < 0) {
            return true;
        }
        const cell = getValue(`${rowIndex}.cells.${columnIndex}`, this.getTable().rows);
        if (!cell) {
            return true;
        }
        return e.action === 'enter' || e.action === 'altDownArrow' ? !cell.classList.contains('e-headercell') : true;
    }
}
class FixedContentFocus extends ContentFocus {
    getTable() {
        return this.parent.getContent().querySelector('.e-frozencontent .e-table');
    }
    jump(action, current) {
        const enterFrozen = this.parent.frozenRows !== 0 && action === 'shiftEnter';
        const toHeader = (action === 'upArrow' || enterFrozen) && current[0] === 0;
        if (this.parent.getFrozenMode() === 'Right') {
            const swap = toHeader || ((action === 'shiftTab' || action === 'leftArrow') && current[1] === 0);
            return { swap: swap, toHeader: toHeader, toFrozen: toHeader };
        }
        return {
            swap: toHeader || ((action === 'tab' || action === 'rightArrow') && current[1] === this.matrix.columns),
            toHeader: toHeader,
            toFrozen: toHeader
        };
    }
    getNextCurrent(previous = [], swap, active, action) {
        const current2 = [];
        if (this.parent.getFrozenMode() === 'Right') {
            if (action === 'rightArrow' || action === 'tab') {
                current2[0] = previous[0];
                current2[1] = -1;
            }
        }
        else {
            if (action === 'tab' && this.parent.enableHeaderFocus) {
                current2[0] = previous[0];
                current2[1] = -1;
            }
            if (action === 'leftArrow' || action === 'shiftTab') {
                current2[0] = previous[0];
                current2[1] = active.matrix.columns + 1;
            }
        }
        if (action === 'downArrow' || action === 'enter') {
            current2[0] = -1;
            current2[1] = previous[1];
        }
        return current2;
    }
}
class FixedHeaderFocus extends HeaderFocus {
    jump(action, current) {
        const enterFrozen = this.parent.frozenRows !== 0 && action === 'enter';
        const hMatrix = this.parent.focusModule.header && this.parent.focusModule.header.matrix.matrix;
        const isPresent = hMatrix && !isNullOrUndefined(hMatrix[current[0]]);
        if (this.parent.getFrozenMode() === 'Right') {
            const frSwap = (action === 'leftArrow' || (action === 'shiftLeft' && this.getGridSeletion())
                || action === 'shiftTab') && current[1] === 0;
            const swap = ((action === 'downArrow' || enterFrozen) && current[0] === this.matrix.matrix.length - 1) ||
                (isPresent && frSwap);
            const toFrozen = (action === 'downArrow' || enterFrozen) && current[0] === this.matrix.matrix.length - 1;
            return { swap: swap, toHeader: frSwap, toFrozen: toFrozen };
        }
        return {
            swap: (action === 'downArrow' || enterFrozen) && current[0] === this.matrix.matrix.length - 1 || ((action === 'rightArrow' ||
                (action === 'shiftRight' && this.getGridSeletion()) || action === 'tab') &&
                current[1] === this.matrix.columns && isPresent),
            toHeader: (action === 'rightArrow' || (action === 'shiftRight' && this.getGridSeletion()) || action === 'tab') &&
                current[1] === this.matrix.columns,
            toFrozen: (action === 'downArrow' || enterFrozen) && current[0] === this.matrix.matrix.length - 1
        };
    }
    getTable() {
        return (this.parent.getHeaderContent().querySelector('.e-frozenheader .e-table'));
    }
    getNextCurrent(previous = [], swap, active, action) {
        const current3 = [];
        if (this.parent.getFrozenMode() === 'Right') {
            if (action === 'rightArrow' || (action === 'shiftRight' && this.getGridSeletion()) || action === 'tab') {
                current3[0] = previous[0];
                current3[1] = -1;
            }
        }
        else {
            if (action === 'leftArrow' || (action === 'shiftLeft' && this.getGridSeletion()) || action === 'shiftTab') {
                current3[0] = previous[0];
                current3[1] = active.matrix.columns + 1;
            }
        }
        if (action === 'upArrow' || action === 'shiftEnter') {
            current3[0] = this.matrix.matrix.length;
            current3[1] = previous[1];
        }
        return current3;
    }
}
/** @hidden */
class SearchBox {
    constructor(searchBox) {
        this.searchBox = searchBox;
    }
    searchFocus(args) {
        args.target.parentElement.classList.add('e-input-focus');
    }
    searchBlur(args) {
        args.target.parentElement.classList.remove('e-input-focus');
    }
    wireEvent() {
        if (this.searchBox) {
            EventHandler.add(this.searchBox, 'focus', this.searchFocus, this);
            EventHandler.add(this.searchBox, 'blur', this.searchBlur, this);
        }
    }
    unWireEvent() {
        if (this.searchBox) {
            EventHandler.remove(this.searchBox, 'focus', this.searchFocus);
            EventHandler.remove(this.searchBox, 'blur', this.searchBlur);
        }
    }
}
class FixedRightContentFocus extends ContentFocus {
    getTable() {
        return this.parent.getContent().querySelector('.e-frozen-right-content .e-table');
    }
    jump(action, current) {
        const enterFrozen = this.parent.frozenRows !== 0 && action === 'shiftEnter';
        const toHeader = (action === 'upArrow' || enterFrozen) && current[0] === 0;
        return {
            swap: toHeader || ((action === 'shiftTab' || action === 'leftArrow') && current[1] === 0),
            toHeader: toHeader,
            toFrozenRight: toHeader
        };
    }
    getNextCurrent(previous = [], swap, active, action) {
        const current2 = [];
        if (action === 'rightArrow' || action === 'tab') {
            current2[0] = previous[0];
            current2[1] = -1;
        }
        if (action === 'downArrow' || action === 'enter') {
            current2[0] = -1;
            current2[1] = previous[1];
        }
        return current2;
    }
}
class FixedRightHeaderFocus extends HeaderFocus {
    jump(action, current) {
        const headerMat = this.parent.focusModule.header && this.parent.focusModule.header.matrix.matrix;
        const isPresent = headerMat && !isNullOrUndefined(headerMat[current[0]]);
        const enterFrozen = this.parent.frozenRows !== 0 && action === 'enter';
        const frozenSwap = (action === 'leftArrow' || (action === 'shiftLeft' && this.getGridSeletion())
            || action === 'shiftTab') && current[1] === 0;
        const swap = ((action === 'downArrow' || enterFrozen) && current[0] === this.matrix.matrix.length - 1) ||
            (isPresent && frozenSwap);
        const toFrozen = (action === 'downArrow' || enterFrozen) && current[0] === this.matrix.matrix.length - 1;
        return { swap: swap, toHeader: frozenSwap, toFrozenRight: toFrozen };
    }
    getTable() {
        return (this.parent.getHeaderContent().querySelector('.e-frozen-right-header .e-table'));
    }
    getNextCurrent(previous = [], swap, active, action) {
        const current3 = [];
        if (action === 'rightArrow' || (action === 'shiftRight' && this.getGridSeletion()) || action === 'tab') {
            current3[0] = previous[0];
            current3[1] = 0;
        }
        if (action === 'upArrow' || action === 'shiftEnter') {
            current3[0] = this.matrix.matrix.length;
            current3[1] = previous[1];
        }
        return current3;
    }
}

var __decorate$2 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Configures the paging behavior of the Grid.
 */
class PageSettings extends ChildProperty {
}
__decorate$2([
    Property(12)
], PageSettings.prototype, "pageSize", void 0);
__decorate$2([
    Property(8)
], PageSettings.prototype, "pageCount", void 0);
__decorate$2([
    Property(1)
], PageSettings.prototype, "currentPage", void 0);
__decorate$2([
    Property()
], PageSettings.prototype, "totalRecordsCount", void 0);
__decorate$2([
    Property(false)
], PageSettings.prototype, "enableQueryString", void 0);
__decorate$2([
    Property(false)
], PageSettings.prototype, "pageSizes", void 0);
__decorate$2([
    Property(null)
], PageSettings.prototype, "template", void 0);

var __decorate$3 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Configures the column chooser behavior of the Grid.
 */
class ColumnChooserSettings extends ChildProperty {
}
__decorate$3([
    Property('startsWith')
], ColumnChooserSettings.prototype, "operator", void 0);
__decorate$3([
    Property(false)
], ColumnChooserSettings.prototype, "ignoreAccent", void 0);

/**
 * The `Selection` module is used to handle cell and row selection.
 */
class Selection {
    /**
     * Constructor for the Grid selection module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {SelectionSettings} selectionSettings - specifies the selectionsettings
     * @param {ServiceLocator} locator - specifies the ServiceLocator
     * @hidden
     */
    constructor(parent, selectionSettings, locator) {
        //Internal letiables
        /**
         * @hidden
         */
        this.selectedRowIndexes = [];
        /**
         * @hidden
         */
        this.selectedRowCellIndexes = [];
        /**
         * @hidden
         */
        this.selectedRecords = [];
        /**
         * @hidden
         */
        this.preventFocus = false;
        /**
         *  @hidden
         */
        this.selectedColumnsIndexes = [];
        this.checkBoxState = false;
        this.isMultiShiftRequest = false;
        this.isMultiCtrlRequest = false;
        this.enableSelectMultiTouch = false;
        this.clearRowCheck = false;
        this.selectRowCheck = false;
        this.selectedRowState = {};
        this.totalRecordsCount = 0;
        this.chkAllCollec = [];
        this.isCheckedOnAdd = false;
        this.persistSelectedData = [];
        this.deSelectedData = [];
        this.needColumnSelection = false;
        this.isCancelDeSelect = false;
        this.isPreventCellSelect = false;
        this.disableUI = false;
        this.isPersisted = false;
        this.cmdKeyPressed = false;
        this.cellselected = false;
        this.isMultiSelection = false;
        this.isAddRowsToSelection = false;
        this.initialRowSelection = false;
        this.isPrevRowSelection = false;
        this.isKeyAction = false;
        this.isRowDragSelected = false;
        /**
         * @hidden
         */
        this.autoFillRLselection = true;
        this.bottom = '0 0 2px 0';
        this.top = '2px 0 0 0';
        /* eslint-disable */
        this.right_bottom = '0 2px 2px 0';
        this.bottom_left = '0 0 2px 2px';
        this.top_right = '2px 2px 0 0';
        this.top_left = '2px 0 0 2px';
        this.top_bottom = '2px 0 2px 0';
        this.top_right_bottom = '2px 2px 2px 0';
        this.top_bottom_left = '2px 0 2px 2px';
        this.top_right_left = '2px 2px 0 2px';
        this.right_bottom_left = '0 2px 2px 2px';
        this.all_border = '2px';
        this.parent = parent;
        this.selectionSettings = selectionSettings;
        this.factory = locator.getService('rendererFactory');
        this.focus = locator.getService('focus');
        this.addEventListener();
        this.wireEvents();
    }
    initializeSelection() {
        this.parent.log('selection_key_missing');
        this.render();
    }
    /**
     * The function used to trigger onActionBegin
     *
     * @param {Object} args - specifies the args
     * @param {string} type - specifies the type
     * @returns {void}
     * @hidden
     */
    onActionBegin(args, type) {
        this.parent.trigger(type, this.fDataUpdate(args));
    }
    fDataUpdate(args) {
        if (!this.isMultiSelection && (!isNullOrUndefined(args.cellIndex) || !isNullOrUndefined(args.rowIndex))) {
            const rowObj = this.getRowObj(isNullOrUndefined(args.rowIndex) ? isNullOrUndefined(args.cellIndex) ?
                this.currentIndex : args.cellIndex.rowIndex : args.rowIndex);
            args.foreignKeyData = rowObj.foreignKeyData;
        }
        return args;
    }
    /**
     * The function used to trigger onActionComplete
     *
     * @param {Object} args - specifies the args
     * @param {string} type - specifies the type
     * @returns {void}
     * @hidden
     */
    onActionComplete(args, type) {
        this.parent.trigger(type, this.fDataUpdate(args));
        this.isMultiSelection = false;
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'selection';
    }
    /**
     * To destroy the selection
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        const gridElement = this.parent.element;
        if (!gridElement || (!gridElement.querySelector('.' + gridHeader) && !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        this.hidePopUp();
        this.clearSelection();
        this.removeEventListener();
        this.unWireEvents();
        EventHandler.remove(this.parent.getContent(), 'mousedown', this.mouseDownHandler);
        EventHandler.remove(this.parent.getHeaderContent(), 'mousedown', this.mouseDownHandler);
    }
    isEditing() {
        return (this.parent.editSettings.mode === 'Normal' || (this.parent.editSettings.mode === 'Batch' && this.parent.editModule &&
            this.parent.editModule.formObj && !this.parent.editModule.formObj.validate())) &&
            this.parent.isEdit && !this.parent.isPersistSelection;
    }
    getSelectedMovableRow(index) {
        const gObj = this.parent;
        if (gObj.isFrozenGrid() && this.parent.getContent().querySelector('.' + movableContent)) {
            return gObj.getMovableRowByIndex(index);
        }
        return null;
    }
    getSelectedFrozenRightRow(index) {
        const gObj = this.parent;
        if (gObj.isFrozenGrid() && gObj.getFrozenMode() === leftRight && gObj.getFrozenRightContent()) {
            return gObj.getFrozenRightRowByIndex(index);
        }
        return null;
    }
    getCurrentBatchRecordChanges() {
        const gObj = this.parent;
        if (gObj.editSettings.mode === 'Batch' && gObj.editModule) {
            let currentRecords = iterateExtend(this.parent.getCurrentViewRecords());
            currentRecords = gObj.editSettings.newRowPosition === 'Bottom' ?
                currentRecords.concat(this.parent.editModule.getBatchChanges()[addedRecords]) :
                this.parent.editModule.getBatchChanges()[addedRecords].concat(currentRecords);
            const deletedRecords$$1 = this.parent.editModule.getBatchChanges()[deletedRecords];
            const primaryKey = this.parent.getPrimaryKeyFieldNames()[0];
            for (let i = 0; i < (deletedRecords$$1.length); i++) {
                for (let j = 0; j < currentRecords.length; j++) {
                    if (deletedRecords$$1[i][primaryKey] === currentRecords[j][primaryKey]) {
                        currentRecords.splice(j, 1);
                        break;
                    }
                }
            }
            return currentRecords;
        }
        else {
            return gObj.getCurrentViewRecords();
        }
    }
    /**
     * Selects a row by the given index.
     *
     * @param  {number} index - Defines the row index.
     * @param  {boolean} isToggle - If set to true, then it toggles the selection.
     * @returns {void}
     */
    selectRow(index, isToggle) {
        if (this.selectedRowIndexes.length && this.selectionSettings.enableSimpleMultiRowSelection) {
            this.addRowsToSelection([index]);
            return;
        }
        const gObj = this.parent;
        const selectedRow = gObj.getRowByIndex(index);
        const selectedMovableRow = this.getSelectedMovableRow(index);
        const selectedFrozenRightRow = this.getSelectedFrozenRightRow(index);
        let selectData;
        const isRemoved = false;
        if (gObj.enableVirtualization && index > -1) {
            const e = { selectedIndex: index, isAvailable: true };
            this.parent.notify(selectVirtualRow, e);
            const frozenData = gObj.isFrozenGrid() ? gObj.contentModule.getRowObjectByIndex(index)
                : null;
            if (selectedRow && (gObj.getRowObjectFromUID(selectedRow.getAttribute('data-uid')) || frozenData)) {
                selectData = frozenData ? frozenData : gObj.getRowObjectFromUID(selectedRow.getAttribute('data-uid')).data;
            }
            else {
                if (e.isAvailable && !gObj.selectionSettings.persistSelection) {
                    const prevSelectedData = this.parent.getSelectedRecords();
                    if (prevSelectedData.length > 0) {
                        this.clearRowSelection();
                    }
                }
                return;
            }
        }
        else {
            selectData = this.getRowObj(index).data;
        }
        if (!this.isRowType() || !selectedRow || this.isEditing()) {
            // if (this.isEditing()) {
            //     gObj.selectedRowIndex = index;
            // }
            return;
        }
        const isRowSelected = selectedRow.hasAttribute('aria-selected');
        this.activeTarget();
        isToggle = !isToggle ? isToggle :
            !this.selectedRowIndexes.length ? false :
                (this.selectedRowIndexes.length === 1 ? (this.isKeyAction && this.parent.isCheckBoxSelection ?
                    false : index === this.selectedRowIndexes[0]) : false);
        this.isKeyAction = false;
        let args;
        const can = 'cancel';
        if (!isToggle) {
            args = {
                data: selectData, rowIndex: index, isCtrlPressed: this.isMultiCtrlRequest,
                isShiftPressed: this.isMultiShiftRequest, row: selectedRow,
                previousRow: gObj.getRowByIndex(this.prevRowIndex),
                previousRowIndex: this.prevRowIndex, target: this.actualTarget, cancel: false, isInteracted: this.isInteracted,
                isHeaderCheckboxClicked: this.isHeaderCheckboxClicked
            };
            args = this.addMovableArgs(args, selectedMovableRow, selectedFrozenRightRow);
            this.parent.trigger(rowSelecting, this.fDataUpdate(args), this.rowSelectingCallBack(args, isToggle, index, selectData, isRemoved, isRowSelected, can));
        }
        else {
            this.rowSelectingCallBack(args, isToggle, index, selectData, isRemoved, isRowSelected, can)(args);
        }
    }
    rowSelectingCallBack(args, isToggle, index, selectData, isRemoved, isRowSelected, can) {
        return (args) => {
            if (!isNullOrUndefined(args) && args[can] === true) {
                this.disableInteracted();
                return;
            }
            this.index = index;
            this.toggle = isToggle;
            this.data = selectData;
            this.removed = isRemoved;
            if (isRowSelected && this.selectionSettings.persistSelection && !(this.selectionSettings.checkboxMode === 'ResetOnRowClick')) {
                this.clearSelectedRow(index);
                this.selectRowCallBack();
            }
            else if (!isRowSelected && this.selectionSettings.persistSelection &&
                this.selectionSettings.checkboxMode !== 'ResetOnRowClick') {
                this.selectRowCallBack();
            }
            if (this.selectionSettings.checkboxMode === 'ResetOnRowClick') {
                this.clearSelection();
            }
            if (!this.selectionSettings.persistSelection || this.selectionSettings.checkboxMode === 'ResetOnRowClick' ||
                (!this.parent.isCheckBoxSelection && this.selectionSettings.persistSelection)) {
                this.selectRowCheck = true;
                this.clearRow();
            }
        };
    }
    selectRowCallBack() {
        const gObj = this.parent;
        let args;
        const index = this.index;
        const isToggle = this.toggle;
        const selectData = this.data;
        const isRemoved = this.removed;
        const selectedRow = gObj.getRowByIndex(index);
        const selectedMovableRow = this.getSelectedMovableRow(index);
        const selectedFrozenRightRow = this.getSelectedFrozenRightRow(index);
        if (!isToggle && !isRemoved) {
            if (this.selectedRowIndexes.indexOf(index) <= -1) {
                this.updateRowSelection(selectedRow, index);
                this.selectMovableRow(selectedMovableRow, selectedFrozenRightRow, index);
            }
            this.selectRowIndex(index);
        }
        if (!isToggle) {
            args = {
                data: selectData, rowIndex: index,
                row: selectedRow, previousRow: gObj.getRowByIndex(this.prevRowIndex),
                previousRowIndex: this.prevRowIndex, target: this.actualTarget, isInteracted: this.isInteracted,
                isHeaderCheckBoxClicked: this.isHeaderCheckboxClicked
            };
            args = this.addMovableArgs(args, selectedMovableRow, selectedFrozenRightRow);
            this.onActionComplete(args, rowSelected);
        }
        this.isInteracted = false;
        this.updateRowProps(index);
    }
    selectMovableRow(selectedMovableRow, selectedFrozenRightRow, index) {
        if (this.parent.isFrozenGrid()) {
            this.updateRowSelection(selectedMovableRow, index);
            if (this.parent.getFrozenMode() === leftRight && selectedFrozenRightRow) {
                this.updateRowSelection(selectedFrozenRightRow, index);
            }
        }
    }
    addMovableArgs(targetObj, mRow, frRow) {
        if (this.parent.isFrozenGrid()) {
            const mObj = { mRow: mRow, previousMovRow: this.parent.getMovableRows()[this.prevRowIndex] };
            const frozenRightRow = 'frozenRightRow';
            const previousFrozenRightRow = 'previousFrozenRightRow';
            if (this.parent.getFrozenMode() === leftRight && frRow) {
                mObj[frozenRightRow] = frRow;
                mObj[previousFrozenRightRow] = this.parent.getFrozenRightDataRows()[this.prevRowIndex];
            }
            targetObj = Object.assign({}, targetObj, mObj);
        }
        return targetObj;
    }
    /**
     * Selects a range of rows from start and end row indexes.
     *
     * @param  {number} startIndex - Specifies the start row index.
     * @param  {number} endIndex - Specifies the end row index.
     * @returns {void}
     */
    selectRowsByRange(startIndex, endIndex) {
        this.selectRows(this.getCollectionFromIndexes(startIndex, endIndex));
        this.selectRowIndex(endIndex);
    }
    selectedDataUpdate(selectedData, foreignKeyData$$1, selectedRows, rowIndexes) {
        for (let i = 0, len = rowIndexes.length; i < len; i++) {
            const currentRow = this.parent.getDataRows()[rowIndexes[i]];
            const rowObj = this.getRowObj(currentRow);
            if (rowObj) {
                selectedData.push(rowObj.data);
                selectedRows.push(currentRow);
                foreignKeyData$$1.push(rowObj.foreignKeyData);
            }
        }
    }
    /**
     * Selects a collection of rows by index.
     *
     * @param  {number[]} rowIndexes - Specifies an array of row indexes.
     * @returns {void}
     */
    selectRows(rowIndexes) {
        const gObj = this.parent;
        const rowIndex = !this.isSingleSel() ? rowIndexes[0] : rowIndexes[rowIndexes.length - 1];
        this.isMultiSelection = true;
        const selectedRows = [];
        const foreignKeyData$$1 = [];
        const selectedMovableRow = this.getSelectedMovableRow(rowIndex);
        const selectedFrozenRightRow = this.getSelectedFrozenRightRow(rowIndex);
        const can = 'cancel';
        const selectedData = [];
        if (!this.isRowType() || this.isEditing()) {
            return;
        }
        this.selectedDataUpdate(selectedData, foreignKeyData$$1, selectedRows, rowIndexes);
        this.activeTarget();
        let args = {
            cancel: false,
            rowIndexes: rowIndexes, row: selectedRows, rowIndex: rowIndex, target: this.actualTarget,
            prevRow: gObj.getRows()[this.prevRowIndex], previousRowIndex: this.prevRowIndex,
            isInteracted: this.isInteracted, isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest,
            data: selectedData, isHeaderCheckboxClicked: this.isHeaderCheckboxClicked, foreignKeyData: foreignKeyData$$1
        };
        args = this.addMovableArgs(args, selectedMovableRow, selectedFrozenRightRow);
        this.parent.trigger(rowSelecting, this.fDataUpdate(args), (args) => {
            if (!isNullOrUndefined(args) && args[can] === true) {
                this.disableInteracted();
                return;
            }
            this.clearRow();
            this.selectRowIndex(rowIndexes.slice(-1)[0]);
            const selectRowFn = (index) => {
                this.updateRowSelection(gObj.getRowByIndex(index), index);
                if (gObj.isFrozenGrid()) {
                    const rightEle = this.parent.getFrozenMode() === leftRight ? gObj.getFrozenRightRowByIndex(index)
                        : undefined;
                    this.selectMovableRow(gObj.getMovableRowByIndex(index), rightEle, index);
                }
                this.updateRowProps(rowIndex);
            };
            if (!this.isSingleSel()) {
                for (const rowIdx of rowIndexes) {
                    selectRowFn(rowIdx);
                }
            }
            else {
                selectRowFn(rowIndex);
            }
            args = {
                rowIndexes: rowIndexes, row: selectedRows, rowIndex: rowIndex, target: this.actualTarget,
                prevRow: gObj.getRows()[this.prevRowIndex], previousRowIndex: this.prevRowIndex,
                data: this.getSelectedRecords(), isInteracted: this.isInteracted,
                isHeaderCheckboxClicked: this.isHeaderCheckboxClicked, foreignKeyData: foreignKeyData$$1
            };
            args = this.addMovableArgs(args, selectedMovableRow, selectedFrozenRightRow);
            if (this.isRowSelected) {
                this.onActionComplete(args, rowSelected);
            }
            this.isInteracted = false;
        });
    }
    /**
     * Select rows with existing row selection by passing row indexes.
     *
     * @param {number} rowIndexes - Specifies the row indexes.
     * @returns {void}
     * @hidden
     */
    addRowsToSelection(rowIndexes) {
        const gObj = this.parent;
        const can = 'cancel';
        const target = this.target;
        this.isMultiSelection = true;
        const selectedRows = [];
        const foreignKeyData$$1 = [];
        const selectedData = [];
        const indexes = gObj.getSelectedRowIndexes().concat(rowIndexes);
        const selectedRow = !this.isSingleSel() ? gObj.getRowByIndex(rowIndexes[0]) :
            gObj.getRowByIndex(rowIndexes[rowIndexes.length - 1]);
        const selectedMovableRow = !this.isSingleSel() ? this.getSelectedMovableRow(rowIndexes[0]) :
            this.getSelectedMovableRow(rowIndexes[rowIndexes.length - 1]);
        const selectedFrozenRightRow = !this.isSingleSel() ? this.getSelectedFrozenRightRow(rowIndexes[0]) :
            this.getSelectedFrozenRightRow(rowIndexes[rowIndexes.length - 1]);
        if ((!this.isRowType() || this.isEditing()) && !this.selectionSettings.checkboxOnly) {
            return;
        }
        let args;
        const checkboxColumn = this.parent.getColumns().filter((col) => col.type === 'checkbox');
        if (this.isMultiCtrlRequest && !checkboxColumn.length) {
            this.selectedDataUpdate(selectedData, foreignKeyData$$1, selectedRows, indexes);
        }
        for (const rowIndex of rowIndexes) {
            const rowObj = this.getRowObj(rowIndex);
            const isUnSelected = this.selectedRowIndexes.indexOf(rowIndex) > -1;
            this.selectRowIndex(rowIndex);
            if (isUnSelected && ((checkboxColumn.length ? true : this.selectionSettings.enableToggle) || this.isMultiCtrlRequest)) {
                this.isAddRowsToSelection = true;
                this.rowDeselect(rowDeselecting, [rowIndex], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], target);
                if (this.isCancelDeSelect) {
                    return;
                }
                this.selectedRowIndexes.splice(this.selectedRowIndexes.indexOf(rowIndex), 1);
                this.selectedRecords.splice(this.selectedRecords.indexOf(selectedRow), 1);
                this.selectRowIndex(this.selectedRowIndexes.length ? this.selectedRowIndexes[this.selectedRowIndexes.length - 1] : -1);
                selectedRow.removeAttribute('aria-selected');
                this.addRemoveClassesForRow(selectedRow, false, null, 'e-selectionbackground', 'e-active');
                if (selectedMovableRow) {
                    this.selectedRecords.splice(this.selectedRecords.indexOf(selectedMovableRow), 1);
                    selectedMovableRow.removeAttribute('aria-selected');
                    this.addRemoveClassesForRow(selectedMovableRow, false, null, 'e-selectionbackground', 'e-active');
                }
                if (selectedFrozenRightRow) {
                    this.selectedRecords.splice(this.selectedRecords.indexOf(selectedFrozenRightRow), 1);
                    selectedFrozenRightRow.removeAttribute('aria-selected');
                    this.addRemoveClassesForRow(selectedFrozenRightRow, false, null, 'e-selectionbackground', 'e-active');
                }
                this.rowDeselect(rowDeselected, [rowIndex], [rowObj.data], [selectedRow], [rowObj.foreignKeyData], target, [selectedMovableRow], undefined, [selectedFrozenRightRow]);
                this.isInteracted = false;
                this.isMultiSelection = false;
                this.isAddRowsToSelection = false;
            }
            else {
                this.activeTarget();
                args = {
                    cancel: false,
                    data: selectedData.length ? selectedData : rowObj.data, rowIndex: rowIndex, row: selectedRows.length ? selectedRows :
                        selectedRow, target: this.actualTarget, prevRow: gObj.getRows()[this.prevRowIndex],
                    previousRowIndex: this.prevRowIndex, isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest,
                    foreignKeyData: foreignKeyData$$1.length ? foreignKeyData$$1 : rowObj.foreignKeyData, isInteracted: this.isInteracted,
                    isHeaderCheckboxClicked: this.isHeaderCheckboxClicked, rowIndexes: indexes
                };
                args = this.addMovableArgs(args, selectedMovableRow, selectedFrozenRightRow);
                this.parent.trigger(rowSelecting, this.fDataUpdate(args));
                if (!isNullOrUndefined(args) && args[can] === true) {
                    this.disableInteracted();
                    return;
                }
                if (this.isSingleSel()) {
                    this.clearRow();
                }
                this.updateRowSelection(selectedRow, rowIndex);
                this.selectMovableRow(selectedMovableRow, selectedFrozenRightRow, rowIndex);
            }
            if (!isUnSelected) {
                args = {
                    data: selectedData.length ? selectedData : rowObj.data, rowIndex: rowIndex, row: selectedRows.length ? selectedRows :
                        selectedRow, target: this.actualTarget, prevRow: gObj.getRows()[this.prevRowIndex],
                    previousRowIndex: this.prevRowIndex, foreignKeyData: foreignKeyData$$1.length ? foreignKeyData$$1 : rowObj.foreignKeyData,
                    isInteracted: this.isInteracted, isHeaderCheckboxClicked: this.isHeaderCheckboxClicked, rowIndexes: indexes
                };
                args = this.addMovableArgs(args, selectedMovableRow, selectedFrozenRightRow);
                this.onActionComplete(args, rowSelected);
            }
            this.isInteracted = false;
            this.updateRowProps(rowIndex);
            if (this.isSingleSel()) {
                break;
            }
        }
    }
    getCollectionFromIndexes(startIndex, endIndex) {
        const indexes = [];
        // eslint-disable-next-line prefer-const
        let { i, max } = (startIndex <= endIndex) ?
            { i: startIndex, max: endIndex } : { i: endIndex, max: startIndex };
        for (; i <= max; i++) {
            indexes.push(i);
        }
        if (startIndex > endIndex) {
            indexes.reverse();
        }
        return indexes;
    }
    clearRow() {
        this.clearRowCheck = true;
        this.clearRowSelection();
    }
    clearRowCallBack() {
        if (this.isCancelDeSelect && this.parent.checkAllRows !== 'Check') {
            return;
        }
        this.selectedRowIndexes = [];
        this.selectedRecords = [];
        this.selectRowIndex(-1);
        if (this.isSingleSel() && this.parent.isPersistSelection) {
            this.selectedRowState = {};
        }
    }
    clearSelectedRow(index) {
        if (this.toggle) {
            const selectedEle = this.parent.getRowByIndex(index);
            if (!this.disableUI) {
                selectedEle.removeAttribute('aria-selected');
                this.addRemoveClassesForRow(selectedEle, false, true, 'e-selectionbackground', 'e-active');
            }
            this.removed = true;
            this.updatePersistCollection(selectedEle, false);
            this.updateCheckBoxes(selectedEle);
            this.selectedRowIndexes.splice(this.selectedRowIndexes.indexOf(index), 1);
            this.selectedRecords.splice(this.selectedRecords.indexOf(this.parent.getRowByIndex(index)), 1);
        }
    }
    updateRowProps(startIndex) {
        this.prevRowIndex = startIndex;
        this.isRowSelected = this.selectedRowIndexes.length && true;
    }
    updatePersistCollection(selectedRow, chkState) {
        if ((this.parent.isPersistSelection || this.parent.selectionSettings.persistSelection &&
            this.parent.getPrimaryKeyFieldNames().length > 0) && !isNullOrUndefined(selectedRow)) {
            if (!this.parent.isPersistSelection) {
                this.ensureCheckboxFieldSelection();
            }
            const rowObj = this.getRowObj(selectedRow);
            const pKey = rowObj.data ? rowObj.data[this.primaryKey] : null;
            if (pKey === null) {
                return;
            }
            rowObj.isSelected = chkState;
            if (chkState) {
                this.selectedRowState[pKey] = chkState;
                if (!this.persistSelectedData.some((data) => data[this.primaryKey] === pKey)) {
                    this.persistSelectedData.push(rowObj.data);
                }
            }
            else {
                this.updatePersistDelete(pKey);
            }
        }
    }
    updatePersistDelete(pKey) {
        delete (this.selectedRowState[pKey]);
        let index;
        const isPresent = this.persistSelectedData.some((data, i) => {
            index = i;
            return data[this.primaryKey] === pKey;
        });
        if (isPresent) {
            this.persistSelectedData.splice(index, 1);
        }
    }
    updateCheckBoxes(row$$1, chkState, rowIndex) {
        if (!isNullOrUndefined(row$$1)) {
            const chkBox = row$$1.querySelector('.e-checkselect');
            if (!isNullOrUndefined(chkBox)) {
                removeAddCboxClasses(chkBox.nextElementSibling, chkState);
                setChecked(chkBox, chkState);
                if (isNullOrUndefined(this.checkedTarget) || (!isNullOrUndefined(this.checkedTarget)
                    && !this.checkedTarget.classList.contains('e-checkselectall'))) {
                    this.setCheckAllState(rowIndex);
                }
            }
        }
    }
    updateRowSelection(selectedRow, startIndex) {
        if (!selectedRow) {
            return;
        }
        this.selectedRowIndexes.push(startIndex);
        const len = this.selectedRowIndexes.length;
        if (this.parent.isFrozenGrid() && len > 1) {
            if ((this.selectedRowIndexes[len - 2] === this.selectedRowIndexes[len - 1])) {
                this.selectedRowIndexes.pop();
            }
        }
        this.selectedRecords.push(selectedRow);
        selectedRow.setAttribute('aria-selected', 'true');
        this.updatePersistCollection(selectedRow, true);
        this.updateCheckBoxes(selectedRow, true);
        this.addRemoveClassesForRow(selectedRow, true, null, 'e-selectionbackground', 'e-active');
        if (!this.preventFocus) {
            let target = this.focus.getPrevIndexes().cellIndex ?
                selectedRow.cells[this.focus.getPrevIndexes().cellIndex] :
                selectedRow.querySelector('.e-selectionbackground:not(.e-hide):not(.e-detailrowcollapse):not(.e-detailrowexpand)');
            if (this.parent.contextMenuModule && this.mouseButton === 2) {
                target = this.parent.contextMenuModule.cell;
            }
            if (!target) {
                return;
            }
            this.focus.onClick({ target }, true);
        }
    }
    /**
     * Deselects the currently selected rows and cells.
     *
     * @returns {void}
     */
    clearSelection() {
        this.checkSelectAllClicked = true;
        if (this.selectionSettings.persistSelection && this.persistSelectedData.length) {
            this.deSelectedData = iterateExtend(this.persistSelectedData);
        }
        if (!this.parent.isPersistSelection || (this.parent.isPersistSelection && !this.parent.isEdit) ||
            (!isNullOrUndefined(this.checkedTarget) && this.checkedTarget.classList.contains('e-checkselectall'))) {
            const span = this.parent.element.querySelector('.e-gridpopup').querySelector('span');
            if (span.classList.contains('e-rowselect')) {
                span.classList.remove('e-spanclicked');
            }
            if (this.parent.isPersistSelection) {
                this.persistSelectedData = [];
                this.selectedRowState = {};
            }
            this.clearRowSelection();
            this.clearCellSelection();
            this.clearColumnSelection();
            this.prevRowIndex = undefined;
            this.prevCIdxs = undefined;
            this.prevECIdxs = undefined;
            this.enableSelectMultiTouch = false;
            this.isInteracted = false;
            this.checkSelectAllClicked = false;
        }
    }
    /**
     * Deselects the currently selected rows.
     *
     * @returns {void}
     */
    clearRowSelection() {
        if (this.isRowSelected) {
            const gObj = this.parent;
            const rows = this.parent.getDataRows();
            const data = [];
            const row$$1 = [];
            const mRow = [];
            const fRightRow = [];
            const rowIndex = [];
            const foreignKeyData$$1 = [];
            const target = this.target;
            for (let i = 0, len = this.selectedRowIndexes.length; i < len; i++) {
                const currentRow = this.parent.editSettings.mode === 'Batch' ?
                    this.parent.getRows()[this.selectedRowIndexes[i]]
                    : this.parent.getDataRows()[this.selectedRowIndexes[i]];
                const rowObj = this.getRowObj(currentRow);
                if (rowObj) {
                    data.push(rowObj.data);
                    row$$1.push(currentRow);
                    rowIndex.push(this.selectedRowIndexes[i]);
                    foreignKeyData$$1.push(rowObj.foreignKeyData);
                }
                if (gObj.isFrozenGrid()) {
                    const mRows = gObj.getMovableRows();
                    if (mRows && mRows.length) {
                        mRow.push(mRows[this.selectedRowIndexes[i]]);
                    }
                    if (gObj.getFrozenMode() === leftRight) {
                        const frRows = gObj.getFrozenRightRows();
                        if (frRows && frRows.length) {
                            fRightRow.push(frRows[this.selectedRowIndexes[i]]);
                        }
                    }
                }
            }
            if (this.selectionSettings.persistSelection && this.selectionSettings.checkboxMode !== 'ResetOnRowClick') {
                this.isRowClicked = this.checkSelectAllClicked ? true : false;
            }
            this.rowDeselect(rowDeselecting, rowIndex, data, row$$1, foreignKeyData$$1, target, mRow, () => {
                if (this.isCancelDeSelect && (this.isRowClicked || this.checkSelectAllClicked || (this.isInteracted &&
                    !this.parent.isPersistSelection))) {
                    if (this.parent.isPersistSelection) {
                        if (this.getCheckAllStatus(this.parent.element.querySelector('.e-checkselectall')) === 'Intermediate') {
                            for (let i = 0; i < this.selectedRecords.length; i++) {
                                this.updatePersistCollection(this.selectedRecords[i], true);
                            }
                        }
                        else {
                            this.parent.checkAllRows = 'Check';
                            this.updatePersistSelectedData(true);
                        }
                    }
                    if (this.clearRowCheck) {
                        this.clearRowCallBack();
                        this.clearRowCheck = false;
                        if (this.selectRowCheck) {
                            this.selectRowCallBack();
                            this.selectRowCheck = false;
                        }
                    }
                    return;
                }
                const element = [].slice.call(rows.filter((record) => record.hasAttribute('aria-selected')));
                for (let j = 0; j < element.length; j++) {
                    if (!this.disableUI) {
                        element[j].removeAttribute('aria-selected');
                        this.addRemoveClassesForRow(element[j], false, true, 'e-selectionbackground', 'e-active');
                    }
                    // tslint:disable-next-line:align
                    if (!this.isPrevRowSelection) {
                        this.updatePersistCollection(element[j], false);
                    }
                    this.updateCheckBoxes(element[j]);
                }
                for (let i = 0, len = this.selectedRowIndexes.length; i < len; i++) {
                    const movableRow = this.getSelectedMovableRow(this.selectedRowIndexes[i]);
                    if (movableRow) {
                        if (!this.disableUI) {
                            movableRow.removeAttribute('aria-selected');
                            this.addRemoveClassesForRow(movableRow, false, true, 'e-selectionbackground', 'e-active');
                        }
                        this.updateCheckBoxes(movableRow);
                        if (!this.isPrevRowSelection) {
                            this.updatePersistCollection(movableRow, false);
                        }
                    }
                    const frRow = this.getSelectedFrozenRightRow(this.selectedRowIndexes[i]);
                    if (frRow) {
                        if (!this.disableUI) {
                            frRow.removeAttribute('aria-selected');
                            this.addRemoveClassesForRow(frRow, false, true, 'e-selectionbackground', 'e-active');
                        }
                        this.updateCheckBoxes(frRow);
                        if (!this.isPrevRowSelection) {
                            this.updatePersistCollection(frRow, false);
                        }
                    }
                }
                this.selectedRowIndexes = [];
                this.selectedRecords = [];
                this.isRowSelected = false;
                this.selectRowIndex(-1);
                this.isPrevRowSelection = false;
                this.rowDeselect(rowDeselected, rowIndex, data, row$$1, foreignKeyData$$1, target, mRow, undefined, fRightRow);
                if (this.clearRowCheck) {
                    this.clearRowCallBack();
                    this.clearRowCheck = false;
                    if (this.selectRowCheck) {
                        this.selectRowCallBack();
                        this.selectRowCheck = false;
                    }
                }
            }, fRightRow);
        }
        else {
            if (this.clearRowCheck) {
                this.clearRowCallBack();
                this.clearRowCheck = false;
                if (this.selectRowCheck) {
                    this.selectRowCallBack();
                    this.selectRowCheck = false;
                }
            }
        }
    }
    rowDeselect(type, rowIndex, data, row$$1, foreignKeyData$$1, target, mRow, rowDeselectCallBack, frozenRightRow) {
        if ((this.selectionSettings.persistSelection && (this.isRowClicked || this.checkSelectAllClicked)) ||
            !this.selectionSettings.persistSelection) {
            const cancl = 'cancel';
            const isSingleDeSel = rowIndex.length === 1 && this.deSelectedData.length === 1;
            const rowDeselectObj = {
                rowIndex: rowIndex[0], data: this.selectionSettings.persistSelection && (this.parent.checkAllRows === 'Uncheck' &&
                    !isSingleDeSel) && this.selectionSettings.checkboxMode !== 'ResetOnRowClick' ? this.deSelectedData : data,
                foreignKeyData: foreignKeyData$$1, cancel: false, isInteracted: this.isInteracted,
                isHeaderCheckboxClicked: this.isHeaderCheckboxClicked
            };
            if (type === 'rowDeselected') {
                delete rowDeselectObj.cancel;
            }
            const rowInString = 'row';
            const target = 'target';
            const rowidx = 'rowIndex';
            const rowidxex = 'rowIndexes';
            const dataTxt = 'data';
            const foreignKey = 'foreignKeyData';
            rowDeselectObj[rowInString] = row$$1;
            rowDeselectObj[target] = this.actualTarget;
            const isHeaderCheckBxClick = this.actualTarget && !isNullOrUndefined(closest(this.actualTarget, 'thead'));
            if (isHeaderCheckBxClick || rowIndex.length > 1) {
                rowDeselectObj[rowidx] = rowIndex[0];
                rowDeselectObj[rowidxex] = rowIndex;
            }
            else if (rowIndex.length === 1) {
                rowDeselectObj[dataTxt] = rowDeselectObj[dataTxt][0];
                rowDeselectObj[rowInString] = rowDeselectObj[rowInString][0];
                rowDeselectObj[foreignKey] = rowDeselectObj[foreignKey][0];
                if (this.isAddRowsToSelection) {
                    rowDeselectObj[rowidxex] = rowIndex;
                }
            }
            this.parent.trigger(type, this.parent.isFrozenGrid() ? Object.assign({}, rowDeselectObj, { mRow: mRow, frozenRightRow: frozenRightRow }) : rowDeselectObj, (args) => {
                this.isCancelDeSelect = args[cancl];
                if (!this.isCancelDeSelect || (!this.isRowClicked && !this.isInteracted && !this.checkSelectAllClicked)) {
                    this.updatePersistCollection(row$$1[0], false);
                    this.updateCheckBoxes(row$$1[0], undefined, rowIndex[0]);
                    if (mRow) {
                        this.updateCheckBoxes(mRow[0], undefined, rowIndex[0]);
                    }
                    if (frozenRightRow) {
                        this.updateCheckBoxes(frozenRightRow[0], undefined, rowIndex[0]);
                    }
                }
                if (rowDeselectCallBack !== undefined) {
                    rowDeselectCallBack();
                }
            });
        }
        else if (this.selectionSettings.persistSelection && !this.isInteracted) {
            if (rowDeselectCallBack !== undefined) {
                rowDeselectCallBack();
            }
        }
    }
    getRowObj(row$$1 = this.currentIndex) {
        if (isNullOrUndefined(row$$1)) {
            return {};
        }
        if (typeof row$$1 === 'number') {
            row$$1 = this.parent.getRowByIndex(row$$1);
        }
        if (row$$1) {
            return this.parent.getRowObjectFromUID(row$$1.getAttribute('data-uid')) || {};
        }
        return {};
    }
    getSelectedMovableCell(cellIndex) {
        const gObj = this.parent;
        const col = gObj.getColumnByIndex(cellIndex.cellIndex);
        const frzCols = gObj.isFrozenGrid();
        if (frzCols) {
            if (col.getFreezeTableName() === 'movable') {
                return gObj.getMovableCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));
            }
            return null;
        }
        return null;
    }
    /**
     * Selects a cell by the given index.
     *
     * @param  {IIndex} cellIndex - Defines the row and column indexes.
     * @param  {boolean} isToggle - If set to true, then it toggles the selection.
     * @returns {void}
     */
    selectCell(cellIndex, isToggle) {
        if (!this.isCellType()) {
            return;
        }
        const gObj = this.parent;
        let selectedCell = this.getSelectedMovableCell(cellIndex);
        let args;
        if (!selectedCell) {
            selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));
        }
        this.currentIndex = cellIndex.rowIndex;
        const selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
        if (!this.isCellType() || !selectedCell || this.isEditing()) {
            return;
        }
        const isCellSelected = selectedCell.classList.contains('e-cellselectionbackground');
        isToggle = !isToggle ? isToggle : (!isUndefined(this.prevCIdxs) &&
            cellIndex.rowIndex === this.prevCIdxs.rowIndex && cellIndex.cellIndex === this.prevCIdxs.cellIndex &&
            isCellSelected);
        if (!isToggle) {
            args = {
                data: selectedData, cellIndex: cellIndex,
                isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest,
                previousRowCell: this.prevECIdxs ?
                    this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined,
                cancel: false
            };
            const currentCell = 'currentCell';
            args[currentCell] = selectedCell;
            const previousRowCellIndex = 'previousRowCellIndex';
            args[previousRowCellIndex] = this.prevECIdxs;
            this.parent.trigger(cellSelecting, this.fDataUpdate(args), this.successCallBack(args, isToggle, cellIndex, selectedCell, selectedData));
            this.cellselected = true;
        }
        else {
            this.successCallBack(args, isToggle, cellIndex, selectedCell, selectedData)(args);
        }
    }
    successCallBack(cellSelectingArgs, isToggle, cellIndex, selectedCell, selectedData) {
        return (cellSelectingArgs) => {
            const cncl = 'cancel';
            const currentCell = 'currentCell';
            if (!isNullOrUndefined(cellSelectingArgs) && cellSelectingArgs[cncl] === true) {
                return;
            }
            if (!isToggle) {
                cellSelectingArgs[currentCell] = cellSelectingArgs[currentCell] ? cellSelectingArgs[currentCell] : selectedCell;
            }
            this.clearCell();
            if (!isToggle) {
                this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);
            }
            if (!isToggle) {
                const args = {
                    data: selectedData, cellIndex: cellIndex, currentCell: selectedCell,
                    selectedRowCellIndex: this.selectedRowCellIndexes,
                    previousRowCell: this.prevECIdxs ?
                        this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined
                };
                const previousRowCellIndex = 'previousRowCellIndex';
                args[previousRowCellIndex] = this.prevECIdxs;
                this.updateCellProps(cellIndex, cellIndex);
                this.onActionComplete(args, cellSelected);
            }
        };
    }
    getCellIndex(rIdx, cIdx) {
        return (this.parent.getFrozenColumns() ? (cIdx >= this.parent.getFrozenColumns() ? this.parent.getMovableCellFromIndex(rIdx, cIdx)
            : this.parent.getCellFromIndex(rIdx, cIdx)) : this.parent.getCellFromIndex(rIdx, cIdx));
    }
    /**
     * Selects a range of cells from start and end indexes.
     *
     * @param  {IIndex} startIndex - Specifies the row and column's start index.
     * @param  {IIndex} endIndex - Specifies the row and column's end index.
     * @returns {void}
     */
    selectCellsByRange(startIndex, endIndex) {
        if (!this.isCellType()) {
            return;
        }
        const gObj = this.parent;
        let selectedCell = this.getSelectedMovableCell(startIndex);
        const frzCols = gObj.getFrozenColumns();
        if (!selectedCell) {
            selectedCell = gObj.getCellFromIndex(startIndex.rowIndex, startIndex.cellIndex);
        }
        let min;
        let max;
        const stIndex = startIndex;
        const edIndex = endIndex = endIndex ? endIndex : startIndex;
        let cellIndexes;
        this.currentIndex = startIndex.rowIndex;
        const cncl = 'cancel';
        const selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
        if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {
            return;
        }
        const args = {
            data: selectedData, cellIndex: startIndex, currentCell: selectedCell,
            isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest,
            previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined
        };
        const previousRowCellIndex = 'previousRowCellIndex';
        args[previousRowCellIndex] = this.prevECIdxs;
        this.parent.trigger(cellSelecting, this.fDataUpdate(args), (cellSelectingArgs) => {
            if (!isNullOrUndefined(cellSelectingArgs) && cellSelectingArgs[cncl] === true) {
                return;
            }
            this.clearCell();
            if (startIndex.rowIndex > endIndex.rowIndex) {
                const temp = startIndex;
                startIndex = endIndex;
                endIndex = temp;
            }
            for (let i = startIndex.rowIndex; i <= endIndex.rowIndex; i++) {
                if (this.selectionSettings.cellSelectionMode.indexOf('Box') < 0) {
                    min = i === startIndex.rowIndex ? (startIndex.cellIndex) : 0;
                    max = i === endIndex.rowIndex ? (endIndex.cellIndex) : this.getLastColIndex(i);
                }
                else {
                    min = startIndex.cellIndex;
                    max = endIndex.cellIndex;
                }
                cellIndexes = [];
                for (let j = min < max ? min : max, len = min > max ? min : max; j <= len; j++) {
                    if (frzCols) {
                        if (j < frzCols) {
                            selectedCell = gObj.getCellFromIndex(i, j);
                        }
                        else {
                            selectedCell = gObj.getMovableCellFromIndex(i, j);
                        }
                    }
                    else {
                        selectedCell = gObj.getCellFromIndex(i, j);
                    }
                    if (!selectedCell) {
                        continue;
                    }
                    cellIndexes.push(j);
                    this.updateCellSelection(selectedCell);
                    this.addAttribute(selectedCell);
                }
                this.selectedRowCellIndexes.push({ rowIndex: i, cellIndexes: cellIndexes });
            }
            const cellSelectedArgs = {
                data: selectedData, cellIndex: edIndex, currentCell: gObj.getCellFromIndex(edIndex.rowIndex, edIndex.cellIndex),
                selectedRowCellIndex: this.selectedRowCellIndexes,
                previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined
            };
            const previousRowCellIndex = 'previousRowCellIndex';
            cellSelectedArgs[previousRowCellIndex] = this.prevECIdxs;
            if (!this.isDragged) {
                this.onActionComplete(cellSelectedArgs, cellSelected);
                this.cellselected = true;
            }
            this.updateCellProps(stIndex, edIndex);
        });
    }
    /**
     * Selects a collection of cells by row and column indexes.
     *
     * @param  {ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.
     * @returns {void}
     */
    selectCells(rowCellIndexes) {
        if (!this.isCellType()) {
            return;
        }
        const gObj = this.parent;
        let selectedCell = this.getSelectedMovableCell(rowCellIndexes[0]);
        const frzCols = gObj.getFrozenColumns();
        if (!selectedCell) {
            selectedCell = gObj.getCellFromIndex(rowCellIndexes[0].rowIndex, rowCellIndexes[0].cellIndexes[0]);
        }
        this.currentIndex = rowCellIndexes[0].rowIndex;
        const selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
        if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {
            return;
        }
        const cellSelectArgs = {
            data: selectedData, cellIndex: rowCellIndexes[0].cellIndexes[0],
            currentCell: selectedCell, isCtrlPressed: this.isMultiCtrlRequest,
            isShiftPressed: this.isMultiShiftRequest,
            previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined
        };
        const previousRowCellIndex = 'previousRowCellIndex';
        cellSelectArgs[previousRowCellIndex] = this.prevECIdxs;
        this.onActionBegin(cellSelectArgs, cellSelecting);
        for (let i = 0, len = rowCellIndexes.length; i < len; i++) {
            for (let j = 0, cellLen = rowCellIndexes[i].cellIndexes.length; j < cellLen; j++) {
                if (frzCols) {
                    if (rowCellIndexes[i].cellIndexes[j] < frzCols) {
                        selectedCell = gObj.getCellFromIndex(rowCellIndexes[i].rowIndex, rowCellIndexes[i].cellIndexes[j]);
                    }
                    else {
                        selectedCell = gObj.getMovableCellFromIndex(rowCellIndexes[i].rowIndex, rowCellIndexes[i].cellIndexes[j]);
                    }
                }
                else {
                    selectedCell = gObj.getCellFromIndex(rowCellIndexes[i].rowIndex, rowCellIndexes[i].cellIndexes[j]);
                }
                if (!selectedCell) {
                    continue;
                }
                this.updateCellSelection(selectedCell);
                this.addAttribute(selectedCell);
                this.addRowCellIndex({ rowIndex: rowCellIndexes[i].rowIndex, cellIndex: rowCellIndexes[i].cellIndexes[j] });
            }
        }
        this.updateCellProps({ rowIndex: rowCellIndexes[0].rowIndex, cellIndex: rowCellIndexes[0].cellIndexes[0] }, { rowIndex: rowCellIndexes[0].rowIndex, cellIndex: rowCellIndexes[0].cellIndexes[0] });
        const cellSelectedArgs = {
            data: selectedData, cellIndex: rowCellIndexes[0].cellIndexes[0],
            currentCell: selectedCell, selectedRowCellIndex: this.selectedRowCellIndexes,
            previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined
        };
        const prvRowCellIndex = 'previousRowCellIndex';
        cellSelectedArgs[prvRowCellIndex] = this.prevECIdxs;
        this.onActionComplete(cellSelectedArgs, cellSelected);
    }
    /**
     * Select cells with existing cell selection by passing row and column index.
     *
     * @param {IIndex} cellIndexes - Defines the collection of row and column index.
     * @returns {void}
     * @hidden
     */
    addCellsToSelection(cellIndexes) {
        if (!this.isCellType()) {
            return;
        }
        const gObj = this.parent;
        let selectedCell;
        let index;
        this.currentIndex = cellIndexes[0].rowIndex;
        const cncl = 'cancel';
        const selectedData = this.getCurrentBatchRecordChanges()[this.currentIndex];
        const left = gObj.getFrozenLeftCount();
        const movable = gObj.getMovableColumnsCount();
        if (this.isSingleSel() || !this.isCellType() || this.isEditing()) {
            return;
        }
        this.hideAutoFill();
        const col = gObj.getColumnByIndex(cellIndexes[0].cellIndex);
        let rowObj;
        gridActionHandler(this.parent, (tableName, rows) => {
            rowObj = rows[cellIndexes[0].rowIndex];
        }, [
            !col.getFreezeTableName() || col.getFreezeTableName() === frozenLeft ? gObj.getRowsObject() : [],
            col.getFreezeTableName() === 'movable' ? gObj.getMovableRowsObject() : [],
            col.getFreezeTableName() === frozenRight ? gObj.getFrozenRightRowsObject() : []
        ]);
        if (gObj.groupSettings.columns.length > 0) {
            rowObj = gObj.getRowObjectFromUID(this.target.parentElement.getAttribute('data-uid'));
        }
        const foreignKeyData$$1 = [];
        for (const cellIndex of cellIndexes) {
            for (let i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) {
                if (this.selectedRowCellIndexes[i].rowIndex === cellIndex.rowIndex) {
                    index = i;
                    break;
                }
            }
            selectedCell = this.getSelectedMovableCell(cellIndex);
            if (!selectedCell) {
                selectedCell = gObj.getCellFromIndex(cellIndex.rowIndex, this.getColIndex(cellIndex.rowIndex, cellIndex.cellIndex));
            }
            const idx = col.getFreezeTableName() === 'movable' ? cellIndex.cellIndex - left
                : col.getFreezeTableName() === frozenRight ? cellIndex.cellIndex - (left + movable) : cellIndex.cellIndex;
            if (gObj.groupSettings.columns.length > 0) {
                foreignKeyData$$1.push(rowObj.cells[idx + gObj.groupSettings.columns.length].foreignKeyData);
            }
            else {
                foreignKeyData$$1.push(rowObj.cells[idx].foreignKeyData);
            }
            const args = {
                cancel: false, data: selectedData, cellIndex: cellIndexes[0],
                isShiftPressed: this.isMultiShiftRequest,
                currentCell: selectedCell, isCtrlPressed: this.isMultiCtrlRequest,
                previousRowCell: this.prevECIdxs ?
                    gObj.getCellFromIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) : undefined
            };
            const prvRowCellIndex = 'previousRowCellIndex';
            args[prvRowCellIndex] = this.prevECIdxs;
            let isUnSelected = index > -1;
            if (isUnSelected) {
                const selectedCellIdx = this.selectedRowCellIndexes[index].cellIndexes;
                if (selectedCellIdx.indexOf(cellIndex.cellIndex) > -1) {
                    this.cellDeselect(cellDeselecting, [{ rowIndex: cellIndex.rowIndex, cellIndexes: [cellIndex.cellIndex] }], selectedData, [selectedCell], foreignKeyData$$1);
                    selectedCellIdx.splice(selectedCellIdx.indexOf(cellIndex.cellIndex), 1);
                    if (selectedCellIdx.length === 0) {
                        this.selectedRowCellIndexes.splice(index, 1);
                    }
                    selectedCell.classList.remove('e-cellselectionbackground');
                    selectedCell.removeAttribute('aria-selected');
                    this.cellDeselect(cellDeselected, [{ rowIndex: cellIndex.rowIndex, cellIndexes: [cellIndex.cellIndex] }], selectedData, [selectedCell], foreignKeyData$$1);
                }
                else {
                    isUnSelected = false;
                    this.onActionBegin(args, cellSelecting);
                    this.addRowCellIndex({ rowIndex: cellIndex.rowIndex, cellIndex: cellIndex.cellIndex });
                    this.updateCellSelection(selectedCell);
                    this.addAttribute(selectedCell);
                }
            }
            else {
                this.onActionBegin(args, cellSelecting);
                if (!isNullOrUndefined(args) && args[cncl] === true) {
                    return;
                }
                this.updateCellSelection(selectedCell, cellIndex.rowIndex, cellIndex.cellIndex);
            }
            if (!isUnSelected) {
                const cellSelectedArgs = {
                    data: selectedData, cellIndex: cellIndexes[0], currentCell: selectedCell,
                    previousRowCell: this.prevECIdxs ? this.getCellIndex(this.prevECIdxs.rowIndex, this.prevECIdxs.cellIndex) :
                        undefined, selectedRowCellIndex: this.selectedRowCellIndexes
                };
                cellSelectedArgs[prvRowCellIndex] = this.prevECIdxs;
                this.onActionComplete(cellSelectedArgs, cellSelected);
                this.cellselected = true;
            }
            this.updateCellProps(cellIndex, cellIndex);
        }
    }
    getColIndex(rowIndex, index) {
        const frzCols = this.parent.isFrozenGrid();
        const col = this.parent.getColumnByIndex(index);
        const cells = getCellsByTableName(this.parent, col, rowIndex);
        if (cells) {
            for (let m = 0; m < cells.length; m++) {
                const colIndex = parseInt(cells[m].getAttribute(ariaColIndex), 10);
                if (colIndex === index) {
                    if (frzCols) {
                        if (col.getFreezeTableName() === 'movable') {
                            m += this.parent.getFrozenLeftCount();
                        }
                        else if (col.getFreezeTableName() === frozenRight) {
                            m += (this.parent.getFrozenLeftColumnsCount() + this.parent.getMovableColumnsCount());
                        }
                    }
                    return m;
                }
            }
        }
        return -1;
    }
    getLastColIndex(rowIndex) {
        const cells = this.parent.getFrozenColumns() ? this.parent.getMovableDataRows()[rowIndex].querySelectorAll('td.e-rowcell')
            : this.parent.getDataRows()[rowIndex].querySelectorAll('td.e-rowcell');
        return parseInt(cells[cells.length - 1].getAttribute(ariaColIndex), 10);
    }
    clearCell() {
        this.clearCellSelection();
    }
    cellDeselect(type, cellIndexes, data, cells, foreignKeyData$$1) {
        const cancl = 'cancel';
        if (cells[0] && cells[0].classList.contains(gridChkBox)) {
            this.updateCheckBoxes(closest(cells[0], 'tr'));
        }
        const args = {
            cells: cells, data: data, cellIndexes: cellIndexes, foreignKeyData: foreignKeyData$$1, cancel: false
        };
        this.parent.trigger(type, args);
        this.isPreventCellSelect = args[cancl];
    }
    updateCellSelection(selectedCell, rowIndex, cellIndex) {
        if (!isNullOrUndefined(rowIndex)) {
            this.addRowCellIndex({ rowIndex: rowIndex, cellIndex: cellIndex });
        }
        selectedCell.classList.add('e-cellselectionbackground');
        if (selectedCell.classList.contains(gridChkBox)) {
            this.updateCheckBoxes(closest(selectedCell, 'tr'), true);
        }
        this.addAttribute(selectedCell);
    }
    addAttribute(cell) {
        this.target = cell;
        if (!isNullOrUndefined(cell)) {
            cell.setAttribute('aria-selected', 'true');
            if (!this.preventFocus) {
                this.focus.onClick({ target: cell }, true);
            }
        }
    }
    updateCellProps(startIndex, endIndex) {
        this.prevCIdxs = startIndex;
        this.prevECIdxs = endIndex;
        this.isCellSelected = this.selectedRowCellIndexes.length && true;
    }
    addRowCellIndex(rowCellIndex) {
        let isRowAvail;
        let index;
        for (let i = 0, len = this.selectedRowCellIndexes.length; i < len; i++) {
            if (this.selectedRowCellIndexes[i].rowIndex === rowCellIndex.rowIndex) {
                isRowAvail = true;
                index = i;
                break;
            }
        }
        if (isRowAvail) {
            if (this.selectedRowCellIndexes[index].cellIndexes.indexOf(rowCellIndex.cellIndex) < 0) {
                this.selectedRowCellIndexes[index].cellIndexes.push(rowCellIndex.cellIndex);
            }
        }
        else {
            this.selectedRowCellIndexes.push({ rowIndex: rowCellIndex.rowIndex, cellIndexes: [rowCellIndex.cellIndex] });
        }
    }
    /**
     * Deselects the currently selected cells.
     *
     * @returns {void}
     */
    clearCellSelection() {
        if (this.isCellSelected) {
            const gObj = this.parent;
            const selectedCells = this.getSelectedCellsElement();
            const rowCell$$1 = this.selectedRowCellIndexes;
            const data = [];
            const cells = [];
            const foreignKeyData$$1 = [];
            const currentViewData = this.getCurrentBatchRecordChanges();
            const frzCols = gObj.isFrozenGrid();
            this.hideAutoFill();
            for (let i = 0, len = rowCell$$1.length; i < len; i++) {
                data.push(currentViewData[rowCell$$1[i].rowIndex]);
                const rowObj = this.getRowObj(rowCell$$1[i].rowIndex);
                for (let j = 0, cLen = rowCell$$1[i].cellIndexes.length; j < cLen; j++) {
                    if (frzCols) {
                        const col = gObj.getColumnByIndex(rowCell$$1[i].cellIndexes[j]);
                        cells.push(getCellByColAndRowIndex(this.parent, col, rowCell$$1[i].rowIndex, rowCell$$1[i].cellIndexes[j]));
                    }
                    else {
                        if (rowObj.cells) {
                            foreignKeyData$$1.push(rowObj.cells[rowCell$$1[i].cellIndexes[j]].foreignKeyData);
                        }
                        cells.push(gObj.getCellFromIndex(rowCell$$1[i].rowIndex, rowCell$$1[i].cellIndexes[j]));
                    }
                }
            }
            this.cellDeselect(cellDeselecting, rowCell$$1, data, cells, foreignKeyData$$1);
            if (this.isPreventCellSelect === true) {
                return;
            }
            for (let i = 0, len = selectedCells.length; i < len; i++) {
                selectedCells[i].classList.remove('e-cellselectionbackground');
                selectedCells[i].removeAttribute('aria-selected');
            }
            if (this.bdrElement) {
                this.showHideBorders('none');
            }
            this.selectedRowCellIndexes = [];
            this.isCellSelected = false;
            if (!this.isDragged && this.cellselected) {
                this.cellDeselect(cellDeselected, rowCell$$1, data, cells, foreignKeyData$$1);
            }
        }
    }
    getSelectedCellsElement() {
        const gObj = this.parent;
        let rows = gObj.getDataRows();
        let mRows;
        if (gObj.isFrozenGrid()) {
            mRows = gObj.getMovableDataRows();
            rows = gObj.addMovableRows(rows, mRows);
            if (gObj.getFrozenMode() === leftRight) {
                rows = gObj.addMovableRows(rows, gObj.getFrozenRightDataRows());
            }
        }
        let cells = [];
        for (let i = 0, len = rows.length; i < len; i++) {
            cells = cells.concat([].slice.call(rows[i].getElementsByClassName('e-cellselectionbackground')));
        }
        return cells;
    }
    mouseMoveHandler(e) {
        e.preventDefault();
        const gBRect = this.parent.element.getBoundingClientRect();
        let x1 = this.x;
        let y1 = this.y;
        const position = getPosition(e);
        let x2 = position.x - gBRect.left;
        let y2 = position.y - gBRect.top;
        let tmp;
        let target = closest(e.target, 'tr');
        this.isDragged = true;
        if (!this.isCellDrag) {
            if (!target) {
                target = closest(document.elementFromPoint(this.parent.element.offsetLeft + 2, e.clientY), 'tr');
            }
            if (x1 > x2) {
                tmp = x2;
                x2 = x1;
                x1 = tmp;
            }
            if (y1 > y2) {
                tmp = y2;
                y2 = y1;
                y1 = tmp;
            }
            this.element.style.left = x1 + 'px';
            this.element.style.top = y1 + 'px';
            this.element.style.width = x2 - x1 + 'px';
            this.element.style.height = y2 - y1 + 'px';
        }
        if (target && !e.ctrlKey && !e.shiftKey) {
            const rowIndex = parseInt(target.getAttribute(ariaRowIndex), 10);
            if (!this.isCellDrag) {
                this.hideAutoFill();
                this.selectRowsByRange(this.startDIndex, rowIndex);
                this.isRowDragSelected = true;
            }
            else {
                const td = parentsUntil(e.target, rowCell);
                if (td) {
                    this.startAFCell = this.startCell;
                    this.endAFCell = parentsUntil(e.target, rowCell);
                    this.selectLikeExcel(e, rowIndex, parseInt(td.getAttribute(ariaColIndex), 10));
                }
            }
        }
    }
    selectLikeExcel(e, rowIndex, cellIndex) {
        if (!this.isAutoFillSel) {
            this.clearCellSelection();
            this.selectCellsByRange({ rowIndex: this.startDIndex, cellIndex: this.startDCellIndex }, { rowIndex: rowIndex, cellIndex: cellIndex });
            this.drawBorders();
        }
        else { //Autofill
            this.showAFBorders();
            this.selectLikeAutoFill(e);
        }
    }
    drawBorders() {
        if (this.selectionSettings.cellSelectionMode === 'BoxWithBorder' && this.selectedRowCellIndexes.length && !this.parent.isEdit) {
            this.parent.element.classList.add('e-enabledboxbdr');
            if (!this.bdrElement) {
                this.createBorders();
            }
            this.positionBorders();
        }
        else {
            this.showHideBorders('none');
        }
    }
    isLastCell(cell) {
        const cells = [].slice.call(cell.parentElement.querySelectorAll('.e-rowcell:not(.e-hide)'));
        return cells[cells.length - 1] === cell;
    }
    isLastRow(cell) {
        const rows = [].slice.call(closest(cell, tbody).querySelectorAll('.e-row:not(.e-hiddenrow)'));
        return cell.parentElement === rows[rows.length - 1];
    }
    isFirstRow(cell) {
        const rows = [].slice.call(closest(cell, tbody).querySelectorAll('.e-row:not(.e-hiddenrow)'));
        return cell.parentElement === rows[0];
    }
    isFirstCell(cell) {
        const cells = [].slice.call(cell.parentElement.querySelectorAll('.e-rowcell:not(.e-hide)'));
        return cells[0] === cell;
    }
    setBorders(parentEle, border, bdrStr) {
        const cells = [].slice.call(parentEle.getElementsByClassName('e-cellselectionbackground')).
            filter((ele) => ele.style.display === '');
        if (cells.length) {
            const isFrozen = this.parent.isFrozenGrid();
            const start = cells[0];
            const end = cells[cells.length - 1];
            const stOff = start.getBoundingClientRect();
            const endOff = end.getBoundingClientRect();
            const parentOff = start.offsetParent.getBoundingClientRect();
            const rowHeight = this.isLastRow(end) && (bdrStr === '1' || bdrStr === '2' || bdrStr === '5') ? 2 : 0;
            const topOffSet = this.parent.frozenRows && (bdrStr === '1' || bdrStr === '2') &&
                this.isFirstRow(start) ? 1.5 : 0;
            const leftOffset = isFrozen && (bdrStr === '2' || bdrStr === '4') && this.isFirstCell(start) ? 1 : 0;
            const rightOffset = ((this.parent.getFrozenMode() === 'Right' && (bdrStr === '1' || bdrStr === '3'))
                || (this.parent.getFrozenMode() === leftRight && (bdrStr === '5' || bdrStr === '6')))
                && this.isFirstCell(start) ? 1 : 0;
            if (this.parent.enableRtl) {
                border.style.right = parentOff.right - stOff.right - leftOffset + 'px';
                border.style.width = stOff.right - endOff.left + leftOffset + 1 + 'px';
            }
            else {
                border.style.left = stOff.left - parentOff.left - leftOffset - rightOffset + 'px';
                border.style.width = endOff.right - stOff.left + leftOffset - rightOffset + 1 + 'px';
            }
            border.style.top = stOff.top - parentOff.top - topOffSet + 'px';
            border.style.height = endOff.top - stOff.top > 0 ?
                (endOff.top - parentOff.top + endOff.height + 1) - (stOff.top - parentOff.top) - rowHeight + topOffSet + 'px' :
                endOff.height + topOffSet - rowHeight + 1 + 'px';
            this.selectDirection += bdrStr;
        }
        else {
            border.style.display = 'none';
        }
    }
    positionBorders() {
        this.updateStartEndCells();
        if (!this.startCell || !this.bdrElement || !this.selectedRowCellIndexes.length) {
            return;
        }
        this.selectDirection = '';
        this.showHideBorders('');
        this.setBorders(this.parent.getContentTable(), this.bdrElement, '1');
        if (this.parent.isFrozenGrid()) {
            this.setBorders(this.parent.contentModule.getMovableContent(), this.mcBdrElement, '2');
            if (this.parent.getFrozenMode() === leftRight) {
                this.setBorders(this.parent.contentModule.getFrozenRightContent(), this.frcBdrElement, '5');
            }
        }
        if (this.parent.frozenRows) {
            this.setBorders(this.parent.getHeaderTable(), this.fhBdrElement, '3');
            if (this.parent.isFrozenGrid()) {
                this.setBorders(this.parent.headerModule.getMovableHeader(), this.mhBdrElement, '4');
                if (this.parent.getFrozenMode() === leftRight) {
                    this.setBorders(this.parent.headerModule.getFrozenRightHeader(), this.frhBdrElement, '6');
                }
            }
        }
        this.applyBorders(this.selectDirection);
    }
    /* eslint-enable */
    applyBothFrozenBorders(str) {
        const rtl = this.parent.enableRtl;
        switch (str.length) {
            case 6:
                {
                    this.bdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
                    this.mcBdrElement.style.borderWidth = this.bottom;
                    this.fhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
                    this.mhBdrElement.style.borderWidth = this.top;
                    this.frcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
                    this.frhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
                }
                break;
            case 4:
                {
                    if (str.includes('1') && str.includes('2') && str.includes('3') && str.includes('4')) {
                        this.fhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
                        this.mhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
                        this.bdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
                        this.mcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
                    }
                    if (str.includes('2') && str.includes('4') && str.includes('5') && str.includes('6')) {
                        this.mcBdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
                        this.mhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
                        this.frcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
                        this.frhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
                    }
                }
                break;
            case 3:
                {
                    this.bdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
                    this.mcBdrElement.style.borderWidth = this.top_bottom;
                    this.frcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
                    if (this.parent.frozenRows) {
                        this.fhBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
                        this.mhBdrElement.style.borderWidth = this.top_bottom;
                        this.frcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
                    }
                }
                break;
            case 2:
                {
                    if (str.includes('1')) {
                        this.mcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
                        if (this.parent.frozenRows) {
                            this.fhBdrElement.style.borderWidth = this.top_right_left;
                        }
                    }
                    if (str.includes('2')) {
                        this.bdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
                        this.frcBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
                        if (this.parent.frozenRows) {
                            this.mhBdrElement.style.borderWidth = this.top_right_left;
                        }
                    }
                    if (str.includes('3')) {
                        this.mhBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
                        this.bdrElement.style.borderWidth = this.right_bottom_left;
                    }
                    if (str.includes('4')) {
                        this.fhBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
                        this.frhBdrElement.style.borderWidth = rtl ? this.top_bottom_left : this.top_right_bottom;
                        this.mcBdrElement.style.borderWidth = this.right_bottom_left;
                    }
                    if (str.includes('5')) {
                        this.mcBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
                        if (this.parent.frozenRows) {
                            this.frhBdrElement.style.borderWidth = this.top_right_left;
                        }
                    }
                    if (str.includes('6')) {
                        this.mhBdrElement.style.borderWidth = rtl ? this.top_right_bottom : this.top_bottom_left;
                        this.frcBdrElement.style.borderWidth = this.right_bottom_left;
                    }
                }
                break;
            default:
                this.bdrElement.style.borderWidth = this.all_border;
                this.mcBdrElement.style.borderWidth = this.all_border;
                this.frcBdrElement.style.borderWidth = this.all_border;
                if (this.parent.frozenRows) {
                    this.fhBdrElement.style.borderWidth = this.all_border;
                    this.mhBdrElement.style.borderWidth = this.all_border;
                    this.frhBdrElement.style.borderWidth = this.all_border;
                }
                break;
        }
    }
    applyBorders(str) {
        const rtl = this.parent.enableRtl;
        if (this.parent.getFrozenMode() === leftRight) {
            this.applyBothFrozenBorders(str);
        }
        else {
            switch (str.length) {
                case 4:
                    {
                        if (this.parent.getFrozenMode() === 'Right') {
                            this.bdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
                            this.mcBdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
                            this.fhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
                            this.mhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
                        }
                        else {
                            this.bdrElement.style.borderWidth = rtl ? this.right_bottom : this.bottom_left;
                            this.mcBdrElement.style.borderWidth = rtl ? this.bottom_left : this.right_bottom;
                            this.fhBdrElement.style.borderWidth = rtl ? this.top_right : this.top_left;
                            this.mhBdrElement.style.borderWidth = rtl ? this.top_left : this.top_right;
                        }
                    }
                    break;
                case 2:
                    {
                        if (this.parent.getFrozenMode() === 'Right') {
                            this.bdrElement.style.borderWidth = str.includes('2') ? rtl ? this.top_bottom_left
                                : this.top_right_bottom : this.right_bottom_left;
                            this.mcBdrElement.style.borderWidth = str.includes('1') ? rtl ? this.top_right_bottom
                                : this.top_bottom_left : this.right_bottom_left;
                            if (this.parent.frozenRows) {
                                this.fhBdrElement.style.borderWidth = str.includes('1') ? this.top_right_left
                                    : rtl ? this.top_bottom_left : this.top_right_bottom;
                                this.mhBdrElement.style.borderWidth = str.includes('2') ? this.top_right_left
                                    : rtl ? this.top_right_bottom : this.top_bottom_left;
                            }
                        }
                        else {
                            this.bdrElement.style.borderWidth = str.includes('2') ? rtl ? this.top_right_bottom
                                : this.top_bottom_left : this.right_bottom_left;
                            if (this.parent.isFrozenGrid()) {
                                this.mcBdrElement.style.borderWidth = str.includes('1') ? rtl ? this.top_bottom_left
                                    : this.top_right_bottom : this.right_bottom_left;
                            }
                            if (this.parent.frozenRows) {
                                this.fhBdrElement.style.borderWidth = str.includes('1') ? this.top_right_left
                                    : rtl ? this.top_right_bottom : this.top_bottom_left;
                                if (this.parent.isFrozenGrid()) {
                                    this.mhBdrElement.style.borderWidth = str.includes('2') ? this.top_right_left
                                        : rtl ? this.top_bottom_left : this.top_right_bottom;
                                }
                            }
                        }
                    }
                    break;
                default:
                    this.bdrElement.style.borderWidth = this.all_border;
                    if (this.parent.isFrozenGrid()) {
                        this.mcBdrElement.style.borderWidth = this.all_border;
                    }
                    if (this.parent.frozenRows) {
                        this.fhBdrElement.style.borderWidth = this.all_border;
                        if (this.parent.isFrozenGrid()) {
                            this.mhBdrElement.style.borderWidth = this.all_border;
                        }
                    }
                    break;
            }
        }
    }
    createBorders() {
        if (!this.bdrElement) {
            this.bdrElement = this.parent.getContentTable().parentElement.appendChild(createElement('div', {
                className: 'e-xlsel', id: this.parent.element.id + '_bdr',
                styles: 'width: 2px; border-width: 0;'
            }));
            if (this.parent.isFrozenGrid()) {
                this.mcBdrElement = this.parent.contentModule.getMovableContent().appendChild(createElement('div', {
                    className: 'e-xlsel', id: this.parent.element.id + '_mcbdr',
                    styles: 'height: 2px; border-width: 0;'
                }));
                if (this.parent.getFrozenMode() === leftRight) {
                    this.frcBdrElement = this.parent.contentModule.getFrozenRightContent().appendChild(createElement('div', {
                        className: 'e-xlsel', id: this.parent.element.id + '_frcbdr',
                        styles: 'height: 2px; border-width: 0;'
                    }));
                }
            }
            if (this.parent.frozenRows) {
                this.fhBdrElement = this.parent.getHeaderTable().parentElement.appendChild(createElement('div', { className: 'e-xlsel', id: this.parent.element.id + '_fhbdr', styles: 'height: 2px;' }));
            }
            if (this.parent.frozenRows && this.parent.isFrozenGrid()) {
                this.mhBdrElement = this.parent.headerModule.getMovableHeader().appendChild(createElement('div', { className: 'e-xlsel', id: this.parent.element.id + '_mhbdr', styles: 'height: 2px;' }));
                if (this.parent.getFrozenMode() === leftRight) {
                    this.frhBdrElement = this.parent.headerModule.getFrozenRightHeader().appendChild(createElement('div', { className: 'e-xlsel', id: this.parent.element.id + '_frhbdr', styles: 'height: 2px;' }));
                }
            }
        }
    }
    showHideBorders(display) {
        if (this.bdrElement) {
            this.bdrElement.style.display = display;
            if (this.parent.isFrozenGrid()) {
                this.mcBdrElement.style.display = display;
                if (this.parent.getFrozenMode() === leftRight) {
                    this.frcBdrElement.style.display = display;
                }
            }
            if (this.parent.frozenRows) {
                this.fhBdrElement.style.display = display;
            }
            if (this.parent.frozenRows && this.parent.isFrozenGrid()) {
                this.mhBdrElement.style.display = display;
                if (this.parent.getFrozenMode() === leftRight) {
                    this.frhBdrElement.style.display = display;
                }
            }
        }
    }
    drawAFBorders() {
        if (!this.bdrAFBottom) {
            this.createAFBorders();
        }
        this.positionAFBorders();
    }
    positionAFBorders() {
        if (!this.startCell || !this.bdrAFLeft) {
            return;
        }
        const stOff = this.startAFCell.getBoundingClientRect();
        const endOff = this.endAFCell.getBoundingClientRect();
        const top = endOff.top - stOff.top > 0 ? 1 : 0;
        const firstCellTop = endOff.top - stOff.top >= 0 && (parentsUntil(this.startAFCell, movableContent) ||
            parentsUntil(this.startAFCell, 'e-frozencontent')) && this.isFirstRow(this.startAFCell) ? 1.5 : 0;
        const firstCellLeft = (parentsUntil(this.startAFCell, movableContent) ||
            parentsUntil(this.startAFCell, movableHeader)) && this.isFirstCell(this.startAFCell) ? 1 : 0;
        const rowHeight = this.isLastRow(this.endAFCell) && (parentsUntil(this.endAFCell, movableContent) ||
            parentsUntil(this.endAFCell, 'e-frozencontent')) ? 2 : 0;
        const parentOff = this.startAFCell.offsetParent.getBoundingClientRect();
        const parentRect = this.parent.element.getBoundingClientRect();
        const sTop = this.startAFCell.offsetParent.parentElement.scrollTop;
        const sLeft = this.startAFCell.offsetParent.parentElement.scrollLeft;
        let scrollTop = sTop - this.startAFCell.offsetTop;
        let scrollLeft = sLeft - this.startAFCell.offsetLeft;
        const totalHeight = this.parent.element.clientHeight;
        const totalWidth = this.parent.element.clientWidth;
        scrollTop = scrollTop > 0 ? Math.floor(scrollTop) - 1 : 0;
        scrollLeft = scrollLeft > 0 ? scrollLeft : 0;
        const left = stOff.left - parentRect.left;
        if (!this.parent.enableRtl) {
            this.bdrAFLeft.style.left = left - firstCellLeft + scrollLeft - 1 + 'px';
            this.bdrAFRight.style.left = endOff.left - parentRect.left - 2 + endOff.width + 'px';
            this.bdrAFRight.style.width = totalWidth <= parseInt(this.bdrAFRight.style.left, 10) ? '0px' : '2px';
            this.bdrAFTop.style.left = left + scrollLeft - 0.5 + 'px';
            this.bdrAFTop.style.width = parseInt(this.bdrAFRight.style.left, 10) - parseInt(this.bdrAFLeft.style.left, 10)
                - firstCellLeft + 1 + 'px';
            if (totalWidth <= (parseInt(this.bdrAFTop.style.width, 10) + parseInt(this.bdrAFTop.style.left, 10))) {
                const leftRemove = (parseInt(this.bdrAFTop.style.width, 10) + parseInt(this.bdrAFTop.style.left, 10)) - totalWidth;
                this.bdrAFTop.style.width = parseInt(this.bdrAFTop.style.width, 10) - leftRemove + 'px';
            }
        }
        else {
            const scrolloffSet = (parentsUntil(this.startAFCell, movableContent) ||
                parentsUntil(this.startAFCell, movableHeader)) ? stOff.right -
                this.startAFCell.offsetParent.parentElement.getBoundingClientRect().width -
                parentRect.left : 0;
            this.bdrAFLeft.style.right = parentRect.right - endOff.right - 2 + endOff.width + 'px';
            this.bdrAFLeft.style.width = totalWidth <= parseInt(this.bdrAFLeft.style.right, 10) ? '0px' : '2px';
            this.bdrAFRight.style.right = parentRect.right - stOff.right - firstCellLeft + scrolloffSet - 1 + 'px';
            this.bdrAFTop.style.left = endOff.left - parentRect.left - 0.5 + 'px';
            this.bdrAFTop.style.width = parseInt(this.bdrAFLeft.style.right, 10) - parseInt(this.bdrAFRight.style.right, 10)
                - firstCellLeft + 1 + 'px';
            if (parseInt(this.bdrAFTop.style.left, 10) < 0) {
                this.bdrAFTop.style.width = parseInt(this.bdrAFTop.style.width, 10) + parseInt(this.bdrAFTop.style.left, 10) + 'px';
                this.bdrAFTop.style.left = '0px';
            }
        }
        this.bdrAFLeft.style.top = stOff.top - parentRect.top - firstCellTop + scrollTop + 'px';
        this.bdrAFLeft.style.height = endOff.top - stOff.top > 0 ?
            (endOff.top - parentOff.top + endOff.height + 1) - (stOff.top - parentOff.top) + firstCellTop - rowHeight - scrollTop + 'px' :
            endOff.height + firstCellTop - rowHeight - scrollTop + 'px';
        this.bdrAFRight.style.top = this.bdrAFLeft.style.top;
        this.bdrAFRight.style.height = parseInt(this.bdrAFLeft.style.height, 10) + 'px';
        this.bdrAFTop.style.top = this.bdrAFRight.style.top;
        this.bdrAFBottom.style.left = this.bdrAFTop.style.left;
        this.bdrAFBottom.style.top = parseFloat(this.bdrAFLeft.style.top) + parseFloat(this.bdrAFLeft.style.height) - top - 1 + 'px';
        this.bdrAFBottom.style.width = totalHeight <= parseFloat(this.bdrAFBottom.style.top) ? '0px' : this.bdrAFTop.style.width;
        if (totalHeight <= (parseInt(this.bdrAFLeft.style.height, 10) + parseInt(this.bdrAFLeft.style.top, 10))) {
            const topRemove = parseInt(this.bdrAFLeft.style.height, 10) + parseInt(this.bdrAFLeft.style.top, 10) - totalHeight;
            this.bdrAFLeft.style.height = parseInt(this.bdrAFLeft.style.height, 10) - topRemove + 'px';
            this.bdrAFRight.style.height = parseInt(this.bdrAFLeft.style.height, 10) + 'px';
        }
    }
    createAFBorders() {
        if (!this.bdrAFLeft) {
            this.bdrAFLeft = this.parent.element.appendChild(createElement('div', { className: 'e-xlselaf', id: this.parent.element.id + '_bdrafleft', styles: 'width: 2px;' }));
            this.bdrAFRight = this.parent.element.appendChild(createElement('div', { className: 'e-xlselaf', id: this.parent.element.id + '_bdrafright', styles: 'width: 2px;' }));
            this.bdrAFBottom = this.parent.element.appendChild(createElement('div', { className: 'e-xlselaf', id: this.parent.element.id + '_bdrafbottom', styles: 'height: 2px;' }));
            this.bdrAFTop = this.parent.element.appendChild(createElement('div', { className: 'e-xlselaf', id: this.parent.element.id + '_bdraftop', styles: 'height: 2px;' }));
        }
    }
    showAFBorders() {
        if (this.bdrAFLeft) {
            this.bdrAFLeft.style.display = '';
            this.bdrAFRight.style.display = '';
            this.bdrAFBottom.style.display = '';
            this.bdrAFTop.style.display = '';
        }
    }
    hideAFBorders() {
        if (this.bdrAFLeft) {
            this.bdrAFLeft.style.display = 'none';
            this.bdrAFRight.style.display = 'none';
            this.bdrAFBottom.style.display = 'none';
            this.bdrAFTop.style.display = 'none';
        }
    }
    updateValue(rIdx, cIdx, cell) {
        const args = this.createBeforeAutoFill(rIdx, cIdx, cell);
        if (!args.cancel) {
            const col = this.parent.getColumnByIndex(cIdx);
            if (this.parent.editModule && cell) {
                if (col.type === 'number') {
                    this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.value));
                }
                else {
                    this.parent.editModule.updateCell(rIdx, col.field, args.value);
                }
            }
        }
    }
    createBeforeAutoFill(rowIndex, colIndex, cell) {
        const col = this.parent.getColumnByIndex(colIndex);
        const args = {
            column: col,
            value: cell.innerText
        };
        this.parent.trigger(beforeAutoFill, args);
        return args;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getAutoFillCells(rowIndex, startCellIdx) {
        const cls = '.e-cellselectionbackground';
        let cells = [].slice.call(this.parent.getDataRows()[rowIndex].querySelectorAll(cls));
        if (this.parent.isFrozenGrid()) {
            cells = cells.concat([].slice.call(this.parent.getMovableDataRows()[rowIndex].querySelectorAll(cls)));
            if (this.parent.getFrozenMode() === leftRight) {
                cells = cells.concat([].slice.call(this.parent.getFrozenRightDataRows()[rowIndex].querySelectorAll(cls)));
            }
        }
        return cells;
    }
    selectLikeAutoFill(e, isApply) {
        const startrowIdx = parseInt(parentsUntil(this.startAFCell, row).getAttribute(ariaRowIndex), 10);
        const startCellIdx = parseInt(this.startAFCell.getAttribute(ariaColIndex), 10);
        let endrowIdx = parseInt(parentsUntil(this.endAFCell, row).getAttribute(ariaRowIndex), 10);
        let endCellIdx = parseInt(this.endAFCell.getAttribute(ariaColIndex), 10);
        const rowLen = this.selectedRowCellIndexes.length - 1;
        const colLen = this.selectedRowCellIndexes[0].cellIndexes.length - 1;
        switch (true) { //direction
            case !isApply && this.endAFCell.classList.contains('e-cellselectionbackground') &&
                !!parentsUntil(e.target, rowCell):
                this.startAFCell = this.parent.getCellFromIndex(startrowIdx, startCellIdx);
                this.endAFCell = this.parent.getCellFromIndex(startrowIdx + rowLen, startCellIdx + colLen);
                this.drawAFBorders();
                break;
            case this.autoFillRLselection && startCellIdx + colLen < endCellIdx && //right
                endCellIdx - startCellIdx - colLen + 1 > endrowIdx - startrowIdx - rowLen // right bottom
                && endCellIdx - startCellIdx - colLen + 1 > startrowIdx - endrowIdx: //right top
                this.endAFCell = this.parent.getCellFromIndex(startrowIdx + rowLen, endCellIdx);
                endrowIdx = parseInt(parentsUntil(this.endAFCell, row).getAttribute(ariaRowIndex), 10);
                endCellIdx = parseInt(this.endAFCell.getAttribute(ariaColIndex), 10);
                if (!isApply) {
                    this.drawAFBorders();
                }
                else {
                    const cellIdx = parseInt(this.endCell.getAttribute(ariaColIndex), 10);
                    for (let i = startrowIdx; i <= endrowIdx; i++) {
                        const cells = this.getAutoFillCells(i, startCellIdx);
                        let c = 0;
                        for (let j = cellIdx + 1; j <= endCellIdx; j++) {
                            if (c > colLen) {
                                c = 0;
                            }
                            this.updateValue(i, j, cells[c]);
                            c++;
                        }
                    }
                    this.selectCellsByRange({ rowIndex: startrowIdx, cellIndex: this.startCellIndex }, { rowIndex: endrowIdx, cellIndex: endCellIdx });
                }
                break;
            case this.autoFillRLselection && startCellIdx > endCellIdx && // left
                startCellIdx - endCellIdx + 1 > endrowIdx - startrowIdx - rowLen && //left top
                startCellIdx - endCellIdx + 1 > startrowIdx - endrowIdx: // left bottom
                this.startAFCell = this.parent.getCellFromIndex(startrowIdx, endCellIdx);
                this.endAFCell = this.endCell;
                if (!isApply) {
                    this.drawAFBorders();
                }
                else {
                    for (let i = startrowIdx; i <= startrowIdx + rowLen; i++) {
                        const cells = this.getAutoFillCells(i, startCellIdx);
                        cells.reverse();
                        let c = 0;
                        for (let j = this.startCellIndex - 1; j >= endCellIdx; j--) {
                            if (c > colLen) {
                                c = 0;
                            }
                            this.updateValue(i, j, cells[c]);
                            c++;
                        }
                    }
                    this.selectCellsByRange({ rowIndex: startrowIdx, cellIndex: endCellIdx }, { rowIndex: startrowIdx + rowLen, cellIndex: this.startCellIndex + colLen });
                }
                break;
            case startrowIdx > endrowIdx: //up
                this.startAFCell = this.parent.getCellFromIndex(endrowIdx, startCellIdx);
                this.endAFCell = this.endCell;
                if (!isApply) {
                    this.drawAFBorders();
                }
                else {
                    const trIdx = parseInt(this.endCell.parentElement.getAttribute(ariaRowIndex), 10);
                    let r = trIdx;
                    for (let i = startrowIdx - 1; i >= endrowIdx; i--) {
                        if (r === this.startIndex - 1) {
                            r = trIdx;
                        }
                        const cells = this.getAutoFillCells(r, startCellIdx);
                        let c = 0;
                        r--;
                        for (let j = this.startCellIndex; j <= this.startCellIndex + colLen; j++) {
                            this.updateValue(i, j, cells[c]);
                            c++;
                        }
                    }
                    this.selectCellsByRange({ rowIndex: endrowIdx, cellIndex: startCellIdx + colLen }, { rowIndex: startrowIdx + rowLen, cellIndex: startCellIdx });
                }
                break;
            default: //down
                this.endAFCell = this.parent.getCellFromIndex(endrowIdx, startCellIdx + colLen);
                if (!isApply) {
                    this.drawAFBorders();
                }
                else {
                    const trIdx = parseInt(this.endCell.parentElement.getAttribute(ariaRowIndex), 10);
                    let r = this.startIndex;
                    for (let i = trIdx + 1; i <= endrowIdx; i++) {
                        if (r === trIdx + 1) {
                            r = this.startIndex;
                        }
                        const cells = this.getAutoFillCells(r, startCellIdx);
                        r++;
                        let c = 0;
                        for (let m = this.startCellIndex; m <= this.startCellIndex + colLen; m++) {
                            this.updateValue(i, m, cells[c]);
                            c++;
                        }
                    }
                    this.selectCellsByRange({ rowIndex: trIdx - rowLen, cellIndex: startCellIdx }, { rowIndex: endrowIdx, cellIndex: startCellIdx + colLen });
                }
                break;
        }
    }
    mouseUpHandler(e) {
        document.body.classList.remove('e-disableuserselect');
        if (this.element) {
            remove(this.element);
        }
        if (this.isDragged && this.selectedRowCellIndexes.length === 1 && this.selectedRowCellIndexes[0].cellIndexes.length === 1) {
            this.mUPTarget = parentsUntil(e.target, rowCell);
        }
        else {
            this.mUPTarget = null;
        }
        if (this.isDragged && !this.isAutoFillSel && this.selectionSettings.mode === 'Cell' &&
            e.target.classList.contains(rowCell)) {
            const target = e.target;
            const rowIndex = parseInt(target.parentElement.getAttribute(ariaRowIndex), 10);
            const cellIndex = parseInt(target.getAttribute(ariaColIndex), 10);
            this.isDragged = false;
            this.clearCellSelection();
            this.selectCellsByRange({ rowIndex: this.startDIndex, cellIndex: this.startDCellIndex }, { rowIndex: rowIndex, cellIndex: cellIndex });
        }
        this.isDragged = false;
        this.updateAutoFillPosition();
        if (this.isAutoFillSel) {
            const lastCell = parentsUntil(e.target, rowCell);
            this.endAFCell = lastCell ? lastCell : this.endCell === this.endAFCell ? this.startAFCell : this.endAFCell;
            this.startAFCell = this.startCell;
            this.updateStartCellsIndex();
            this.selectLikeAutoFill(e, true);
            this.updateAutoFillPosition();
            this.hideAFBorders();
            this.positionBorders();
            this.isAutoFillSel = false;
        }
        EventHandler.remove(this.parent.getContent(), 'mousemove', this.mouseMoveHandler);
        if (this.parent.frozenRows) {
            EventHandler.remove(this.parent.getHeaderContent(), 'mousemove', this.mouseMoveHandler);
        }
        EventHandler.remove(document, 'mouseup', this.mouseUpHandler);
    }
    hideAutoFill() {
        if (this.autofill) {
            this.autofill.style.display = 'none';
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    updateAutoFillPosition() {
        if (this.parent.enableAutoFill && !this.parent.isEdit &&
            this.selectionSettings.cellSelectionMode.indexOf('Box') > -1 && !this.isRowType() && !this.isSingleSel()
            && this.selectedRowCellIndexes.length) {
            const index = parseInt(this.target.getAttribute(ariaColIndex), 10);
            const rindex = parseInt(this.target.getAttribute('index'), 10);
            const rowIndex = this.selectedRowCellIndexes[this.selectedRowCellIndexes.length - 1].rowIndex;
            const cells = this.getAutoFillCells(rowIndex, index).filter((ele) => ele.style.display === '');
            const col = this.parent.getColumnByIndex(index);
            const isFrozenCol = col.getFreezeTableName() === 'movable';
            const isFrozenRow = rindex < this.parent.frozenRows;
            const isFrozenRight = this.parent.getFrozenMode() === leftRight
                && col.getFreezeTableName() === frozenRight;
            if (!select('#' + this.parent.element.id + '_autofill', parentsUntil(this.target, table))) {
                if (select('#' + this.parent.element.id + '_autofill', this.parent.element)) {
                    select('#' + this.parent.element.id + '_autofill', this.parent.element).remove();
                }
                this.autofill = createElement('div', { className: 'e-autofill', id: this.parent.element.id + '_autofill' });
                this.autofill.style.display = 'none';
                if (!isFrozenRow) {
                    if (!isFrozenCol) {
                        this.parent.getContentTable().parentElement.appendChild(this.autofill);
                    }
                    else {
                        this.parent.contentModule.getMovableContent().appendChild(this.autofill);
                    }
                }
                else {
                    if (!isFrozenCol) {
                        this.parent.getHeaderTable().parentElement.appendChild(this.autofill);
                    }
                    else {
                        this.parent.headerModule.getMovableHeader().appendChild(this.autofill);
                    }
                }
                if (isFrozenRight) {
                    if (isFrozenRow) {
                        this.parent.getFrozenRightHeader().appendChild(this.autofill);
                    }
                    else {
                        this.parent.getFrozenRightContent().appendChild(this.autofill);
                    }
                }
            }
            const cell = cells[cells.length - 1];
            if (cell && cell.offsetParent) {
                const clientRect = cell.getBoundingClientRect();
                const parentOff = cell.offsetParent.getBoundingClientRect();
                const colWidth = this.isLastCell(cell) ? 4 : 0;
                const rowHeight = this.isLastRow(cell) ? 3 : 0;
                if (!this.parent.enableRtl) {
                    this.autofill.style.left = clientRect.left - parentOff.left + clientRect.width - 4 - colWidth + 'px';
                }
                else {
                    this.autofill.style.right = parentOff.right - clientRect.right + clientRect.width - 4 - colWidth + 'px';
                }
                this.autofill.style.top = clientRect.top - parentOff.top + clientRect.height - 5 - rowHeight + 'px';
            }
            this.autofill.style.display = '';
        }
        else {
            this.hideAutoFill();
        }
    }
    mouseDownHandler(e) {
        this.mouseButton = e.button;
        const target = e.target;
        const gObj = this.parent;
        let isDrag;
        const gridElement = parentsUntil(target, 'e-grid');
        if (gridElement && gridElement.id !== gObj.element.id || parentsUntil(target, headerContent) && !this.parent.frozenRows ||
            parentsUntil(target, 'e-editedbatchcell') || parentsUntil(target, editedRow)) {
            return;
        }
        if (e.shiftKey || e.ctrlKey) {
            e.preventDefault();
        }
        if (parentsUntil(target, rowCell) && !e.shiftKey && !e.ctrlKey) {
            if (gObj.selectionSettings.cellSelectionMode.indexOf('Box') > -1 && !this.isRowType() && !this.isSingleSel()) {
                this.isCellDrag = true;
                isDrag = true;
            }
            else if (gObj.allowRowDragAndDrop && !gObj.isEdit && !this.parent.selectionSettings.checkboxOnly) {
                this.isRowDragSelected = false;
                if (!this.isRowType() || this.isSingleSel() || closest(target, 'td').classList.contains('e-selectionbackground')) {
                    this.isDragged = false;
                    return;
                }
                isDrag = true;
                this.element = this.parent.createElement('div', { className: 'e-griddragarea' });
                gObj.getContent().appendChild(this.element);
            }
            if (isDrag) {
                this.enableDrag(e, true);
            }
        }
        this.updateStartEndCells();
        if (target.classList.contains('e-autofill') || target.classList.contains('e-xlsel')) {
            this.isCellDrag = true;
            this.isAutoFillSel = true;
            this.enableDrag(e);
        }
    }
    updateStartEndCells() {
        const cells = [].slice.call(this.parent.element.getElementsByClassName('e-cellselectionbackground'));
        this.startCell = cells[0];
        this.endCell = cells[cells.length - 1];
        if (this.startCell) {
            this.startIndex = parseInt(this.startCell.parentElement.getAttribute(ariaRowIndex), 10);
            this.startCellIndex = parseInt(parentsUntil(this.startCell, rowCell).getAttribute(ariaColIndex), 10);
        }
    }
    updateStartCellsIndex() {
        if (this.startCell) {
            this.startIndex = parseInt(this.startCell.parentElement.getAttribute(ariaRowIndex), 10);
            this.startCellIndex = parseInt(parentsUntil(this.startCell, rowCell).getAttribute(ariaColIndex), 10);
        }
    }
    enableDrag(e, isUpdate) {
        const gObj = this.parent;
        if (isUpdate) {
            const tr = closest(e.target, 'tr');
            this.startDIndex = parseInt(tr.getAttribute(ariaRowIndex), 10);
            this.startDCellIndex = parseInt(parentsUntil(e.target, rowCell).getAttribute(ariaColIndex), 10);
        }
        document.body.classList.add('e-disableuserselect');
        const gBRect = gObj.element.getBoundingClientRect();
        const postion = getPosition(e);
        this.x = postion.x - gBRect.left;
        this.y = postion.y - gBRect.top;
        EventHandler.add(gObj.getContent(), 'mousemove', this.mouseMoveHandler, this);
        if (this.parent.frozenRows) {
            EventHandler.add(gObj.getHeaderContent(), 'mousemove', this.mouseMoveHandler, this);
        }
        EventHandler.add(document, 'mouseup', this.mouseUpHandler, this);
    }
    clearSelAfterRefresh(e) {
        const isInfiniteScroll = this.parent.enableInfiniteScrolling && e.requestType === 'infiniteScroll';
        if (e.requestType !== 'virtualscroll' && !this.parent.isPersistSelection && !isInfiniteScroll) {
            this.clearSelection();
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.evtHandlers = [{ event: uiUpdate, handler: this.enableAfterRender },
            { event: initialEnd, handler: this.initializeSelection },
            { event: rowSelectionComplete, handler: this.onActionComplete },
            { event: cellSelectionComplete, handler: this.onActionComplete },
            { event: inBoundModelChanged, handler: this.onPropertyChanged },
            { event: cellFocused, handler: this.onCellFocused },
            { event: beforeFragAppend, handler: this.clearSelAfterRefresh },
            { event: columnPositionChanged, handler: this.columnPositionChanged },
            { event: contentReady, handler: this.initialEnd },
            { event: rowsRemoved, handler: this.rowsRemoved },
            { event: headerRefreshed, handler: this.refreshHeader },
            { event: destroy, handler: this.destroy }];
        addRemoveEventListener(this.parent, this.evtHandlers, true, this);
        this.actionBeginFunction = this.actionBegin.bind(this);
        this.actionCompleteFunction = this.actionComplete.bind(this);
        this.parent.addEventListener(actionBegin, this.actionBeginFunction);
        this.parent.addEventListener(actionComplete, this.actionCompleteFunction);
        this.addEventListener_checkbox();
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        addRemoveEventListener(this.parent, this.evtHandlers, false);
        this.parent.removeEventListener(actionBegin, this.actionBeginFunction);
        this.parent.removeEventListener(actionComplete, this.actionCompleteFunction);
        this.removeEventListener_checkbox();
    }
    wireEvents() {
        this.isMacOS = navigator.userAgent.indexOf('Mac OS') !== -1;
        if (this.isMacOS) {
            EventHandler.add(this.parent.element, 'keydown', this.keyDownHandler, this);
            EventHandler.add(this.parent.element, 'keyup', this.keyUpHandler, this);
        }
        else {
            if (!this.parent.allowKeyboard) {
                EventHandler.add(this.parent.element, 'keydown', this.keyDownHandler, this);
            }
        }
    }
    unWireEvents() {
        if (this.isMacOS) {
            EventHandler.remove(this.parent.element, 'keydown', this.keyDownHandler);
            EventHandler.remove(this.parent.element, 'keyup', this.keyUpHandler);
        }
        else {
            if (!this.parent.allowKeyboard) {
                EventHandler.remove(this.parent.element, 'keydown', this.keyDownHandler);
            }
        }
    }
    columnPositionChanged() {
        if (!this.parent.isPersistSelection) {
            this.clearSelection();
        }
    }
    refreshHeader() {
        this.setCheckAllState();
    }
    rowsRemoved(e) {
        for (let i = 0; i < e.records.length; i++) {
            delete (this.selectedRowState[e.records[i][this.primaryKey]]);
            --this.totalRecordsCount;
        }
        this.setCheckAllState();
    }
    beforeFragAppend(e) {
        if (e.requestType !== 'virtualscroll' && !this.parent.isPersistSelection) {
            this.clearSelection();
        }
    }
    getCheckAllBox() {
        return this.parent.getHeaderContent().querySelector('.e-checkselectall');
    }
    enableAfterRender(e) {
        if (e.module === this.getModuleName() && e.enable) {
            this.render();
            this.initPerisistSelection();
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    render(e) {
        EventHandler.add(this.parent.getContent(), 'mousedown', this.mouseDownHandler, this);
        EventHandler.add(this.parent.getHeaderContent(), 'mousedown', this.mouseDownHandler, this);
    }
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName()) {
            return;
        }
        const gObj = this.parent;
        if (!isNullOrUndefined(e.properties.type) && this.selectionSettings.type === 'Single') {
            if (this.selectedRowCellIndexes.length > 1) {
                this.clearCellSelection();
                this.prevCIdxs = undefined;
            }
            if (this.selectedRowIndexes.length > 1) {
                this.clearRowSelection();
                this.prevRowIndex = undefined;
            }
            if (this.selectedColumnsIndexes.length > 1) {
                this.clearColumnSelection();
                this.prevColIndex = undefined;
            }
            this.enableSelectMultiTouch = false;
            this.hidePopUp();
        }
        if (!isNullOrUndefined(e.properties.mode) ||
            !isNullOrUndefined(e.properties.cellSelectionMode)) {
            this.clearSelection();
            this.prevRowIndex = undefined;
            this.prevCIdxs = undefined;
            this.prevColIndex = undefined;
        }
        this.isPersisted = true;
        this.checkBoxSelectionChanged();
        this.isPersisted = false;
        if (!this.parent.isCheckBoxSelection) {
            this.initPerisistSelection();
        }
        const checkboxColumn = this.parent.getColumns().filter((col) => col.type === 'checkbox');
        if (checkboxColumn.length) {
            gObj.isCheckBoxSelection = !(this.selectionSettings.checkboxMode === 'ResetOnRowClick');
        }
        this.drawBorders();
    }
    hidePopUp() {
        if (this.parent.element.querySelector('.e-gridpopup').getElementsByClassName('e-rowselect').length) {
            this.parent.element.querySelector('.e-gridpopup').style.display = 'none';
        }
    }
    initialEnd(e) {
        const isFrozen = this.parent.isFrozenGrid();
        const isLeftRightFrozen = this.parent.getFrozenMode() === leftRight;
        if ((!isFrozen || (isFrozen && (!isLeftRightFrozen && !e.args.isFrozen)
            || (isLeftRightFrozen && e.args.renderFrozenRightContent))) && !this.selectedRowIndexes.length) {
            this.parent.off(contentReady, this.initialEnd);
            this.selectRow(this.parent.selectedRowIndex);
        }
    }
    checkBoxSelectionChanged() {
        const gobj = this.parent;
        gobj.off(contentReady, this.checkBoxSelectionChanged);
        const checkboxColumn = gobj.getColumns().filter((col) => col.type === 'checkbox');
        if (checkboxColumn.length > 0) {
            gobj.isCheckBoxSelection = true;
            this.chkField = checkboxColumn[0].field;
            this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
            if (isNullOrUndefined(this.totalRecordsCount)) {
                this.totalRecordsCount = this.getCurrentBatchRecordChanges().length;
            }
            if (this.isSingleSel()) {
                gobj.selectionSettings.type = 'Multiple';
                gobj.dataBind();
            }
            else {
                this.initPerisistSelection();
            }
        }
        if (!gobj.isCheckBoxSelection && !this.isPersisted) {
            this.chkField = null;
            this.initPerisistSelection();
        }
    }
    initPerisistSelection() {
        const gobj = this.parent;
        if (this.parent.selectionSettings.persistSelection && this.parent.getPrimaryKeyFieldNames().length > 0) {
            gobj.isPersistSelection = true;
            this.ensureCheckboxFieldSelection();
        }
        else if (this.parent.getPrimaryKeyFieldNames().length > 0) {
            gobj.isPersistSelection = false;
            this.ensureCheckboxFieldSelection();
        }
        else {
            gobj.isPersistSelection = false;
            this.selectedRowState = {};
        }
    }
    ensureCheckboxFieldSelection() {
        const gobj = this.parent;
        this.primaryKey = this.parent.getPrimaryKeyFieldNames()[0];
        if (!gobj.enableVirtualization && this.chkField
            && ((gobj.isPersistSelection && Object.keys(this.selectedRowState).length === 0) ||
                !gobj.isPersistSelection)) {
            const data = this.parent.getDataModule();
            const query = new Query().where(this.chkField, 'equal', true);
            if (!query.params) {
                query.params = this.parent.query.params;
            }
            const dataManager = data.getData({}, query);
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const proxy = this;
            this.parent.showSpinner();
            dataManager.then((e) => {
                proxy.dataSuccess(e.result);
                proxy.refreshPersistSelection();
                proxy.parent.hideSpinner();
            });
        }
    }
    dataSuccess(res) {
        for (let i = 0; i < res.length; i++) {
            if (isNullOrUndefined(this.selectedRowState[res[i][this.primaryKey]]) && res[i][this.chkField]) {
                this.selectedRowState[res[i][this.primaryKey]] = res[i][this.chkField];
            }
        }
        this.persistSelectedData = res;
    }
    setRowSelection(state) {
        if (!this.parent.getDataModule().isRemote()) {
            if (state) {
                if (this.parent.groupSettings.columns.length) {
                    for (const data of this.getData().records) {
                        this.selectedRowState[data[this.primaryKey]] = true;
                    }
                }
                else {
                    for (const data of this.getData()) {
                        this.selectedRowState[data[this.primaryKey]] = true;
                    }
                }
            }
            else {
                this.selectedRowState = {};
            }
            // (this.getData()).forEach(function (data) {
            //     this.selectedRowState[data[this.primaryKey]] = true;
            // })
        }
    }
    getData() {
        return this.parent.getDataModule().dataManager.executeLocal(this.parent.getDataModule().generateQuery(true));
    }
    refreshPersistSelection() {
        let rows = this.parent.getRows();
        if (this.parent.isCheckBoxSelection && this.parent.isFrozenGrid()) {
            const mtbody = this.parent.getMovableContentTbody();
            if (mtbody.querySelector('.e-checkselect')) {
                rows = this.parent.getMovableRows();
            }
            if (this.parent.getFrozenMode() === leftRight) {
                const frtbody = this.parent.getFrozenRightContentTbody();
                if (frtbody.querySelector('.e-checkselect')) {
                    rows = this.parent.getFrozenRightRows();
                }
            }
        }
        this.totalRecordsCount = this.parent.getCurrentViewRecords().length;
        if (this.parent.allowPaging) {
            this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
        }
        if (rows !== null && rows.length > 0 && (this.parent.isPersistSelection || this.chkField)) {
            const indexes = [];
            for (let j = 0; j < rows.length; j++) {
                const rowObj = this.getRowObj(rows[j]);
                const pKey = rowObj ? rowObj.data ? rowObj.data[this.primaryKey] : null : null;
                if (pKey === null) {
                    return;
                }
                let checkState;
                const chkBox = rows[j].querySelector('.e-checkselect');
                if (this.selectedRowState[pKey] || (this.parent.checkAllRows === 'Check' && this.selectedRowState[pKey] &&
                    this.totalRecordsCount === Object.keys(this.selectedRowState).length && this.chkAllCollec.indexOf(pKey) < 0)
                    || (this.parent.checkAllRows === 'Uncheck' && this.chkAllCollec.indexOf(pKey) > 0)
                    || (this.parent.checkAllRows === 'Intermediate' && !isNullOrUndefined(this.chkField) && rowObj.data[this.chkField])) {
                    indexes.push(parseInt(rows[j].getAttribute(ariaRowIndex), 10));
                    checkState = true;
                }
                else {
                    checkState = false;
                    if (this.checkedTarget !== chkBox && this.parent.isCheckBoxSelection && chkBox) {
                        removeAddCboxClasses(chkBox.nextElementSibling, checkState);
                    }
                }
                this.updatePersistCollection(rows[j], checkState);
            }
            if (this.isSingleSel() && indexes.length > 0) {
                this.selectRow(indexes[0], true);
            }
            else {
                this.selectRows(indexes);
            }
        }
        if (this.parent.isCheckBoxSelection && this.getCurrentBatchRecordChanges().length > 0) {
            this.setCheckAllState();
        }
    }
    actionBegin(e) {
        if (e.requestType === 'save' && this.parent.isPersistSelection) {
            const editChkBox = this.parent.element.querySelector('.e-edit-checkselect');
            if (!isNullOrUndefined(editChkBox)) {
                let row$$1 = closest(editChkBox, '.' + editedRow);
                if (row$$1) {
                    if (this.parent.editSettings.mode === 'Dialog') {
                        row$$1 = this.parent.element.querySelector('.e-dlgeditrow');
                    }
                    const rowObj = this.getRowObj(row$$1);
                    if (!rowObj) {
                        return;
                    }
                    this.selectedRowState[rowObj.data[this.primaryKey]] = rowObj.isSelected = editChkBox.checked;
                }
                else {
                    this.isCheckedOnAdd = editChkBox.checked;
                }
            }
        }
    }
    actionComplete(e) {
        if (e.requestType === 'save' && this.parent.isPersistSelection) {
            if (e.action === 'add' && this.isCheckedOnAdd) {
                const rowObj = this.parent.getRowObjectFromUID(this.parent.getRows()[e.selectedRow].getAttribute('data-uid'));
                this.selectedRowState[rowObj.data[this.primaryKey]] = rowObj.isSelected = this.isCheckedOnAdd;
            }
            this.refreshPersistSelection();
        }
        if (e.requestType === 'delete' && this.parent.isPersistSelection) {
            const records = e.data;
            const data = records.slice();
            for (let i = 0; i < data.length; i++) {
                if (!isNullOrUndefined(data[i][this.primaryKey])) {
                    this.updatePersistDelete(data[i][this.primaryKey]);
                }
            }
            this.setCheckAllState();
            this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
        }
        if (e.requestType === 'paging') {
            this.prevRowIndex = undefined;
            this.prevCIdxs = undefined;
            this.prevECIdxs = undefined;
        }
    }
    onDataBound() {
        if (!this.parent.enableVirtualization && this.parent.isPersistSelection) {
            if (this.selectedRecords.length) {
                this.isPrevRowSelection = true;
            }
            this.refreshPersistSelection();
        }
        if (this.parent.enableVirtualization) {
            this.setCheckAllState();
        }
        this.initialRowSelection = this.isRowType() && this.parent.element.querySelectorAll('.e-selectionbackground') &&
            this.parent.getSelectedRows().length ? true : false;
        if (this.parent.isCheckBoxSelection && !this.initialRowSelection) {
            const totalRecords = this.parent.getRowsObject();
            const indexes = [];
            for (let i = 0; i < totalRecords.length; i++) {
                if (totalRecords[i].isSelected) {
                    indexes.push(i);
                }
            }
            if (indexes.length) {
                this.selectRows(indexes);
            }
            this.initialRowSelection = true;
        }
    }
    updatePersistSelectedData(checkState) {
        if (this.parent.isPersistSelection) {
            const rows = this.parent.getRows();
            for (let i = 0; i < rows.length; i++) {
                this.updatePersistCollection(rows[i], checkState);
            }
            if (this.parent.checkAllRows === 'Uncheck') {
                this.setRowSelection(false);
                this.persistSelectedData = this.parent.getDataModule().isRemote() ? this.persistSelectedData : [];
            }
            else if (this.parent.checkAllRows === 'Check') {
                this.setRowSelection(true);
                this.persistSelectedData = !this.parent.getDataModule().isRemote() ?
                    this.parent.groupSettings.columns.length ? this.getData().records.slice() :
                        this.getData().slice() : this.persistSelectedData;
            }
        }
    }
    checkSelectAllAction(checkState) {
        const cRenderer = this.getRenderer();
        const editForm = this.parent.element.querySelector('.e-gridform');
        this.checkedTarget = this.getCheckAllBox();
        if (checkState && this.getCurrentBatchRecordChanges().length) {
            this.parent.checkAllRows = 'Check';
            this.updatePersistSelectedData(checkState);
            this.selectRowsByRange(cRenderer.getVirtualRowIndex(0), cRenderer.getVirtualRowIndex(this.getCurrentBatchRecordChanges().length - 1));
        }
        else {
            this.parent.checkAllRows = 'Uncheck';
            this.updatePersistSelectedData(checkState);
            this.clearSelection();
        }
        this.chkAllCollec = [];
        if (!isNullOrUndefined(editForm)) {
            const editChkBox = editForm.querySelector('.e-edit-checkselect');
            if (!isNullOrUndefined(editChkBox)) {
                removeAddCboxClasses(editChkBox.nextElementSibling, checkState);
            }
        }
    }
    checkSelectAll(checkBox) {
        const stateStr = this.getCheckAllStatus(checkBox);
        let state = stateStr === 'Check';
        this.isHeaderCheckboxClicked = true;
        if (stateStr === 'Intermediate') {
            state = this.getCurrentBatchRecordChanges().some((data) => data[this.primaryKey] in this.selectedRowState);
        }
        if (this.parent.isPersistSelection && this.parent.allowPaging) {
            this.totalRecordsCount = this.parent.pageSettings.totalRecordsCount;
        }
        this.checkSelectAllAction(!state);
        this.target = null;
        if (this.getCurrentBatchRecordChanges().length > 0) {
            this.setCheckAllState();
        }
        this.triggerChkChangeEvent(checkBox, !state);
    }
    getCheckAllStatus(ele) {
        const classes = ele ? ele.nextElementSibling.classList :
            this.getCheckAllBox().nextElementSibling.classList;
        let status;
        if (classes.contains('e-check')) {
            status = 'Check';
        }
        else if (classes.contains('e-uncheck')) {
            status = 'Uncheck';
        }
        else if (classes.contains('e-stop')) {
            status = 'Intermediate';
        }
        else {
            status = 'None';
        }
        return status;
    }
    checkSelect(checkBox) {
        const target = closest(this.checkedTarget, '.' + rowCell);
        const gObj = this.parent;
        this.isMultiCtrlRequest = true;
        let rIndex = 0;
        this.isHeaderCheckboxClicked = false;
        if (isGroupAdaptive(gObj)) {
            const uid = target.parentElement.getAttribute('data-uid');
            rIndex = gObj.getRows().map((m) => m.getAttribute('data-uid')).indexOf(uid);
        }
        else {
            rIndex = parseInt(target.parentElement.getAttribute(ariaRowIndex), 10);
        }
        if (this.parent.isPersistSelection && this.parent.element.getElementsByClassName(addedRow).length > 0 &&
            this.parent.editSettings.newRowPosition === 'Top') {
            ++rIndex;
        }
        this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute(ariaColIndex), 10));
        this.moveIntoUncheckCollection(closest(target, '.' + row));
        this.setCheckAllState();
        this.isMultiCtrlRequest = false;
        this.triggerChkChangeEvent(checkBox, checkBox.nextElementSibling.classList.contains('e-check'));
    }
    moveIntoUncheckCollection(row$$1) {
        if (this.parent.checkAllRows === 'Check' || this.parent.checkAllRows === 'Uncheck') {
            const rowObj = this.getRowObj(row$$1);
            const pKey = rowObj && rowObj.data ? rowObj.data[this.primaryKey] : null;
            if (!pKey) {
                return;
            }
            if (this.chkAllCollec.indexOf(pKey) < 0) {
                this.chkAllCollec.push(pKey);
            }
            else {
                this.chkAllCollec.splice(this.chkAllCollec.indexOf(pKey), 1);
            }
        }
    }
    triggerChkChangeEvent(checkBox, checkState) {
        this.parent.trigger(checkBoxChange, {
            checked: checkState, selectedRowIndexes: this.parent.getSelectedRowIndexes(),
            target: checkBox
        });
        if (!this.parent.isEdit) {
            this.checkedTarget = null;
        }
    }
    updateSelectedRowIndex(index) {
        if (this.parent.isCheckBoxSelection && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)
            && !this.parent.getDataModule().isRemote()) {
            if (this.parent.checkAllRows === 'Check') {
                this.selectedRowIndexes = [];
                const dataLength = this.getData().length;
                for (let data = 0; data < dataLength; data++) {
                    this.selectedRowIndexes.push(data);
                }
            }
            else if (this.parent.checkAllRows === 'Uncheck') {
                this.selectedRowIndexes = [];
            }
            else {
                const row$$1 = this.parent.getRowByIndex(index);
                if (index && row$$1 && row$$1.getAttribute('aria-selected') === 'false') {
                    const selectedVal = this.selectedRowIndexes.indexOf(index);
                    this.selectedRowIndexes.splice(selectedVal, 1);
                }
            }
        }
    }
    isAllSelected() {
        const data = this.getData();
        for (let i = 0; i < data.length; i++) {
            const pKey = data[i][this.primaryKey];
            if (!this.selectedRowState[pKey]) {
                return false;
            }
        }
        return true;
    }
    setCheckAllState(index, isInteraction) {
        if (this.parent.isCheckBoxSelection || this.parent.selectionSettings.checkboxMode === 'ResetOnRowClick') {
            let checkToSelectAll = true;
            let checkedLen = Object.keys(this.selectedRowState).length;
            if (!this.parent.isPersistSelection) {
                checkedLen = this.selectedRowIndexes.length;
                this.totalRecordsCount = this.getCurrentBatchRecordChanges().length;
            }
            if (this.parent.isPersistSelection && !this.parent.getDataModule().isRemote() && (this.parent.searchSettings.key.length
                || this.parent.filterSettings.columns.length)) {
                checkToSelectAll = this.isAllSelected();
            }
            const input = this.getCheckAllBox();
            if (input) {
                const spanEle = input.nextElementSibling;
                removeClass([spanEle], ['e-check', 'e-stop', 'e-uncheck']);
                setChecked(input, false);
                input.indeterminate = false;
                if (checkToSelectAll && checkedLen === this.totalRecordsCount && this.totalRecordsCount
                    || ((this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)
                        && !this.parent.allowPaging && !this.parent.getDataModule().isRemote()
                        && (this.getData().length && checkedLen === this.getData().length))) {
                    addClass([spanEle], ['e-check']);
                    setChecked(input, true);
                    if (isInteraction) {
                        this.getRenderer().setSelection(null, true, true);
                    }
                    this.parent.checkAllRows = 'Check';
                }
                else if (!this.selectedRowIndexes.length ||
                    checkedLen === 0 && this.getCurrentBatchRecordChanges().length === 0) {
                    addClass([spanEle], ['e-uncheck']);
                    if (isInteraction) {
                        this.getRenderer().setSelection(null, false, true);
                    }
                    this.parent.checkAllRows = 'Uncheck';
                    if (checkedLen === 0 && this.getCurrentBatchRecordChanges().length === 0) {
                        addClass([spanEle.parentElement], ['e-checkbox-disabled']);
                    }
                    else {
                        removeClass([spanEle.parentElement], ['e-checkbox-disabled']);
                    }
                }
                else {
                    addClass([spanEle], ['e-stop']);
                    this.parent.checkAllRows = 'Intermediate';
                    input.indeterminate = true;
                }
                if ((this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)
                    && !this.parent.allowPaging && !this.parent.getDataModule().isRemote()) {
                    this.updateSelectedRowIndex(index);
                }
            }
        }
    }
    keyDownHandler(e) {
        // Below are keyCode for command key in MAC OS. Safari/Chrome(91-Left command, 93-Right Command), Opera(17), FireFox(224)
        if ((((Browser.info.name === 'chrome') || (Browser.info.name === 'safari')) && (e.keyCode === 91 || e.keyCode === 93)) ||
            (Browser.info.name === 'opera' && e.keyCode === 17) || (Browser.info.name === 'mozilla' && e.keyCode === 224)) {
            this.cmdKeyPressed = true;
        }
        if (e.keyCode === 32) {
            e.preventDefault();
        }
    }
    keyUpHandler(e) {
        if ((((Browser.info.name === 'chrome') || (Browser.info.name === 'safari')) && (e.keyCode === 91 || e.keyCode === 93)) ||
            (Browser.info.name === 'opera' && e.keyCode === 17) || (Browser.info.name === 'mozilla' && e.keyCode === 224)) {
            this.cmdKeyPressed = false;
        }
    }
    clickHandler(e) {
        let target = e.target;
        this.actualTarget = target;
        if (this.selectionSettings.persistSelection) {
            this.deSelectedData = iterateExtend(this.persistSelectedData);
        }
        if (parentsUntil(target, row) || parentsUntil(target, 'e-headerchkcelldiv') ||
            (this.selectionSettings.allowColumnSelection && target.classList.contains('e-headercell'))) {
            this.isInteracted = true;
        }
        this.isMultiCtrlRequest = e.ctrlKey || this.enableSelectMultiTouch ||
            (this.isMacOS && this.cmdKeyPressed);
        if (!this.parent.allowKeyboard) {
            this.isMultiShiftRequest = false;
            this.isMultiCtrlRequest = false;
        }
        else {
            this.isMultiShiftRequest = e.shiftKey;
        }
        this.popUpClickHandler(e);
        let chkSelect = false;
        this.preventFocus = true;
        let checkBox;
        const checkWrap = parentsUntil(target, 'e-checkbox-wrapper');
        this.checkSelectAllClicked = checkWrap && checkWrap.getElementsByClassName('e-checkselectall') ||
            (this.selectionSettings.persistSelection && parentsUntil(target, row)) ? true : false;
        if (checkWrap && checkWrap.querySelectorAll('.e-checkselect,.e-checkselectall').length > 0) {
            checkBox = checkWrap.querySelector('input[type="checkbox"]');
            chkSelect = true;
        }
        this.drawBorders();
        this.updateAutoFillPosition();
        target = parentsUntil(target, rowCell);
        if (((target && target.parentElement.classList.contains(row) && !this.parent.selectionSettings.checkboxOnly) || chkSelect)
            && !this.isRowDragSelected) {
            if (this.parent.isCheckBoxSelection) {
                this.isMultiCtrlRequest = true;
            }
            this.target = target;
            if (!isNullOrUndefined(checkBox)) {
                this.checkedTarget = checkBox;
                if (checkBox.classList.contains('e-checkselectall')) {
                    this.checkSelectAll(checkBox);
                }
                else {
                    this.checkSelect(checkBox);
                }
            }
            else {
                const gObj = this.parent;
                let rIndex = 0;
                if (isGroupAdaptive(gObj)) {
                    const uid = target.parentElement.getAttribute('data-uid');
                    rIndex = gObj.getRows().map((m) => m.getAttribute('data-uid')).indexOf(uid);
                }
                else {
                    rIndex = parseInt(target.parentElement.getAttribute(ariaRowIndex), 10);
                }
                if (this.parent.isPersistSelection && this.parent.element.getElementsByClassName(addedRow).length > 0) {
                    ++rIndex;
                }
                if (!this.mUPTarget || !this.mUPTarget.isEqualNode(target)) {
                    this.rowCellSelectionHandler(rIndex, parseInt(target.getAttribute(ariaColIndex), 10));
                }
                this.parent.hoverFrozenRows(e);
                if (this.parent.isCheckBoxSelection) {
                    this.moveIntoUncheckCollection(closest(target, '.' + row));
                    this.setCheckAllState();
                }
            }
            if (!this.parent.isCheckBoxSelection && Browser.isDevice && !this.isSingleSel()) {
                this.showPopup(e);
            }
        }
        else if (e.target.classList.contains('e-headercell') &&
            !e.target.classList.contains('e-stackedheadercell')) {
            const uid = e.target.querySelector('.e-headercelldiv').getAttribute('e-mappinguid');
            this.headerSelectionHandler(this.parent.getColumnIndexByUid(uid));
        }
        this.isMultiCtrlRequest = false;
        this.isMultiShiftRequest = false;
        if (isNullOrUndefined(closest(e.target, '.e-unboundcell'))) {
            this.preventFocus = false;
        }
    }
    popUpClickHandler(e) {
        const target = e.target;
        if (closest(target, '.e-headercell') || e.target.classList.contains(rowCell) ||
            closest(target, '.e-gridpopup')) {
            if (target.classList.contains('e-rowselect')) {
                if (!target.classList.contains('e-spanclicked')) {
                    target.classList.add('e-spanclicked');
                    this.enableSelectMultiTouch = true;
                }
                else {
                    target.classList.remove('e-spanclicked');
                    this.enableSelectMultiTouch = false;
                    this.parent.element.querySelector('.e-gridpopup').style.display = 'none';
                }
            }
        }
        else {
            this.parent.element.querySelector('.e-gridpopup').style.display = 'none';
        }
    }
    showPopup(e) {
        if (!this.selectionSettings.enableSimpleMultiRowSelection) {
            setCssInGridPopUp(this.parent.element.querySelector('.e-gridpopup'), e, 'e-rowselect e-icons e-icon-rowselect' +
                (!this.isSingleSel() && (this.selectedRecords.length > (this.parent.getFrozenColumns() ? 2 : 1)
                    || this.selectedRowCellIndexes.length > 1) ? ' e-spanclicked' : ''));
        }
    }
    rowCellSelectionHandler(rowIndex, cellIndex) {
        if ((!this.isMultiCtrlRequest && !this.isMultiShiftRequest) || this.isSingleSel()) {
            if (!this.isDragged) {
                this.selectRow(rowIndex, this.selectionSettings.enableToggle);
            }
            this.selectCell({ rowIndex: rowIndex, cellIndex: cellIndex }, this.selectionSettings.enableToggle);
            if (this.selectedRowCellIndexes.length) {
                this.updateAutoFillPosition();
            }
            this.drawBorders();
        }
        else if (this.isMultiShiftRequest) {
            if (this.parent.isCheckBoxSelection || (!this.parent.isCheckBoxSelection &&
                !closest(this.target, '.' + rowCell).classList.contains(gridChkBox))) {
                this.selectRowsByRange(isUndefined(this.prevRowIndex) ? rowIndex : this.prevRowIndex, rowIndex);
            }
            else {
                this.addRowsToSelection([rowIndex]);
            }
            this.selectCellsByRange(isUndefined(this.prevCIdxs) ? { rowIndex: rowIndex, cellIndex: cellIndex } : this.prevCIdxs, { rowIndex: rowIndex, cellIndex: cellIndex });
            this.updateAutoFillPosition();
            this.drawBorders();
        }
        else {
            this.addRowsToSelection([rowIndex]);
            this.addCellsToSelection([{ rowIndex: rowIndex, cellIndex: cellIndex }]);
            this.showHideBorders('none');
        }
        this.isDragged = false;
    }
    onCellFocused(e) {
        if (this.parent.frozenRows && e.container.isHeader && e.byKey) {
            if (e.keyArgs.action === 'upArrow') {
                if (this.parent.allowFiltering) {
                    e.isJump = e.element.tagName === 'INPUT' ? true : false;
                }
                else {
                    e.isJump = e.element.tagName === 'TH' ? true : false;
                }
            }
            else {
                if (e.keyArgs.action === 'downArrow') {
                    const rIdx = Number(e.element.parentElement.getAttribute(ariaRowIndex));
                    e.isJump = rIdx === 0 ? true : false;
                }
                else {
                    if (e.keyArgs.action === 'ctrlHome') {
                        e.isJump = true;
                    }
                }
            }
        }
        const clear = this.parent.isFrozenGrid() ? (((e.container.isHeader && e.element.tagName !== 'TD' && e.isJump &&
            !this.selectionSettings.allowColumnSelection) ||
            ((e.container.isContent || e.element.tagName === 'TD') && !(e.container.isSelectable || e.element.tagName === 'TD')))
            && !(e.byKey && e.keyArgs.action === 'space')) : ((e.container.isHeader && e.isJump) ||
            (e.container.isContent && !e.container.isSelectable)) && !(e.byKey && e.keyArgs.action === 'space')
            && !(e.element.classList.contains('e-detailrowexpand') || e.element.classList.contains('e-detailrowcollapse'));
        const headerAction = (e.container.isHeader && e.element.tagName !== 'TD' && !closest(e.element, '.' + rowCell))
            && !(e.byKey && e.keyArgs.action === 'space');
        if (!e.byKey || clear) {
            if (clear && !this.parent.isCheckBoxSelection) {
                this.clearSelection();
            }
            return;
        }
        let [rowIndex, cellIndex] = e.container.isContent ? e.container.indexes : e.indexes;
        const prev = this.focus.getPrevIndexes();
        if (this.parent.frozenRows) {
            if (e.container.isHeader && (e.element.tagName === 'TD' || closest(e.element, '.' + rowCell))) {
                const thLen = this.parent.getHeaderTable().querySelector('thead').childElementCount;
                rowIndex -= thLen;
                prev.rowIndex = !isNullOrUndefined(prev.rowIndex) ? prev.rowIndex - thLen : null;
            }
            else {
                rowIndex += this.parent.frozenRows;
                prev.rowIndex = prev.rowIndex === 0 || !isNullOrUndefined(prev.rowIndex) ? prev.rowIndex + this.parent.frozenRows : null;
            }
        }
        if (this.parent.isFrozenGrid()) {
            const cIdx = Number(e.element.getAttribute(ariaColIndex));
            const selectedIndexes = this.parent.getSelectedRowCellIndexes();
            if (selectedIndexes.length && prev.cellIndex === 0) {
                prev.cellIndex = selectedIndexes[selectedIndexes.length - 1].cellIndexes[0];
            }
            prev.cellIndex = !isNullOrUndefined(prev.cellIndex) ? (prev.cellIndex === cellIndex ? cIdx : cIdx - 1) : null;
            cellIndex = cIdx;
        }
        if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {
            rowIndex = parseInt(e.element.parentElement.getAttribute('aria-rowindex'), 10);
        }
        if ((headerAction || (['ctrlPlusA', 'escape'].indexOf(e.keyArgs.action) === -1 &&
            e.keyArgs.action !== 'space' && rowIndex === prev.rowIndex && cellIndex === prev.cellIndex)) &&
            !this.selectionSettings.allowColumnSelection) {
            return;
        }
        this.preventFocus = true;
        const columnIndex = this.getKeyColIndex(e);
        if (this.needColumnSelection) {
            cellIndex = columnIndex;
        }
        switch (e.keyArgs.action) {
            case 'downArrow':
            case 'upArrow':
            case 'enter':
            case 'shiftEnter':
                this.target = e.element;
                this.isKeyAction = true;
                this.applyDownUpKey(rowIndex, cellIndex);
                break;
            case 'rightArrow':
            case 'leftArrow':
                this.applyRightLeftKey(rowIndex, cellIndex);
                break;
            case 'shiftDown':
            case 'shiftUp':
                this.shiftDownKey(rowIndex, cellIndex);
                break;
            case 'shiftLeft':
            case 'shiftRight':
                this.applyShiftLeftRightKey(rowIndex, cellIndex);
                break;
            case 'home':
            case 'end':
                cellIndex = e.keyArgs.action === 'end' ? this.getLastColIndex(rowIndex) : 0;
                this.applyHomeEndKey(rowIndex, cellIndex);
                break;
            case 'ctrlHome':
            case 'ctrlEnd':
                this.applyCtrlHomeEndKey(rowIndex, cellIndex);
                break;
            case 'escape':
                this.clearSelection();
                break;
            case 'ctrlPlusA':
                this.ctrlPlusA();
                break;
            case 'space':
                this.applySpaceSelection(e.element);
                break;
            case 'tab':
                if (this.parent.editSettings.allowNextRowEdit) {
                    this.selectRow(rowIndex);
                }
                break;
        }
        this.needColumnSelection = false;
        this.preventFocus = false;
        this.positionBorders();
        this.updateAutoFillPosition();
    }
    getKeyColIndex(e) {
        let uid;
        let index = null;
        const stackedHeader = e.element.querySelector('.e-stackedheadercelldiv');
        if (this.selectionSettings.allowColumnSelection && parentsUntil(e.element, 'e-columnheader')) {
            this.needColumnSelection = e.container.isHeader ? true : false;
            if (stackedHeader) {
                if (e.keyArgs.action === 'rightArrow' || e.keyArgs.action === 'leftArrow') {
                    return index;
                }
                uid = stackedHeader.getAttribute('e-mappinguid');
                const innerColumn = this.getstackedColumns(this.parent.getColumnByUid(uid).columns);
                const lastIndex = this.parent.getColumnIndexByUid(innerColumn[innerColumn.length - 1].uid);
                const firstIndex = this.parent.getColumnIndexByUid(innerColumn[0].uid);
                index = this.prevColIndex >= lastIndex ? firstIndex : lastIndex;
            }
            else {
                index = this.parent.getColumnIndexByUid(e.element
                    .querySelector('.e-headercelldiv').getAttribute('e-mappinguid'));
            }
        }
        return index;
    }
    /**
     * Apply ctrl + A key selection
     *
     * @returns {void}
     * @hidden
     */
    ctrlPlusA() {
        if (this.isRowType() && !this.isSingleSel()) {
            this.selectRowsByRange(0, this.getCurrentBatchRecordChanges().length - 1);
        }
        if (this.isCellType() && !this.isSingleSel()) {
            this.selectCellsByRange({ rowIndex: 0, cellIndex: 0 }, { rowIndex: this.parent.getRows().length - 1, cellIndex: this.parent.getColumns().length - 1 });
        }
    }
    applySpaceSelection(target) {
        if (target.classList.contains('e-checkselectall')) {
            this.checkedTarget = target;
            this.checkSelectAll(this.checkedTarget);
        }
        else {
            if (target.classList.contains('e-checkselect')) {
                this.checkedTarget = target;
                this.checkSelect(this.checkedTarget);
            }
        }
    }
    applyDownUpKey(rowIndex, cellIndex) {
        const gObj = this.parent;
        if (this.parent.isCheckBoxSelection && this.parent.checkAllRows === 'Check' && !this.selectionSettings.persistSelection) {
            this.checkSelectAllAction(false);
            this.checkedTarget = null;
        }
        if (this.isRowType()) {
            if (this.parent.frozenRows) {
                this.selectRow(rowIndex, true);
                this.applyUpDown(gObj.selectedRowIndex);
            }
            else {
                this.selectRow(rowIndex, true);
                this.applyUpDown(gObj.selectedRowIndex);
            }
        }
        if (this.isCellType()) {
            this.selectCell({ rowIndex, cellIndex }, true);
        }
        if (this.selectionSettings.allowColumnSelection && this.needColumnSelection) {
            this.selectColumn(cellIndex);
        }
    }
    applyUpDown(rowIndex) {
        if (rowIndex < 0) {
            return;
        }
        if (!this.target) {
            this.target = this.parent.getRows()[0].children[this.parent.groupSettings.columns.length || 0];
        }
        const cIndex = parseInt(this.target.getAttribute(ariaColIndex), 10);
        const frzCols = this.parent.getFrozenColumns();
        if (frzCols) {
            if (cIndex >= frzCols) {
                this.target =
                    this.contentRenderer.getMovableRowByIndex(rowIndex).getElementsByClassName(rowCell)[cIndex - frzCols];
            }
            else {
                this.target = this.contentRenderer.getRowByIndex(rowIndex).getElementsByClassName(rowCell)[cIndex];
            }
        }
        else {
            const row$$1 = this.contentRenderer.getRowByIndex(rowIndex);
            if (row$$1) {
                this.target = row$$1.getElementsByClassName(rowCell)[cIndex];
            }
        }
        this.addAttribute(this.target);
    }
    applyRightLeftKey(rowIndex, cellIndex) {
        if (this.selectionSettings.allowColumnSelection && this.needColumnSelection) {
            this.selectColumn(cellIndex);
        }
        else if (this.isCellType()) {
            this.selectCell({ rowIndex, cellIndex }, true);
            this.addAttribute(this.target);
        }
    }
    applyHomeEndKey(rowIndex, cellIndex) {
        if (this.isCellType()) {
            this.selectCell({ rowIndex, cellIndex }, true);
        }
        else {
            this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));
        }
    }
    /**
     * Apply shift+down key selection
     *
     * @param {number} rowIndex - specfies the rowIndex
     * @param {number} cellIndex - specifies the CellIndex
     * @returns {void}
     * @hidden
     */
    shiftDownKey(rowIndex, cellIndex) {
        this.isMultiShiftRequest = true;
        if (this.isRowType() && !this.isSingleSel()) {
            if (!isUndefined(this.prevRowIndex)) {
                this.selectRowsByRange(this.prevRowIndex, rowIndex);
                this.applyUpDown(rowIndex);
            }
            else {
                this.selectRow(0, true);
            }
        }
        if (this.isCellType() && !this.isSingleSel()) {
            this.selectCellsByRange(this.prevCIdxs || { rowIndex: 0, cellIndex: 0 }, { rowIndex, cellIndex });
        }
        this.isMultiShiftRequest = false;
    }
    applyShiftLeftRightKey(rowIndex, cellIndex) {
        this.isMultiShiftRequest = true;
        if (this.selectionSettings.allowColumnSelection && this.needColumnSelection) {
            this.selectColumnsByRange(this.prevColIndex, cellIndex);
        }
        else {
            this.selectCellsByRange(this.prevCIdxs, { rowIndex, cellIndex });
        }
        this.isMultiShiftRequest = false;
    }
    getstackedColumns(column) {
        const innerColumnIndexes = [];
        for (let i = 0, len = column.length; i < len; i++) {
            if (column[i].columns) {
                this.getstackedColumns(column[i].columns);
            }
            else {
                innerColumnIndexes.push(column[i]);
            }
        }
        return innerColumnIndexes;
    }
    applyCtrlHomeEndKey(rowIndex, cellIndex) {
        if (this.isRowType()) {
            this.selectRow(rowIndex, true);
            this.addAttribute(this.parent.getCellFromIndex(rowIndex, cellIndex));
        }
        if (this.isCellType()) {
            this.selectCell({ rowIndex, cellIndex }, true);
        }
    }
    addRemoveClassesForRow(row$$1, isAdd, clearAll, ...args) {
        if (row$$1) {
            const cells = [].slice.call(row$$1.getElementsByClassName(rowCell));
            const detailIndentCell = row$$1.querySelector('.e-detailrowcollapse') || row$$1.querySelector('.e-detailrowexpand');
            const dragdropIndentCell = row$$1.querySelector('.e-rowdragdrop');
            if (detailIndentCell) {
                cells.push(detailIndentCell);
            }
            if (dragdropIndentCell) {
                cells.push(dragdropIndentCell);
            }
            addRemoveActiveClasses(cells, isAdd, ...args);
        }
        this.getRenderer().setSelection(row$$1 ? row$$1.getAttribute('data-uid') : null, isAdd, clearAll);
    }
    isRowType() {
        return this.selectionSettings.mode === 'Row' || this.selectionSettings.mode === 'Both';
    }
    isCellType() {
        return this.selectionSettings.mode === 'Cell' || this.selectionSettings.mode === 'Both';
    }
    isSingleSel() {
        return this.selectionSettings.type === 'Single';
    }
    getRenderer() {
        if (isNullOrUndefined(this.contentRenderer)) {
            this.contentRenderer = this.factory.getRenderer(RenderType.Content);
        }
        return this.contentRenderer;
    }
    /**
     * Gets the collection of selected records.
     *
     * @returns {Object[]} returns the Object
     */
    getSelectedRecords() {
        let selectedData = [];
        if (!this.selectionSettings.persistSelection) {
            selectedData = this.parent.getRowsObject().filter((row$$1) => row$$1.isSelected)
                .map((m) => m.data);
        }
        else {
            selectedData = this.persistSelectedData;
        }
        return selectedData;
    }
    /**
     * Select the column by passing start column index
     *
     * @param {number} index - specifies the index
     * @returns {void}
     */
    selectColumn(index) {
        const gObj = this.parent;
        if (isNullOrUndefined(gObj.getColumns()[index])) {
            return;
        }
        const column = gObj.getColumnByIndex(index);
        const selectedCol = gObj.getColumnHeaderByUid(column.uid);
        const isColSelected = selectedCol.classList.contains('e-columnselection');
        if ((!gObj.selectionSettings.allowColumnSelection)) {
            return;
        }
        const isMultiColumns = this.selectedColumnsIndexes.length > 1 &&
            this.selectedColumnsIndexes.indexOf(index) > -1;
        this.clearColDependency();
        if (!isColSelected || !this.selectionSettings.enableToggle || isMultiColumns) {
            const args = {
                columnIndex: index, headerCell: selectedCol,
                column: column,
                cancel: false, target: this.actualTarget,
                isInteracted: this.isInteracted, previousColumnIndex: this.prevColIndex,
                isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest
            };
            this.onActionBegin(args, columnSelecting);
            if (args.cancel) {
                this.disableInteracted();
                return;
            }
            if (!(gObj.selectionSettings.enableToggle && index === this.prevColIndex && isColSelected) || isMultiColumns) {
                this.updateColSelection(selectedCol, index);
            }
            const selectedArgs = {
                columnIndex: index, headerCell: selectedCol,
                column: column,
                target: this.actualTarget,
                isInteracted: this.isInteracted, previousColumnIndex: this.prevColIndex
            };
            this.onActionComplete(selectedArgs, columnSelected);
        }
        this.updateColProps(index);
    }
    /**
     * Select the columns by passing start and end column index
     *
     * @param  {number} startIndex - specifies the start index
     * @param  {number} endIndex - specifies the end index
     * @returns {void}
     */
    selectColumnsByRange(startIndex, endIndex) {
        const gObj = this.parent;
        if (isNullOrUndefined(gObj.getColumns()[startIndex])) {
            return;
        }
        const indexes = [];
        if (gObj.selectionSettings.type === 'Single' || isNullOrUndefined(endIndex)) {
            indexes[0] = startIndex;
        }
        else {
            const min = startIndex < endIndex;
            for (let i = startIndex; min ? i <= endIndex : i >= endIndex; min ? i++ : i--) {
                indexes.push(i);
            }
        }
        this.selectColumns(indexes);
    }
    /**
     * Select the columns by passing column indexes
     *
     * @param  {number[]} columnIndexes - specifies the columnIndexes
     * @returns {void}
     */
    selectColumns(columnIndexes) {
        const gObj = this.parent;
        let selectedCol = this.getselectedCols();
        if (gObj.selectionSettings.type === 'Single') {
            columnIndexes = [columnIndexes[0]];
        }
        if (!gObj.selectionSettings.allowColumnSelection) {
            return;
        }
        this.clearColDependency();
        const selectingArgs = {
            columnIndex: columnIndexes[0], headerCell: selectedCol,
            columnIndexes: columnIndexes,
            column: gObj.getColumnByIndex(columnIndexes[0]),
            cancel: false, target: this.actualTarget,
            isInteracted: this.isInteracted, previousColumnIndex: this.prevColIndex,
            isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest
        };
        this.onActionBegin(selectingArgs, columnSelecting);
        if (selectingArgs.cancel) {
            this.disableInteracted();
            return;
        }
        for (let i = 0, len = columnIndexes.length; i < len; i++) {
            this.updateColSelection(gObj.getColumnHeaderByUid(gObj.getColumnByIndex(columnIndexes[i]).uid), columnIndexes[i]);
        }
        selectedCol = this.getselectedCols();
        const selectedArgs = {
            columnIndex: columnIndexes[0], headerCell: selectedCol,
            columnIndexes: columnIndexes,
            column: gObj.getColumnByIndex(columnIndexes[0]),
            target: this.actualTarget,
            isInteracted: this.isInteracted, previousColumnIndex: this.prevColIndex
        };
        this.onActionComplete(selectedArgs, columnSelected);
        this.updateColProps(columnIndexes[0]);
    }
    /**
     * Select the column with existing column by passing column index
     *
     * @param  {number} startIndex - specifies the start index
     * @returns {void}
     */
    selectColumnWithExisting(startIndex) {
        const gObj = this.parent;
        if (isNullOrUndefined(gObj.getColumns()[startIndex])) {
            return;
        }
        const newCol = gObj.getColumnHeaderByUid(gObj.getColumnByIndex(startIndex).uid);
        let selectedCol = this.getselectedCols();
        if (gObj.selectionSettings.type === 'Single') {
            this.clearColDependency();
        }
        if (!gObj.selectionSettings.allowColumnSelection) {
            return;
        }
        if (this.selectedColumnsIndexes.indexOf(startIndex) > -1) {
            this.clearColumnSelection(startIndex);
        }
        else {
            const selectingArgs = {
                columnIndex: startIndex, headerCell: selectedCol,
                columnIndexes: this.selectedColumnsIndexes,
                column: gObj.getColumnByIndex(startIndex),
                cancel: false, target: this.actualTarget,
                isInteracted: this.isInteracted, previousColumnIndex: this.prevColIndex,
                isCtrlPressed: this.isMultiCtrlRequest, isShiftPressed: this.isMultiShiftRequest
            };
            this.onActionBegin(selectingArgs, columnSelecting);
            if (selectingArgs.cancel) {
                this.disableInteracted();
                return;
            }
            this.updateColSelection(newCol, startIndex);
            selectedCol = this.getselectedCols();
            const selectedArgs = {
                columnIndex: startIndex, headerCell: selectedCol,
                column: gObj.getColumnByIndex(startIndex),
                columnIndexes: this.selectedColumnsIndexes,
                target: this.actualTarget,
                isInteracted: this.isInteracted, previousColumnIndex: this.prevColIndex
            };
            this.onActionComplete(selectedArgs, columnSelected);
        }
        this.updateColProps(startIndex);
    }
    /**
     * Clear the column selection
     *
     * @param {number} clearIndex - specifies the clearIndex
     * @returns {void}
     */
    clearColumnSelection(clearIndex) {
        if (this.isColumnSelected) {
            const gObj = this.parent;
            if (!isNullOrUndefined(clearIndex) && this.selectedColumnsIndexes.indexOf(clearIndex) === -1) {
                return;
            }
            const index = !isNullOrUndefined(clearIndex) ? clearIndex :
                this.selectedColumnsIndexes[this.selectedColumnsIndexes.length - 1];
            const col = gObj.getColumnByIndex(index);
            let selectedCol;
            const column = gObj.getColumnByIndex(index);
            if (col.getFreezeTableName() === frozenRight) {
                selectedCol = gObj.getFrozenRightColumnHeaderByIndex(index);
            }
            else if (col.getFreezeTableName() === 'movable') {
                selectedCol = gObj.getMovableColumnHeaderByIndex(index);
            }
            else {
                selectedCol = gObj.getColumnHeaderByUid(column.uid);
            }
            const deselectedArgs = {
                columnIndex: index, headerCell: selectedCol,
                columnIndexes: this.selectedColumnsIndexes,
                column: column,
                cancel: false, target: this.actualTarget,
                isInteracted: this.isInteracted
            };
            const isCanceled = this.columnDeselect(deselectedArgs, columnDeselecting);
            if (isCanceled) {
                this.disableInteracted();
                return;
            }
            const selectedHeader = !isNullOrUndefined(clearIndex) ? [selectedCol] :
                [].slice.call(gObj.getHeaderContent().getElementsByClassName('e-columnselection'));
            const selectedCells = this.getSelectedColumnCells(clearIndex);
            for (let i = 0, len = selectedHeader.length; i < len; i++) {
                addRemoveActiveClasses([selectedHeader[i]], false, 'e-columnselection');
            }
            for (let i = 0, len = selectedCells.length; i < len; i++) {
                addRemoveActiveClasses([selectedCells[i]], false, 'e-columnselection');
            }
            if (!isNullOrUndefined(clearIndex)) {
                this.selectedColumnsIndexes.splice(this.selectedColumnsIndexes.indexOf(clearIndex), 1);
                this.parent.getColumns()[clearIndex].isSelected = false;
            }
            else {
                this.columnDeselect(deselectedArgs, columnDeselected);
                this.selectedColumnsIndexes = [];
                this.isColumnSelected = false;
                this.parent.getColumns().filter((col) => col.isSelected = false);
            }
        }
    }
    getselectedCols() {
        const gObj = this.parent;
        let selectedCol;
        if (this.selectedColumnsIndexes.length > 1) {
            selectedCol = [];
            for (let i = 0; i < this.selectedColumnsIndexes.length; i++) {
                (selectedCol).push(gObj.getColumnHeaderByUid(gObj.getColumnByIndex(this.selectedColumnsIndexes[i]).uid));
            }
        }
        else {
            selectedCol = gObj.getColumnHeaderByUid(gObj.getColumnByIndex(this.selectedColumnsIndexes[0]).uid);
        }
        return selectedCol;
    }
    getSelectedColumnCells(clearIndex) {
        const gObj = this.parent;
        const isRowTemplate = !isNullOrUndefined(this.parent.rowTemplate);
        let rows = isRowTemplate ? gObj.getRows() : gObj.getDataRows();
        let movableRows;
        let frRows;
        if (gObj.isFrozenGrid() && gObj.getContent().querySelector('.' + movableContent)) {
            movableRows = isRowTemplate ? gObj.getMovableRows() : gObj.getMovableDataRows();
            rows = gObj.addMovableRows(rows, movableRows);
            if (gObj.getFrozenMode() === leftRight) {
                frRows = isRowTemplate ? gObj.getFrozenRightRows() : gObj.getFrozenRightDataRows();
                rows = gObj.addMovableRows(rows, frRows);
            }
        }
        let seletedcells = [];
        const selectionString = !isNullOrUndefined(clearIndex) ? '[aria-colindex="' + clearIndex + '"]' : '.e-columnselection';
        for (let i = 0, len = rows.length; i < len; i++) {
            seletedcells = seletedcells.concat([].slice.call(rows[i].querySelectorAll(selectionString)));
        }
        return seletedcells;
    }
    columnDeselect(args, event) {
        if (event === 'columnDeselected') {
            delete args.cancel;
        }
        this.onActionComplete(args, event);
        return args.cancel;
    }
    updateColProps(startIndex) {
        this.prevColIndex = startIndex;
        this.isColumnSelected = this.selectedColumnsIndexes.length && true;
    }
    clearColDependency() {
        this.clearColumnSelection();
        this.selectedColumnsIndexes = [];
    }
    updateColSelection(selectedCol, startIndex) {
        if (isNullOrUndefined(this.parent.getColumns()[startIndex])) {
            return;
        }
        const left = this.parent.getFrozenLeftCount();
        const movable = this.parent.getMovableColumnsCount();
        const col = this.parent.getColumnByIndex(startIndex);
        const isRowTemplate = !isNullOrUndefined(this.parent.rowTemplate);
        let rows;
        this.selectedColumnsIndexes.push(startIndex);
        this.parent.getColumns()[startIndex].isSelected = true;
        if (col.getFreezeTableName() === frozenRight) {
            startIndex = startIndex - (left + movable);
            rows = isRowTemplate ? this.parent.getFrozenRightRows() : this.parent.getFrozenRightDataRows();
        }
        else if (col.getFreezeTableName() === 'movable') {
            startIndex = startIndex - left;
            rows = isRowTemplate ? this.parent.getMovableRows() : this.parent.getMovableDataRows();
        }
        else {
            startIndex = startIndex + this.parent.getIndentCount();
            rows = isRowTemplate ? this.parent.getRows() : this.parent.getDataRows();
        }
        addRemoveActiveClasses([selectedCol], true, 'e-columnselection');
        for (let j = 0, len = rows.length; j < len; j++) {
            if (rows[j].classList.contains(row)) {
                if ((rows[j].classList.contains(editedRow) || rows[j].classList.contains(addedRow)) &&
                    this.parent.editSettings.mode === 'Normal' && !isNullOrUndefined(rows[j].querySelector('tr').childNodes[startIndex])) {
                    addRemoveActiveClasses([rows[j].querySelector('tr').childNodes[startIndex]], true, 'e-columnselection');
                }
                else if (!isNullOrUndefined(rows[j].childNodes[startIndex])) {
                    addRemoveActiveClasses([rows[j].childNodes[startIndex]], true, 'e-columnselection');
                }
            }
        }
    }
    headerSelectionHandler(colIndex) {
        if ((!this.isMultiCtrlRequest && !this.isMultiShiftRequest) || this.isSingleSel()) {
            this.selectColumn(colIndex);
        }
        else if (this.isMultiShiftRequest) {
            this.selectColumnsByRange(isUndefined(this.prevColIndex) ? colIndex : this.prevColIndex, colIndex);
        }
        else {
            this.selectColumnWithExisting(colIndex);
        }
    }
    // eslint-disable-next-line camelcase
    addEventListener_checkbox() {
        this.parent.on(dataReady, this.dataReady, this);
        this.onDataBoundFunction = this.onDataBound.bind(this);
        this.parent.addEventListener(dataBound, this.onDataBoundFunction);
        this.parent.on(refreshInfinitePersistSelection, this.onDataBoundFunction);
        this.parent.on(contentReady, this.checkBoxSelectionChanged, this);
        this.parent.on(beforeRefreshOnDataChange, this.initPerisistSelection, this);
        this.parent.on(onEmpty, this.setCheckAllForEmptyGrid, this);
        this.actionCompleteFunc = this.actionCompleteHandler.bind(this);
        this.parent.addEventListener(actionComplete, this.actionCompleteFunc);
        this.parent.on(click, this.clickHandler, this);
        this.resizeEndFn = () => {
            this.updateAutoFillPosition();
            this.drawBorders();
        };
        this.resizeEndFn.bind(this);
        this.parent.addEventListener(resizeStop, this.resizeEndFn);
    }
    // eslint-disable-next-line camelcase
    removeEventListener_checkbox() {
        this.parent.off(dataReady, this.dataReady);
        this.parent.removeEventListener(dataBound, this.onDataBoundFunction);
        this.parent.removeEventListener(actionComplete, this.actionCompleteFunc);
        this.parent.off(refreshInfinitePersistSelection, this.onDataBoundFunction);
        this.parent.off(onEmpty, this.setCheckAllForEmptyGrid);
        this.parent.off(click, this.clickHandler);
        this.parent.off(beforeRefreshOnDataChange, this.initPerisistSelection);
    }
    setCheckAllForEmptyGrid() {
        const checkAllBox = this.getCheckAllBox();
        if (checkAllBox) {
            this.parent.isCheckBoxSelection = true;
            const spanEle = checkAllBox.nextElementSibling;
            removeClass([spanEle], ['e-check', 'e-stop', 'e-uncheck']);
        }
    }
    dataReady(e) {
        this.isHeaderCheckboxClicked = false;
        const isInfinitecroll = this.parent.enableInfiniteScrolling && e.requestType === 'infiniteScroll';
        if (e.requestType !== 'virtualscroll' && !this.parent.isPersistSelection && !isInfinitecroll) {
            this.disableUI = !this.parent.enableImmutableMode;
            this.clearSelection();
            this.setCheckAllState();
            this.disableUI = false;
        }
    }
    actionCompleteHandler(e) {
        if (e.requestType === 'save' && this.parent.isPersistSelection) {
            this.refreshPersistSelection();
        }
    }
    selectRowIndex(index) {
        this.parent.isSelectedRowIndexUpdating = true;
        this.parent.selectedRowIndex = index;
    }
    disableInteracted() {
        this.isInteracted = false;
    }
    activeTarget() {
        this.actualTarget = this.isInteracted ? this.actualTarget : null;
    }
}

/**
 * The `Search` module is used to handle search action.
 */
class Search {
    /**
     * Constructor for Grid search module.
     *
     * @param {IGrid} parent - specifies the IGrid
     * @hidden
     */
    constructor(parent) {
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * Searches Grid records by given key.
     *
     * > You can customize the default search action by using [`searchSettings`](grid/#searchsettings/).
     *
     * @param  {string} searchString - Defines the key.
     * @returns {void}
     */
    search(searchString) {
        const gObj = this.parent;
        searchString = isNullOrUndefined(searchString) ? '' : searchString;
        if (isActionPrevent(gObj)) {
            gObj.notify(preventBatch, { instance: this, handler: this.search, arg1: searchString });
            return;
        }
        if (searchString !== gObj.searchSettings.key) {
            gObj.searchSettings.key = searchString.toString();
            gObj.dataBind();
        }
        else if (this.refreshSearch) {
            gObj.refresh();
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(inBoundModelChanged, this.onPropertyChanged, this);
        this.parent.on(searchComplete, this.onSearchComplete, this);
        this.parent.on(destroy, this.destroy, this);
        this.actionCompleteFunc = this.onActionComplete.bind(this);
        this.parent.addEventListener(actionComplete, this.actionCompleteFunc);
        this.parent.on(cancelBegin, this.cancelBeginEvent, this);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(inBoundModelChanged, this.onPropertyChanged);
        this.parent.off(searchComplete, this.onSearchComplete);
        this.parent.off(destroy, this.destroy);
        this.parent.removeEventListener(actionComplete, this.actionCompleteFunc);
        this.parent.off(cancelBegin, this.cancelBeginEvent);
    }
    /**
     * To destroy the print
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        this.removeEventListener();
    }
    /**
     * @param {NotifyArgs} e - specfies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName()) {
            return;
        }
        if (!isNullOrUndefined(e.properties.key)) {
            this.parent.notify(modelChanged, {
                requestType: 'searching', type: actionBegin, searchString: this.parent.searchSettings.key
            });
        }
        else {
            this.parent.notify(modelChanged, {
                requestType: 'searching', type: actionBegin
            });
        }
    }
    /**
     * The function used to trigger onActionComplete
     *
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    onSearchComplete(e) {
        this.parent.trigger(actionComplete, extend(e, {
            searchString: this.parent.searchSettings.key, requestType: 'searching', type: actionComplete
        }));
    }
    /**
     * The function used to store the requestType
     *
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    onActionComplete(e) {
        this.refreshSearch = e.requestType !== 'searching';
    }
    cancelBeginEvent(e) {
        if (e.requestType === 'searching') {
            this.parent.setProperties({ searchSettings: { key: '' } }, true);
        }
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'search';
    }
}

/**
 * The `ShowHide` module is used to control column visibility.
 */
class ShowHide {
    /**
     * Constructor for the show hide module.
     *
     * @param {IGrid} parent - specifies the IGrid
     * @hidden
     */
    constructor(parent) {
        this.parent = parent;
    }
    /**
     * Shows a column by column name.
     *
     * @param  {string|string[]} columnName - Defines a single or collection of column names to show.
     * @param  {string} showBy - Defines the column key either as field name or header text.
     * @returns {void}
     */
    show(columnName, showBy) {
        const keys = this.getToggleFields(columnName);
        const columns = this.getColumns(keys, showBy);
        this.parent.notify(tooltipDestroy, { module: 'edit' });
        for (let i = 0; i < columns.length; i++) {
            columns[i].visible = true;
        }
        this.setVisible(columns);
    }
    /**
     * Hides a column by column name.
     *
     * @param  {string|string[]} columnName - Defines a single or collection of column names to hide.
     * @param  {string} hideBy - Defines the column key either as field name or header text.
     * @returns {void}
     */
    hide(columnName, hideBy) {
        const keys = this.getToggleFields(columnName);
        const columns = this.getColumns(keys, hideBy);
        this.parent.notify(tooltipDestroy, { module: 'edit' });
        for (let i = 0; i < columns.length; i++) {
            columns[i].visible = false;
        }
        this.setVisible(columns);
    }
    getToggleFields(key) {
        let finalized = [];
        if (typeof key === 'string') {
            finalized = [key];
        }
        else {
            finalized = key;
        }
        return finalized;
    }
    getColumns(keys, getKeyBy) {
        const columns = iterateArrayOrObject(keys, (key) => {
            return iterateArrayOrObject(this.parent.columnModel, (item) => {
                if (item[getKeyBy] === key) {
                    return item;
                }
                return undefined;
            })[0];
        });
        return columns;
    }
    /**
     * Shows or hides columns by given column collection.
     *
     * @private
     * @param {Column[]} columns - Specifies the columns.
     * @param {Column[]} changedStateColumns - specifies the changedStateColumns
     * @returns {void}
     */
    setVisible(columns, changedStateColumns = []) {
        changedStateColumns = (changedStateColumns.length > 0) ? changedStateColumns : columns;
        const args = {
            requestType: 'columnstate',
            cancel: false,
            columns: changedStateColumns
        };
        const cancel = 'cancel';
        if (this.parent.enableInfiniteScrolling && this.parent.allowGrouping
            && this.parent.groupModule.groupSettings.columns.length > 0) {
            this.parent.contentModule.visibleRows = [];
        }
        this.parent.trigger(actionBegin, args, (showHideArgs) => {
            const currentViewCols = this.parent.getColumns();
            columns = isNullOrUndefined(columns) ? currentViewCols : columns;
            if (showHideArgs[cancel]) {
                this.parent.notify(resetColumns, { showHideArgs: showHideArgs });
                if (columns.length > 0) {
                    columns[0].visible = true;
                }
                return;
            }
            if (isGroupAdaptive(this.parent)) {
                this.parent.contentModule.emptyVcRows();
            }
            if (this.parent.allowSelection && this.parent.getSelectedRecords().length &&
                !this.parent.selectionSettings.persistSelection) {
                this.parent.clearSelection();
            }
            if (this.parent.enableColumnVirtualization) {
                const colsInCurrentView = columns.filter((col1) => (currentViewCols.some((col2) => col1.field === col2.field)));
                if (colsInCurrentView.length) {
                    this.parent.notify(columnVisibilityChanged, columns);
                }
            }
            else {
                this.parent.notify(columnVisibilityChanged, columns);
            }
            const params = {
                requestType: 'columnstate',
                columns: changedStateColumns
            };
            this.parent.trigger(actionComplete, params);
            if (this.parent.columnQueryMode !== 'All') {
                this.parent.refresh();
            }
        });
    }
}

/**
 * The `Scroll` module is used to handle scrolling behaviour.
 */
class Scroll {
    /**
     * Constructor for the Grid scrolling.
     *
     * @param {IGrid} parent - specifies the IGrid
     * @hidden
     */
    constructor(parent) {
        //To maintain scroll state on grid actions.
        this.previousValues = { top: 0, left: 0 };
        this.oneTimeReady = true;
        this.parent = parent;
        this.widthService = new ColumnWidthService(parent);
        this.addEventListener();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'scroll';
    }
    /**
     * @param {boolean} uiupdate - specifies the uiupdate
     * @returns {void}
     * @hidden
     */
    setWidth(uiupdate) {
        this.parent.element.style.width = formatUnit(this.parent.width);
        if (uiupdate) {
            this.widthService.setWidthToColumns();
        }
        if (this.parent.toolbarModule && this.parent.toolbarModule.toolbar &&
            this.parent.toolbarModule.toolbar.element) {
            this.parent.toolbarModule.toolbar.refreshOverflow();
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    setHeight() {
        let mHdrHeight = 0;
        const content$$1 = this.parent.getContent().querySelector('.' + content);
        let height = this.parent.height;
        if (this.parent.isFrozenGrid() && this.parent.height !== 'auto' && this.parent.height.toString().indexOf('%') < 0) {
            height = parseInt(height, 10) - Scroll.getScrollBarWidth();
        }
        if (!this.parent.enableVirtualization && this.parent.frozenRows && this.parent.height !== 'auto') {
            const tbody$$1 = this.parent.getHeaderContent().querySelector(tbody);
            mHdrHeight = tbody$$1 ? tbody$$1.offsetHeight : 0;
            if (tbody$$1 && mHdrHeight) {
                const add = tbody$$1.getElementsByClassName(addedRow).length;
                const height = add * this.parent.getRowHeight();
                mHdrHeight -= height;
            }
            content$$1.style.height = formatUnit(height - mHdrHeight);
        }
        else {
            content$$1.style.height = formatUnit(height);
        }
        this.ensureOverflow(content$$1);
        if (this.parent.isFrozenGrid()) {
            this.refresh();
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    setPadding() {
        const content$$1 = this.parent.getHeaderContent();
        const scrollWidth = Scroll.getScrollBarWidth() - this.getThreshold();
        const cssProps = this.getCssProperties();
        const padding = this.parent.getFrozenMode() === 'Right' || this.parent.getFrozenMode() === leftRight ? '0.5px' : '1px';
        content$$1.querySelector('.' + headerContent).style[cssProps.border] = scrollWidth > 0 ? padding : '0px';
        content$$1.style[cssProps.padding] = scrollWidth > 0 ? scrollWidth + 'px' : '0px';
    }
    /**
     * @param {boolean} rtl - specifies the rtl
     * @returns {void}
     * @hidden
     */
    removePadding(rtl) {
        const cssProps = this.getCssProperties(rtl);
        const hDiv = this.parent.getHeaderContent().querySelector('.' + headerContent);
        hDiv.style[cssProps.border] = '';
        hDiv.parentElement.style[cssProps.padding] = '';
        const footerDiv = this.parent.getFooterContent();
        if (footerDiv && footerDiv.classList.contains('e-footerpadding')) {
            footerDiv.classList.remove('e-footerpadding');
        }
    }
    /**
     * Refresh makes the Grid adoptable with the height of parent container.
     *
     * > The [`height`](grid/#height/) must be set to 100%.
     *
     * @returns {void}
     */
    refresh() {
        if (this.parent.height !== '100%') {
            return;
        }
        const content$$1 = this.parent.getContent();
        this.parent.element.style.height = '100%';
        const height = this.widthService.getSiblingsHeight(content$$1);
        content$$1.style.height = 'calc(100% - ' + height + 'px)'; //Set the height to the  '.' + literals.gridContent;
        if (this.parent.isFrozenGrid()) {
            content$$1.firstElementChild.style.height = 'calc(100% - ' + getScrollBarWidth() + 'px)';
        }
    }
    getThreshold() {
        /* Some browsers places the scroller outside the content,
         * hence the padding should be adjusted.*/
        const appName = Browser.info.name;
        if (appName === 'mozilla') {
            return 0.5;
        }
        return 1;
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(onEmpty, this.wireEvents, this);
        this.parent.on(contentReady, this.wireEvents, this);
        this.parent.on(uiUpdate, this.onPropertyChanged, this);
        this.parent.on(textWrapRefresh, this.wireEvents, this);
        this.parent.on(headerRefreshed, this.setScrollLeft, this);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(onEmpty, this.wireEvents);
        this.parent.off(contentReady, this.wireEvents);
        this.parent.off(uiUpdate, this.onPropertyChanged);
        this.parent.off(textWrapRefresh, this.wireEvents);
        this.parent.off(headerRefreshed, this.setScrollLeft);
    }
    setScrollLeft() {
        if (this.parent.isFrozenGrid()) {
            this.parent.headerModule.getMovableHeader().scrollLeft = this.previousValues.left;
        }
        else {
            this.parent.getHeaderContent().querySelector('.' + headerContent).scrollLeft = this.previousValues.left;
        }
    }
    onFrozenContentScroll() {
        return (e) => {
            if (this.content.querySelector(tbody) === null || this.parent.isPreventScrollEvent) {
                return;
            }
            if (!isNullOrUndefined(this.parent.infiniteScrollModule) && this.parent.enableInfiniteScrolling) {
                this.parent.notify(infiniteScrollHandler, e);
            }
            this.previousValues.top = e.target.scrollTop;
        };
    }
    onContentScroll(scrollTarget) {
        const element = scrollTarget;
        const isHeader = element.classList.contains(headerContent);
        return (e) => {
            if (this.content.querySelector(tbody) === null || this.parent.isPreventScrollEvent) {
                return;
            }
            const target = e.target;
            const left = target.scrollLeft;
            if (!isNullOrUndefined(this.parent.infiniteScrollModule) && this.parent.enableInfiniteScrolling) {
                this.parent.notify(infiniteScrollHandler, { target: e.target, isLeft: this.previousValues.left !== left });
            }
            if (this.parent.groupSettings.columns.length && this.parent.groupSettings.enableLazyLoading) {
                const isDown = this.previousValues.top < this.parent.getContent().firstElementChild.scrollTop;
                this.parent.notify(lazyLoadScrollHandler, { scrollDown: isDown });
            }
            this.parent.notify(virtualScrollEdit, {});
            const isFooter = target.classList.contains('e-summarycontent');
            if (this.previousValues.left === left) {
                this.previousValues.top = !isHeader ? this.previousValues.top : target.scrollTop;
                return;
            }
            this.parent.notify(closeFilterDialog, e);
            element.scrollLeft = left;
            if (isFooter) {
                this.header.scrollLeft = left;
            }
            this.previousValues.left = left;
            this.parent.notify(scroll, { left: left });
        };
    }
    onCustomScrollbarScroll(mCont, mHdr) {
        const content$$1 = mCont;
        const header = mHdr;
        return (e) => {
            if (this.content.querySelector(tbody) === null) {
                return;
            }
            const target = e.target;
            const left = target.scrollLeft;
            if (this.previousValues.left === left) {
                return;
            }
            content$$1.scrollLeft = left;
            header.scrollLeft = left;
            this.previousValues.left = left;
            this.parent.notify(scroll, { left: left });
            if (this.parent.isDestroyed) {
                return;
            }
        };
    }
    onTouchScroll(scrollTarget) {
        const element = scrollTarget;
        return (e) => {
            if (e.pointerType === 'mouse') {
                return;
            }
            const isFrozen = this.parent.isFrozenGrid();
            const pageXY = this.getPointXY(e);
            const left = element.scrollLeft + (this.pageXY.x - pageXY.x);
            const mHdr = isFrozen ?
                this.parent.getHeaderContent().querySelector('.' + movableHeader) :
                this.parent.getHeaderContent().querySelector('.' + headerContent);
            const mCont = isFrozen ?
                this.parent.getContent().querySelector('.' + movableContent) :
                this.parent.getContent().querySelector('.' + content);
            if (this.previousValues.left === left || (left < 0 || (mHdr.scrollWidth - mHdr.clientWidth) < left)) {
                return;
            }
            e.preventDefault();
            mHdr.scrollLeft = left;
            mCont.scrollLeft = left;
            if (isFrozen) {
                const scrollBar = this.parent.getContent().querySelector('.e-movablescrollbar');
                scrollBar.scrollLeft = left;
            }
            this.pageXY.x = pageXY.x;
            this.previousValues.left = left;
        };
    }
    setPageXY() {
        return (e) => {
            if (e.pointerType === 'mouse') {
                return;
            }
            this.pageXY = this.getPointXY(e);
        };
    }
    getPointXY(e) {
        const pageXY = { x: 0, y: 0 };
        if (e.touches && e.touches.length) {
            pageXY.x = e.touches[0].pageX;
            pageXY.y = e.touches[0].pageY;
        }
        else {
            pageXY.x = e.pageX;
            pageXY.y = e.pageY;
        }
        return pageXY;
    }
    getScrollbleParent(node) {
        if (node === null) {
            return null;
        }
        const parent = isNullOrUndefined(node.tagName) ? node.scrollingElement : node;
        const overflowY = document.defaultView.getComputedStyle(parent, null).overflowY;
        if (parent.scrollHeight > parent.clientHeight && overflowY !== 'hidden'
            && overflowY !== 'visible' || node.tagName === "HTML" || node.tagName === "BODY") {
            return node;
        }
        else {
            return this.getScrollbleParent(node.parentNode);
        }
    }
    /**
     * @param {boolean} isAdd - specifies whether adding/removing the event
     * @returns {void}
     * @hidden
     */
    addStickyListener(isAdd) {
        this.parentElement = this.getScrollbleParent(this.parent.element.parentElement);
        if (isAdd) {
            if (this.parentElement) {
                EventHandler.add(this.parentElement.tagName === 'HTML' || this.parentElement.tagName === 'BODY' ? document :
                    this.parentElement, 'scroll', this.makeStickyHeader, this);
            }
        }
        else {
            EventHandler.remove(this.parentElement, 'scroll', this.makeStickyHeader);
        }
    }
    wireEvents() {
        if (this.oneTimeReady) {
            const frzCols = this.parent.isFrozenGrid();
            this.content = this.parent.getContent().querySelector('.' + content);
            this.header = this.parent.getHeaderContent().querySelector('.' + headerContent);
            const mCont = this.content.querySelector('.' + movableContent);
            const mHdr = this.header.querySelector('.' + movableHeader);
            const mScrollBar = this.parent.getContent().querySelector('.e-movablescrollbar');
            if (this.parent.frozenRows) {
                EventHandler.add(frzCols ? mHdr : this.header, 'touchstart pointerdown', this.setPageXY(), this);
                EventHandler.add(frzCols ? mHdr : this.header, 'touchmove pointermove', this.onTouchScroll(frzCols ? mCont : this.content), this);
            }
            if (this.parent.isFrozenGrid()) {
                EventHandler.add(mScrollBar, 'scroll', this.onCustomScrollbarScroll(mCont, mHdr), this);
                EventHandler.add(mCont, 'scroll', this.onCustomScrollbarScroll(mScrollBar, mHdr), this);
                EventHandler.add(mHdr, 'scroll', this.onCustomScrollbarScroll(mScrollBar, mCont), this);
                EventHandler.add(this.content, 'scroll', this.onFrozenContentScroll(), this);
                EventHandler.add(mHdr, 'touchstart pointerdown', this.setPageXY(), this);
                EventHandler.add(mHdr, 'touchmove pointermove', this.onTouchScroll(mCont), this);
                EventHandler.add(mCont, 'touchstart pointerdown', this.setPageXY(), this);
                if (!(/macintosh|ipad/.test(Browser.userAgent.toLowerCase()) && Browser.isDevice)) {
                    EventHandler.add(mCont, 'touchmove pointermove', this.onTouchScroll(mHdr), this);
                }
            }
            else {
                EventHandler.add(this.content, 'scroll', this.onContentScroll(this.header), this);
                EventHandler.add(this.header, 'scroll', this.onContentScroll(this.content), this);
            }
            if (this.parent.aggregates.length) {
                EventHandler.add(this.parent.getFooterContent().firstChild, 'scroll', this.onContentScroll(this.content), this);
            }
            if (this.parent.enableStickyHeader) {
                this.addStickyListener(true);
            }
            this.refresh();
            this.oneTimeReady = false;
        }
        const table$$1 = this.parent.getContentTable();
        let sLeft;
        let sHeight;
        let clientHeight;
        getUpdateUsingRaf(() => {
            sLeft = this.header.scrollLeft;
            sHeight = table$$1.scrollHeight;
            clientHeight = this.parent.getContent().clientHeight;
        }, () => {
            const args = { cancel: false };
            this.parent.notify(checkScrollReset, args);
            if (!this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling) {
                if (sHeight < clientHeight) {
                    addClass(table$$1.querySelectorAll('tr:last-child td'), 'e-lastrowcell');
                    if (this.parent.isFrozenGrid()) {
                        addClass(this.parent.getContent().querySelector('.' + movableContent).querySelectorAll('tr:last-child td'), 'e-lastrowcell');
                        if (this.parent.getFrozenRightColumnsCount()) {
                            addClass(this.parent.getContent().querySelector('.e-frozen-right-content').querySelectorAll('tr:last-child td'), 'e-lastrowcell');
                        }
                    }
                }
                if (!args.cancel) {
                    if ((this.parent.frozenRows > 0 || this.parent.isFrozenGrid()) && this.header.querySelector('.' + movableHeader)) {
                        this.header.querySelector('.' + movableHeader).scrollLeft = this.previousValues.left;
                    }
                    else {
                        this.header.scrollLeft = this.previousValues.left;
                    }
                    this.content.scrollLeft = this.previousValues.left;
                    this.content.scrollTop = this.previousValues.top;
                }
            }
            if (!this.parent.enableColumnVirtualization) {
                this.content.scrollLeft = sLeft;
            }
            if (this.parent.isFrozenGrid() && this.header.querySelector('.' + movableHeader)) {
                this.header.querySelector('.' + movableHeader).scrollLeft =
                    this.content.querySelector('.' + movableContent).scrollLeft;
            }
        });
        this.parent.isPreventScrollEvent = false;
    }
    /**
     * @param {boolean} rtl - specifies the rtl
     * @returns {ScrollCss} returns the ScrollCss
     * @hidden
     */
    getCssProperties(rtl) {
        const css = {};
        const enableRtl = isNullOrUndefined(rtl) ? this.parent.enableRtl : rtl;
        css.border = enableRtl ? 'borderLeftWidth' : 'borderRightWidth';
        css.padding = enableRtl ? 'paddingLeft' : 'paddingRight';
        return css;
    }
    ensureOverflow(content$$1) {
        content$$1.style.overflowY = this.parent.height === 'auto' ? 'auto' : 'scroll';
    }
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName()) {
            return;
        }
        this.setPadding();
        this.oneTimeReady = true;
        if (this.parent.height === 'auto') {
            this.removePadding();
        }
        this.wireEvents();
        this.setHeight();
        const width = 'width';
        this.setWidth(!isNullOrUndefined(e.properties[width]));
    }
    makeStickyHeader() {
        if (this.parent.enableStickyHeader && this.parent.element && this.parent.getContent()) {
            const contentRect = this.parent.getContent().getClientRects()[0];
            if (contentRect) {
                const headerEle = this.parent.getHeaderContent();
                const toolbarEle = this.parent.element.querySelector('.e-toolbar');
                const groupHeaderEle = this.parent.element.querySelector('.e-groupdroparea');
                const height = headerEle.offsetHeight + (toolbarEle ? toolbarEle.offsetHeight : 0) +
                    (groupHeaderEle ? groupHeaderEle.offsetHeight : 0);
                const parentTop = this.parentElement.getClientRects()[0].top;
                const top = contentRect.top - (parentTop < 0 ? 0 : parentTop);
                const left = contentRect.left;
                if (top < height && contentRect.bottom > 0) {
                    headerEle.classList.add('e-sticky');
                    let elemTop = 0;
                    if (groupHeaderEle && this.parent.groupSettings.showDropArea) {
                        this.setSticky(groupHeaderEle, elemTop, contentRect.width, left, true);
                        elemTop += groupHeaderEle.getClientRects()[0].height;
                    }
                    if (toolbarEle) {
                        this.setSticky(toolbarEle, elemTop, contentRect.width, left, true);
                        elemTop += toolbarEle.getClientRects()[0].height;
                    }
                    this.setSticky(headerEle, elemTop, contentRect.width, left, true);
                }
                else {
                    if (headerEle.classList.contains('e-sticky')) {
                        this.setSticky(headerEle, null, null, null, false);
                        if (toolbarEle) {
                            this.setSticky(toolbarEle, null, null, null, false);
                        }
                        if (groupHeaderEle) {
                            this.setSticky(groupHeaderEle, null, null, null, false);
                        }
                        const ccDlg = this.parent.element.querySelector('.e-ccdlg');
                        if (ccDlg) {
                            ccDlg.classList.remove('e-sticky');
                        }
                    }
                }
                this.parent.notify(stickyScrollComplete, {});
            }
        }
    }
    setSticky(ele, top, width, left, isAdd) {
        if (isAdd) {
            ele.style.width = width + 'px';
            ele.classList.add('e-sticky');
        }
        else {
            ele.classList.remove('e-sticky');
        }
        ele.style.top = top != null ? top + 'px' : '';
        ele.style.left = left !== null ? parseInt(ele.style.left, 10) !== left ? left + 'px' : ele.style.left : '';
    }
    /**
     * @returns {void}
     * @hidden
     */
    destroy() {
        const gridElement = this.parent.element;
        if (!gridElement || (!gridElement.querySelector('.' + gridHeader) && !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        this.removeEventListener();
        //Remove Dom event
        const cont = this.parent.getContent().querySelector('.' + content);
        EventHandler.remove(cont, 'scroll', this.onContentScroll);
        if (this.parent.enableStickyHeader) {
            this.addStickyListener(false);
        }
        //Remove padding
        this.removePadding();
        removeClass([this.parent.getHeaderContent().querySelector('.' + headerContent)], headerContent);
        removeClass([cont], content);
        //Remove height
        cont.style.height = '';
        //Remove width
        this.parent.element.style.width = '';
    }
    /**
     * Function to get the scrollbar width of the browser.
     *
     * @returns {number} return the width
     * @hidden
     */
    static getScrollBarWidth() {
        return getScrollBarWidth();
    }
}

var __decorate$4 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Configures the Grid's aggregate column.
 */
class AggregateColumn extends ChildProperty {
    constructor() {
        super(...arguments);
        this.templateFn = {};
    }
    /**
     * @param {Function} value - specifies the value
     * @returns {void}
     * @hidden
     */
    setFormatter(value) {
        this.formatFn = value;
    }
    /**
     * @returns {Function} returns the Function
     * @hidden
     */
    getFormatter() {
        return this.formatFn;
    }
    /**
     * @param {Object} helper - specifies the helper
     * @returns {void}
     * @hidden
     */
    setTemplate(helper = {}) {
        if (this.footerTemplate !== undefined) {
            this.templateFn[getEnumValue(CellType, CellType.Summary)] = { fn: compile(this.footerTemplate, helper),
                property: 'footerTemplate' };
        }
        if (this.groupFooterTemplate !== undefined) {
            this.templateFn[getEnumValue(CellType, CellType.GroupSummary)] = { fn: compile(this.groupFooterTemplate, helper),
                property: 'groupFooterTemplate' };
        }
        if (this.groupCaptionTemplate !== undefined) {
            this.templateFn[getEnumValue(CellType, CellType.CaptionSummary)] = { fn: compile(this.groupCaptionTemplate, helper),
                property: 'groupCaptionTemplate' };
        }
    }
    /**
     * @param {CellType} type - specifies the cell type
     * @returns {Object} returns the object
     * @hidden
     */
    getTemplate(type) {
        return this.templateFn[getEnumValue(CellType, type)];
    }
    /**
     * @param {Object} prop - returns the Object
     * @returns {void}
     * @hidden
     */
    setPropertiesSilent(prop) {
        this.setProperties(prop, true);
    }
}
__decorate$4([
    Property()
], AggregateColumn.prototype, "type", void 0);
__decorate$4([
    Property()
], AggregateColumn.prototype, "field", void 0);
__decorate$4([
    Property()
], AggregateColumn.prototype, "columnName", void 0);
__decorate$4([
    Property()
], AggregateColumn.prototype, "format", void 0);
__decorate$4([
    Property()
], AggregateColumn.prototype, "footerTemplate", void 0);
__decorate$4([
    Property()
], AggregateColumn.prototype, "groupFooterTemplate", void 0);
__decorate$4([
    Property()
], AggregateColumn.prototype, "groupCaptionTemplate", void 0);
__decorate$4([
    Property()
], AggregateColumn.prototype, "customAggregate", void 0);
/**
 * Configures the aggregate rows.
 */
class AggregateRow extends ChildProperty {
}
__decorate$4([
    Collection([], AggregateColumn)
], AggregateRow.prototype, "columns", void 0);

/**
 * The `Clipboard` module is used to handle clipboard copy action.
 */
class Clipboard {
    /**
     * Constructor for the Grid clipboard module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @hidden
     */
    constructor(parent) {
        this.copyContent = '';
        this.isSelect = false;
        this.parent = parent;
        this.addEventListener();
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(contentReady, this.initialEnd, this);
        this.parent.on(keyPressed, this.keyDownHandler, this);
        this.parent.on(click, this.clickHandler, this);
        EventHandler.add(this.parent.element, 'keydown', this.pasteHandler, this);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(keyPressed, this.keyDownHandler);
        this.parent.off(contentReady, this.initialEnd);
        this.parent.off(click, this.clickHandler);
        EventHandler.remove(this.parent.element, 'keydown', this.pasteHandler);
    }
    clickHandler(e) {
        let target = e.target;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        target = parentsUntil(target, 'e-rowcell');
    }
    pasteHandler(e) {
        const grid = this.parent;
        const isMacLike = /(Mac)/i.test(navigator.platform);
        if (e.keyCode === 67 && isMacLike && e.metaKey && !grid.isEdit) {
            this.copy();
        }
        if (e.keyCode === 86 && (e.ctrlKey || (isMacLike && e.metaKey)) && !grid.isEdit) {
            const target = closest(document.activeElement, '.' + rowCell);
            if (!target || !grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' ||
                grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {
                return;
            }
            this.activeElement = document.activeElement;
            this.clipBoardTextArea.value = '';
            const x = window.scrollX;
            const y = window.scrollY;
            this.clipBoardTextArea.focus();
            setTimeout(() => {
                this.activeElement.focus();
                window.scrollTo(x, y);
                this.paste(this.clipBoardTextArea.value, this.parent.getSelectedRowCellIndexes()[0].rowIndex, this.parent.getSelectedRowCellIndexes()[0].cellIndexes[0]);
            }, 10);
        }
    }
    /**
     * Paste data from clipboard to selected cells.
     *
     * @param {boolean} data - Specifies the date for paste.
     * @param {boolean} rowIndex - Specifies the row index.
     * @param {boolean} colIndex - Specifies the column index.
     * @returns {void}
     */
    paste(data, rowIndex, colIndex) {
        const grid = this.parent;
        let cIdx = colIndex;
        let rIdx = rowIndex;
        let col;
        let value;
        let isAvail;
        if (!grid.editSettings.allowEditing || grid.editSettings.mode !== 'Batch' ||
            grid.selectionSettings.mode !== 'Cell' || grid.selectionSettings.cellSelectionMode === 'Flow') {
            return;
        }
        const rows = data.split('\n');
        let cols;
        const dataRows = grid.getDataRows();
        let mRows;
        let frRows;
        const isFrozen = this.parent.isFrozenGrid();
        if (isFrozen) {
            mRows = grid.getMovableDataRows();
            if (grid.getFrozenRightColumnsCount()) {
                frRows = grid.getFrozenRightDataRows();
            }
        }
        for (let r = 0; r < rows.length; r++) {
            cols = rows[r].split('\t');
            cIdx = colIndex;
            if ((r === rows.length - 1 && rows[r] === '') || isUndefined(grid.getRowByIndex(rIdx))) {
                cIdx++;
                break;
            }
            for (let c = 0; c < cols.length; c++) {
                isAvail = grid.getCellFromIndex(rIdx, cIdx);
                if (isFrozen) {
                    const fTr = dataRows[rIdx];
                    const mTr = mRows[rIdx];
                    isAvail = !fTr.querySelector('[aria-colindex="' + cIdx + '"]') ?
                        mTr.querySelector('[aria-colindex="' + cIdx + '"]') : true;
                    if (frRows && !isAvail) {
                        const frTr = frRows[rIdx];
                        isAvail = frTr.querySelector('[aria-colindex="' + cIdx + '"]');
                    }
                }
                if (!isAvail) {
                    cIdx++;
                    break;
                }
                col = grid.getColumnByIndex(cIdx);
                value = col.getParser() ? col.getParser()(cols[c]) : cols[c];
                if (col.allowEditing && !col.isPrimaryKey && !col.template) {
                    const args = {
                        column: col,
                        data: value,
                        rowIndex: rIdx
                    };
                    this.parent.trigger(beforePaste, args);
                    rIdx = args.rowIndex;
                    if (!args.cancel) {
                        if (grid.editModule) {
                            if (col.type === 'number') {
                                this.parent.editModule.updateCell(rIdx, col.field, parseFloat(args.data));
                            }
                            else {
                                grid.editModule.updateCell(rIdx, col.field, args.data);
                            }
                        }
                    }
                }
                cIdx++;
            }
            rIdx++;
        }
        grid.selectionModule.selectCellsByRange({ rowIndex: rowIndex, cellIndex: colIndex }, { rowIndex: rIdx - 1, cellIndex: cIdx - 1 });
        const cell = this.parent.getCellFromIndex(rIdx - 1, cIdx - 1);
        if (cell) {
            classList(cell, ['e-focus', 'e-focused'], []);
        }
    }
    initialEnd() {
        this.parent.off(contentReady, this.initialEnd);
        this.clipBoardTextArea = this.parent.createElement('textarea', {
            className: 'e-clipboard',
            styles: 'opacity: 0',
            attrs: { tabindex: '-1', 'aria-label': 'clipboard' }
        });
        this.parent.element.appendChild(this.clipBoardTextArea);
    }
    keyDownHandler(e) {
        if (e.action === 'ctrlPlusC') {
            this.copy();
        }
        else if (e.action === 'ctrlShiftPlusH') {
            this.copy(true);
        }
    }
    setCopyData(withHeader) {
        if (window.getSelection().toString() === '') {
            const isFrozen = this.parent.isFrozenGrid();
            this.clipBoardTextArea.value = this.copyContent = '';
            let mRows;
            let frRows;
            const rows = this.parent.getRows();
            if (isFrozen) {
                mRows = this.parent.getMovableDataRows();
                if (this.parent.getFrozenMode() === leftRight) {
                    frRows = this.parent.getFrozenRightRows();
                }
            }
            if (this.parent.selectionSettings.mode !== 'Cell') {
                const selectedIndexes = this.parent.getSelectedRowIndexes().sort((a, b) => { return a - b; });
                if (withHeader) {
                    const headerTextArray = [];
                    for (let i = 0; i < this.parent.getVisibleColumns().length; i++) {
                        headerTextArray[i] = this.parent.getVisibleColumns()[i].headerText;
                    }
                    this.getCopyData(headerTextArray, false, '\t', withHeader);
                    this.copyContent += '\n';
                }
                for (let i = 0; i < selectedIndexes.length; i++) {
                    if (i > 0) {
                        this.copyContent += '\n';
                    }
                    const cells = [].slice.call(rows[selectedIndexes[i]].
                        querySelectorAll('.e-rowcell:not(.e-hide)'));
                    if (isFrozen) {
                        cells.push(...[].slice.call(mRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));
                        if (frRows) {
                            cells.push(...[].slice.call(frRows[selectedIndexes[i]].querySelectorAll('.e-rowcell:not(.e-hide)')));
                        }
                    }
                    this.getCopyData(cells, false, '\t', withHeader);
                }
            }
            else {
                const obj = this.checkBoxSelection();
                if (obj.status) {
                    if (withHeader) {
                        const headers = [];
                        for (let i = 0; i < obj.colIndexes.length; i++) {
                            headers.push(this.parent.getColumnHeaderByIndex(obj.colIndexes[i]));
                        }
                        this.getCopyData(headers, false, '\t', withHeader);
                        this.copyContent += '\n';
                    }
                    for (let i = 0; i < obj.rowIndexes.length; i++) {
                        if (i > 0) {
                            this.copyContent += '\n';
                        }
                        const cells = [].slice.call(rows[obj.rowIndexes[i]].
                            getElementsByClassName('e-cellselectionbackground'));
                        if (isFrozen) {
                            cells.push(...[].slice.call(mRows[obj.rowIndexes[i]]
                                .getElementsByClassName('e-cellselectionbackground')));
                            if (frRows) {
                                cells.push(...[].slice.call(frRows[obj.rowIndexes[i]]
                                    .getElementsByClassName('e-cellselectionbackground')));
                            }
                        }
                        this.getCopyData(cells, false, '\t', withHeader);
                    }
                }
                else {
                    this.getCopyData([].slice.call(this.parent.element.getElementsByClassName('e-cellselectionbackground')), true, '\n', withHeader);
                }
            }
            const args = {
                data: this.copyContent,
                cancel: false
            };
            this.parent.trigger(beforeCopy, args);
            if (args.cancel) {
                return;
            }
            this.clipBoardTextArea.value = this.copyContent = args.data;
            if (!Browser.userAgent.match(/ipad|ipod|iphone/i)) {
                this.clipBoardTextArea.select();
            }
            else {
                this.clipBoardTextArea.setSelectionRange(0, this.clipBoardTextArea.value.length);
            }
            this.isSelect = true;
        }
    }
    getCopyData(cells, isCell, splitKey, withHeader) {
        const isElement = typeof cells[0] !== 'string';
        for (let j = 0; j < cells.length; j++) {
            if (withHeader && isCell) {
                const colIdx = parseInt(cells[j].getAttribute(ariaColIndex), 10);
                this.copyContent += this.parent.getColumns()[colIdx].headerText + '\n';
            }
            if (isElement) {
                if (!cells[j].classList.contains('e-hide')) {
                    this.copyContent += cells[j].innerText;
                }
            }
            else {
                this.copyContent += cells[j];
            }
            if (j < cells.length - 1) {
                this.copyContent += splitKey;
            }
        }
    }
    /**
     * Copy selected rows or cells data into clipboard.
     *
     * @returns {void}
     * @param {boolean} withHeader - Specifies whether the column header data need to be copied or not.
     */
    copy(withHeader) {
        if (document.queryCommandSupported('copy')) {
            this.setCopyData(withHeader);
            document.execCommand('copy');
            this.clipBoardTextArea.blur();
        }
        if (this.isSelect) {
            window.getSelection().removeAllRanges();
            this.isSelect = false;
        }
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'clipboard';
    }
    /**
     * To destroy the clipboard
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        this.removeEventListener();
        if (this.clipBoardTextArea) {
            remove(this.clipBoardTextArea);
        }
    }
    checkBoxSelection() {
        const gridObj = this.parent;
        let obj = { status: false };
        if (gridObj.selectionSettings.mode === 'Cell') {
            const rowCellIndxes = gridObj.getSelectedRowCellIndexes();
            let str;
            const rowIndexes = [];
            let i;
            for (i = 0; i < rowCellIndxes.length; i++) {
                if (rowCellIndxes[i].cellIndexes.length) {
                    rowIndexes.push(rowCellIndxes[i].rowIndex);
                }
                if (rowCellIndxes[i].cellIndexes.length) {
                    if (!str) {
                        str = JSON.stringify(rowCellIndxes[i].cellIndexes.sort());
                    }
                    if (str !== JSON.stringify(rowCellIndxes[i].cellIndexes.sort())) {
                        break;
                    }
                }
            }
            rowIndexes.sort((a, b) => { return a - b; });
            if (i === rowCellIndxes.length && rowIndexes[rowIndexes.length - 1] - rowIndexes[0] === rowIndexes.length - 1) {
                obj = { status: true, rowIndexes: rowIndexes, colIndexes: rowCellIndxes[0].cellIndexes };
            }
        }
        return obj;
    }
}

var __decorate$1 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Grid_1;
/**
 * Represents the field name and direction of sort column.
 */
class SortDescriptor extends ChildProperty {
}
__decorate$1([
    Property()
], SortDescriptor.prototype, "field", void 0);
__decorate$1([
    Property()
], SortDescriptor.prototype, "direction", void 0);
__decorate$1([
    Property(false)
], SortDescriptor.prototype, "isFromGroup", void 0);
/**
 * Configures the sorting behavior of Grid.
 */
class SortSettings extends ChildProperty {
}
__decorate$1([
    Collection([], SortDescriptor)
], SortSettings.prototype, "columns", void 0);
__decorate$1([
    Property(true)
], SortSettings.prototype, "allowUnsort", void 0);
/**
 * Represents the predicate for the filter column.
 */
class Predicate$1 extends ChildProperty {
}
__decorate$1([
    Property()
], Predicate$1.prototype, "field", void 0);
__decorate$1([
    Property()
], Predicate$1.prototype, "operator", void 0);
__decorate$1([
    Property()
], Predicate$1.prototype, "value", void 0);
__decorate$1([
    Property()
], Predicate$1.prototype, "matchCase", void 0);
__decorate$1([
    Property(false)
], Predicate$1.prototype, "ignoreAccent", void 0);
__decorate$1([
    Property()
], Predicate$1.prototype, "predicate", void 0);
__decorate$1([
    Property({})
], Predicate$1.prototype, "actualFilterValue", void 0);
__decorate$1([
    Property({})
], Predicate$1.prototype, "actualOperator", void 0);
__decorate$1([
    Property()
], Predicate$1.prototype, "type", void 0);
__decorate$1([
    Property()
], Predicate$1.prototype, "ejpredicate", void 0);
__decorate$1([
    Property()
], Predicate$1.prototype, "uid", void 0);
__decorate$1([
    Property()
], Predicate$1.prototype, "isForeignKey", void 0);
/**
 * Configures the infinite scroll behavior of Grid.
 */
class InfiniteScrollSettings extends ChildProperty {
}
__decorate$1([
    Property(false)
], InfiniteScrollSettings.prototype, "enableCache", void 0);
__decorate$1([
    Property(3)
], InfiniteScrollSettings.prototype, "maxBlocks", void 0);
__decorate$1([
    Property(3)
], InfiniteScrollSettings.prototype, "initialBlocks", void 0);
/**
 * Configures the filtering behavior of the Grid.
 */
class FilterSettings extends ChildProperty {
}
__decorate$1([
    Collection([], Predicate$1)
], FilterSettings.prototype, "columns", void 0);
__decorate$1([
    Property('FilterBar')
], FilterSettings.prototype, "type", void 0);
__decorate$1([
    Property()
], FilterSettings.prototype, "mode", void 0);
__decorate$1([
    Property(true)
], FilterSettings.prototype, "showFilterBarStatus", void 0);
__decorate$1([
    Property(1500)
], FilterSettings.prototype, "immediateModeDelay", void 0);
__decorate$1([
    Property()
], FilterSettings.prototype, "operators", void 0);
__decorate$1([
    Property(false)
], FilterSettings.prototype, "ignoreAccent", void 0);
__decorate$1([
    Property(false)
], FilterSettings.prototype, "enableCaseSensitivity", void 0);
__decorate$1([
    Property(false)
], FilterSettings.prototype, "showFilterBarOperator", void 0);
/**
 * Configures the selection behavior of the Grid.
 */
class SelectionSettings extends ChildProperty {
}
__decorate$1([
    Property('Row')
], SelectionSettings.prototype, "mode", void 0);
__decorate$1([
    Property('Flow')
], SelectionSettings.prototype, "cellSelectionMode", void 0);
__decorate$1([
    Property('Single')
], SelectionSettings.prototype, "type", void 0);
__decorate$1([
    Property(false)
], SelectionSettings.prototype, "checkboxOnly", void 0);
__decorate$1([
    Property(false)
], SelectionSettings.prototype, "persistSelection", void 0);
__decorate$1([
    Property('Default')
], SelectionSettings.prototype, "checkboxMode", void 0);
__decorate$1([
    Property(false)
], SelectionSettings.prototype, "enableSimpleMultiRowSelection", void 0);
__decorate$1([
    Property(true)
], SelectionSettings.prototype, "enableToggle", void 0);
__decorate$1([
    Property(false)
], SelectionSettings.prototype, "allowColumnSelection", void 0);
/**
 * Configures the search behavior of the Grid.
 */
class SearchSettings extends ChildProperty {
}
__decorate$1([
    Property([])
], SearchSettings.prototype, "fields", void 0);
__decorate$1([
    Property('')
], SearchSettings.prototype, "key", void 0);
__decorate$1([
    Property('contains')
], SearchSettings.prototype, "operator", void 0);
__decorate$1([
    Property(true)
], SearchSettings.prototype, "ignoreCase", void 0);
__decorate$1([
    Property(false)
], SearchSettings.prototype, "ignoreAccent", void 0);
/**
 * Configures the row drop settings of the Grid.
 */
class RowDropSettings extends ChildProperty {
}
__decorate$1([
    Property()
], RowDropSettings.prototype, "targetID", void 0);
/**
 * Configures the text wrap settings of the Grid.
 */
class TextWrapSettings extends ChildProperty {
}
__decorate$1([
    Property('Both')
], TextWrapSettings.prototype, "wrapMode", void 0);
/**
 * Configures the resize behavior of the Grid.
 */
class ResizeSettings extends ChildProperty {
}
__decorate$1([
    Property('Normal')
], ResizeSettings.prototype, "mode", void 0);
/**
 * Configures the group behavior of the Grid.
 */
class GroupSettings extends ChildProperty {
}
__decorate$1([
    Property(true)
], GroupSettings.prototype, "showDropArea", void 0);
__decorate$1([
    Property(false)
], GroupSettings.prototype, "allowReordering", void 0);
__decorate$1([
    Property(false)
], GroupSettings.prototype, "showToggleButton", void 0);
__decorate$1([
    Property(false)
], GroupSettings.prototype, "showGroupedColumn", void 0);
__decorate$1([
    Property(true)
], GroupSettings.prototype, "showUngroupButton", void 0);
__decorate$1([
    Property(false)
], GroupSettings.prototype, "disablePageWiseAggregates", void 0);
__decorate$1([
    Property([])
], GroupSettings.prototype, "columns", void 0);
__decorate$1([
    Property()
], GroupSettings.prototype, "captionTemplate", void 0);
__decorate$1([
    Property(false)
], GroupSettings.prototype, "enableLazyLoading", void 0);
/**
 * Configures the edit behavior of the Grid.
 */
class EditSettings extends ChildProperty {
}
__decorate$1([
    Property(false)
], EditSettings.prototype, "allowAdding", void 0);
__decorate$1([
    Property(false)
], EditSettings.prototype, "allowEditing", void 0);
__decorate$1([
    Property(false)
], EditSettings.prototype, "allowDeleting", void 0);
__decorate$1([
    Property('Normal')
], EditSettings.prototype, "mode", void 0);
__decorate$1([
    Property(true)
], EditSettings.prototype, "allowEditOnDblClick", void 0);
__decorate$1([
    Property(true)
], EditSettings.prototype, "showConfirmDialog", void 0);
__decorate$1([
    Property(false)
], EditSettings.prototype, "showDeleteConfirmDialog", void 0);
__decorate$1([
    Property('')
], EditSettings.prototype, "template", void 0);
__decorate$1([
    Property('')
], EditSettings.prototype, "headerTemplate", void 0);
__decorate$1([
    Property('')
], EditSettings.prototype, "footerTemplate", void 0);
__decorate$1([
    Property('Top')
], EditSettings.prototype, "newRowPosition", void 0);
__decorate$1([
    Property({})
], EditSettings.prototype, "dialog", void 0);
__decorate$1([
    Property(false)
], EditSettings.prototype, "allowNextRowEdit", void 0);
/**
 * Represents the Grid component.
 * ```html
 * <div id="grid"></div>
 * <script>
 *  var gridObj = new Grid({ allowPaging: true });
 *  gridObj.appendTo("#grid");
 * </script>
 * ```
 */
let Grid = Grid_1 = class Grid extends Component {
    /**
     * Constructor for creating the component
     *
     * @param {GridModel} options - specifies the options
     * @param {string | HTMLElement} element - specifies the element
     * @hidden
     */
    constructor(options, element) {
        super(options, element);
        this.isPreventScrollEvent = false;
        this.inViewIndexes = [];
        this.keyA = false;
        this.frozenRightCount = 0;
        this.frozenLeftCount = 0;
        this.tablesCount = 1;
        this.movableCount = 0;
        this.visibleFrozenLeft = 0;
        this.visibleFrozenRight = 0;
        this.visibleMovable = 0;
        this.frozenLeftColumns = [];
        this.frozenRightColumns = [];
        this.movableColumns = [];
        this.media = {};
        this.isFreezeRefresh = false;
        /** @hidden */
        this.tableIndex = 0;
        this.componentRefresh = Component.prototype.refresh;
        /** @hidden */
        this.isVirtualAdaptive = false;
        /** @hidden */
        this.vRows = [];
        /** @hidden */
        this.vcRows = [];
        /** @hidden */
        this.vGroupOffsets = {};
        /** @hidden */
        this.rowUid = 0;
        /**
         * Gets the currently visible records of the Grid.
         */
        this.currentViewData = [];
        /** @hidden */
        this.isManualRefresh = false;
        /** @hidden */
        this.isAutoFitColumns = false;
        /** @hidden */
        this.enableDeepCompare = false;
        /** @hidden */
        this.lockcolPositionCount = 0;
        /** @hidden */
        this.prevPageMoving = false;
        /** @hidden */
        this.pageTemplateChange = false;
        /** @hidden */
        this.isAutoGen = false;
        this.mediaBindInstance = {};
        /** @hidden */
        this.commandDelIndex = undefined;
        /** @hidden */
        this.asyncTimeOut = 50;
        /** @hidden */
        this.isExportGrid = false;
        // enable/disable logger for MVC & Core
        this.enableLogger = true;
        this.needsID = true;
        Grid_1.Inject(Selection);
        setValue('mergePersistData', this.mergePersistGridData, this);
    }
    /**
     * Get the properties to be maintained in the persisted state.
     *
     * @returns {string} returns the persist data
     */
    getPersistData() {
        const keyEntity = ['pageSettings', 'sortSettings',
            'filterSettings', 'groupSettings', 'columns', 'searchSettings', 'selectedRowIndex', 'scrollPosition'];
        const ignoreOnPersist = {
            pageSettings: ['template', 'pageSizes', 'enableQueryString', 'totalRecordsCount', 'pageCount'],
            filterSettings: ['type', 'mode', 'showFilterBarStatus', 'immediateModeDelay', 'ignoreAccent'],
            groupSettings: ['showDropArea', 'showToggleButton', 'showGroupedColumn', 'showUngroupButton',
                'disablePageWiseAggregates', 'hideCaptionCount'],
            searchSettings: ['fields', 'operator', 'ignoreCase'],
            sortSettings: [], columns: [], selectedRowIndex: [], scrollPosition: []
        };
        for (let i = 0; i < keyEntity.length; i++) {
            const currentObject = this[keyEntity[i]];
            for (const val of ignoreOnPersist[keyEntity[i]]) {
                delete currentObject[val];
            }
        }
        const temp = this.pageSettings.template;
        const settings = Object.assign({ template: undefined }, this.pageSettings);
        this.setProperties({ pageSettings: settings }, true);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (this.isAngular) {
            delete this.groupSettings['properties']['captionTemplate'];
        }
        this.pageTemplateChange = !isNullOrUndefined(this.pagerTemplate);
        const persistData = this.addOnPersist(keyEntity);
        settings.template = temp;
        this.setProperties({ pageSettings: settings }, true);
        return persistData;
    }
    /**
     * To provide the array of modules needed for component rendering
     *
     * @returns {ModuleDeclaration[]} Returns the module Declaration
     * @hidden
     */
    requiredModules() {
        this.setFrozenCount();
        this.enableInfiniteAggrgate();
        const modules = [];
        if (this.isDestroyed) {
            return modules;
        }
        if (this.allowFiltering) {
            modules.push({
                member: 'filter',
                args: [this, this.filterSettings, this.serviceLocator]
            });
        }
        if (this.allowExcelExport) {
            modules.push({
                member: 'ExcelExport',
                args: [this, this.serviceLocator]
            });
        }
        if (this.allowPdfExport) {
            modules.push({
                member: 'PdfExport',
                args: [this]
            });
        }
        if (this.allowSorting) {
            modules.push({
                member: 'sort',
                args: [this, this.sortSettings, this.sortedColumns, this.serviceLocator]
            });
        }
        if (this.allowPaging) {
            modules.push({
                member: 'pager',
                args: [this, this.pageSettings]
            });
        }
        if (this.allowSelection) {
            modules.push({
                member: 'selection',
                args: [this, this.selectionSettings, this.serviceLocator]
            });
        }
        modules.push({
            member: 'resize',
            args: [this]
        });
        if (this.allowReordering) {
            modules.push({
                member: 'reorder',
                args: [this]
            });
        }
        if (this.allowRowDragAndDrop) {
            modules.push({
                member: 'rowDragAndDrop',
                args: [this]
            });
        }
        if (this.allowGrouping) {
            modules.push({
                member: 'group',
                args: [this, this.groupSettings, this.sortedColumns, this.serviceLocator]
            });
        }
        if (this.aggregates.length) {
            modules.push({ member: 'aggregate', args: [this, this.serviceLocator] });
        }
        if (this.isDetail()) {
            modules.push({
                member: 'detailRow',
                args: [this, this.serviceLocator]
            });
        }
        if (this.toolbar || this.toolbarTemplate) {
            modules.push({
                member: 'toolbar',
                args: [this, this.serviceLocator]
            });
        }
        if (this.enableVirtualization || this.enableColumnVirtualization) {
            modules.push({
                member: 'virtualscroll',
                args: [this, this.serviceLocator]
            });
        }
        if (this.getFrozenColumns() || this.frozenRows || this.frozenRightCount || this.frozenLeftCount) {
            modules.push({ member: 'freeze', args: [this, this.serviceLocator] });
        }
        if (this.isCommandColumn(this.columns)) {
            modules.push({
                member: 'commandColumn',
                args: [this, this.serviceLocator]
            });
        }
        if (this.editSettings.allowAdding || this.editSettings.allowDeleting || this.editSettings.allowEditing) {
            modules.push({
                member: 'edit',
                args: [this, this.serviceLocator]
            });
        }
        this.extendRequiredModules(modules);
        return modules;
    }
    extendRequiredModules(modules) {
        if (this.enableInfiniteScrolling) {
            modules.push({
                member: 'infiniteScroll',
                args: [this, this.serviceLocator]
            });
        }
        if (this.groupSettings.enableLazyLoading) {
            modules.push({
                member: 'lazyLoadGroup',
                args: [this, this.serviceLocator]
            });
        }
        if (this.contextMenuItems) {
            modules.push({
                member: 'contextMenu',
                args: [this, this.serviceLocator]
            });
        }
        if (this.showColumnMenu) {
            modules.push({
                member: 'columnMenu',
                args: [this, this.serviceLocator]
            });
        }
        if (this.showColumnChooser) {
            modules.push({
                member: 'columnChooser',
                args: [this, this.serviceLocator]
            });
        }
        if (this.isForeignKeyEnabled(this.columns)) {
            modules.push({ member: 'foreignKey', args: [this, this.serviceLocator] });
        }
        if (this.enableLogger) {
            modules.push({ member: 'logger', args: [this] });
        }
    }
    /**
     * For internal use only - Initialize the event handler;
     *
     * @returns {void}
     * @private
     */
    preRender() {
        this.serviceLocator = new ServiceLocator;
        this.initProperties();
        this.initializeServices();
    }
    initProperties() {
        this.isInitial = true;
        this.sortedColumns = [];
        this.inViewIndexes = [];
        this.mediaCol = [];
        this.isInitialLoad = false;
        this.allowServerDataBinding = false;
        this.ignoreCollectionWatch = true;
        this.mergeCells = {};
        this.isEdit = false;
        this.checkAllRows = 'None';
        this.isCheckBoxSelection = false;
        this.isPersistSelection = false;
        this.componentRefresh = Component.prototype.refresh;
        this.filterOperators = {
            contains: 'contains', endsWith: 'endswith', equal: 'equal', greaterThan: 'greaterthan', greaterThanOrEqual: 'greaterthanorequal',
            lessThan: 'lessthan', lessThanOrEqual: 'lessthanorequal', notEqual: 'notequal', startsWith: 'startswith'
        };
        this.defaultLocale = {
            EmptyRecord: 'No records to display',
            True: 'true',
            False: 'false',
            InvalidFilterMessage: 'Invalid Filter Data',
            GroupDropArea: 'Drag a column header here to group its column',
            UnGroup: 'Click here to ungroup',
            UnGroupButton: 'Click here to ungroup',
            GroupDisable: 'Grouping is disabled for this column',
            FilterbarTitle: '\'s filter bar cell',
            EmptyDataSourceError: 'DataSource must not be empty at initial load since columns are generated from dataSource in AutoGenerate Column Grid',
            // Toolbar Items
            Add: 'Add',
            Edit: 'Edit',
            Cancel: 'Cancel',
            Update: 'Update',
            Delete: 'Delete',
            Print: 'Print',
            Pdfexport: 'PDF Export',
            Excelexport: 'Excel Export',
            Wordexport: 'Word Export',
            Csvexport: 'CSV Export',
            Search: 'Search',
            Columnchooser: 'Columns',
            Save: 'Save',
            Item: 'item',
            Items: 'items',
            EditOperationAlert: 'No records selected for edit operation',
            DeleteOperationAlert: 'No records selected for delete operation',
            SaveButton: 'Save',
            OKButton: 'OK',
            CancelButton: 'Cancel',
            EditFormTitle: 'Details of ',
            AddFormTitle: 'Add New Record',
            BatchSaveConfirm: 'Are you sure you want to save changes?',
            BatchSaveLostChanges: 'Unsaved changes will be lost. Are you sure you want to continue?',
            ConfirmDelete: 'Are you sure you want to Delete Record?',
            CancelEdit: 'Are you sure you want to Cancel the changes?',
            ChooseColumns: 'Choose Column',
            SearchColumns: 'search columns',
            Matchs: 'No matches found',
            FilterButton: 'Filter',
            ClearButton: 'Clear',
            StartsWith: 'Starts With',
            EndsWith: 'Ends With',
            Contains: 'Contains',
            Equal: 'Equal',
            NotEqual: 'Not Equal',
            LessThan: 'Less Than',
            LessThanOrEqual: 'Less Than Or Equal',
            GreaterThan: 'Greater Than',
            GreaterThanOrEqual: 'Greater Than Or Equal',
            ChooseDate: 'Choose a Date',
            EnterValue: 'Enter the value',
            Copy: 'Copy',
            Group: 'Group by this column',
            Ungroup: 'Ungroup by this column',
            autoFitAll: 'Autofit all columns',
            autoFit: 'Autofit this column',
            AutoFitAll: 'Autofit all columns',
            AutoFit: 'Autofit this column',
            Export: 'Export',
            FirstPage: 'First Page',
            LastPage: 'Last Page',
            PreviousPage: 'Previous Page',
            NextPage: 'Next Page',
            SortAscending: 'Sort Ascending',
            SortDescending: 'Sort Descending',
            EditRecord: 'Edit Record',
            DeleteRecord: 'Delete Record',
            FilterMenu: 'Filter',
            SelectAll: 'Select All',
            Blanks: 'Blanks',
            FilterTrue: 'True',
            FilterFalse: 'False',
            NoResult: 'No matches found',
            ClearFilter: 'Clear Filter',
            Clear: 'Clear',
            NumberFilter: 'Number Filters',
            TextFilter: 'Text Filters',
            DateFilter: 'Date Filters',
            DateTimeFilter: 'DateTime Filters',
            MatchCase: 'Match Case',
            Between: 'Between',
            CustomFilter: 'Custom Filter',
            CustomFilterPlaceHolder: 'Enter the value',
            CustomFilterDatePlaceHolder: 'Choose a date',
            AND: 'AND',
            OR: 'OR',
            ShowRowsWhere: 'Show rows where:',
            FilterMenuDialogARIA: 'Filter menu dialog',
            ExcelFilterDialogARIA: 'Excel filter dialog',
            DialogEditARIA: 'Edit dialog',
            ColumnChooserDialogARIA: 'Column chooser dialog',
            ColumnMenuDialogARIA: 'Column menu dialog',
            CustomFilterDialogARIA: 'Customer filter dialog',
            SortAtoZ: 'Sort A to Z',
            SortZtoA: 'Sort Z to A',
            SortByOldest: 'Sort by Oldest',
            SortByNewest: 'Sort by Newest',
            SortSmallestToLargest: 'Sort Smallest to Largest',
            SortLargestToSmallest: 'Sort Largest to Smallest',
            Sort: 'Sort'
        };
        this.keyConfigs = {
            downArrow: 'downarrow',
            upArrow: 'uparrow',
            rightArrow: 'rightarrow',
            leftArrow: 'leftarrow',
            shiftDown: 'shift+downarrow',
            shiftUp: 'shift+uparrow',
            shiftRight: 'shift+rightarrow',
            shiftLeft: 'shift+leftarrow',
            home: 'home',
            end: 'end',
            escape: 'escape',
            ctrlHome: 'ctrl+home',
            ctrlEnd: 'ctrl+end',
            pageUp: 'pageup',
            pageDown: 'pagedown',
            ctrlAltPageUp: 'ctrl+alt+pageup',
            ctrlAltPageDown: 'ctrl+alt+pagedown',
            altPageUp: 'alt+pageup',
            altPageDown: 'alt+pagedown',
            altDownArrow: 'alt+downarrow',
            altUpArrow: 'alt+uparrow',
            ctrlDownArrow: 'ctrl+downarrow',
            ctrlUpArrow: 'ctrl+uparrow',
            ctrlPlusA: 'ctrl+A',
            ctrlPlusP: 'ctrl+P',
            insert: 'insert',
            delete: 'delete',
            f2: 'f2',
            enter: 'enter',
            ctrlEnter: 'ctrl+enter',
            shiftEnter: 'shift+enter',
            tab: 'tab',
            shiftTab: 'shift+tab',
            space: 'space',
            ctrlPlusC: 'ctrl+C',
            ctrlShiftPlusH: 'ctrl+shift+H',
            ctrlSpace: 'ctrl+space',
            ctrlLeftArrow: 'ctrl+leftarrow',
            ctrlRightArrow: 'ctrl+rightarrow'
        };
    }
    /**
     * For internal use only - To Initialize the component rendering.
     *
     * @returns {void}
     * @private
     */
    render() {
        this.log(['module_missing', 'promise_enabled', 'locale_missing', 'check_datasource_columns']);
        this.ariaService.setOptions(this.element, { datarole: 'grid' });
        createSpinner({ target: this.element }, this.createElement);
        this.renderModule = new Render(this, this.serviceLocator);
        this.searchModule = new Search(this);
        this.scrollModule = new Scroll(this);
        this.notify(initialLoad, {});
        if (this.getDataModule().dataManager.dataSource.offline === true || this.getDataModule().dataManager.dataSource.url === undefined) {
            this.isVirtualAdaptive = true;
        }
        this.trigger(load);
        prepareColumns(this.columns, this.enableColumnVirtualization, this);
        if (this.enablePersistence) {
            this.notify(columnsPrepared, {});
        }
        this.getMediaColumns();
        setColumnIndex(this.columns);
        this.checkLockColumns(this.columns);
        this.getColumns();
        this.processModel();
        this.gridRender();
        this.wireEvents();
        this.addListener();
        this.updateDefaultCursor();
        this.updateStackedFilter();
        this.showSpinner();
        this.notify(initialEnd, {});
        if (this.refreshing) {
            this.trigger('created');
        }
    }
    /**
     * By default, grid shows the spinner for all its actions. You can use this method to show spinner at your needed time.
     *
     * @returns {void}
     */
    showSpinner() {
        if (!this.isExportGrid) {
            showSpinner(this.element);
        }
    }
    /**
     * By default, grid shows the spinner for all its actions. You can use this method to show spinner at your needed time.
     *
     * @returns {void}
     */
    hideSpinner() {
        if (!this.isExportGrid) {
            hideSpinner(this.element);
        }
    }
    updateStackedFilter() {
        if (this.allowFiltering && this.filterSettings.type === 'FilterBar' &&
            this.getHeaderContent().getElementsByClassName('e-stackedheadercell').length) {
            this.getHeaderContent().classList.add('e-stackedfilter');
        }
        else {
            this.getHeaderContent().classList.remove('e-stackedfilter');
        }
    }
    getMediaColumns() {
        if (!this.enableColumnVirtualization) {
            const gcol = this.getColumns();
            this.getShowHideService = this.serviceLocator.getService('showHideService');
            if (!isNullOrUndefined(gcol)) {
                for (let index = 0; index < gcol.length; index++) {
                    if (!isNullOrUndefined(gcol[index].hideAtMedia) && (isNullOrUndefined(gcol[index].visible) || gcol[index].visible)) {
                        this.pushMediaColumn(gcol[index], index);
                    }
                }
            }
        }
    }
    pushMediaColumn(col, index) {
        this.mediaCol.push(col);
        this.media[col.uid] = window.matchMedia(col.hideAtMedia);
        this.mediaQueryUpdate(index, this.media[col.uid]);
        this.mediaBindInstance[index] = this.mediaQueryUpdate.bind(this, index);
        this.media[col.uid].addListener(this.mediaBindInstance[index]);
    }
    /**
     * @param {Column} col - specifies the column
     * @returns {void}
     * @hidden
     */
    updateMediaColumns(col) {
        if (!this.enableColumnVirtualization) {
            const index = this.getColumnIndexByUid(col.uid);
            for (let i = 0; i < this.mediaCol.length; i++) {
                if (col.uid === this.mediaCol[i].uid) {
                    this.mediaCol.splice(i, 1);
                    return;
                }
            }
            this.pushMediaColumn(col, index);
        }
    }
    /**
     * @param {number} columnIndex - specifies the column index
     * @param {MediaQueryList} e - specifies the MediaQueryList
     * @returns {void}
     * @hidden
     */
    mediaQueryUpdate(columnIndex, e) {
        const col = this.getColumns()[columnIndex];
        if (this.mediaCol.some((mediaColumn) => mediaColumn.uid === col.uid)) {
            col.visible = e.matches;
            if (this.isInitialLoad) {
                this.invokedFromMedia = true;
                if (col.visible) {
                    this.showHider.show(col.headerText, 'headerText');
                }
                else {
                    this.showHider.hide(col.headerText, 'headerText');
                }
            }
        }
    }
    refreshMediaCol() {
        this.isInitialLoad = true;
        const footerContent = this.element.querySelector('.' + gridFooter);
        if (this.aggregates.length && this.element.scrollHeight > this.height && footerContent) {
            addClass([footerContent], ['e-footerpadding']);
        }
        const checkboxColumn = this.getColumns().filter((col) => col.type === 'checkbox');
        if (checkboxColumn.length && this.selectionSettings.checkboxMode === 'ResetOnRowClick') {
            this.isCheckBoxSelection = false;
        }
        if (this.rowRenderingMode === 'Vertical') {
            if (this.enableHover) {
                this.setProperties({ enableAdaptiveUI: true, enableHover: false }, true);
                removeClass([this.element], 'e-gridhover');
            }
        }
        if (this.enableAdaptiveUI && this.scrollModule) {
            this.scrollModule.refresh();
        }
    }
    removeMediaListener() {
        for (let i = 0; i < this.mediaCol.length; i++) {
            this.media[this.mediaCol[i].uid].removeListener(this.mediaBindInstance[this.mediaCol[i].index]);
        }
    }
    /**
     * For internal use only - Initialize the event handler
     *
     * @returns {void}
     * @private
     */
    eventInitializer() {
        //eventInitializer
    }
    /**
     * Destroys the component (detaches/removes all event handlers, attributes, classes, and empties the component element).
     *
     * @function destroy
     * @returns {void}
     */
    destroy() {
        const gridElement = this.element;
        if (!gridElement) {
            return;
        }
        const hasGridChild = gridElement.querySelector('.' + gridHeader) &&
            gridElement.querySelector('.' + gridContent) ? true : false;
        if (hasGridChild) {
            this.unwireEvents();
        }
        this.removeListener();
        this.removeMediaListener();
        this.notify(destroy, {});
        this.destroyDependentModules();
        if (this.isReact || this.isVue) {
            this.destroyTemplate(['template']);
        }
        if (hasGridChild) {
            super.destroy();
        }
        this.toolTipObj.destroy();
        if (this.isReact && !Browser.isIE) {
            this.element.innerHTML = '';
        }
        const modules = ['renderModule', 'headerModule', 'contentModule', 'valueFormatterService',
            'serviceLocator', 'ariaService', 'keyboardModule', 'widthService', 'searchModule', 'showHider',
            'scrollModule', 'printModule', 'clipboardModule', 'focusModule'];
        for (let i = 0; i < modules.length; i++) {
            if (this[modules[i]]) {
                this[modules[i]] = null;
            }
        }
        this.element.innerHTML = '';
        classList(this.element, [], ['e-rtl', 'e-gridhover', 'e-responsive', 'e-default', 'e-device', 'e-grid-min-height']);
        this.isFreezeRefresh = false;
    }
    destroyDependentModules() {
        const gridElement = this.element;
        if (!gridElement || (!gridElement.querySelector('.' + gridHeader) && !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        this.scrollModule.destroy();
        this.keyboardModule.destroy();
        this.focusModule.destroy();
        this.clipboardModule.destroy();
        this.printModule.destroy();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'grid';
    }
    enableBoxSelection() {
        if (this.enableAutoFill) {
            this.selectionSettings.cellSelectionMode = 'BoxWithBorder';
            this.element.classList.add('e-afenabled');
        }
        else {
            this.element.classList.remove('e-afenabled');
        }
    }
    /**
     * Called internally if any of the property value changed.
     *
     * @param {GridModel} newProp - Defines new properties
     * @param {GridModel} oldProp - Defines old properties
     * @returns {void}
     * @hidden
     */
    onPropertyChanged(newProp, oldProp) {
        let requireRefresh = false;
        let requireGridRefresh = false;
        let freezeRefresh$$1 = false;
        let checkCursor;
        const args = { requestType: 'refresh' };
        if (this.isDestroyed) {
            return;
        }
        this.log('module_missing');
        if (this.isEllipsisTooltip()) {
            this.toolTipObj.close();
        }
        const properties = Object.keys(newProp);
        if (properties.indexOf('columns') > -1) {
            if (this.enableColumnVirtualization) {
                this.columnModel = [];
            }
            this.updateColumnObject();
            requireGridRefresh = true;
        }
        for (const prop of properties) {
            switch (prop) {
                case 'allowPaging':
                    this.notify(uiUpdate, { module: 'pager', enable: this.allowPaging });
                    requireRefresh = true;
                    break;
                case 'pageSettings':
                    if (this.pageTemplateChange) {
                        this.pageTemplateChange = false;
                        this.notify(inBoundModelChanged, { module: 'pager', properties: newProp.pageSettings });
                        break;
                    }
                    this.notify(inBoundModelChanged, { module: 'pager', properties: newProp.pageSettings });
                    if (isNullOrUndefined(newProp.pageSettings.currentPage) && isNullOrUndefined(newProp.pageSettings.pageSize)
                        && isNullOrUndefined(newProp.pageSettings.totalRecordsCount)
                        || !isNullOrUndefined(oldProp.pageSettings) &&
                            ((newProp.pageSettings.currentPage !== oldProp.pageSettings.currentPage)
                                && !this.enableColumnVirtualization && !this.enableVirtualization
                                && this.pageSettings.totalRecordsCount <= this.pageSettings.pageSize)) {
                        requireRefresh = true;
                    }
                    break;
                case 'allowSorting':
                    this.notify(uiUpdate, { module: 'sort', enable: this.allowSorting });
                    requireRefresh = true;
                    checkCursor = true;
                    break;
                case 'allowFiltering':
                    this.updateStackedFilter();
                    this.notify(uiUpdate, { module: 'filter', enable: this.allowFiltering });
                    requireRefresh = true;
                    if (this.filterSettings.type !== 'FilterBar') {
                        this.refreshHeader();
                    }
                    break;
                case 'height':
                case 'width':
                    this.notify(uiUpdate, { module: 'scroll', properties: { width: newProp.width, height: newProp.height } });
                    break;
                case 'allowReordering':
                    this.headerModule.refreshUI();
                    checkCursor = true;
                    break;
                case 'allowRowDragAndDrop':
                    this.notify(uiUpdate, { module: 'rowDragAndDrop', enable: this.allowRowDragAndDrop });
                    this.renderModule.refresh();
                    this.headerModule.refreshUI();
                    break;
                case 'allowSelection':
                    this.notify(uiUpdate, { module: 'selection', enable: this.allowSelection });
                    break;
                case 'enableAutoFill':
                    if (this.selectionModule) {
                        this.enableBoxSelection();
                        this.selectionModule.updateAutoFillPosition();
                    }
                    break;
                case 'rowTemplate':
                    this.rowTemplateFn = templateCompiler(this.rowTemplate);
                    requireRefresh = true;
                    break;
                case 'detailTemplate':
                    this.detailTemplateFn = templateCompiler(this.detailTemplate);
                    requireRefresh = true;
                    break;
                case 'allowGrouping':
                    this.notify(uiUpdate, { module: 'group', enable: this.allowGrouping });
                    this.headerModule.refreshUI();
                    requireRefresh = true;
                    checkCursor = true;
                    break;
                case 'enableInfiniteScrolling':
                case 'childGrid':
                    requireRefresh = true;
                    break;
                case 'toolbar':
                    this.notify(uiUpdate, { module: 'toolbar' });
                    break;
                case 'groupSettings':
                    this.notify(inBoundModelChanged, {
                        module: 'group', properties: newProp.groupSettings,
                        oldProperties: oldProp.groupSettings
                    });
                    break;
                case 'aggregates':
                    if (!this.aggregates.length && this.allowGrouping && this.groupSettings.columns.length) {
                        requireRefresh = true;
                    }
                    this.notify(uiUpdate, { module: 'aggregate', properties: newProp });
                    break;
                case 'frozenColumns':
                case 'frozenRows':
                case 'enableVirtualization':
                case 'currencyCode':
                case 'locale':
                    this.log('frozen_rows_columns');
                    freezeRefresh$$1 = true;
                    requireGridRefresh = true;
                    break;
                case 'query':
                    if (!this.getDataModule().isQueryInvokedFromData) {
                        requireRefresh = true;
                    }
                    this.getDataModule().isQueryInvokedFromData = false;
                    break;
                default:
                    this.extendedPropertyChange(prop, newProp, requireGridRefresh);
            }
        }
        if (checkCursor) {
            this.updateDefaultCursor();
        }
        if (requireGridRefresh) {
            if (freezeRefresh$$1 || this.getFrozenColumns() || this.frozenRows) {
                this.freezeRefresh();
            }
            else {
                this.refresh();
            }
        }
        else if (requireRefresh) {
            this.notify(modelChanged, args);
            requireRefresh = false;
            this.maintainSelection(newProp.selectedRowIndex);
        }
    }
    extendedPropertyChange(prop, newProp, requireGridRefresh) {
        switch (prop) {
            case 'enableRtl':
                this.updateRTL();
                if (this.allowPaging) {
                    this.element.querySelector('.e-gridpager').ej2_instances[0].enableRtl = newProp.enableRtl;
                    this.element.querySelector('.e-gridpager').ej2_instances[0].dataBind();
                }
                if (this.height !== 'auto') {
                    this.scrollModule.removePadding(!newProp.enableRtl);
                    this.scrollModule.setPadding();
                }
                if (this.toolbar && this.toolbarModule) {
                    this.toolbarModule.getToolbar().ej2_instances[0].enableRtl = newProp.enableRtl;
                    this.toolbarModule.getToolbar().ej2_instances[0].dataBind();
                }
                if (this.contextMenuItems && this.contextMenuModule) {
                    this.contextMenuModule.getContextMenu().ej2_instances[0].enableRtl = newProp.enableRtl;
                    this.contextMenuModule.getContextMenu().ej2_instances[0].dataBind();
                }
                if (this.showColumnMenu && this.columnMenuModule) {
                    this.columnMenuModule.getColumnMenu().ej2_instances[0].enableRtl = newProp.enableRtl;
                    this.columnMenuModule.getColumnMenu().ej2_instances[0].dataBind();
                }
                if (this.filterSettings.type === 'FilterBar' && this.filterSettings.showFilterBarOperator) {
                    this.refreshHeader();
                }
                this.notify(rtlUpdated, {});
                break;
            case 'enableAltRow':
                this.renderModule.refresh();
                break;
            case 'allowResizing':
                this.headerModule.refreshUI();
                this.updateResizeLines();
                break;
            case 'rowHeight':
                if (this.rowHeight) {
                    addClass([this.element], 'e-grid-min-height');
                }
                else {
                    removeClass([this.element], 'e-grid-min-height');
                }
                this.renderModule.refresh();
                this.headerModule.refreshUI();
                break;
            case 'gridLines':
                this.updateGridLines();
                break;
            case 'showColumnMenu':
                this.headerModule.refreshUI();
                this.notify(uiUpdate, { module: 'columnMenu', enable: true });
                break;
            case 'columnMenuItems':
                this.notify(uiUpdate, { module: 'columnMenu', enable: this.columnMenuItems });
                break;
            case 'contextMenuItems':
                this.notify(uiUpdate, { module: 'contextMenu', enable: this.contextMenuItems });
                break;
            case 'showColumnChooser':
                this.notify(uiUpdate, { module: 'columnChooser', enable: this.showColumnChooser });
                break;
            case 'filterSettings':
                this.updateStackedFilter();
                this.notify(inBoundModelChanged, { module: 'filter', properties: newProp.filterSettings });
                break;
            case 'searchSettings':
                this.notify(inBoundModelChanged, { module: 'search', properties: newProp.searchSettings });
                break;
            case 'sortSettings':
                this.notify(inBoundModelChanged, { module: 'sort' });
                break;
            case 'selectionSettings':
                this.notify(inBoundModelChanged, { module: 'selection', properties: newProp.selectionSettings });
                break;
            case 'editSettings':
                this.notify(inBoundModelChanged, { module: 'edit', properties: newProp.editSettings });
                break;
            case 'allowTextWrap':
            case 'textWrapSettings':
                if (this.allowTextWrap) {
                    this.applyTextWrap();
                }
                else {
                    this.removeTextWrap();
                }
                this.notify(freezeRender, { case: 'textwrap', isModeChg: (prop === 'textWrapSettings') });
                break;
            case 'dataSource':
                // eslint-disable-next-line no-case-declarations
                const pending = this.getDataModule().getState();
                if (Object.getPrototypeOf(newProp).deepWatch) {
                    const pKeyField = this.getPrimaryKeyFieldNames()[0];
                    for (let i = 0, props = Object.keys(newProp.dataSource); i < props.length; i++) {
                        this.setRowData(getValue(pKeyField, this.dataSource[props[i]]), this.dataSource[props[i]]);
                    }
                }
                else if (pending.isPending) {
                    let gResult = !isNullOrUndefined(this.dataSource) ? this.dataSource.result : [];
                    const names = (pending.group || []);
                    for (let i = 0; i < names.length; i++) {
                        gResult = DataUtil.group(gResult, names[i], pending.aggregates || []);
                    }
                    this.dataSource = {
                        result: gResult, count: this.dataSource.count,
                        aggregates: this.dataSource.aggregates
                    };
                    this.getDataModule().setState({});
                    pending.resolver(this.dataSource);
                }
                else {
                    this.getDataModule().setState({ isDataChanged: false });
                    this.notify(dataSourceModified, {});
                    if (!requireGridRefresh) {
                        this.renderModule.refresh();
                        if (this.isCheckBoxSelection) {
                            this.notify(beforeRefreshOnDataChange, {});
                        }
                    }
                }
                this.scrollRefresh();
                break;
            case 'enableHover':
                // eslint-disable-next-line no-case-declarations
                const action = newProp.enableHover ? addClass : removeClass;
                action([this.element], 'e-gridhover');
                break;
            case 'selectedRowIndex':
                if (!this.isSelectedRowIndexUpdating) {
                    this.selectRow(newProp.selectedRowIndex);
                }
                this.isSelectedRowIndexUpdating = false;
                break;
            case 'resizeSettings':
                this.widthService.setWidthToTable();
                break;
            case 'enableAdaptiveUI':
                this.notify(setFullScreenDialog, {});
                break;
            case 'rowRenderingMode':
                this.enableVerticalRendering();
                this.notify(rowModeChange, {});
                this.refresh();
                break;
            case 'enableStickyHeader':
                this.scrollModule.addStickyListener(newProp.enableStickyHeader);
                break;
        }
    }
    maintainSelection(index) {
        if (index !== -1) {
            const fn = () => {
                this.selectRow(index);
                this.off(contentReady, fn);
            };
            this.on(contentReady, fn, this);
        }
    }
    /**
     * @param {Object} prop - Defines the property
     * @param {boolean} muteOnChange - Defines the mute on change
     * @returns {void}
     * @private
     */
    setProperties(prop, muteOnChange) {
        super.setProperties(prop, muteOnChange);
        const filterSettings = 'filterSettings';
        if (prop[filterSettings] && this.filterModule && muteOnChange) {
            this.filterModule.refreshFilter();
        }
    }
    /**
     * @hidden
     * @returns {void}
     */
    setTablesCount() {
        const frozenCols = this.getFrozenColumns();
        const frozenLeft$$1 = this.getFrozenLeftColumnsCount();
        const frozenRight$$1 = this.getFrozenRightColumnsCount();
        if (frozenCols && !frozenLeft$$1 && !frozenRight$$1) {
            this.tablesCount = 2;
        }
        else if (!frozenCols && (frozenLeft$$1 || frozenRight$$1)) {
            if ((frozenLeft$$1 && !frozenRight$$1) || (frozenRight$$1 && !frozenLeft$$1)) {
                this.tablesCount = 2;
            }
            else if (frozenLeft$$1 && frozenRight$$1) {
                this.tablesCount = 3;
            }
        }
    }
    /**
     * @hidden
     * @returns {number} - Returns the tables count
     */
    getTablesCount() {
        return this.tablesCount;
    }
    /**
     * @hidden
     * @returns {void}
     */
    updateDefaultCursor() {
        let headerCells = [].slice.call(this.getHeaderContent().querySelectorAll('.e-headercell:not(.e-stackedheadercell)'));
        const stdHdrCell = [].slice.call(this.getHeaderContent().getElementsByClassName('e-stackedheadercell'));
        const cols = this.getColumns();
        if (this.enableColumnVirtualization && this.getFrozenColumns()) {
            const cells = this.contentModule.getHeaderCells();
            headerCells = cells.length ? cells : headerCells;
        }
        for (let i = 0; i < headerCells.length; i++) {
            const cell = headerCells[i];
            if (this.allowGrouping || this.allowReordering || this.allowSorting) {
                if (!cols[i].allowReordering || !cols[i].allowSorting || !cols[i].allowGrouping) {
                    cell.classList.add('e-defaultcursor');
                }
                else {
                    cell.classList.add('e-mousepointer');
                }
            }
        }
        for (let count = 0; count < stdHdrCell.length; count++) {
            if (this.allowReordering) {
                stdHdrCell[count].classList.add('e-mousepointer');
            }
        }
    }
    updateColumnModel(columns) {
        for (let i = 0, len = columns.length; i < len; i++) {
            if (columns[i].columns) {
                this.updateColumnModel(columns[i].columns);
            }
            else {
                this.columnModel.push(columns[i]);
            }
        }
        this.updateColumnLevelFrozen();
        this.updateFrozenColumns();
        this.updateLockableColumns();
    }
    updateColumnLevelFrozen() {
        const cols = this.columnModel;
        const leftCols = [];
        const rightCols = [];
        const movableCols = [];
        if (this.frozenLeftCount || this.frozenRightCount) {
            for (let i = 0, len = cols.length; i < len; i++) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const col = cols[i];
                if (col.freeze === 'Left') {
                    col.freezeTable = frozenLeft;
                    leftCols.push(col);
                }
                else if (col.freeze === 'Right') {
                    col.freezeTable = frozenRight;
                    rightCols.push(col);
                }
                else {
                    col.freezeTable = 'movable';
                    movableCols.push(col);
                }
            }
            this.columnModel = leftCols.concat(movableCols).concat(rightCols);
        }
    }
    updateFrozenColumns() {
        if (this.frozenLeftCount || this.frozenRightCount) {
            return;
        }
        const cols = this.columnModel;
        const directFrozenCount = this.frozenColumns;
        const totalFrozenCount = this.getFrozenColumns();
        let count = 0;
        for (let i = 0, len = cols.length; i < len; i++) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const col = cols[i];
            if (directFrozenCount) {
                if (i < directFrozenCount) {
                    col.freezeTable = frozenLeft;
                }
                else {
                    col.freezeTable = 'movable';
                }
            }
            if (col.isFrozen && i >= directFrozenCount) {
                col.freezeTable = frozenLeft;
                cols.splice(this.frozenColumns + count, 0, cols.splice(i, 1)[0]);
                count++;
            }
            else if (totalFrozenCount && !directFrozenCount) {
                col.freezeTable = 'movable';
            }
        }
    }
    getFrozenLeftCount() {
        return this.getFrozenColumns() || this.getFrozenLeftColumnsCount();
    }
    isFrozenGrid() {
        return this.getFrozenColumns() !== 0 || this.getFrozenLeftColumnsCount() !== 0 || this.getFrozenRightColumnsCount() !== 0;
    }
    getFrozenMode() {
        return this.frozenName;
    }
    updateLockableColumns() {
        const cols = this.columnModel;
        let frozenCount = 0;
        let movableCount = 0;
        const frozenColumns = this.getFrozenColumns();
        for (let i = 0; i < cols.length; i++) {
            if (cols[i].lockColumn) {
                if (i < frozenColumns) {
                    cols.splice(frozenCount, 0, cols.splice(i, 1)[0]);
                    frozenCount++;
                }
                else {
                    cols.splice(frozenColumns + movableCount, 0, cols.splice(i, 1)[0]);
                    movableCount++;
                }
            }
        }
    }
    checkLockColumns(cols) {
        for (let i = 0; i < cols.length; i++) {
            if (cols[i].columns) {
                this.checkLockColumns(cols[i].columns);
            }
            else if (cols[i].lockColumn) {
                this.lockcolPositionCount++;
            }
        }
    }
    /**
     * Gets the columns from the Grid.
     *
     * @param {boolean} isRefresh - Defines the boolean whether to refresh
     * @returns {Column[]} - returns the column
     */
    getColumns(isRefresh) {
        const inview = this.inViewIndexes.map((v) => v - this.groupSettings.columns.length).filter((v) => v > -1);
        const vLen = inview.length;
        if (!this.enableColumnVirtualization || isNullOrUndefined(this.columnModel) || this.columnModel.length === 0 || isRefresh) {
            this.columnModel = [];
            this.updateColumnModel(this.columns);
        }
        let columns = vLen === 0 ? this.columnModel :
            this.columnModel.slice(inview[0], inview[vLen - 1] + 1);
        if (this.contentModule && this.enableColumnVirtualization && this.isFrozenGrid() && inview.length
            && inview[0] > 0) {
            const frozenCols = this.contentModule.ensureFrozenCols(columns);
            columns = frozenCols;
        }
        return columns;
    }
    /**
     * @private
     * @param {string} stackedHeader - Defines the stacked header
     * @param {Column[]} col - Defines the column
     * @returns {Column} Returns the Column
     */
    getStackedHeaderColumnByHeaderText(stackedHeader, col) {
        for (let i = 0; i < col.length; i++) {
            const individualColumn = col[i];
            if (individualColumn.field === stackedHeader || individualColumn.headerText === stackedHeader) {
                this.stackedColumn = individualColumn;
                break;
            }
            else if (individualColumn.columns) {
                this.getStackedHeaderColumnByHeaderText(stackedHeader, individualColumn.columns);
            }
        }
        return this.stackedColumn;
    }
    /**
     * @private
     * @returns {number[]} Returns the column indexes
     */
    getColumnIndexesInView() {
        return this.inViewIndexes;
    }
    /**
     * @private
     * @returns {Query} - returns the query
     */
    getQuery() {
        return this.query;
    }
    /**
     * @private
     * @returns {object} - returns the locale constants
     */
    getLocaleConstants() {
        return this.defaultLocale;
    }
    /**
     * @param {number[]} indexes - specifies the indexes
     * @returns {void}
     * @private
     */
    setColumnIndexesInView(indexes) {
        this.inViewIndexes = indexes;
    }
    /**
     * Gets the visible columns from the Grid.
     *
     * @returns {Column[]} returns the column
     */
    getVisibleColumns() {
        return this.getCurrentVisibleColumns();
    }
    /**
     * Gets the header div of the Grid.
     *
     * @returns {Element} - Returns the element
     */
    getHeaderContent() {
        return this.headerModule.getPanel();
    }
    /**
     * Sets the header div of the Grid to replace the old header.
     *
     * @param  {Element} element - Specifies the Grid header.
     * @returns {void}
     */
    setGridHeaderContent(element) {
        this.headerModule.setPanel(element);
    }
    /**
     * Gets the content table of the Grid.
     *
     * @returns {Element} - Returns the element
     */
    getContentTable() {
        return this.contentModule.getTable();
    }
    /**
     * Sets the content table of the Grid to replace the old content table.
     *
     * @param  {Element} element - Specifies the Grid content table.
     * @returns {void}
     */
    setGridContentTable(element) {
        this.contentModule.setTable(element);
    }
    /**
     * Gets the content div of the Grid.
     *
     * @returns {Element} Returns the element
     */
    getContent() {
        return this.contentModule.getPanel();
    }
    /**
     * Sets the content div of the Grid to replace the old Grid content.
     *
     * @param  {Element} element - Specifies the Grid content.
     * @returns {void}
     */
    setGridContent(element) {
        this.contentModule.setPanel(element);
    }
    /**
     * Gets the header table element of the Grid.
     *
     * @returns {Element} returns the element
     */
    getHeaderTable() {
        return this.headerModule.getTable();
    }
    /**
     * Sets the header table of the Grid to replace the old one.
     *
     * @param  {Element} element - Specifies the Grid header table.
     * @returns {void}
     */
    setGridHeaderTable(element) {
        this.headerModule.setTable(element);
    }
    /**
     * Gets the footer div of the Grid.
     *
     * @returns {Element} returns the element
     */
    getFooterContent() {
        this.footerElement = this.element.getElementsByClassName(gridFooter)[0];
        return this.footerElement;
    }
    /**
     * Gets the footer table element of the Grid.
     *
     * @returns {Element} returns the element
     */
    getFooterContentTable() {
        this.footerElement = this.element.getElementsByClassName(gridFooter)[0];
        return this.footerElement.firstChild.firstChild;
    }
    /**
     * Gets the pager of the Grid.
     *
     * @returns {Element} returns the element
     */
    getPager() {
        return this.gridPager; //get element from pager
    }
    /**
     * Sets the pager of the Grid to replace the old pager.
     *
     * @param  {Element} element - Specifies the Grid pager.
     * @returns {void}
     */
    setGridPager(element) {
        this.gridPager = element;
    }
    /**
     * Gets a row by index.
     *
     * @param  {number} index - Specifies the row index.
     * @returns {Element} returns the element
     */
    getRowByIndex(index) {
        return this.contentModule.getRowByIndex(index);
    }
    /**
     * Gets a movable tables row by index.
     *
     * @param  {number} index - Specifies the row index.
     * @returns {Element} returns the element
     */
    getMovableRowByIndex(index) {
        return this.contentModule.getMovableRowByIndex(index);
    }
    /**
     * Gets a frozen tables row by index.
     *
     * @param  {number} index - Specifies the row index.
     * @returns {Element} returns the element
     */
    getFrozenRowByIndex(index) {
        return this.getFrozenDataRows()[index];
    }
    /**
     * Gets all the data rows of the Grid.
     *
     * @returns {Element[]} returns the element
     */
    getRows() {
        return this.contentModule.getRowElements();
    }
    /**
     * Gets a frozen right tables row element by index.
     *
     * @param  {number} index - Specifies the row index.
     * @returns {Element} returns the element
     */
    getFrozenRightRowByIndex(index) {
        return this.contentModule.getFrozenRightRowByIndex(index);
    }
    /**
     * Get a row information based on cell
     *
     * @param {Element | EventTarget} target - specifies the element
     * @returns {RowInfo} returns the row info
     */
    getRowInfo(target) {
        const ele = target;
        let args = { target: target };
        if (!isNullOrUndefined(target) && isNullOrUndefined(parentsUntil(ele, 'e-detailrowcollapse')
            && isNullOrUndefined(parentsUntil(ele, 'e-recordplusexpand')))) {
            const cell = closest(ele, '.' + rowCell);
            if (!cell) {
                const row$$1 = closest(ele, '.' + row);
                if (!isNullOrUndefined(row$$1) && !row$$1.classList.contains('e-addedrow')) {
                    const rowObj = this.getRowObjectFromUID(row$$1.getAttribute('data-uid'));
                    const rowIndex = parseInt(row$$1.getAttribute(ariaRowIndex), 10);
                    args = { row: row$$1, rowData: rowObj.data, rowIndex: rowIndex };
                }
                return args;
            }
            const cellIndex = parseInt(cell.getAttribute(ariaColIndex), 10);
            if (!isNullOrUndefined(cell) && !isNaN(cellIndex)) {
                const row$$1 = closest(cell, '.' + row);
                const rowIndex = parseInt(row$$1.getAttribute(ariaRowIndex), 10);
                const frzCols = this.getFrozenColumns();
                const tableName = this.columnModel[cellIndex].getFreezeTableName();
                let rows = this.contentModule.getRows();
                let index = cellIndex + this.getIndentCount();
                if (this.isFrozenGrid()) {
                    if (tableName === frozenLeft) {
                        rows = this.contentModule.getRows();
                    }
                    else if (tableName === 'movable') {
                        index = cellIndex - frzCols - this.frozenLeftCount;
                        rows = this.contentModule.getMovableRows();
                    }
                    else if (tableName === frozenRight) {
                        index = cellIndex - (this.frozenLeftCount + this.movableCount);
                        rows = this.contentModule.getFrozenRightRows();
                    }
                }
                const rowsObject = rows.filter((r) => r.uid === row$$1.getAttribute('data-uid'));
                let rowData = {};
                let column;
                if (Object.keys(rowsObject).length) {
                    rowData = rowsObject[0].data;
                    column = rowsObject[0].cells[index].column;
                }
                args = { cell: cell, cellIndex: cellIndex, row: row$$1, rowIndex: rowIndex, rowData: rowData, column: column, target: target };
            }
        }
        return args;
    }
    /**
     * Gets the Grid's movable content rows from frozen grid.
     *
     * @returns {Element[]} returns the element
     */
    getMovableRows() {
        return this.contentModule.getMovableRowElements();
    }
    /**
     * Gets the Grid's frozen right content rows from frozen grid.
     *
     * @returns {Element[]} returns the element
     */
    getFrozenRightRows() {
        return this.contentModule.getFrozenRightRowElements();
    }
    /**
     * Gets all the Grid's data rows.
     *
     * @returns {Element[]} returns the element
     */
    getDataRows() {
        return this.getAllDataRows();
    }
    /**
     * @param {boolean} includeAdd - specifies includeAdd
     * @returns {Element[]} returns the element
     * @hidden
     */
    getAllDataRows(includeAdd) {
        if (isNullOrUndefined(this.getContentTable().querySelector(tbody))) {
            return [];
        }
        const tbody$$1 = this.isFrozenGrid() ? this.getFrozenLeftContentTbody()
            : this.getContentTable().querySelector(tbody);
        let rows = [].slice.call(tbody$$1.children);
        if (this.frozenRows) {
            const hdrTbody = this.isFrozenGrid() ? this.getHeaderContent().querySelector('.' + frozenHeader).querySelector(tbody)
                : this.getHeaderTable().querySelector(tbody);
            const freezeRows = [].slice.call(hdrTbody.children);
            rows = this.addMovableRows(freezeRows, rows);
        }
        const dataRows = this.generateDataRows(rows, includeAdd);
        return dataRows;
    }
    /**
     * @param {HTMLElement[]} fRows - Defines the frozen Rows
     * @param {HTMLElement[]} mrows - Defines the movable Rows
     * @returns {HTMLElement[]} Returns the element
     * @hidden
     */
    addMovableRows(fRows, mrows) {
        for (let i = 0, len = mrows.length; i < len; i++) {
            fRows.push(mrows[i]);
        }
        return fRows;
    }
    generateDataRows(rows, includAdd) {
        const dRows = [];
        for (let i = 0, len = rows.length; i < len; i++) {
            if (rows[i].classList.contains(row) && (!rows[i].classList.contains('e-hiddenrow') || includAdd)) {
                if (this.isCollapseStateEnabled()) {
                    dRows[parseInt(rows[i].getAttribute('aria-rowindex'), 10)] = rows[i];
                }
                else {
                    dRows.push(rows[i]);
                }
            }
        }
        return dRows;
    }
    /**
     * Gets all the Grid's movable table data rows.
     *
     * @returns {Element[]} Returns the element
     */
    getMovableDataRows() {
        return this.getAllMovableDataRows();
    }
    /**
     * @param {boolean} includeAdd Defines the include add in boolean
     * @returns {Element[]} Returns the element
     * @hidden
     */
    getAllMovableDataRows(includeAdd) {
        if (!this.isFrozenGrid()) {
            return [];
        }
        let rows = [].slice.call(this.getContent().querySelector('.' + movableContent).querySelector(tbody).children);
        if (this.frozenRows) {
            const freezeRows = [].slice.call(this.getHeaderContent().querySelector('.' + movableHeader).querySelector(tbody).children);
            rows = this.addMovableRows(freezeRows, rows);
        }
        const dataRows = this.generateDataRows(rows, includeAdd);
        return dataRows;
    }
    /**
     * Gets all the Grid's frozen table data rows.
     *
     * @returns {Element[]} returns the element
     */
    getFrozenDataRows() {
        return this.getAllFrozenDataRows();
    }
    /**
     * @param {boolean} includeAdd Defines the include add in boolean
     * @returns {Element[]} Returns the element
     * @hidden
     */
    getAllFrozenDataRows(includeAdd) {
        let rows = [].slice.call(this.getContent().querySelector('.' + frozenContent).querySelector(tbody).children);
        if (this.frozenRows) {
            const freezeRows = [].slice.call(this.getHeaderContent().querySelector('.' + frozenHeader).querySelector(tbody).children);
            rows = this.addMovableRows(freezeRows, rows);
        }
        const dataRows = this.generateDataRows(rows, includeAdd);
        return dataRows;
    }
    /**
     * Gets all the Grid's frozen right table data rows.
     *
     * @returns {Element[]} Returns the Element
     */
    getFrozenRightDataRows() {
        return this.getAllFrozenRightDataRows();
    }
    /**
     * @param {boolean} includeAdd Defines the include add in boolean
     * @returns {Element[]} Returns the element
     * @hidden
     */
    getAllFrozenRightDataRows(includeAdd) {
        if (this.getFrozenMode() !== 'Right' && this.getFrozenMode() !== 'Left-Right') {
            return [];
        }
        let rows = [].slice.call(this.getContent().querySelector('.e-frozen-right-content').querySelector(tbody).children);
        if (this.frozenRows) {
            const freezeRows = [].slice.call(this.getHeaderContent().querySelector('.e-frozen-right-header').querySelector(tbody).children);
            rows = this.addMovableRows(freezeRows, rows);
        }
        const dataRows = this.generateDataRows(rows, includeAdd);
        return dataRows;
    }
    /**
     * Updates particular cell value based on the given primary key value.
     * > Primary key column must be specified using `columns.isPrimaryKey` property.
     *
     * @param {string| number} key - Specifies the PrimaryKey value of dataSource.
     * @param {string } field - Specifies the field name which you want to update.
     * @param {string | number | boolean | Date} value - To update new value for the particular cell.
     * @returns {void}
     */
    setCellValue(key, field, value) {
        const cells = 'cells';
        const rowData = 'data';
        const rowIdx = 'index';
        const rowuID = 'uid';
        const isRight = this.getFrozenMode() === 'Right';
        const pkName = this.getPrimaryKeyFieldNames()[0];
        const cell = new CellRenderer(this, this.serviceLocator);
        let fieldIdx = this.getColumnIndexByField(field);
        const col = this.getColumnByField(field);
        const rowObjects = col.getFreezeTableName() === 'movable' ? this.contentModule.getMovableRows() :
            col.getFreezeTableName() === 'frozen-right' ? this.getFrozenRightRowsObject() : this.contentModule.getRows();
        const selectedRow = rowObjects.filter((r) => getValue(pkName, r.data) === key)[0];
        const tr = selectedRow ? this.element.querySelector('[data-uid=' + selectedRow[rowuID] + ']') : null;
        if (!isNullOrUndefined(tr)) {
            setValue(field, value, selectedRow[rowData]);
            let left = this.getFrozenLeftColumnsCount() || this.getFrozenColumns();
            const movable = this.getMovableColumnsCount();
            if (this.isRowDragable() && !isRight) {
                left++;
            }
            const frIdx = left + movable;
            const td = this.getCellFromIndex(selectedRow[rowIdx], fieldIdx);
            if (!isNullOrUndefined(td)) {
                const Idx = col.getFreezeTableName() === 'movable' ? left : col.getFreezeTableName() === 'frozen-right' ? frIdx : 0;
                if (this.groupSettings.columns.length) {
                    fieldIdx = fieldIdx + this.groupSettings.columns.length;
                }
                if (this.childGrid || this.detailTemplate) {
                    fieldIdx++;
                }
                if (this.isRowDragable() && !isRight) {
                    fieldIdx++;
                }
                const sRow = selectedRow[cells][fieldIdx - Idx];
                cell.refreshTD(td, sRow, selectedRow[rowData], { index: selectedRow[rowIdx] });
                if (this.aggregates.length > 0) {
                    this.notify(refreshFooterRenderer, {});
                    if (this.groupSettings.columns.length > 0) {
                        this.notify(groupAggregates, {});
                    }
                }
                /* tslint:disable:no-string-literal */
                if (!isNullOrUndefined(selectedRow) && !isNullOrUndefined(selectedRow['changes'])) {
                    selectedRow['changes'][field] = value;
                }
                /* tslint:disable:no-string-literal */
                this.trigger(queryCellInfo, {
                    cell: td, column: col, data: selectedRow[rowData]
                });
            }
        }
        else {
            return;
        }
    }
    /**
     * @param {string} columnUid - Defines column uid
     * @returns {void}
     * @hidden
     */
    refreshReactColumnTemplateByUid(columnUid) {
        if (this.isReact) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.clearTemplate(['columnTemplate'], undefined, () => {
                const cells = 'cells';
                const rowIdx = 'index';
                const rows = this.getDataRows();
                const indent = this.getIndentCount();
                const cellIndex = this.getNormalizedColumnIndex(columnUid);
                for (let j = 0; j < rows.length; j++) {
                    const rowsObj = this.getRowObjectFromUID(rows[j].getAttribute('data-uid'));
                    if (rowsObj && rowsObj.isDataRow && !isNullOrUndefined(rowsObj.index)) {
                        const cell = rowsObj[cells][cellIndex];
                        const cellRenderer = new CellRenderer(this, this.serviceLocator);
                        const td = this.getCellFromIndex(j, cellIndex - indent);
                        cellRenderer.refreshTD(td, cell, rowsObj.data, { index: rowsObj[rowIdx] });
                    }
                }
            });
        }
    }
    /**
     * @param {string} columnUid - Defines column uid
     * @returns {void}
     * @hidden
     */
    refreshReactHeaderTemplateByUid(columnUid) {
        if (this.isReact) {
            const cells = 'cells';
            const rowsObj = this.headerModule.rows;
            const cellIndex = this.getNormalizedColumnIndex(columnUid);
            for (let j = 0; j < rowsObj.length; j++) {
                const cell = rowsObj[j][cells][cellIndex];
                if (cell && cell.column.uid === columnUid) {
                    const headerCellRenderer = new HeaderCellRenderer(this, this.serviceLocator);
                    const td = parentsUntil(this.element.querySelectorAll('[e-mappinguid=' + columnUid + ']')[0], 'e-templatecell');
                    headerCellRenderer.refresh(cell, td);
                }
            }
        }
    }
    /**
     * Updates and refresh the particular row values based on the given primary key value.
     * > Primary key column must be specified using `columns.isPrimaryKey` property.
     *
     * @param {string| number} key - Specifies the PrimaryKey value of dataSource.
     * @param {Object} rowData - To update new data for the particular row.
     * @returns {void}
     */
    setRowData(key, rowData) {
        const rowuID = 'uid';
        let rowObjects = this.contentModule.getRows();
        const pkName = this.getPrimaryKeyFieldNames()[0];
        const rowRenderer = new RowRenderer(this.serviceLocator, null, this);
        if (this.groupSettings.columns.length > 0 && this.aggregates.length > 0) {
            rowObjects = rowObjects.filter((row$$1) => row$$1.isDataRow);
        }
        const selectedRow = rowObjects.filter((r) => getValue(pkName, r.data) === key)[0];
        if (!isNullOrUndefined(selectedRow) && this.element.querySelectorAll('[data-uid=' + selectedRow[rowuID] + ']').length) {
            selectedRow.changes = rowData;
            refreshForeignData(selectedRow, this.getForeignKeyColumns(), selectedRow.changes);
            rowRenderer.refresh(selectedRow, this.getColumns(), true);
            if (this.aggregates.length > 0) {
                this.notify(refreshFooterRenderer, {});
                if (this.groupSettings.columns.length > 0) {
                    this.notify(groupAggregates, {});
                }
            }
        }
        else {
            return;
        }
    }
    /**
     * Gets a cell by row and column index.
     *
     * @param  {number} rowIndex - Specifies the row index.
     * @param  {number} columnIndex - Specifies the column index.
     * @returns {Element} Returns the Element
     */
    getCellFromIndex(rowIndex, columnIndex) {
        const col = this.getColumnByIndex(columnIndex);
        return getCellByColAndRowIndex(this, col, rowIndex, columnIndex);
    }
    /**
     * Gets a movable table cell by row and column index.
     *
     * @param  {number} rowIndex - Specifies the row index.
     * @param  {number} columnIndex - Specifies the column index.
     * @returns {Element} Returns the Element
     */
    getMovableCellFromIndex(rowIndex, columnIndex) {
        if (this.frozenName === 'Left-Right' && columnIndex >= this.movableCount) {
            return undefined;
        }
        const index = this.getFrozenColumns() || this.getFrozenLeftColumnsCount();
        return this.getMovableDataRows()[rowIndex] &&
            this.getMovableDataRows()[rowIndex].getElementsByClassName(rowCell)[columnIndex - index];
    }
    /**
     * Gets a frozen right table cell by row and column index.
     *
     * @param  {number} rowIndex - Specifies the row index.
     * @param  {number} columnIndex - Specifies the column index.
     * @returns {Element} Returns the Element
     */
    getFrozenRightCellFromIndex(rowIndex, columnIndex) {
        const index = this.getFrozenLeftColumnsCount() + this.getMovableColumnsCount();
        const rows = this.getFrozenRightDataRows();
        return rows[rowIndex] && rows[rowIndex].getElementsByClassName(rowCell)[columnIndex - index];
    }
    /**
     * Gets a column header by column index.
     *
     * @param  {number} index - Specifies the column index.
     * @returns {Element} Returns the Element
     */
    getColumnHeaderByIndex(index) {
        return this.getHeaderTable().getElementsByClassName('e-headercell')[index];
    }
    /**
     * Gets a movable column header by column index.
     *
     * @param  {number} index - Specifies the column index.
     * @returns {Element} Returns the Element
     */
    getMovableColumnHeaderByIndex(index) {
        const left = this.getFrozenColumns() || this.getFrozenLeftColumnsCount();
        return this.getMovableVirtualHeader().getElementsByClassName('e-headercell')[index - left];
    }
    /**
     * Gets a frozen right column header by column index.
     *
     * @param  {number} index - Specifies the column index.
     * @returns {Element} Returns the Element
     */
    getFrozenRightColumnHeaderByIndex(index) {
        const left = this.getFrozenLeftColumnsCount() + this.getMovableColumnsCount();
        return this.getFrozenRightHeader().getElementsByClassName('e-headercell')[index - left];
    }
    /**
     * Gets a frozen left column header by column index.
     *
     * @param  {number} index - Specifies the column index.
     * @returns {Element} Returns the Element
     */
    getFrozenLeftColumnHeaderByIndex(index) {
        return this.getFrozenVirtualHeader().getElementsByClassName('e-headercell')[index];
    }
    /**
     * @param {string} uid - Defines the uid
     * @param {boolean} isMovable - Defines isMovable
     * @param {boolean} isFrozenRight - Defines isFrozenRight
     * @returns {Row<Column>} Returns the row object
     * @hidden
     */
    getRowObjectFromUID(uid, isMovable, isFrozenRight) {
        const rows = this.contentModule.getRows();
        let row$$1 = this.rowObject(rows, uid);
        if (this.isFrozenGrid()) {
            if (!row$$1 || isMovable || isFrozenRight) {
                row$$1 = this.rowObject(this.contentModule.getMovableRows(), uid);
                if ((!row$$1 && this.getFrozenMode() === 'Left-Right') || isFrozenRight) {
                    row$$1 = this.rowObject(this.contentModule.getFrozenRightRows(), uid);
                }
                return row$$1;
            }
        }
        if (isNullOrUndefined(row$$1) && this.enableVirtualization && this.groupSettings.columns.length > 0) {
            row$$1 = this.rowObject(this.vRows, uid);
            return row$$1;
        }
        return row$$1;
    }
    rowObject(rows, uid) {
        for (const row$$1 of rows) {
            if (row$$1.uid === uid) {
                return row$$1;
            }
        }
        return null;
    }
    /**
     * @hidden
     * @returns {Row<Column>[]} Returns the Row object
     */
    getRowsObject() {
        return this.contentModule.getRows();
    }
    /**
     * @hidden
     * @returns {Row<Column>[]} Returns the Row object
     */
    getMovableRowsObject() {
        let rows = [];
        if (this.isFrozenGrid()) {
            rows = this.contentModule.getMovableRows();
        }
        return rows;
    }
    /**
     * @hidden
     * @returns {Row<Column>[]} Returns the Row object
     */
    getFrozenRightRowsObject() {
        let rows = [];
        if (this.getFrozenMode() === 'Right' || this.getFrozenMode() === 'Left-Right') {
            rows = this.contentModule.getFrozenRightRows();
        }
        return rows;
    }
    /**
     * Gets a column header by column name.
     *
     * @param  {string} field - Specifies the column name.
     * @returns {Element} - Returns the element
     */
    getColumnHeaderByField(field) {
        const column = this.getColumnByField(field);
        return column ? this.getColumnHeaderByUid(column.uid) : undefined;
    }
    /**
     * Gets a column header by UID.
     *
     * @param {string} uid - Specifies the column uid.
     * @returns {Element} - Returns the element
     */
    getColumnHeaderByUid(uid) {
        const element = this.getHeaderContent().querySelector('[e-mappinguid=' + uid + ']');
        return element ? element.parentElement : undefined;
    }
    /**
     * @hidden
     * @param {number} index - Defines the index
     * @returns {Column} Returns the column
     */
    getColumnByIndex(index) {
        let column;
        this.getColumns().some((col, i) => {
            column = col;
            return i === index;
        });
        return column;
    }
    /**
     * Gets a Column by column name.
     *
     * @param  {string} field - Specifies the column name.
     * @returns {Column} Returns the column
     */
    getColumnByField(field) {
        return iterateArrayOrObject(this.getColumns(), (item) => {
            if (item.field === field) {
                return item;
            }
            return undefined;
        })[0];
    }
    /**
     * Gets a column index by column name.
     *
     * @param  {string} field - Specifies the column name.
     * @returns {number} Returns the index by field
     */
    getColumnIndexByField(field) {
        const cols = this.getColumns();
        for (let i = 0; i < cols.length; i++) {
            if (cols[i].field === field) {
                return i;
            }
        }
        return -1;
    }
    /**
     * Gets a column by UID.
     *
     * @param  {string} uid - Specifies the column UID.
     * @returns {Column} Returns the column
     */
    getColumnByUid(uid) {
        return iterateArrayOrObject([...this.getColumns(), ...this.getStackedColumns(this.columns)], (item) => {
            if (item.uid === uid) {
                return item;
            }
            return undefined;
        })[0];
    }
    /**
     * @param {Column[]} columns - Defines the columns
     * @param {Column[]} stackedColumn - Defines the stacked columns
     * @returns {Column[]} Returns the columns
     * @hidden
     */
    getStackedColumns(columns, stackedColumn = []) {
        for (const column of columns) {
            if (column.columns) {
                stackedColumn.push(column);
                this.getStackedColumns(column.columns, stackedColumn);
            }
        }
        return stackedColumn;
    }
    /**
     * Gets a column index by UID.
     *
     * @param  {string} uid - Specifies the column UID.
     * @returns {number} Returns the column by index
     */
    getColumnIndexByUid(uid) {
        const index = iterateArrayOrObject(this.getColumns(), (item, index) => {
            if (item.uid === uid) {
                return index;
            }
            return undefined;
        })[0];
        return !isNullOrUndefined(index) ? index : -1;
    }
    /**
     * Gets UID by column name.
     *
     * @param  {string} field - Specifies the column name.
     * @returns {string} Returns the column by field
     */
    getUidByColumnField(field) {
        return iterateArrayOrObject(this.getColumns(), (item) => {
            if (item.field === field) {
                return item.uid;
            }
            return undefined;
        })[0];
    }
    /**
     * Gets column index by column uid value.
     *
     * @private
     * @param  {string} uid - Specifies the column uid.
     * @returns {number} Returns the column by field
     */
    getNormalizedColumnIndex(uid) {
        const index = this.getColumnIndexByUid(uid);
        return index + this.getIndentCount();
    }
    /**
     * Gets indent cell count.
     *
     * @private
     * @returns {number} Returns the indent count
     */
    getIndentCount() {
        let index = 0;
        if (this.allowGrouping) {
            index += this.groupSettings.columns.length;
        }
        if (this.isDetail()) {
            index++;
        }
        if (this.isRowDragable() && isNullOrUndefined(this.rowDropSettings.targetID)) {
            index++;
        }
        /**
         * TODO: index normalization based on the stacked header, grouping and detailTemplate
         * and frozen should be handled here
         */
        return index;
    }
    /**
     * Gets the collection of column fields.
     *
     * @returns {string[]} Returns the Field names
     */
    getColumnFieldNames() {
        const columnNames = [];
        let column;
        for (let i = 0, len = this.getColumns().length; i < len; i++) {
            column = this.getColumns()[i];
            if (column.visible) {
                columnNames.push(column.field);
            }
        }
        return columnNames;
    }
    /**
     * Gets a compiled row template.
     *
     * @returns {Function} Returns the row TEmplate
     * @private
     */
    getRowTemplate() {
        return this.rowTemplateFn;
    }
    /**
     * Gets a compiled detail row template.
     *
     * @private
     * @returns {Function} Returns the Detail template
     */
    getDetailTemplate() {
        return this.detailTemplateFn;
    }
    /**
     * Gets a compiled detail row template.
     *
     * @private
     * @returns {Function}Returns the Edit template
     */
    getEditTemplate() {
        return this.editTemplateFn;
    }
    /**
     * Gets a compiled dialog edit header template.
     *
     * @private
     * @returns {Function} returns template function
     */
    getEditHeaderTemplate() {
        return this.editHeaderTemplateFn;
    }
    /**
     * Gets a compiled dialog edit footer template.
     *
     * @private
     * @returns {Function} Returns the Footer template
     */
    getEditFooterTemplate() {
        return this.editFooterTemplateFn;
    }
    /**
     * Get the names of the primary key columns of the Grid.
     *
     * @returns {string[]} Returns the field names
     */
    getPrimaryKeyFieldNames() {
        const keys = [];
        for (let k = 0; k < this.columnModel.length; k++) {
            if (this.columnModel[k].isPrimaryKey) {
                keys.push(this.columnModel[k].field);
            }
        }
        return keys;
    }
    /**
     * Refreshes the Grid header and content.
     *
     * @returns {void}
     */
    refresh() {
        if (!this.isDestroyed) {
            this.isManualRefresh = true;
            this.headerModule.refreshUI();
            this.updateStackedFilter();
            this.renderModule.refresh();
        }
    }
    /**
     * Refreshes the Grid header.
     *
     * @returns {void}
     */
    refreshHeader() {
        this.headerModule.refreshUI();
    }
    /**
     * Gets the collection of selected rows.
     *
     * @returns {Element[]} Returns the element
     */
    getSelectedRows() {
        return this.selectionModule ? this.selectionModule.selectedRecords : [];
    }
    /**
     * Gets the collection of selected row indexes.
     *
     * @returns {number[]} Returns the Selected row indexes
     */
    getSelectedRowIndexes() {
        return this.selectionModule ? this.selectionModule.selectedRowIndexes : [];
    }
    /**
     * Gets the collection of selected row and cell indexes.
     *
     * @returns {number[]} Returns the Selected row cell indexes
     */
    getSelectedRowCellIndexes() {
        return this.selectionModule ? this.selectionModule.selectedRowCellIndexes : [];
    }
    /**
     * Gets the collection of selected records.
     *
     * @returns {Object[]} Returns the selected records
     * @isGenericType true
     */
    getSelectedRecords() {
        return this.selectionModule ? this.selectionModule.getSelectedRecords() : [];
    }
    /**
     * Gets the collection of selected columns uid.
     *
     * @returns {string[]} Returns the selected column uid
     * @isGenericType true
     */
    getSelectedColumnsUid() {
        const uid = [];
        if (this.selectionModule) {
            this.selectionModule.selectedColumnsIndexes.filter((i) => uid.push(this.getColumns()[i].uid));
        }
        return uid;
    }
    /**
     * Gets the data module.
     *
     * @returns {Data} Returns the data
     */
    getDataModule() {
        return this.renderModule.data;
    }
    /**
     * Shows a column by its column name.
     *
     * @param  {string|string[]} keys - Defines a single or collection of column names.
     * @param  {string} showBy - Defines the column key either as field name or header text.
     * @returns {void}
     */
    showColumns(keys, showBy) {
        showBy = showBy ? showBy : 'headerText';
        this.showHider.show(keys, showBy);
    }
    /**
     * Hides a column by column name.
     *
     * @param  {string|string[]} keys - Defines a single or collection of column names.
     * @param  {string} hideBy - Defines the column key either as field name or header text.
     * @returns {void}
     */
    hideColumns(keys, hideBy) {
        hideBy = hideBy ? hideBy : 'headerText';
        this.showHider.hide(keys, hideBy);
    }
    /**
     * @hidden
     * @returns {number} Returns the Frozen column
     */
    getFrozenColumns() {
        return this.frozenColumns + this.getFrozenCount(this.columns, 0, 0);
    }
    /**
     * @hidden
     * @returns {number} Returns the Frozen Right column count
     */
    getFrozenRightColumnsCount() {
        return this.frozenRightCount;
    }
    /**
     * @hidden
     * @returns {number} Returns the Frozen Left column
     */
    getFrozenLeftColumnsCount() {
        return this.frozenLeftCount;
    }
    /**
     * @hidden
     * @returns {number} Returns the movable column count
     */
    getMovableColumnsCount() {
        return this.movableCount;
    }
    /**
     * @hidden
     * @returns {void}
     */
    setFrozenCount() {
        this.frozenLeftCount = this.frozenRightCount = this.movableCount = 0;
        this.visibleFrozenLeft = this.visibleFrozenRight = this.visibleMovable = 0;
        this.frozenLeftColumns = [];
        this.frozenRightColumns = [];
        this.movableColumns = [];
        this.splitFrozenCount(this.columns);
        if (this.frozenColumns && (this.frozenLeftCount || this.frozenRightCount)) {
            this.setProperties({ frozenColumns: 0 }, true);
        }
        this.setTablesCount();
        if (this.frozenLeftCount && !this.frozenRightCount) {
            this.frozenName = 'Left';
        }
        else if (this.frozenRightCount && !this.frozenLeftCount) {
            this.frozenName = 'Right';
        }
        else if (this.frozenLeftCount && this.frozenRightCount) {
            this.frozenName = 'Left-Right';
        }
        else {
            this.frozenName = undefined;
        }
    }
    /**
     * @hidden
     * @returns {number} Returns the visible Frozen left count
     */
    getVisibleFrozenLeftCount() {
        return this.visibleFrozenLeft;
    }
    /**
     * @hidden
     * @returns {number} Returns the visible Frozen Right count
     */
    getVisibleFrozenRightCount() {
        return this.visibleFrozenRight;
    }
    /**
     * @hidden
     * @returns {number} Returns the visible movable count
     */
    getVisibleMovableCount() {
        return this.visibleMovable;
    }
    /**
     * @hidden
     * @returns {Column[]} Returns the column
     */
    getFrozenRightColumns() {
        return this.frozenRightColumns;
    }
    /**
     * @hidden
     * @returns {Column[]} Returns the column
     */
    getFrozenLeftColumns() {
        return this.frozenLeftColumns;
    }
    /**
     * @hidden
     * @returns {Column[]} Returns the column
     */
    getMovableColumns() {
        return this.movableColumns;
    }
    splitFrozenCount(columns) {
        for (let i = 0; i < columns.length; i++) {
            if (columns[i].columns) {
                this.splitFrozenCount(columns[i].columns);
            }
            else {
                if (columns[i].freeze === 'Right') {
                    if (columns[i].visible !== false) {
                        this.visibleFrozenRight++;
                    }
                    this.frozenRightColumns.push(columns[i]);
                    this.frozenRightCount++;
                }
                else if (columns[i].freeze === 'Left') {
                    if (columns[i].visible !== false) {
                        this.visibleFrozenLeft++;
                    }
                    this.frozenLeftColumns.push(columns[i]);
                    this.frozenLeftCount++;
                }
                else {
                    if (columns[i].visible !== false) {
                        this.visibleMovable++;
                    }
                    this.movableColumns.push(columns[i]);
                    this.movableCount++;
                }
            }
        }
    }
    /**
     * @hidden
     * @returns {number} Returns the visible frozen columns count
     */
    getVisibleFrozenColumns() {
        return this.getVisibleFrozenColumnsCount() + this.getVisibleFrozenCount(this.columns, 0);
    }
    /**
     * Get the current Filter operator and field.
     *
     * @returns {FilterUI} Returns the filter UI
     */
    getFilterUIInfo() {
        return this.filterModule ? this.filterModule.getFilterUIInfo() : {};
    }
    getVisibleFrozenColumnsCount() {
        let visibleFrozenColumns = 0;
        const columns = this.columnModel;
        for (let i = 0; i < this.frozenColumns; i++) {
            if (columns[i].visible) {
                visibleFrozenColumns++;
            }
        }
        if (this.frozenLeftCount || this.frozenRightCount) {
            for (let i = 0; i < columns.length; i++) {
                if (columns[i].visible && (columns[i].freeze === 'Left' || columns[i].freeze === 'Right')) {
                    visibleFrozenColumns++;
                }
            }
        }
        return visibleFrozenColumns;
    }
    getVisibleFrozenCount(cols, cnt) {
        if (!this.frozenLeftCount && !this.frozenRightCount) {
            for (let i = 0, len = cols.length; i < len; i++) {
                if (cols[i].columns) {
                    cnt = this.getVisibleFrozenCount(cols[i].columns, cnt);
                }
                else {
                    if (cols[i].isFrozen && cols[i].visible) {
                        cnt++;
                    }
                }
            }
        }
        return cnt;
    }
    getFrozenCount(cols, cnt, index) {
        for (let i = 0, len = cols.length; i < len; i++) {
            if (cols[i].columns) {
                cnt = this.getFrozenCount(cols[i].columns, cnt, index);
            }
            else {
                if (cols[i].isFrozen && index > this.frozenColumns - 1) {
                    cnt++;
                }
                index++;
            }
        }
        return cnt;
    }
    /**
     * Navigates to the specified target page.
     *
     * @param  {number} pageNo - Defines the page number to navigate.
     * @returns {void}
     */
    goToPage(pageNo) {
        if (this.pagerModule) {
            this.pagerModule.goToPage(pageNo);
        }
    }
    /**
     * Defines the text of external message.
     *
     * @param  {string} message - Defines the message to update.
     * @returns {void}
     */
    updateExternalMessage(message) {
        if (this.pagerModule) {
            this.pagerModule.updateExternalMessage(message);
        }
    }
    /**
     * Sorts a column with the given options.
     *
     * @param {string} columnName - Defines the column name to be sorted.
     * @param {SortDirection} direction - Defines the direction of sorting field.
     * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.
     * @returns {void}
     */
    sortColumn(columnName, direction, isMultiSort) {
        if (this.sortModule) {
            this.sortModule.sortColumn(columnName, direction, isMultiSort);
        }
    }
    /**
     * Clears all the sorted columns of the Grid.
     *
     * @returns {void}
     */
    clearSorting() {
        if (this.sortModule) {
            this.sortModule.clearSorting();
        }
    }
    /**
     * Remove sorted column by field name.
     *
     * @param {string} field - Defines the column field name to remove sort.
     * @returns {void}
     * @hidden
     */
    removeSortColumn(field) {
        if (this.sortModule) {
            this.sortModule.removeSortColumn(field);
        }
    }
    /**
    * @hidden
    * @returns {void}
    */
    clearGridActions() {
        this.setProperties({ sortSettings: { columns: [] } }, true);
        this.setProperties({ filterSettings: { columns: [] } }, true);
        this.setProperties({ searchSettings: { key: '' } }, true);
        if (this.allowGrouping) {
            this.setProperties({ groupSettings: { columns: [] } }, false);
        }
        else {
            this.freezeRefresh();
        }
    }
    /**
     * Filters grid row by column name with the given options.
     *
     * @param  {string} fieldName - Defines the field name of the column.
     * @param  {string} filterOperator - Defines the operator to filter records.
     * @param  {string | number | Date | boolean} filterValue - Defines the value used to filter records.
     * @param  {string} predicate - Defines the relationship between one filter query and another by using AND or OR predicate.
     * @param  {boolean} matchCase - If match case is set to true, the grid filters the records with exact match. if false, it filters case
     * insensitive records (uppercase and lowercase letters treated the same).
     * @param  {boolean} ignoreAccent - If ignoreAccent set to true,
     * then filter ignores the diacritic characters or accents while filtering.
     * @param  {string} actualFilterValue - Defines the actual filter value for the filter column.
     * @param  {string} actualOperator - Defines the actual filter operator for the filter column.
     * @returns {void}
     */
    filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {
        if (this.filterModule) {
            this.filterModule.filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator);
        }
    }
    /**
     * Clears all the filtered rows of the Grid.
     *
     * @param {string[]} fields - Defines the Fields
     * @returns {void}
     */
    clearFiltering(fields) {
        if (this.filterModule) {
            this.filterModule.clearFiltering(fields);
        }
    }
    /**
     * Removes filtered column by field name.
     *
     * @param  {string} field - Defines column field name to remove filter.
     * @param  {boolean} isClearFilterBar -  Specifies whether the filter bar value needs to be cleared.
     * @returns {void}
     * @hidden
     */
    removeFilteredColsByField(field, isClearFilterBar) {
        if (this.filterModule) {
            this.filterModule.removeFilteredColsByField(field, isClearFilterBar);
        }
    }
    /**
     * Selects a row by given index.
     *
     * @param  {number} index - Defines the row index.
     * @param  {boolean} isToggle - If set to true, then it toggles the selection.
     * @returns {void}
     */
    selectRow(index, isToggle) {
        if (this.selectionModule) {
            this.selectionModule.selectRow(index, isToggle);
        }
    }
    /**
     * Selects a collection of rows by indexes.
     *
     * @param  {number[]} rowIndexes - Specifies the row indexes.
     * @returns {void}
     */
    selectRows(rowIndexes) {
        if (this.selectionModule) {
            this.selectionModule.selectRows(rowIndexes);
        }
    }
    /**
     * Deselects the current selected rows and cells.
     *
     * @returns {void}
     */
    clearSelection() {
        if (this.selectionModule) {
            this.selectionModule.clearSelection();
        }
    }
    /**
     * Selects a cell by the given index.
     *
     * @param  {IIndex} cellIndex - Defines the row and column indexes.
     * @param  {boolean} isToggle - If set to true, then it toggles the selection.
     * @returns {void}
     */
    selectCell(cellIndex, isToggle) {
        if (this.selectionModule) {
            this.selectionModule.selectCell(cellIndex, isToggle);
        }
    }
    /**
     * Selects a range of cells from start and end indexes.
     *
     * @param  {IIndex} startIndex - Specifies the row and column's start index.
     * @param  {IIndex} endIndex - Specifies the row and column's end index.
     * @returns {void}
     */
    selectCellsByRange(startIndex, endIndex) {
        this.selectionModule.selectCellsByRange(startIndex, endIndex);
    }
    /**
     * Searches Grid records using the given key.
     * You can customize the default search option by using the
     * [`searchSettings`](./#searchsettings/).
     *
     * @param  {string} searchString - Defines the key.
     * @returns {void}
     */
    search(searchString) {
        if (this.searchModule) {
            this.searchModule.search(searchString);
        }
    }
    /**
     * By default, prints all the pages of the Grid and hides the pager.
     * > You can customize print options using the
     * [`printMode`](./#printmode).
     *
     * @returns {void}
     */
    print() {
        if (this.printModule) {
            this.printModule.print();
        }
    }
    /**
     * Delete a record with Given options. If fieldname and data is not given then grid will delete the selected record.
     * > `editSettings.allowDeleting` should be true.
     *
     * @param {string} fieldname - Defines the primary key field, 'Name of the column'.
     * @param {Object} data - Defines the JSON data of the record to be deleted.
     * @returns {void}
     */
    deleteRecord(fieldname, data) {
        if (this.editModule) {
            this.editModule.deleteRecord(fieldname, data);
        }
    }
    /**
     * Starts edit the selected row. At least one row must be selected before invoking this method.
     * `editSettings.allowEditing` should be true.
     * {% codeBlock src='grid/startEdit/index.md' %}{% endcodeBlock %}
     *
     * @returns {void}
     */
    startEdit() {
        if (this.editModule) {
            this.editModule.startEdit();
        }
    }
    /**
     * If Grid is in editable state, you can save a record by invoking endEdit.
     *
     * @returns {void}
     */
    endEdit() {
        if (this.editModule) {
            this.editModule.endEdit();
        }
    }
    /**
     * Cancels edited state.
     *
     * @returns {void}
     */
    closeEdit() {
        if (this.editModule) {
            this.editModule.closeEdit();
        }
    }
    /**
     * Adds a new record to the Grid. Without passing parameters, it adds empty rows.
     * > `editSettings.allowEditing` should be true.
     *
     * @param {Object} data - Defines the new add record data.
     * @param {number} index - Defines the row index to be added
     * @returns {void}
     */
    addRecord(data, index) {
        if (this.editModule) {
            this.editModule.addRecord(data, index);
        }
    }
    /**
     * Delete any visible row by TR element.
     *
     * @param {HTMLTableRowElement} tr - Defines the table row element.
     * @returns {void}
     */
    deleteRow(tr) {
        if (this.editModule) {
            this.editModule.deleteRow(tr);
        }
    }
    /**
     * Changes a particular cell into edited state based on the row index and field name provided in the `batch` mode.
     *
     * @param {number} index - Defines row index to edit a particular cell.
     * @param {string} field - Defines the field name of the column to perform batch edit.
     * @returns {void}
     */
    editCell(index, field) {
        if (this.editModule) {
            this.editModule.editCell(index, field);
        }
    }
    /**
     * Saves the cell that is currently edited. It does not save the value to the DataSource.
     *
     * @returns {void}
     * {% codeBlock src='grid/saveCell/index.md' %}{% endcodeBlock %}
     */
    saveCell() {
        if (this.editModule) {
            this.editModule.saveCell();
        }
    }
    /**
     * To update the specified cell by given value without changing into edited state.
     *
     * @param {number} rowIndex Defines the row index.
     * @param {string} field Defines the column field.
     * @param {string | number | boolean | Date} value - Defines the value to be changed.
     * @returns {void}
     */
    updateCell(rowIndex, field, value) {
        if (this.editModule) {
            this.editModule.updateCell(rowIndex, field, value);
        }
    }
    /**
     * To update the specified row by given values without changing into edited state.
     *
     * {% codeBlock src='grid/updateRow/index.md' %}{% endcodeBlock %}
     *
     * @param {number} index Defines the row index.
     * @param {Object} data Defines the data object to be updated.
     * @returns {void}
     */
    updateRow(index, data) {
        if (this.editModule) {
            this.editModule.updateRow(index, data);
        }
    }
    /**
     * Gets the added, edited,and deleted data before bulk save to the DataSource in batch mode.
     *
     * @returns {Object} Returns the batch changes
     */
    getBatchChanges() {
        if (this.editModule) {
            return this.editModule.getBatchChanges();
        }
        return {};
    }
    /**
     * Enables or disables ToolBar items.
     *
     * @param {string[]} items - Defines the collection of itemID of ToolBar items.
     * @param {boolean} isEnable - Defines the items to be enabled or disabled.
     * @returns {void}
     */
    enableToolbarItems(items, isEnable) {
        if (this.toolbarModule) {
            this.toolbarModule.enableItems(items, isEnable);
        }
    }
    /**
     * Copy the selected rows or cells data into clipboard.
     *
     * @param {boolean} withHeader - Specifies whether the column header text needs to be copied along with rows or cells.
     * @returns {void}
     */
    copy(withHeader) {
        if (this.clipboardModule) {
            this.clipboardModule.copy(withHeader);
        }
    }
    /**
     * @hidden
     * @returns {void}
     */
    recalcIndentWidth() {
        if (!this.getHeaderTable().querySelector('.e-emptycell')) {
            return;
        }
        if ((!this.groupSettings.columns.length && !this.isDetail() && !this.isRowDragable()) ||
            this.getHeaderTable().querySelector('.e-emptycell').getAttribute('indentRefreshed') ||
            !this.getContentTable()) {
            return;
        }
        let indentWidth = this.getHeaderTable().querySelector('.e-emptycell').parentElement.offsetWidth;
        const headerCol = [].slice.call(this.getHeaderTable().querySelector(colGroup).childNodes);
        const contentCol = [].slice.call(this.getContentTable().querySelector(colGroup).childNodes);
        const perPixel = indentWidth / 30;
        let i = this.getFrozenMode() === 'Right' ? this.frozenRightCount : 0;
        const parentOffset = this.element.offsetWidth;
        const applyWidth = (index, width) => {
            if (ispercentageWidth(this)) {
                const newWidth = (width / parentOffset * 100).toFixed(1) + '%';
                headerCol[index].style.width = newWidth;
                contentCol[index].style.width = newWidth;
            }
            else {
                headerCol[index].style.width = width + 'px';
                contentCol[index].style.width = width + 'px';
            }
            this.notify(columnWidthChanged, { index: index, width: width });
        };
        if (perPixel >= 1) {
            indentWidth = (30 / perPixel);
        }
        if (indentWidth < 1) {
            indentWidth = 1;
        }
        if (this.enableColumnVirtualization || this.isAutoGen || (this.columns.length === this.groupSettings.columns.length)) {
            indentWidth = 30;
        }
        while (i < this.groupSettings.columns.length) {
            applyWidth(i, indentWidth);
            i++;
        }
        if (this.isDetail()) {
            applyWidth(i, indentWidth);
            i++;
        }
        if (this.isRowDragable()) {
            applyWidth(i, indentWidth);
        }
        this.isAutoGen = false;
        this.getHeaderTable().querySelector('.e-emptycell').setAttribute('indentRefreshed', 'true');
    }
    /**
     * @hidden
     * @returns {void}
     */
    resetIndentWidth() {
        if (ispercentageWidth(this)) {
            this.getHeaderTable().querySelector('.e-emptycell').removeAttribute('indentRefreshed');
            this.widthService.setWidthToColumns();
            this.recalcIndentWidth();
        }
        if ((this.width === 'auto' || typeof (this.width) === 'string' && this.width.indexOf('%') !== -1)
            && this.getColumns().filter((col) => (!col.width || col.width === 'auto') && col.minWidth).length > 0) {
            const tgridWidth = this.widthService.getTableWidth(this.getColumns());
            this.widthService.setMinwidthBycalculation(tgridWidth);
        }
        if (this.isFrozenGrid() && this.widthService) {
            this.widthService.refreshFrozenScrollbar();
        }
        if (this.allowTextWrap && this.textWrapSettings.wrapMode !== 'Content') {
            this.notify(refreshHandlers, {});
        }
    }
    /**
     * @hidden
     * @returns {boolean} Returns isRowDragable
     */
    isRowDragable() {
        return this.allowRowDragAndDrop && !this.rowDropSettings.targetID;
    }
    /**
     * Changes the Grid column positions by field names.
     *
     * @param  {string} fromFName - Defines the origin field name.
     * @param  {string} toFName - Defines the destination field name.
     * @returns {void}
     */
    reorderColumns(fromFName, toFName) {
        if (this.reorderModule) {
            this.reorderModule.reorderColumns(fromFName, toFName);
        }
    }
    /**
     * Changes the Grid column positions by field index. If you invoke reorderColumnByIndex multiple times,
     * then you won't get the same results every time.
     *
     * @param  {number} fromIndex - Defines the origin field index.
     * @param  {number} toIndex - Defines the destination field index.
     * @returns {void}
     */
    reorderColumnByIndex(fromIndex, toIndex) {
        if (this.reorderModule) {
            this.reorderModule.reorderColumnByIndex(fromIndex, toIndex);
        }
    }
    /**
     * Changes the Grid column positions by field index. If you invoke reorderColumnByTargetIndex multiple times,
     * then you will get the same results every time.
     *
     * @param  {string} fieldName - Defines the field name.
     * @param  {number} toIndex - Defines the destination field index.
     * @returns {void}
     */
    reorderColumnByTargetIndex(fieldName, toIndex) {
        if (this.reorderModule) {
            this.reorderModule.reorderColumnByTargetIndex(fieldName, toIndex);
        }
    }
    /**
     * Changes the Grid Row position with given indexes.
     *
     * @param  {number} fromIndexes - Defines the origin Indexes.
     * @param  {number} toIndex - Defines the destination Index.
     * @returns {void}
     */
    reorderRows(fromIndexes, toIndex) {
        if (this.rowDragAndDropModule) {
            this.rowDragAndDropModule.reorderRows(fromIndexes, toIndex);
        }
    }
    /**
     * @param {ReturnType} e - Defines the Return type
     * @returns {void}
     * @hidden
     */
    refreshDataSource(e) {
        this.notify('refreshdataSource', e);
    }
    /**
     * @param {boolean} enable -Defines the enable
     * @returns {void}
     * @hidden
     */
    disableRowDD(enable) {
        const headerTable = this.getHeaderTable();
        const contentTable = this.getContentTable();
        const headerRows = headerTable.querySelectorAll('th.e-rowdragheader, th.e-mastercell');
        const rows = this.getRows();
        const disValue = enable ? 'none' : '';
        setStyleAttribute(headerTable.querySelector(colGroup).childNodes[0], { 'display': disValue });
        setStyleAttribute(contentTable.querySelector(colGroup).childNodes[0], { 'display': disValue });
        for (let i = 0; i < this.getRows().length; i++) {
            const ele = rows[i].firstElementChild;
            if (enable) {
                addClass([ele], 'e-hide');
            }
            else {
                removeClass([ele], ['e-hide']);
            }
        }
        for (let j = 0; j < headerTable.querySelectorAll('th.e-rowdragheader, th.e-mastercell').length; j++) {
            const ele = headerRows[j];
            if (enable) {
                addClass([ele], 'e-hide');
            }
            else {
                removeClass([ele], ['e-hide']);
            }
        }
    }
    /**
     * Changes the column width to automatically fit its content to ensure that the width shows the content without wrapping/hiding.
     * > * This method ignores the hidden columns.
     * > * Uses the `autoFitColumns` method in the `dataBound` event to resize at initial rendering.
     *
     * @param  {string |string[]} fieldNames - Defines the column names.
     * @returns {void}
     *
     *
     * ```typescript
     * <div id="Grid"></div>
     * <script>
     * let gridObj: Grid = new Grid({
     *     dataSource: employeeData,
     *     columns: [
     *         { field: 'OrderID', headerText: 'Order ID', width:100 },
     *         { field: 'EmployeeID', headerText: 'Employee ID' }],
     *     dataBound: () => gridObj.autoFitColumns('EmployeeID')
     * });
     * gridObj.appendTo('#Grid');
     * </script>
     * ```
     *
     */
    autoFitColumns(fieldNames) {
        if (this.resizeModule) {
            this.resizeModule.autoFitColumns(fieldNames);
        }
    }
    /**
     * @param {number} x - Defines the number
     * @param {number} y - Defines the number
     * @param {Element} target - Defines the Element
     * @returns {void}
     * @hidden
     */
    createColumnchooser(x, y, target) {
        if (this.columnChooserModule) {
            this.columnChooserModule.renderColumnChooser(x, y, target);
        }
    }
    initializeServices() {
        this.serviceLocator.register('widthService', this.widthService = new ColumnWidthService(this));
        this.serviceLocator.register('cellRendererFactory', new CellRendererFactory);
        this.serviceLocator.register('rendererFactory', new RendererFactory);
        this.serviceLocator.register('localization', this.localeObj = new L10n(this.getModuleName(), this.defaultLocale, this.locale));
        this.serviceLocator.register('valueFormatter', this.valueFormatterService = new ValueFormatter(this.locale));
        this.serviceLocator.register('showHideService', this.showHider = new ShowHide(this));
        this.serviceLocator.register('ariaService', this.ariaService = new AriaService());
        this.serviceLocator.register('focus', this.focusModule = new FocusStrategy(this));
    }
    processModel() {
        const gCols = this.groupSettings.columns;
        const sCols = this.sortSettings.columns;
        let flag;
        let j;
        if (this.allowGrouping) {
            for (let i = 0, len = gCols.length; i < len; i++) {
                j = 0;
                for (let sLen = sCols.length; j < sLen; j++) {
                    if (sCols[j].field === gCols[i]) {
                        flag = true;
                        break;
                    }
                }
                if (!flag) {
                    sCols.push({ field: gCols[i], direction: 'Ascending', isFromGroup: true });
                }
                else {
                    if (this.allowSorting) {
                        this.sortedColumns.push(sCols[j].field);
                    }
                    else {
                        sCols[j].direction = 'Ascending';
                    }
                }
                if (!this.groupSettings.showGroupedColumn) {
                    const column = this.enableColumnVirtualization ?
                        this.columns.filter((c) => c.field === gCols[i])[0] : this.getColumnByField(gCols[i]);
                    if (column) {
                        column.visible = false;
                    }
                    else {
                        this.log('initial_action', { moduleName: 'group', columnName: gCols[i] });
                    }
                }
            }
        }
        if (!gCols.length) {
            for (let i = 0; i < sCols.length; i++) {
                this.sortedColumns.push(sCols[i].field);
            }
        }
        this.rowTemplateFn = templateCompiler(this.rowTemplate);
        this.detailTemplateFn = templateCompiler(this.detailTemplate);
        this.editTemplateFn = templateCompiler(this.editSettings.template);
        this.editHeaderTemplateFn = templateCompiler(this.editSettings.headerTemplate);
        this.editFooterTemplateFn = templateCompiler(this.editSettings.footerTemplate);
        if (!isNullOrUndefined(this.parentDetails)) {
            const value = isNullOrUndefined(this.parentDetails.parentKeyFieldValue) ? 'undefined' :
                this.parentDetails.parentKeyFieldValue;
            this.query.where(this.queryString, 'equal', value, true);
        }
        this.initForeignColumn();
    }
    initForeignColumn() {
        if (this.isForeignKeyEnabled(this.getColumns())) {
            this.notify(initForeignKeyColumn, this.getForeignKeyColumns());
        }
    }
    enableVerticalRendering() {
        if (this.rowRenderingMode === 'Vertical') {
            this.element.classList.add('e-row-responsive');
        }
        else {
            this.element.classList.remove('e-row-responsive');
        }
    }
    gridRender() {
        this.updateRTL();
        if (this.rowRenderingMode === 'Vertical') {
            this.element.classList.add('e-row-responsive');
        }
        if (this.enableHover) {
            this.element.classList.add('e-gridhover');
        }
        if (Browser.isDevice) {
            this.element.classList.add('e-device');
        }
        if (this.rowHeight) {
            this.element.classList.add('e-grid-min-height');
        }
        if (this.cssClass) {
            this.element.classList.add(this.cssClass);
        }
        classList(this.element, ['e-responsive', 'e-default'], []);
        const rendererFactory = this.serviceLocator.getService('rendererFactory');
        this.headerModule = rendererFactory.getRenderer(RenderType.Header);
        this.contentModule = rendererFactory.getRenderer(RenderType.Content);
        this.printModule = new Print(this, this.scrollModule);
        this.clipboardModule = new Clipboard(this);
        this.renderModule.render();
        this.eventInitializer();
        this.createGridPopUpElement();
        this.widthService.setWidthToColumns();
        this.updateGridLines();
        this.applyTextWrap();
        this.createTooltip(); //for clip mode ellipsis
        this.enableBoxSelection();
    }
    dataReady() {
        this.scrollModule.setWidth();
        this.scrollModule.setHeight();
        if (this.height !== 'auto') {
            this.scrollModule.setPadding();
        }
    }
    updateRTL() {
        if (this.enableRtl) {
            this.element.classList.add('e-rtl');
        }
        else {
            this.element.classList.remove('e-rtl');
        }
    }
    createGridPopUpElement() {
        const popup = this.createElement('div', { className: 'e-gridpopup', styles: 'display:none;' });
        const content$$1 = this.createElement('div', { className: content, attrs: { tabIndex: '-1' } });
        append([content$$1, this.createElement('div', { className: 'e-uptail e-tail' })], popup);
        content$$1.appendChild(this.createElement('span'));
        append([content$$1, this.createElement('div', { className: 'e-downtail e-tail' })], popup);
        this.element.appendChild(popup);
    }
    updateGridLines() {
        classList(this.element, [], ['e-verticallines', 'e-horizontallines', 'e-hidelines', 'e-bothlines']);
        switch (this.gridLines) {
            case 'Horizontal':
                this.element.classList.add('e-horizontallines');
                break;
            case 'Vertical':
                this.element.classList.add('e-verticallines');
                break;
            case 'None':
                this.element.classList.add('e-hidelines');
                break;
            case 'Both':
                this.element.classList.add('e-bothlines');
                break;
        }
        this.updateResizeLines();
    }
    updateResizeLines() {
        if (this.allowResizing &&
            !(this.gridLines === 'Vertical' || this.gridLines === 'Both')) {
            this.element.classList.add('e-resize-lines');
        }
        else {
            this.element.classList.remove('e-resize-lines');
        }
    }
    /**
     * The function is used to apply text wrap
     *
     * @returns {void}
     * @hidden
     */
    applyTextWrap() {
        if (this.allowTextWrap) {
            const headerRows = [].slice.call(this.element.getElementsByClassName('e-columnheader'));
            switch (this.textWrapSettings.wrapMode) {
                case 'Header':
                    wrap(this.element, false);
                    wrap(this.getContent(), false);
                    wrap(headerRows, true);
                    break;
                case 'Content':
                    wrap(this.getContent(), true);
                    wrap(this.element, false);
                    wrap(headerRows, false);
                    break;
                default:
                    wrap(this.element, true);
                    wrap(this.getContent(), false);
                    wrap(headerRows, false);
            }
            if (this.textWrapSettings.wrapMode !== 'Content') {
                this.notify(refreshHandlers, {});
            }
        }
    }
    /**
     * The function is used to remove text wrap
     *
     * @returns {void}
     * @hidden
     */
    removeTextWrap() {
        wrap(this.element, false);
        const headerRows = [].slice.call(this.element.getElementsByClassName('e-columnheader'));
        wrap(headerRows, false);
        wrap(this.getContent(), false);
        if (this.textWrapSettings.wrapMode !== 'Content') {
            this.notify(refreshHandlers, {});
        }
    }
    /**
     * The function is used to add Tooltip to the grid cell that has ellipsiswithtooltip clip mode.
     *
     * @returns {void}
     * @hidden
     */
    createTooltip() {
        this.toolTipObj = new Tooltip({
            opensOn: 'custom',
            content: '',
            cssClass: this.cssClass ? this.cssClass : null
        }, this.element);
    }
    /** @hidden
     * @returns {void}
     */
    freezeRefresh() {
        this.isFreezeRefresh = true;
        if (this.enableVirtualization) {
            this.pageSettings.currentPage = 1;
        }
        this.componentRefresh();
    }
    getTooltipStatus(element) {
        const headerTable = this.getHeaderTable();
        const headerDivTag = 'e-gridheader';
        const htable = this.createTable(headerTable, headerDivTag, 'header');
        const ctable = this.createTable(headerTable, headerDivTag, 'content');
        const table$$1 = element.classList.contains('e-headercell') ? htable : ctable;
        const ele = element.classList.contains('e-headercell') ? 'th' : 'tr';
        table$$1.querySelector(ele).className = element.className;
        table$$1.querySelector(ele).innerHTML = element.innerHTML;
        const width = table$$1.querySelector(ele).getBoundingClientRect().width;
        document.body.removeChild(htable);
        document.body.removeChild(ctable);
        if (width > element.getBoundingClientRect().width) {
            return true;
        }
        return false;
    }
    mouseMoveHandler(e) {
        if (this.isEllipsisTooltip()) {
            const element = parentsUntil(e.target, 'e-ellipsistooltip');
            if (this.prevElement !== element || e.type === 'mouseout') {
                this.toolTipObj.close();
            }
            const tagName = e.target.tagName;
            const elemNames = ['A', 'BUTTON', 'INPUT'];
            if (element && e.type !== 'mouseout' && !(Browser.isDevice && elemNames.indexOf(tagName) !== -1)) {
                if (element.getAttribute('aria-describedby')) {
                    return;
                }
                if (this.getTooltipStatus(element)) {
                    if (element.getElementsByClassName('e-headertext').length) {
                        this.toolTipObj.content = element.getElementsByClassName('e-headertext')[0].innerText;
                    }
                    else {
                        this.toolTipObj.content = element.innerText;
                    }
                    this.prevElement = element;
                    const col = this.getColumns()[parseInt(element.getAttribute(ariaColIndex), 10)];
                    if (col.disableHtmlEncode) {
                        this.toolTipObj.enableHtmlParse = false;
                    }
                    this.toolTipObj.open(element);
                }
            }
        }
        this.hoverFrozenRows(e);
    }
    /**
     * @param {MouseEvent} e - Defines the mouse event
     * @returns {void}
     * @hidden
     */
    hoverFrozenRows(e) {
        if (this.isFrozenGrid()) {
            const row$$1 = parentsUntil(e.target, row);
            if ([].slice.call(this.element.getElementsByClassName('e-frozenhover')).length && e.type === 'mouseout') {
                const rows = [].slice.call(this.element.getElementsByClassName('e-frozenhover'));
                for (let i = 0; i < rows.length; i++) {
                    rows[i].classList.remove('e-frozenhover');
                }
            }
            else if (row$$1) {
                const rows = [].slice.call(this.element.querySelectorAll('tr[aria-rowindex="' + row$$1.getAttribute(ariaRowIndex) + '"]'));
                rows.splice(rows.indexOf(row$$1), 1);
                for (let i = 0; i < rows.length; i++) {
                    if (row$$1.getAttribute('aria-selected') !== 'true' && rows[i]) {
                        rows[i].classList.add('e-frozenhover');
                    }
                    else if (rows[i]) {
                        rows[i].classList.remove('e-frozenhover');
                    }
                }
            }
        }
    }
    isEllipsisTooltip() {
        const cols = this.getColumns();
        if (this.clipMode === 'EllipsisWithTooltip') {
            return true;
        }
        for (let i = 0; i < cols.length; i++) {
            if (cols[i].clipMode === 'EllipsisWithTooltip') {
                return true;
            }
        }
        return false;
    }
    scrollHandler() {
        if (this.isEllipsisTooltip()) {
            this.toolTipObj.close();
        }
    }
    /**
     * To create table for ellipsiswithtooltip
     *
     * @param {Element} table - Defines the table
     * @param {string} tag - Defines the tag
     * @param {string} type - Defines the type
     * @returns {HTMLDivElement} Returns the HTML div ELement
     * @hidden
     */
    createTable(table$$1, tag, type) {
        const myTableDiv = this.createElement('div');
        myTableDiv.className = this.element.className;
        myTableDiv.style.cssText = 'display: inline-block;visibility:hidden;position:absolute';
        const mySubDiv = this.createElement('div');
        mySubDiv.className = tag;
        const myTable = this.createElement('table', { attrs: { role: 'grid' } });
        myTable.className = table$$1.className;
        myTable.style.cssText = 'table-layout: auto;width: auto';
        const ele = (type === 'header') ? 'th' : 'td';
        const myTr = this.createElement('tr', { attrs: { role: 'row' } });
        const mytd = this.createElement(ele);
        myTr.appendChild(mytd);
        myTable.appendChild(myTr);
        mySubDiv.appendChild(myTable);
        myTableDiv.appendChild(mySubDiv);
        document.body.appendChild(myTableDiv);
        return myTableDiv;
    }
    onKeyPressed(e) {
        if (e.action === 'tab' || e.action === 'shiftTab') {
            this.toolTipObj.close();
        }
    }
    /**
     * Binding events to the element while component creation.
     *
     * @hidden
     * @returns {void}
     */
    wireEvents() {
        EventHandler.add(this.element, 'click', this.mouseClickHandler, this);
        EventHandler.add(this.element, 'touchend', this.mouseClickHandler, this);
        EventHandler.add(this.element, 'focusout', this.focusOutHandler, this);
        EventHandler.add(this.element, 'dblclick', this.dblClickHandler, this);
        EventHandler.add(this.element, 'keydown', this.keyPressHandler, this);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        EventHandler.add(window, 'resize', this.resetIndentWidth, this);
        if (this.allowKeyboard) {
            this.element.tabIndex = this.element.tabIndex === -1 ? 0 : this.element.tabIndex;
        }
        this.keyboardModule = new KeyboardEvents(this.element, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keydown'
        });
        EventHandler.add(this.getContent().firstElementChild, 'scroll', this.scrollHandler, this);
        EventHandler.add(this.element, 'mousemove', this.mouseMoveHandler, this);
        EventHandler.add(this.element, 'mouseout', this.mouseMoveHandler, this);
        EventHandler.add(this.getContent(), 'touchstart', this.tapEvent, this);
        EventHandler.add(document.body, 'keydown', this.keyDownHandler, this);
    }
    /**
     * Unbinding events from the element while component destroy.
     *
     * @hidden
     * @returns {void}
     */
    unwireEvents() {
        EventHandler.remove(this.element, 'click', this.mouseClickHandler);
        EventHandler.remove(this.element, 'touchend', this.mouseClickHandler);
        EventHandler.remove(this.element, 'focusout', this.focusOutHandler);
        EventHandler.remove(this.element, 'dblclick', this.dblClickHandler);
        EventHandler.remove(this.getContent().firstElementChild, 'scroll', this.scrollHandler);
        EventHandler.remove(this.element, 'mousemove', this.mouseMoveHandler);
        EventHandler.remove(this.element, 'mouseout', this.mouseMoveHandler);
        EventHandler.remove(this.element, 'keydown', this.keyPressHandler);
        EventHandler.remove(this.getContent(), 'touchstart', this.tapEvent);
        EventHandler.remove(document.body, 'keydown', this.keyDownHandler);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        EventHandler.remove(window, 'resize', this.resetIndentWidth);
    }
    /**
     * @hidden
     * @returns {void}
     */
    addListener() {
        if (this.isDestroyed) {
            return;
        }
        this.on(dataReady, this.dataReady, this);
        this.on(contentReady, this.recalcIndentWidth, this);
        this.on(headerRefreshed, this.recalcIndentWidth, this);
        this.dataBoundFunction = this.refreshMediaCol.bind(this);
        this.addEventListener(dataBound, this.dataBoundFunction);
        this.on(keyPressed, this.onKeyPressed, this);
    }
    /**
     * @hidden
     * @returns {void}
     */
    removeListener() {
        if (this.isDestroyed) {
            return;
        }
        this.off(dataReady, this.dataReady);
        this.off(contentReady, this.recalcIndentWidth);
        this.off(headerRefreshed, this.recalcIndentWidth);
        this.removeEventListener(dataBound, this.dataBoundFunction);
        this.off(keyPressed, this.onKeyPressed);
    }
    /**
     * Get current visible data of grid.
     *
     * @returns {Object[]} Returns the current view records
     * @isGenericType true
     */
    getCurrentViewRecords() {
        if (isGroupAdaptive(this)) {
            return isNullOrUndefined(this.currentViewData.records) ?
                this.currentViewData : this.currentViewData.records;
        }
        if (this.groupSettings.enableLazyLoading) {
            return this.currentViewData;
        }
        return (this.allowGrouping && this.groupSettings.columns.length && this.currentViewData.length
            && this.currentViewData.records) ? this.currentViewData.records
            : this.currentViewData;
    }
    mouseClickHandler(e) {
        if (this.isChildGrid(e) || (parentsUntil(e.target, 'e-gridpopup') && e.touches) ||
            this.element.getElementsByClassName('e-cloneproperties').length || this.checkEdit(e)) {
            return;
        }
        if (((!this.allowRowDragAndDrop && (parentsUntil(e.target, gridContent) ||
            e.target.tagName === 'TD')) || (!(this.allowGrouping || this.allowReordering) &&
            parentsUntil(e.target, 'e-gridheader'))) && e.touches) {
            return;
        }
        if (parentsUntil(e.target, 'e-gridheader') && this.allowRowDragAndDrop &&
            !(parentsUntil(e.target, 'e-filterbarcell'))) {
            e.preventDefault();
        }
        const args = this.getRowInfo(e.target);
        const cancel = 'cancel';
        args[cancel] = false;
        let isDataRow = false;
        const tr = closest(e.target, 'tr');
        if (tr && tr.getAttribute('data-uid')) {
            const rowObj = this.getRowObjectFromUID(tr.getAttribute('data-uid'));
            isDataRow = rowObj ? rowObj.isDataRow : false;
        }
        if (isDataRow) {
            this.trigger(recordClick, args);
        }
        this.notify(click, e);
    }
    checkEdit(e) {
        const tr = parentsUntil(e.target, row);
        const isEdit = this.editSettings.mode !== 'Batch' &&
            this.isEdit && tr && (tr.classList.contains(editedRow) || tr.classList.contains(addedRow));
        return !parentsUntil(e.target, 'e-unboundcelldiv') && (isEdit || (parentsUntil(e.target, rowCell) &&
            parentsUntil(e.target, rowCell).classList.contains('e-editedbatchcell')));
    }
    dblClickHandler(e) {
        const grid = parentsUntil(e.target, 'e-grid');
        if (isNullOrUndefined(grid) || grid.id !== this.element.id || closest(e.target, '.e-unboundcelldiv')) {
            return;
        }
        let dataRow = false;
        const tr = closest(e.target, 'tr');
        if (tr && tr.getAttribute('data-uid')) {
            const rowObj = this.getRowObjectFromUID(tr.getAttribute('data-uid'));
            dataRow = rowObj ? rowObj.isDataRow : false;
        }
        const args = this.getRowInfo(e.target);
        args.target = e.target;
        if (dataRow) {
            this.trigger(recordDoubleClick, args);
        }
        this.notify(dblclick, e);
    }
    focusOutHandler(e) {
        if (this.isChildGrid(e)) {
            return;
        }
        if (!parentsUntil(e.target, 'e-grid')) {
            this.element.querySelector('.e-gridpopup').style.display = 'None';
        }
        const filterClear = this.element.querySelector('.e-cancel:not(.e-hide)');
        if (filterClear) {
            filterClear.classList.add('e-hide');
        }
        const relatedTarget = e.relatedTarget;
        const ariaOwns = relatedTarget ? relatedTarget.getAttribute('aria-owns') : null;
        if ((!relatedTarget || (!parentsUntil(relatedTarget, 'e-grid') &&
            (!isNullOrUndefined(ariaOwns) &&
                (ariaOwns)) !== e.target.getAttribute('aria-owns')))
            && !this.keyPress && this.isEdit && !Browser.isDevice) {
            if (this.editSettings.mode === 'Batch' && !((parentsUntil(relatedTarget, 'e-ddl') || parentsUntil(relatedTarget, 'e-ddt')) &&
                parentsUntil(relatedTarget, 'e-input-group'))) {
                this.editModule.saveCell();
                this.notify(editNextValCell, {});
            }
            if (this.editSettings.mode === 'Normal') {
                this.editModule.editFormValidate();
            }
        }
        this.keyPress = false;
    }
    isChildGrid(e) {
        const gridElement = parentsUntil(e.target, 'e-grid');
        if ((gridElement && gridElement.id !== this.element.id) || (parentsUntil(e.target, 'e-unboundcelldiv') &&
            isNullOrUndefined(gridElement))) {
            return true;
        }
        return false;
    }
    /**
     * @param {Object} persistedData - Defines the persisted data
     * @returns {void}
     * @hidden
     */
    mergePersistGridData(persistedData) {
        const data = this.getLocalData();
        if (!(isNullOrUndefined(data) || (data === '')) || !isNullOrUndefined(persistedData)) {
            const dataObj = !isNullOrUndefined(persistedData) ? persistedData : JSON.parse(data);
            if (this.enableVirtualization) {
                dataObj.pageSettings.currentPage = 1;
            }
            const keys = Object.keys(dataObj);
            this.isProtectedOnChange = true;
            for (const key of keys) {
                if ((typeof this[key] === 'object') && !isNullOrUndefined(this[key])) {
                    if (Array.isArray(this[key]) && key === 'columns') {
                        setColumnIndex(this[key]);
                        this.mergeColumns(dataObj[key], this[key]);
                        this[key] = dataObj[key];
                    }
                    else {
                        extend(this[key], dataObj[key]);
                    }
                }
                else {
                    this[key] = dataObj[key];
                }
            }
            this.isProtectedOnChange = false;
        }
    }
    mergeColumns(storedColumn, columns) {
        const storedColumns = storedColumn;
        for (let i = 0; i < storedColumns.length; i++) {
            const localCol = columns.filter((tCol) => tCol.index === storedColumns[i].index)[0];
            if (!isNullOrUndefined(localCol)) {
                if (localCol.columns && localCol.columns.length) {
                    this.mergeColumns(storedColumns[i].columns, localCol.columns);
                    storedColumns[i] = extend(localCol, storedColumns[i], {}, true);
                }
                else {
                    storedColumns[i] = extend(localCol, storedColumns[i], {}, true);
                }
            }
        }
    }
    /**
     * @hidden
     * @returns {boolean} Returns the isDetail
     */
    isDetail() {
        return !isNullOrUndefined(this.detailTemplate) || !isNullOrUndefined(this.childGrid);
    }
    isCommandColumn(columns) {
        return columns.some((col) => {
            if (col.columns) {
                return this.isCommandColumn(col.columns);
            }
            return !!(col.commands || col.commandsTemplate);
        });
    }
    isForeignKeyEnabled(columns) {
        return columns.some((col) => {
            if (col.columns) {
                return this.isForeignKeyEnabled(col.columns);
            }
            return !!(col.dataSource && col.foreignKeyValue);
        });
    }
    keyPressHandler(e) {
        const presskey = extend(e, { cancel: false });
        this.trigger('keyPressed', presskey);
        if (presskey.cancel === true) {
            e.stopImmediatePropagation();
        }
    }
    keyDownHandler(e) {
        if (e.altKey) {
            if (e.keyCode === 74) { //alt j
                if (this.keyA) { //alt A J
                    this.notify(groupCollapse, { target: e.target, collapse: false });
                    this.keyA = false;
                }
                else {
                    this.focusModule.focusHeader();
                    this.focusModule.addOutline();
                }
            }
            if (e.keyCode === 87) { //alt w
                this.focusModule.focusContent();
                this.focusModule.addOutline();
            }
            if (e.keyCode === 65) { //alt A
                this.keyA = true;
            }
            if (e.keyCode === 72 && this.keyA) { //alt A H
                this.notify(groupCollapse, { target: e.target, collapse: true });
                this.keyA = false;
            }
        }
        if (e.keyCode === 13) {
            this.notify(enterKeyHandler, e);
        }
    }
    keyActionHandler(e) {
        if (this.isChildGrid(e) ||
            (this.isEdit && e.action !== 'escape' && e.action !== 'enter' && e.action !== 'shiftEnter'
                && e.action !== 'tab' && e.action !== 'shiftTab')) {
            return;
        }
        else {
            this.keyPress = true;
        }
        if (this.allowKeyboard) {
            if (e.action === 'ctrlPlusP') {
                e.preventDefault();
                this.print();
            }
            this.notify(keyPressed, e);
        }
    }
    /**
     * @param {Function[]} modules - Defines the modules
     * @returns {void}
     * @hidden
     */
    setInjectedModules(modules) {
        this.injectedModules = modules;
    }
    updateColumnObject() {
        prepareColumns(this.columns, this.enableColumnVirtualization, this);
        setColumnIndex(this.columns);
        this.initForeignColumn();
        this.notify(autoCol, {});
    }
    /**
     * Gets the foreign columns from Grid.
     *
     * @returns {Column[]} Returns Foreign key column
     */
    getForeignKeyColumns() {
        return this.getColumns().filter((col) => {
            return col.isForeignColumn();
        });
    }
    /**
     * @hidden
     * @returns {number} Returns row height
     */
    getRowHeight() {
        return this.rowHeight ? this.rowHeight : getRowHeight(this.element);
    }
    /**
     * Refreshes the Grid column changes.
     *
     * @returns {void}
     */
    refreshColumns() {
        this.setFrozenCount();
        const fCnt = this.getContent().querySelector('.e-frozen-left-content');
        const frCnt = this.getContent().querySelector('.e-frozen-right-content');
        const isColFrozen = !this.frozenRightCount && !this.frozenLeftCount;
        const isFrozen = this.getFrozenColumns() !== 0;
        if (!isFrozen && ((!fCnt && this.frozenLeftCount) || (!frCnt && this.frozenRightCount) || (fCnt && !this.frozenLeftCount)
            || (frCnt && !this.frozenRightCount))) {
            this.tableIndex = 0;
            this.tablesCount = 1;
            if (this.enableColumnVirtualization) {
                this.columnModel = [];
                this.updateColumnModel(this.columns);
            }
            this.freezeRefresh();
        }
        else if (isColFrozen && ((this.getFrozenColumns() === 1 && !fCnt) || (this.getFrozenColumns() === 0 && fCnt))) {
            this.tableIndex = 0;
            this.tablesCount = 1;
            if (this.enableColumnVirtualization) {
                this.columnModel = [];
                this.updateColumnModel(this.columns);
            }
            this.freezeRefresh();
        }
        else {
            this.isPreventScrollEvent = true;
            this.updateColumnObject();
            this.checkLockColumns(this.getColumns());
            this.refresh();
            if (this.isFrozenGrid()) {
                const mTbl = this.contentModule.getMovableContent().querySelector('.' + table);
                remove(mTbl.querySelector(colGroup));
                const colGroup$$1 = ((this.getHeaderContent()
                    .querySelector('.' + movableHeader).querySelector(colGroup)).cloneNode(true));
                mTbl.insertBefore(colGroup$$1, mTbl.querySelector(tbody));
                if (this.getFrozenMode() === 'Left-Right') {
                    const frTbl = this.contentModule.getFrozenRightContent().querySelector('.' + table);
                    remove(frTbl.querySelector(colGroup));
                    const colGrp = ((this.getHeaderContent()
                        .querySelector('.e-frozen-right-header').querySelector(colGroup)).cloneNode(true));
                    frTbl.insertBefore(colGrp, frTbl.querySelector(tbody));
                }
            }
        }
        if (this.isFrozenGrid()) {
            const left = this.getContent().querySelector('.e-movablescrollbar').scrollLeft;
            this.headerModule.getMovableHeader().scrollLeft = left;
            this.contentModule.getMovableContent().scrollLeft = left;
        }
    }
    /**
     * Export Grid data to Excel file(.xlsx).
     *
     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the Grid.
     * @param  {boolean} isMultipleExport - Define to enable multiple export.
     * @param  {Workbook} workbook - Defines the Workbook if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @returns {Promise<any>} Returns the excelexport
     */
    excelExport(excelExportProperties, isMultipleExport, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    workbook, isBlob) {
        return this.excelExportModule ?
            this.excelExportModule.Map(this, excelExportProperties, isMultipleExport, workbook, false, isBlob) : null;
    }
    /**
     * Export Grid data to CSV file.
     *
     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the Grid.
     * @param  {boolean} isMultipleExport - Define to enable multiple export.
     * @param  {Workbook} workbook - Defines the Workbook if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @returns {Promise<any>} Returns csv export
     */
    csvExport(excelExportProperties, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    isMultipleExport, workbook, isBlob) {
        return this.excelExportModule ?
            this.excelExportModule.Map(this, excelExportProperties, isMultipleExport, workbook, true, isBlob) : null;
    }
    /**
     * Export Grid data to PDF document.
     *
     * @param {pdfExportProperties} pdfExportProperties - Defines the export properties of the Grid.
     * @param {isMultipleExport} isMultipleExport - Define to enable multiple export.
     * @param {pdfDoc} pdfDoc - Defined the Pdf Document if multiple export is enabled.
     * @param {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @returns {Promise<any>} Returns pdfexport
     */
    pdfExport(pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
        return this.pdfExportModule ? this.pdfExportModule.Map(this, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) : null;
    }
    /**
     * Groups a column by column name.
     *
     * @param  {string} columnName - Defines the column name to group.
     * @returns {void}
     */
    groupColumn(columnName) {
        if (this.groupModule) {
            this.groupModule.groupColumn(columnName);
        }
    }
    /**
     * Expands all the grouped rows of the Grid.
     *
     * @returns {void}
     */
    groupExpandAll() {
        if (this.groupModule) {
            this.groupModule.expandAll();
        }
    }
    /**
     * Collapses all the grouped rows of the Grid.
     *
     * @returns {void}
     */
    groupCollapseAll() {
        if (this.groupModule) {
            this.groupModule.collapseAll();
        }
    }
    /**
     * Expands or collapses grouped rows by target element.
     *
     * @param  {Element} target - Defines the target element of the grouped row.
     * @returns {void}
     */
    // public expandCollapseRows(target: Element): void {
    //     if (this.groupModule) {
    //         this.groupModule.expandCollapseRows(target);
    //     }
    // }
    /**
     * Clears all the grouped columns of the Grid.
     *
     * @returns {void}
     */
    clearGrouping() {
        if (this.groupModule) {
            this.groupModule.clearGrouping();
        }
    }
    /**
     * Ungroups a column by column name.
     *
     * {% codeBlock src='grid/ungroupColumn/index.md' %}{% endcodeBlock %}
     *
     * @param  {string} columnName - Defines the column name to ungroup.
     * @returns {void}
     */
    ungroupColumn(columnName) {
        if (this.groupModule) {
            this.groupModule.ungroupColumn(columnName);
        }
    }
    /**
     * Column chooser can be displayed on screen by given position(X and Y axis).
     *
     * @param {number} x - Defines the X axis.
     * @param {number} y - Defines the Y axis.
     * @returns {void}
     */
    openColumnChooser(x, y) {
        if (this.columnChooserModule) {
            this.columnChooserModule.openColumnChooser(x, y);
        }
    }
    scrollRefresh() {
        const refresh = () => {
            this.scrollModule.refresh();
            this.off(contentReady, refresh);
        };
        this.on(contentReady, refresh, this);
    }
    /**
     * Collapses a detail row with the given target.
     *
     * @param  {Element} target - Defines the expanded element to collapse.
     * @returns {void}
     */
    // public detailCollapse(target: number | Element): void {
    //     if (this.detailRowModule) {
    //         this.detailRowModule.collapse(target);
    //     }
    // }
    /**
     * Collapses all the detail rows of the Grid.
     *
     * @returns {void}
     */
    detailCollapseAll() {
        if (this.detailRowModule) {
            this.detailRowModule.collapseAll();
        }
    }
    /**
     * Expands a detail row with the given target.
     *
     * @param  {Element} target - Defines the collapsed element to expand.
     * @returns {void}
     */
    // public detailExpand(target: number | Element): void {
    //     if (this.detailRowModule) {
    //         this.detailRowModule.expand(target);
    //     }
    // }
    /**
     * Expands all the detail rows of the Grid.
     *
     * @returns {void}
     */
    detailExpandAll() {
        if (this.detailRowModule) {
            this.detailRowModule.expandAll();
        }
    }
    /**
     * Deselects the currently selected cells.
     *
     * @returns {void}
     */
    clearCellSelection() {
        if (this.selectionModule) {
            this.selectionModule.clearCellSelection();
        }
    }
    /**
     * Deselects the currently selected rows.
     *
     * @returns {void}
     */
    clearRowSelection() {
        if (this.selectionModule) {
            this.selectionModule.clearRowSelection();
        }
    }
    /**
     * Selects a collection of cells by row and column indexes.
     *
     * @param  {ISelectedCell[]} rowCellIndexes - Specifies the row and column indexes.
     * @returns {void}
     */
    selectCells(rowCellIndexes) {
        if (this.selectionModule) {
            this.selectionModule.selectCells(rowCellIndexes);
        }
    }
    /**
     * Selects a range of rows from start and end row indexes.
     *
     * @param  {number} startIndex - Specifies the start row index.
     * @param  {number} endIndex - Specifies the end row index.
     * @returns {void}
     */
    selectRowsByRange(startIndex, endIndex) {
        if (this.selectionModule) {
            this.selectionModule.selectRowsByRange(startIndex, endIndex);
        }
    }
    /**
     * @hidden
     * @returns {boolean} Returns whether context menu is open or not
     */
    isContextMenuOpen() {
        return this.contextMenuModule && this.contextMenuModule.isOpen;
    }
    /**
     * @param {Function} module - Defines the module
     * @returns {boolean} return the injected modules
     * @hidden
     */
    ensureModuleInjected(module) {
        return this.getInjectedModules().indexOf(module) >= 0;
    }
    /**
     * Destroys the given template reference.
     *
     * @param {string[]} propertyNames - Defines the collection of template name.
     * @param {any} index - specifies the index
     */
    // eslint-disable-next-line
    destroyTemplate(propertyNames, index) {
        this.clearTemplate(propertyNames, index);
    }
    /**
     * @param {string | string[]} type - Defines the type
     * @param {Object} args - Defines the arguments
     * @returns {void}
     * @hidden
     * @private
     */
    log(type, args) {
        // eslint-disable-next-line
        this.loggerModule ? this.loggerModule.log(type, args) : (() => 0)();
    }
    /**
     * @param {Element} element - Defines the element
     * @returns {void}
     * @hidden
     */
    applyBiggerTheme(element) {
        if (this.element.classList.contains('e-bigger')) {
            element.classList.add('e-bigger');
        }
    }
    /**
     * @hidden
     * @returns {Object} Returns the previous row data
     */
    getPreviousRowData() {
        const previousRowData = this.getRowsObject()[this.getRows().length - 1].data;
        return previousRowData;
    }
    /**
     * Hides the scrollbar placeholder of Grid content when grid content is not overflown.
     *
     * @returns {void}
     */
    hideScroll() {
        const content$$1 = this.getContent().querySelector('.' + content);
        const scrollBar = this.getContent().querySelector('.e-scrollbar');
        if (content$$1.scrollHeight <= content$$1.clientHeight) {
            this.scrollModule.removePadding();
            content$$1.style.overflowY = 'auto';
        }
        if (this.isFrozenGrid() && scrollBar) {
            const mvblScrollBar = this.getContent().querySelector('.e-movablescrollbar');
            const mvblChild = this.getContent().querySelector('.e-movablechild');
            scrollBar.style.display = 'flex';
            if (mvblScrollBar.offsetWidth >= mvblChild.offsetWidth) {
                scrollBar.style.display = 'none';
                this.notify(frozenHeight, 0);
            }
        }
    }
    /**
     * Get row index by primary key or row data.
     *
     * @param  {string | Object} value - Defines the primary key value.
     * @returns {number} Returns the index
     */
    getRowIndexByPrimaryKey(value) {
        const pkName = this.getPrimaryKeyFieldNames()[0];
        value = typeof value === 'object' ? value[pkName] : value;
        const rows = this.getRowsObject();
        for (let i = 0; i < rows.length; i++) {
            if (rows[i].isDetailRow || rows[i].isCaptionRow) {
                continue;
            }
            let pKvalue = rows[i].data[pkName];
            if (pkName.split('.').length > 1) {
                pKvalue = performComplexDataOperation(pkName, rows[i].data);
            }
            if (pKvalue === value) {
                return rows[i].index;
            }
        }
        return -1;
    }
    /**
     * @param {string} field - Defines the field name
     * @returns {Column} returns the column
     * @hidden
     */
    // Need to have all columns while filtering with ColumnVirtualization.
    grabColumnByFieldFromAllCols(field) {
        let column;
        this.columnModel = [];
        this.updateColumnModel(this.columns);
        const gCols = this.columnModel;
        for (let i = 0; i < gCols.length; i++) {
            if (field === gCols[i].field) {
                column = gCols[i];
            }
        }
        return column;
    }
    /**
     * @param {string} uid - Defines the uid
     * @returns {Column} returns the column
     * @hidden
     */
    // Need to have all columns while filtering with ColumnVirtualization.
    grabColumnByUidFromAllCols(uid) {
        let column;
        this.columnModel = [];
        this.updateColumnModel(this.columns);
        const gCols = this.columnModel;
        for (let i = 0; i < gCols.length; i++) {
            if (uid === gCols[i].uid) {
                column = gCols[i];
            }
        }
        return column;
    }
    /**
     * Get all filtered records from the Grid and it returns array of objects for the local dataSource, returns a promise object if the Grid has remote data.
     *
     * @returns {Object[] | Promise<Object>} Returns the filtered records
     */
    getFilteredRecords() {
        if (this.allowFiltering && this.filterSettings.columns.length) {
            const query = this.renderModule.data.generateQuery(true);
            if (this.dataSource && this.renderModule.data.isRemote() && this.dataSource instanceof DataManager) {
                return this.renderModule.data.getData(this.dataSource, query);
            }
            else {
                if (this.dataSource instanceof DataManager) {
                    return this.dataSource.executeLocal(query);
                }
                else {
                    return new DataManager(this.dataSource, query).executeLocal(query);
                }
            }
        }
        return [];
    }
    getUserAgent() {
        const userAgent = Browser.userAgent.toLowerCase();
        return /iphone|ipod|ipad/.test(userAgent);
    }
    /**
     * @param {TouchEventArgs} e - Defines the TouchEventArgs
     * @returns {void}
     * @hidden
     */
    // Need to have all columns while filtering with ColumnVirtualization.
    // eslint-disable-next-line
    tapEvent(e) {
        if (this.getUserAgent()) {
            if (!Global.timer) {
                Global.timer = setTimeout(() => {
                    Global.timer = null;
                }, 300);
            }
            else {
                clearTimeout(Global.timer);
                Global.timer = null;
                this.dblClickHandler(e);
                this.notify(doubleTap, e);
            }
        }
    }
    /**
     * @param {string} prefix - specifies the prefix
     * @returns {string} returns the row uid
     * @hidden
     */
    getRowUid(prefix) {
        return `${prefix}${this.rowUid++}`;
    }
    /**
     * @hidden
     * @returns {Element} returns the element
     */
    getMovableVirtualContent() {
        return this.getContent().querySelector('.' + movableContent);
    }
    /**
     * @hidden
     * @returns {Element} returns the element
     */
    getFrozenVirtualContent() {
        return this.getContent().querySelector('.' + frozenContent);
    }
    /**
     * @hidden
     * @returns {Element} returns the element
     */
    getMovableVirtualHeader() {
        return this.getHeaderContent().querySelector('.' + movableHeader);
    }
    /**
     * @hidden
     * @returns {Element} returns the element
     */
    getFrozenVirtualHeader() {
        return this.getHeaderContent().querySelector('.' + frozenHeader);
    }
    /**
     * @param {string} uid - specifies the uid
     * @returns {Element} returns the element
     * @hidden
     */
    getRowElementByUID(uid) {
        let rowEle;
        let rows = [];
        if (this.isFrozenGrid()) {
            const fRows = [].slice.call(this.getFrozenVirtualContent().querySelector(tbody).children);
            const mRows = [].slice.call(this.getMovableVirtualContent().querySelector(tbody).children);
            let frozenRigtRows = [];
            if (this.tablesCount === 3) {
                frozenRigtRows = [].slice.call(this.getContent().querySelector('.e-frozen-right-content').querySelector(tbody).children);
            }
            if (this.frozenRows) {
                rows = [].slice.call(this.getFrozenVirtualHeader().querySelector(tbody).children);
                rows = rows.concat([].slice.call(this.getMovableVirtualHeader().querySelector(tbody).children));
                if (this.tablesCount === 3) {
                    const frHdr = this.getHeaderContent().querySelector('.e-frozen-right-header');
                    rows = rows.concat([].slice.call(frHdr.querySelector(tbody).children)).concat(frozenRigtRows);
                }
                rows = rows.concat(fRows).concat(mRows);
            }
            else {
                rows = fRows.concat(mRows).concat(frozenRigtRows);
            }
        }
        else {
            const cntRows = [].slice.call(this.getContent().querySelector(tbody).children);
            if (this.frozenRows) {
                rows = [].slice.call(this.getHeaderContent().querySelector(tbody).children);
                rows = rows.concat(cntRows);
            }
            else {
                rows = cntRows;
            }
        }
        for (const row$$1 of rows) {
            if (row$$1.getAttribute('data-uid') === uid) {
                rowEle = row$$1;
                break;
            }
        }
        return rowEle;
    }
    /**
     * Gets the hidden columns from the Grid.
     *
     * @returns {Column[]} Returns the Column
     */
    getHiddenColumns() {
        const cols = [];
        for (const col of this.columnModel) {
            if (col.visible === false) {
                cols.push(col);
            }
        }
        return cols;
    }
    /**
     * calculatePageSizeByParentHeight
     *
     * @param {number | string } containerHeight - specifies the container height
     * @returns {number} returns the page size
     */
    calculatePageSizeByParentHeight(containerHeight) {
        if (this.allowPaging) {
            if ((this.allowTextWrap && this.textWrapSettings.wrapMode === 'Header') || (!this.allowTextWrap)) {
                let pagesize = 0;
                if (containerHeight.indexOf('%') !== -1) {
                    containerHeight = parseInt(containerHeight, 10) / 100 * this.element.clientHeight;
                }
                const nonContentHeight = this.getNoncontentHeight() + this.getRowHeight();
                if (containerHeight > nonContentHeight) {
                    let contentHeight = 0;
                    contentHeight = containerHeight - this.getNoncontentHeight();
                    pagesize = (contentHeight / this.getRowHeight());
                }
                if (pagesize > 0) {
                    return Math.floor(pagesize);
                }
            }
        }
        return 0;
    }
    getNoncontentHeight() {
        let height = 0;
        if (!isNullOrUndefined(this.getHeaderContent().clientHeight)) {
            height += this.getHeaderContent().clientHeight;
        }
        if (this.toolbar && !isNullOrUndefined(this.element.querySelector('.e-toolbar').clientHeight)) {
            height += this.element.querySelector('.e-toolbar').clientHeight;
        }
        if (this.allowPaging && !isNullOrUndefined(this.element.querySelector('.e-gridpager').clientHeight)) {
            height += this.element.querySelector('.e-gridpager').clientHeight;
        }
        if (this.showColumnChooser && !isNullOrUndefined(this.element.querySelector('.e-columnheader').clientHeight)) {
            height += this.element.querySelector('.e-columnheader').clientHeight;
        }
        if (this.allowGrouping && this.groupSettings.showDropArea && !isNullOrUndefined(this.element.querySelector('.e-groupdroparea').clientHeight)) {
            height += this.element.querySelector('.e-groupdroparea').clientHeight;
        }
        if (this.aggregates.length > 0 && !isNullOrUndefined(this.element.querySelector('.e-summaryrow').clientHeight)) {
            for (let i = 0; i < this.element.getElementsByClassName('e-summaryrow').length; i++) {
                height += this.element.getElementsByClassName('e-summaryrow')[i].clientHeight;
            }
        }
        return height;
    }
    /**
     *To perform aggregate operation on a column.
     *
     * @param  {AggregateColumnModel} summaryCol - Pass Aggregate Column details.
     * @param  {Object} summaryData - Pass JSON Array for which its field values to be calculated.
     * @returns {number} returns the summary values
     */
    getSummaryValues(summaryCol, summaryData) {
        return DataUtil.aggregates[summaryCol.type.toLowerCase()](summaryData, summaryCol.field);
    }
    /**
     * Sends a Post request to export Grid to Excel file in server side.
     *
     * @param  {string} url - Pass Url for server side excel export action.
     * @returns {void}
     */
    serverExcelExport(url) {
        this.isExcel = true;
        this.exportGrid(url);
    }
    /**
     * Sends a Post request to export Grid to Pdf file in server side.
     *
     * @param  {string} url - Pass Url for server side pdf export action.
     * @returns {void}
     */
    serverPdfExport(url) {
        this.isExcel = false;
        this.exportGrid(url);
    }
    /**
     * Sends a Post request to export Grid to CSV file in server side.
     *
     * @param  {string} url - Pass Url for server side pdf export action.
     * @returns {void}
     */
    serverCsvExport(url) {
        this.isExcel = true;
        this.exportGrid(url);
    }
    /**
     * @param {string} url - Defines exporting url
     * @returns {void}
     * @hidden
     */
    exportGrid(url) {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const grid = this;
        const query = grid.getDataModule().generateQuery(true);
        const state = new UrlAdaptor().processQuery(new DataManager({ url: '' }), query);
        const queries = JSON.parse(state.data);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const gridModel = JSON.parse(this.addOnPersist(['allowGrouping', 'allowPaging', 'pageSettings', 'sortSettings', 'allowPdfExport', 'allowExcelExport', 'aggregates',
            'filterSettings', 'groupSettings', 'columns', 'locale', 'searchSettings']));
        const include = ['field', 'headerText', 'type', 'format', 'visible', 'foreignKeyValue', 'foreignKeyField',
            'template', 'index', 'width', 'textAlign', 'headerTextAlign', 'columns'];
        gridModel.filterSettings.columns = queries.where;
        gridModel.searchSettings.fields = queries.search && queries.search[0]['fields'] || [];
        gridModel.sortSettings.columns = queries.sorted;
        gridModel.columns = this.setHeaderText(gridModel.columns, include);
        const form = this.createElement('form', { id: 'ExportForm', styles: 'display:none;' });
        const gridInput = this.createElement('input', { id: 'gridInput', attrs: { name: 'gridModel' } });
        gridInput.value = JSON.stringify(gridModel);
        form.method = 'POST';
        form.action = url;
        form.appendChild(gridInput);
        document.body.appendChild(form);
        form.submit();
        form.remove();
    }
    /**
     * @param {Column[]} columns - Defines array of columns
     * @param {string[]} include - Defines array of sting
     * @returns {Column[]} returns array of columns
     * @hidden
     */
    setHeaderText(columns, include) {
        for (let i = 0; i < columns.length; i++) {
            const column = this.getColumnByUid(columns[i].uid);
            columns[i].headerText = column.headerText;
            if (!isNullOrUndefined(column.template)) {
                columns[i].template = 'true';
            }
            if (columns[i].format) {
                columns[i].format = getNumberFormat(this.getFormat(columns[i].format), columns[i].type, this.isExcel);
            }
            if (columns[i].columns) {
                this.setHeaderText(columns[i].columns, include);
            }
            const keys = Object.keys(columns[i]);
            for (let j = 0; j < keys.length; j++) {
                if (include.indexOf(keys[j]) < 0) {
                    delete columns[i][keys[j]];
                }
            }
        }
        return columns;
    }
    getFormat(format) {
        return typeof (format) === 'object' ? !isNullOrUndefined(format.format) ?
            format.format : format.skeleton : format;
    }
    /**
     * @hidden
     * @returns {boolean} returns the isCollapseStateEnabled
     */
    isCollapseStateEnabled() {
        const isExpanded = 'isExpanded';
        return this[isExpanded] === false;
    }
    /**
     * @param {number} key - Defines the primary key value.
     * @param {Object} rowData - Defines the rowData
     * @returns {void}
     */
    updateRowValue(key, rowData) {
        const args = {
            requestType: 'save', data: rowData
        };
        this.showSpinner();
        this.notify(updateData, args);
        this.refresh();
    }
    /**
     * @hidden
     * @returns {void}
     */
    setForeignKeyData() {
        this.dataBind();
        const colpending = this.getDataModule().getForeignKeyDataState();
        if (colpending.isPending) {
            this.getDataModule().setForeignKeyDataState({});
            colpending.resolver();
        }
        else {
            this.getDataModule().setForeignKeyDataState({ isDataChanged: false });
            if (this.contentModule || this.headerModule) {
                this.renderModule.render();
            }
        }
    }
    /**
     * @param {string} field - specifies the field
     * @returns {void}
     * @hidden
     */
    resetFilterDlgPosition(field) {
        const header = this.getColumnHeaderByField(field);
        if (header) {
            const target = header.querySelector('.e-filtermenudiv');
            const filterDlg = this.element.querySelector('.e-filter-popup');
            if (target && filterDlg) {
                const gClient = this.element.getBoundingClientRect();
                const fClient = target.getBoundingClientRect();
                if (filterDlg) {
                    if ((filterDlg.offsetWidth + fClient.right) > gClient.right) {
                        filterDlg.style.left = ((fClient.right - filterDlg.offsetWidth) - gClient.left).toString() + 'px';
                    }
                    else {
                        filterDlg.style.left = (fClient.right - gClient.left).toString() + 'px';
                    }
                }
            }
        }
    }
    /**
     * @hidden
     * @returns {void}
     */
    renderTemplates() {
        const portals = 'portals';
        this.notify('reactTemplateRender', this[portals]);
        this.renderReactTemplates();
    }
    /**
     * Apply the changes to the Grid without refreshing the rows.
     *
     * @param  {BatchChanges} changes - Defines changes to be updated.
     * @returns {void}
     */
    batchUpdate(changes) {
        this.processRowChanges(changes);
    }
    /**
     * Apply the changes to the Grid in one batch after 50ms without refreshing the rows.
     *
     * @param  {BatchChanges} changes - Defines changes to be updated.
     * @returns {void}
     */
    batchAsyncUpdate(changes) {
        this.processBulkRowChanges(changes);
    }
    processBulkRowChanges(changes) {
        if (!this.dataToBeUpdated) {
            this.dataToBeUpdated = Object.assign({ addedRecords: [], changedRecords: [], deletedRecords: [] }, changes);
            setTimeout(() => {
                this.processRowChanges(this.dataToBeUpdated);
                this.dataToBeUpdated = null;
            }, this.asyncTimeOut);
        }
        else {
            const loopstring = [addedRecords, changedRecords, deletedRecords];
            const keyField = this.getPrimaryKeyFieldNames()[0];
            for (let i = 0; i < loopstring.length; i++) {
                if (changes[loopstring[i]]) {
                    compareChanges(this, changes, loopstring[i], keyField);
                }
            }
        }
    }
    processRowChanges(changes) {
        const keyField = this.getPrimaryKeyFieldNames()[0];
        changes = Object.assign({ addedRecords: [], changedRecords: [], deletedRecords: [] }, changes);
        const promise = this.getDataModule().saveChanges(changes, keyField, {}, this.getDataModule().generateQuery().requiresCount());
        if (this.getDataModule().isRemote()) {
            promise.then(() => {
                this.setNewData();
            });
        }
        else {
            this.setNewData();
        }
    }
    setNewData() {
        const oldValues = JSON.parse(JSON.stringify(this.getCurrentViewRecords()));
        const getData = this.getDataModule().getData({}, this.getDataModule().generateQuery().requiresCount());
        getData.then((e) => {
            this.bulkRefresh(e.result, oldValues, e.count);
        });
    }
    deleteRowElement(row$$1) {
        const tr = this.getRowElementByUID(row$$1.uid);
        const index = parseInt(tr.getAttribute(ariaRowIndex), 10);
        remove(tr);
        if (this.getFrozenColumns()) {
            const mtr = this.getMovableRows()[index];
            remove(mtr);
        }
    }
    bulkRefresh(result, oldValues, count) {
        const rowObj = this.getRowsObject();
        const keyField = this.getPrimaryKeyFieldNames()[0];
        for (let i = 0; i < rowObj.length; i++) {
            if (!result.filter((e) => { return e[keyField] === rowObj[i].data[keyField]; }).length) {
                this.deleteRowElement(rowObj[i]);
                rowObj.splice(i, 1);
                i--;
            }
        }
        for (let i = 0; i < result.length; i++) {
            let isRowExist;
            oldValues.filter((e) => {
                if (e[keyField] === result[i][keyField]) {
                    if (e !== result[i]) {
                        this.setRowData(result[i][keyField], result[i]);
                    }
                    isRowExist = true;
                }
            });
            if (!isRowExist) {
                this.renderRowElement(result[i], i);
            }
        }
        this.currentViewData = result;
        const rows = [].slice.call(this.getContentTable().getElementsByClassName(row));
        resetRowIndex(this, this.getRowsObject(), rows);
        setRowElements(this);
        if (this.allowPaging) {
            this.notify(inBoundModelChanged, { module: 'pager', properties: { totalRecordsCount: count } });
        }
    }
    renderRowElement(data, index) {
        const row$$1 = new RowRenderer(this.serviceLocator, null, this);
        const model = new RowModelGenerator(this);
        const modelData = model.generateRows([data]);
        const tr = row$$1.render(modelData[0], this.getColumns());
        let mTr;
        let mTbody;
        this.addRowObject(modelData[0], index);
        let tbody$$1 = this.getContentTable().querySelector(tbody);
        if (tbody$$1.querySelector('.e-emptyrow')) {
            const emptyRow = tbody$$1.querySelector('.e-emptyrow');
            emptyRow.parentNode.removeChild(emptyRow);
            if (this.getFrozenColumns()) {
                const moveTbody = this.getContent().querySelector('.' + movableContent).querySelector(tbody);
                (moveTbody.firstElementChild).parentNode.removeChild(moveTbody.firstElementChild);
            }
        }
        if (this.getFrozenColumns()) {
            mTr = renderMovable(tr, this.getFrozenColumns(), this);
            if (this.frozenRows && index < this.frozenRows) {
                mTbody = this.getHeaderContent().querySelector('.' + movableHeader).querySelector(tbody);
            }
            else {
                mTbody = this.getContent().querySelector('.' + movableContent).querySelector(tbody);
            }
            mTbody.appendChild(mTr);
            if (this.height === 'auto') {
                this.notify(frozenHeight, {});
            }
        }
        if (this.frozenRows && index < this.frozenRows) {
            tbody$$1 = this.getHeaderContent().querySelector(tbody);
        }
        else {
            tbody$$1 = this.getContent().querySelector(tbody);
        }
        tbody$$1 = this.getContent().querySelector(tbody);
        tbody$$1.appendChild(tr);
    }
    addRowObject(row$$1, index) {
        const frzCols = this.getFrozenColumns();
        if (frzCols) {
            const mRows = this.getMovableRowsObject();
            const mRow = row$$1.clone();
            mRow.cells = mRow.cells.slice(frzCols);
            row$$1.cells = row$$1.cells.slice(0, frzCols);
            mRows.splice(index, 1, mRow);
        }
        this.getRowsObject().splice(index, 1, row$$1);
    }
    /**
     * @hidden
     * @returns {void}
     */
    updateVisibleExpandCollapseRows() {
        const rows = this.getRowsObject();
        for (let i = 0, len = rows.length; i < len; i++) {
            if ((rows[i].isDataRow || rows[i].isAggregateRow) && this.getRowElementByUID(rows[i].uid).style.display === 'none') {
                rows[i].visible = false;
            }
            else {
                rows[i].visible = true;
            }
        }
    }
    /**
     * @param {string | number} height - specifies the height
     * @returns {number | string} - specifies the height number
     * @hidden
     */
    getHeight(height) {
        if (!Number.isInteger(height) && height.indexOf('%') !== -1) {
            height = parseInt(height, 10) / 100 * this.element.clientHeight;
        }
        else if (!Number.isInteger(height) && this.height !== 'auto') {
            height = parseInt(height, 10);
        }
        else {
            height = this.height;
        }
        return height;
    }
    /**
     * @hidden
     * @returns {Element} - returns frozen right content
     */
    getFrozenRightContent() {
        return this.getContent().querySelector('.e-frozen-right-content');
    }
    /**
     * @hidden
     * @returns {Element} - returns frozen right header
     */
    getFrozenRightHeader() {
        return this.getHeaderContent().querySelector('.e-frozen-right-header');
    }
    /**
     * @hidden
     * @returns {Element} - returns movable header tbody
     */
    getMovableHeaderTbody() {
        return this.getMovableVirtualHeader().querySelector(tbody);
    }
    /**
     * @hidden
     * @returns {Element} - returns movable content tbody
     */
    getMovableContentTbody() {
        return this.getMovableVirtualContent().querySelector(tbody);
    }
    /**
     * @hidden
     * @returns {Element} - returns frozen header tbody
     */
    getFrozenHeaderTbody() {
        return this.getFrozenVirtualHeader().querySelector(tbody);
    }
    /**
     * @hidden
     * @returns {Element} - returns frozen left content tbody
     */
    getFrozenLeftContentTbody() {
        return this.getFrozenVirtualContent().querySelector(tbody);
    }
    /**
     * @hidden
     * @returns {Element} - returns frozen right header tbody
     */
    getFrozenRightHeaderTbody() {
        return this.getFrozenRightHeader().querySelector(tbody);
    }
    /**
     * @returns {Element} returns frozen right content tbody
     * @hidden
     */
    getFrozenRightContentTbody() {
        const cnt = this.getFrozenRightContent();
        let tbody$$1;
        if (cnt) {
            tbody$$1 = this.getFrozenRightContent().querySelector(tbody);
        }
        return tbody$$1;
    }
    /**
     * @param {boolean} isCustom - Defines custom filter dialog open
     * @returns {void}
     * @hidden
     */
    showResponsiveCustomFilter(isCustom) {
        if (this.filterModule) {
            this.filterModule.showCustomFilter(isCustom || this.rowRenderingMode === 'Vertical');
        }
    }
    /**
     * @param {boolean} isCustom - Defines custom sort dialog open
     * @returns {void}
     * @hidden
     */
    showResponsiveCustomSort(isCustom) {
        if (this.sortModule) {
            this.sortModule.showCustomSort(isCustom || this.rowRenderingMode === 'Vertical');
        }
    }
    /**
     * To manually show the vertical row mode filter dialog
     *
     * @returns {void}
     */
    showAdaptiveFilterDialog() {
        if (this.enableAdaptiveUI) {
            this.showResponsiveCustomFilter(true);
        }
    }
    /**
     * To manually show the vertical row sort filter dialog
     *
     * @returns {void}
     */
    showAdaptiveSortDialog() {
        if (this.enableAdaptiveUI) {
            this.showResponsiveCustomSort(true);
        }
    }
    /**
     * @param {boolean} isColVirtualization - Defines column virtualization
     * @returns {Column[]} returns array of column models
     * @hidden
     */
    getCurrentVisibleColumns(isColVirtualization) {
        const cols = [];
        const gridCols = isColVirtualization ? this.getColumns() : this.columnModel;
        for (const col of gridCols) {
            if (col.visible) {
                cols.push(col);
            }
        }
        return cols;
    }
    enableInfiniteAggrgate() {
        if (this.enableInfiniteScrolling && this.groupSettings.columns.length && !this.groupSettings.disablePageWiseAggregates) {
            this.setProperties({ groupSettings: { disablePageWiseAggregates: true } }, true);
        }
    }
};
__decorate$1([
    Property()
], Grid.prototype, "parentDetails", void 0);
__decorate$1([
    Property([])
], Grid.prototype, "columns", void 0);
__decorate$1([
    Property(true)
], Grid.prototype, "enableAltRow", void 0);
__decorate$1([
    Property(true)
], Grid.prototype, "enableHover", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "enableAutoFill", void 0);
__decorate$1([
    Property(true)
], Grid.prototype, "allowKeyboard", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "enableStickyHeader", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "allowTextWrap", void 0);
__decorate$1([
    Complex({}, TextWrapSettings)
], Grid.prototype, "textWrapSettings", void 0);
__decorate$1([
    Complex({}, ResizeSettings)
], Grid.prototype, "resizeSettings", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "allowPaging", void 0);
__decorate$1([
    Complex({}, PageSettings)
], Grid.prototype, "pageSettings", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "enableVirtualization", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "enableColumnVirtualization", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "enableInfiniteScrolling", void 0);
__decorate$1([
    Complex({}, SearchSettings)
], Grid.prototype, "searchSettings", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "allowSorting", void 0);
__decorate$1([
    Property('Ellipsis')
], Grid.prototype, "clipMode", void 0);
__decorate$1([
    Property(true)
], Grid.prototype, "allowMultiSorting", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "allowExcelExport", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "allowPdfExport", void 0);
__decorate$1([
    Complex({}, SortSettings)
], Grid.prototype, "sortSettings", void 0);
__decorate$1([
    Complex({}, InfiniteScrollSettings)
], Grid.prototype, "infiniteScrollSettings", void 0);
__decorate$1([
    Property(true)
], Grid.prototype, "allowSelection", void 0);
__decorate$1([
    Property(-1)
], Grid.prototype, "selectedRowIndex", void 0);
__decorate$1([
    Complex({}, SelectionSettings)
], Grid.prototype, "selectionSettings", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "allowFiltering", void 0);
__decorate$1([
    Property('Horizontal')
], Grid.prototype, "rowRenderingMode", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "enableAdaptiveUI", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "allowReordering", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "allowResizing", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "allowRowDragAndDrop", void 0);
__decorate$1([
    Complex({}, RowDropSettings)
], Grid.prototype, "rowDropSettings", void 0);
__decorate$1([
    Complex({}, FilterSettings)
], Grid.prototype, "filterSettings", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "allowGrouping", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "enableImmutableMode", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "showColumnMenu", void 0);
__decorate$1([
    Complex({}, GroupSettings)
], Grid.prototype, "groupSettings", void 0);
__decorate$1([
    Complex({}, EditSettings)
], Grid.prototype, "editSettings", void 0);
__decorate$1([
    Collection([], AggregateRow)
], Grid.prototype, "aggregates", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "showColumnChooser", void 0);
__decorate$1([
    Complex({}, ColumnChooserSettings)
], Grid.prototype, "columnChooserSettings", void 0);
__decorate$1([
    Property(false)
], Grid.prototype, "enableHeaderFocus", void 0);
__decorate$1([
    Property('auto')
], Grid.prototype, "height", void 0);
__decorate$1([
    Property('auto')
], Grid.prototype, "width", void 0);
__decorate$1([
    Property('Default')
], Grid.prototype, "gridLines", void 0);
__decorate$1([
    Property()
], Grid.prototype, "rowTemplate", void 0);
__decorate$1([
    Property()
], Grid.prototype, "detailTemplate", void 0);
__decorate$1([
    Property()
], Grid.prototype, "childGrid", void 0);
__decorate$1([
    Property()
], Grid.prototype, "queryString", void 0);
__decorate$1([
    Property('AllPages')
], Grid.prototype, "printMode", void 0);
__decorate$1([
    Property('Expanded')
], Grid.prototype, "hierarchyPrintMode", void 0);
__decorate$1([
    Property([])
], Grid.prototype, "dataSource", void 0);
__decorate$1([
    Property(null)
], Grid.prototype, "rowHeight", void 0);
__decorate$1([
    Property()
], Grid.prototype, "query", void 0);
__decorate$1([
    Property('USD')
], Grid.prototype, "currencyCode", void 0);
__decorate$1([
    Property()
], Grid.prototype, "toolbar", void 0);
__decorate$1([
    Property()
], Grid.prototype, "contextMenuItems", void 0);
__decorate$1([
    Property()
], Grid.prototype, "columnMenuItems", void 0);
__decorate$1([
    Property()
], Grid.prototype, "toolbarTemplate", void 0);
__decorate$1([
    Property()
], Grid.prototype, "pagerTemplate", void 0);
__decorate$1([
    Property(0)
], Grid.prototype, "frozenRows", void 0);
__decorate$1([
    Property(0)
], Grid.prototype, "frozenColumns", void 0);
__decorate$1([
    Property('')
], Grid.prototype, "cssClass", void 0);
__decorate$1([
    Property('All')
], Grid.prototype, "columnQueryMode", void 0);
__decorate$1([
    Property({})
], Grid.prototype, "currentAction", void 0);
__decorate$1([
    Property('20.1.58')
], Grid.prototype, "ej2StatePersistenceVersion", void 0);
__decorate$1([
    Event()
], Grid.prototype, "created", void 0);
__decorate$1([
    Event()
], Grid.prototype, "destroyed", void 0);
__decorate$1([
    Event()
], Grid.prototype, "load", void 0);
__decorate$1([
    Event()
], Grid.prototype, "rowDataBound", void 0);
__decorate$1([
    Event()
], Grid.prototype, "queryCellInfo", void 0);
__decorate$1([
    Event()
], Grid.prototype, "headerCellInfo", void 0);
__decorate$1([
    Event()
], Grid.prototype, "actionBegin", void 0);
__decorate$1([
    Event()
], Grid.prototype, "actionComplete", void 0);
__decorate$1([
    Event()
], Grid.prototype, "actionFailure", void 0);
__decorate$1([
    Event()
], Grid.prototype, "dataBound", void 0);
__decorate$1([
    Event()
], Grid.prototype, "recordDoubleClick", void 0);
__decorate$1([
    Event()
], Grid.prototype, "recordClick", void 0);
__decorate$1([
    Event()
], Grid.prototype, "rowSelecting", void 0);
__decorate$1([
    Event()
], Grid.prototype, "rowSelected", void 0);
__decorate$1([
    Event()
], Grid.prototype, "rowDeselecting", void 0);
__decorate$1([
    Event()
], Grid.prototype, "rowDeselected", void 0);
__decorate$1([
    Event()
], Grid.prototype, "cellSelecting", void 0);
__decorate$1([
    Event()
], Grid.prototype, "cellSelected", void 0);
__decorate$1([
    Event()
], Grid.prototype, "cellDeselecting", void 0);
__decorate$1([
    Event()
], Grid.prototype, "cellDeselected", void 0);
__decorate$1([
    Event()
], Grid.prototype, "columnSelecting", void 0);
__decorate$1([
    Event()
], Grid.prototype, "columnSelected", void 0);
__decorate$1([
    Event()
], Grid.prototype, "columnDeselecting", void 0);
__decorate$1([
    Event()
], Grid.prototype, "columnDeselected", void 0);
__decorate$1([
    Event()
], Grid.prototype, "columnDragStart", void 0);
__decorate$1([
    Event()
], Grid.prototype, "columnDrag", void 0);
__decorate$1([
    Event()
], Grid.prototype, "columnDrop", void 0);
__decorate$1([
    Event()
], Grid.prototype, "printComplete", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beforePrint", void 0);
__decorate$1([
    Event()
], Grid.prototype, "pdfQueryCellInfo", void 0);
__decorate$1([
    Event()
], Grid.prototype, "pdfHeaderQueryCellInfo", void 0);
__decorate$1([
    Event()
], Grid.prototype, "pdfAggregateQueryCellInfo", void 0);
__decorate$1([
    Event()
], Grid.prototype, "excelAggregateQueryCellInfo", void 0);
__decorate$1([
    Event()
], Grid.prototype, "exportDetailDataBound", void 0);
__decorate$1([
    Event()
], Grid.prototype, "excelQueryCellInfo", void 0);
__decorate$1([
    Event()
], Grid.prototype, "excelHeaderQueryCellInfo", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beforeExcelExport", void 0);
__decorate$1([
    Event()
], Grid.prototype, "excelExportComplete", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beforePdfExport", void 0);
__decorate$1([
    Event()
], Grid.prototype, "pdfExportComplete", void 0);
__decorate$1([
    Event()
], Grid.prototype, "rowDragStartHelper", void 0);
__decorate$1([
    Event()
], Grid.prototype, "detailDataBound", void 0);
__decorate$1([
    Event()
], Grid.prototype, "rowDragStart", void 0);
__decorate$1([
    Event()
], Grid.prototype, "rowDrag", void 0);
__decorate$1([
    Event()
], Grid.prototype, "rowDrop", void 0);
__decorate$1([
    Event()
], Grid.prototype, "toolbarClick", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beforeOpenColumnChooser", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beforeOpenAdaptiveDialog", void 0);
__decorate$1([
    Event()
], Grid.prototype, "batchAdd", void 0);
__decorate$1([
    Event()
], Grid.prototype, "batchDelete", void 0);
__decorate$1([
    Event()
], Grid.prototype, "batchCancel", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beforeBatchAdd", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beforeBatchDelete", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beforeBatchSave", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beginEdit", void 0);
__decorate$1([
    Event()
], Grid.prototype, "commandClick", void 0);
__decorate$1([
    Event()
], Grid.prototype, "cellEdit", void 0);
__decorate$1([
    Event()
], Grid.prototype, "cellSave", void 0);
__decorate$1([
    Event()
], Grid.prototype, "cellSaved", void 0);
__decorate$1([
    Event()
], Grid.prototype, "resizeStart", void 0);
__decorate$1([
    Event()
], Grid.prototype, "resizing", void 0);
__decorate$1([
    Event()
], Grid.prototype, "resizeStop", void 0);
__decorate$1([
    Event()
], Grid.prototype, "keyPressed", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beforeDataBound", void 0);
__decorate$1([
    Event()
], Grid.prototype, "contextMenuOpen", void 0);
__decorate$1([
    Event()
], Grid.prototype, "contextMenuClick", void 0);
__decorate$1([
    Event()
], Grid.prototype, "columnMenuOpen", void 0);
__decorate$1([
    Event()
], Grid.prototype, "columnMenuClick", void 0);
__decorate$1([
    Event()
], Grid.prototype, "checkBoxChange", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beforeCopy", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beforePaste", void 0);
__decorate$1([
    Event()
], Grid.prototype, "beforeAutoFill", void 0);
__decorate$1([
    Event()
], Grid.prototype, "columnDataStateChange", void 0);
__decorate$1([
    Event()
], Grid.prototype, "dataStateChange", void 0);
__decorate$1([
    Event()
], Grid.prototype, "dataSourceChanged", void 0);
__decorate$1([
    Event()
], Grid.prototype, "exportGroupCaption", void 0);
__decorate$1([
    Event()
], Grid.prototype, "lazyLoadGroupExpand", void 0);
__decorate$1([
    Event()
], Grid.prototype, "lazyLoadGroupCollapse", void 0);
Grid = Grid_1 = __decorate$1([
    NotifyPropertyChanges
], Grid);

/**
 * @returns {string[]} returns the cloned property
 * @hidden
 */
function getCloneProperties() {
    return ['aggregates', 'allowGrouping', 'allowFiltering', 'allowMultiSorting', 'allowReordering', 'allowSorting',
        'allowTextWrap', 'childGrid', 'columns', 'currentViewData', 'dataSource', 'detailTemplate', 'enableAltRow',
        'enableColumnVirtualization', 'filterSettings', 'gridLines',
        'groupSettings', 'height', 'locale', 'pageSettings', 'printMode', 'query', 'queryString', 'enableRtl',
        'rowHeight', 'rowTemplate', 'sortSettings', 'textWrapSettings', 'allowPaging', 'hierarchyPrintMode', 'searchSettings',
        'queryCellInfo', 'beforeDataBound'];
}
/**
 *
 * The `Print` module is used to handle print action.
 */
class Print {
    /**
     * Constructor for the Grid print module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {Scroll} scrollModule - specifies the scroll module
     * @hidden
     */
    constructor(parent, scrollModule) {
        this.isAsyncPrint = false;
        this.defered = new Deferred();
        this.parent = parent;
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(contentReady, this.isContentReady(), this);
        this.actionBeginFunction = this.actionBegin.bind(this);
        this.parent.addEventListener(actionBegin, this.actionBeginFunction);
        this.parent.on(onEmpty, this.onEmpty.bind(this));
        this.parent.on(hierarchyPrint, this.hierarchyPrint, this);
        this.scrollModule = scrollModule;
    }
    isContentReady() {
        if (this.isPrintGrid() && (this.parent.hierarchyPrintMode === 'None' || !this.parent.childGrid)) {
            return this.contentReady;
        }
        return () => {
            this.defered.promise.then(() => {
                this.contentReady();
            });
            if (this.isPrintGrid()) {
                this.hierarchyPrint();
            }
        };
    }
    hierarchyPrint() {
        this.removeColGroup(this.parent);
        const printGridObj = window.printGridObj;
        if (printGridObj && !printGridObj.element.querySelector('[aria-busy=true')) {
            printGridObj.printModule.defered.resolve();
        }
    }
    /**
     * By default, prints all the Grid pages and hides the pager.
     * > You can customize print options using the
     * [`printMode`](grid/#printmode-string/).
     *
     * @returns {void}
     */
    print() {
        this.renderPrintGrid();
    }
    onEmpty() {
        if (this.isPrintGrid()) {
            this.contentReady();
        }
    }
    actionBegin() {
        if (this.isPrintGrid()) {
            this.isAsyncPrint = true;
        }
    }
    renderPrintGrid() {
        const gObj = this.parent;
        const element = createElement('div', {
            id: this.parent.element.id + '_print', className: gObj.element.className + ' e-print-grid'
        });
        element.classList.remove('e-gridhover');
        document.body.appendChild(element);
        const printGrid = new Grid(getPrintGridModel(gObj, gObj.hierarchyPrintMode));
        for (let i = 0; i < printGrid.columns.length; i++) {
            printGrid.columns[i] = extend({}, printGrid.columns[i]);
            if (gObj.isFrozenGrid() && !gObj.getFrozenColumns()) {
                printGrid.columns[i].freeze = undefined;
            }
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (this.parent.isAngular) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            printGrid.viewContainerRef = this.parent.viewContainerRef;
        }
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        printGrid.load = () => { };
        printGrid.query = gObj.getQuery().clone();
        window.printGridObj = printGrid;
        printGrid.isPrinting = true;
        const modules = printGrid.getInjectedModules();
        const injectedModues = gObj.getInjectedModules();
        if (!modules || modules.length !== injectedModues.length) {
            printGrid.setInjectedModules(injectedModues);
        }
        gObj.notify(printGridInit, { element: element, printgrid: printGrid });
        this.parent.log('exporting_begin', this.getModuleName());
        printGrid.registeredTemplate = this.parent.registeredTemplate;
        printGrid.isVue = this.parent.isVue;
        printGrid.appendTo(element);
        printGrid.trigger = gObj.trigger;
    }
    contentReady() {
        if (this.isPrintGrid()) {
            const gObj = this.parent;
            if (this.isAsyncPrint) {
                this.printGrid();
                return;
            }
            const args = {
                requestType: 'print',
                element: gObj.element,
                selectedRows: gObj.getContentTable().querySelectorAll('tr[aria-selected="true"]'),
                cancel: false,
                hierarchyPrintMode: gObj.hierarchyPrintMode
            };
            if (!this.isAsyncPrint) {
                gObj.trigger(beforePrint, args);
            }
            if (args.cancel) {
                detach(gObj.element);
                return;
            }
            if (!this.isAsyncPrint) {
                this.printGrid();
            }
        }
    }
    printGrid() {
        const gObj = this.parent;
        // Height adjustment on print grid
        if (gObj.height !== 'auto') { // if scroller enabled
            const cssProps = this.scrollModule.getCssProperties();
            const contentDiv = gObj.element.querySelector('.' + content);
            const headerDiv = gObj.element.querySelector('.' + gridHeader);
            contentDiv.style.height = 'auto';
            contentDiv.style.overflowY = 'auto';
            headerDiv.style[cssProps.padding] = '';
            headerDiv.firstElementChild.style[cssProps.border] = '';
        }
        // Grid alignment adjustment on grouping
        if (gObj.allowGrouping) {
            if (!gObj.groupSettings.columns.length) {
                gObj.element.querySelector('.e-groupdroparea').style.display = 'none';
            }
            else {
                this.removeColGroup(gObj);
            }
        }
        // hide horizontal scroll
        for (const element of [].slice.call(gObj.element.getElementsByClassName(content))) {
            element.style.overflowX = 'hidden';
        }
        // Hide the waiting popup
        const waitingPop = [].slice.call(gObj.element.getElementsByClassName('e-spin-show'));
        for (const element of [].slice.call(waitingPop)) {
            classList(element, ['e-spin-hide'], ['e-spin-show']);
        }
        this.printGridElement(gObj);
        gObj.isPrinting = false;
        delete window.printGridObj;
        const args = {
            element: gObj.element
        };
        gObj.trigger(printComplete, args);
        gObj.destroy();
        this.parent.log('exporting_complete', this.getModuleName());
    }
    printGridElement(gObj) {
        classList(gObj.element, ['e-print-grid-layout'], ['e-print-grid']);
        if (gObj.isPrinting) {
            detach(gObj.element);
        }
        this.printWind = window.open('', 'print', 'height=' + window.outerHeight + ',width=' + window.outerWidth + ',tabbar=no');
        this.printWind.moveTo(0, 0);
        this.printWind.resizeTo(screen.availWidth, screen.availHeight);
        this.printWind = print(gObj.element, this.printWind);
    }
    removeColGroup(gObj) {
        const depth = gObj.groupSettings.columns.length;
        const element = gObj.element;
        const id = '#' + gObj.element.id;
        if (!depth) {
            return;
        }
        const groupCaption = selectAll(`.e-groupcaption`, element);
        const colSpan = groupCaption[depth - 1].getAttribute('colspan');
        for (let i = 0; i < groupCaption.length; i++) {
            groupCaption[i].setAttribute('colspan', colSpan);
        }
        const colGroups = selectAll(`colgroup${id}colgroup`, element);
        const contentColGroups = selectAll('.e-content colgroup', element);
        this.hideColGroup(colGroups, depth);
        this.hideColGroup(contentColGroups, depth);
    }
    hideColGroup(colGroups, depth) {
        for (let i = 0; i < colGroups.length; i++) {
            for (let j = 0; j < depth; j++) {
                colGroups[i].children[j].style.display = 'none';
            }
        }
    }
    /**
     * To destroy the print
     *
     * @returns {boolean} returns the isPrintGrid or not
     * @hidden
     */
    isPrintGrid() {
        return this.parent.element.id.indexOf('_print') > 0 && this.parent.isPrinting;
    }
    /**
     * To destroy the print
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(contentReady, this.contentReady.bind(this));
        this.parent.removeEventListener(actionBegin, this.actionBeginFunction);
        this.parent.off(onEmpty, this.onEmpty.bind(this));
        this.parent.off(hierarchyPrint, this.hierarchyPrint);
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'print';
    }
}
Print.printGridProp = [...getCloneProperties(), beforePrint, printComplete, load];

//https://typescript.codeplex.com/discussions/401501
/**
 * Function to check whether target object implement specific interface
 *
 * @param  {Object} target - specifies the target
 * @param  {string} checkFor - specifies the checkfors
 * @returns {boolean} returns the boolean
 * @hidden
 */
function doesImplementInterface(target, checkFor) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    return target.prototype && checkFor in target.prototype;
}
/**
 * Function to get value from provided data
 *
 * @param  {string} field - specifies the field
 * @param  {Object} data - specifies the data
 * @param  {ColumnModel} column - specifies the column
 * @returns {Object} returns the object
 * @hidden
 */
// eslint-disable-next-line
function valueAccessor(field, data, column) {
    return (isNullOrUndefined(field) || field === '') ? '' : DataUtil.getObject(field, data);
}
/**
 * Defines the method used to apply custom header cell values from external function and display this on each header cell rendered.
 *
 * @param  {string} field - specifies the field
 * @param  {ColumnModel} column - specifies the column
 * @returns {object} headerValueAccessor
 * @hidden
 */
function headerValueAccessor(field, column) {
    return (isNullOrUndefined(field) || field === '') ? '' : DataUtil.getObject(field, column);
}
/**
 * The function used to update Dom using requestAnimationFrame.
 *
 * @param {Function} updateFunction - Function that contains the actual action
 * @param {object} callBack - defines the callback
 * @returns {void}
 * @hidden
 */
// eslint-disable-next-line
function getUpdateUsingRaf(updateFunction, callBack) {
    requestAnimationFrame(() => {
        try {
            callBack(null, updateFunction());
        }
        catch (e) {
            callBack(e);
        }
    });
}
/**
 * @hidden
 * @param {PdfExportProperties | ExcelExportProperties} exportProperties - Defines the export properties
 * @returns {boolean} Returns isExportColumns
 */
function isExportColumns(exportProperties) {
    return !isNullOrUndefined(exportProperties) &&
        !isNullOrUndefined(exportProperties.columns) && exportProperties.columns.length > 0;
}
/**
 * @param {PdfExportProperties | ExcelExportProperties} exportProperties - Defines the export properties
 * @param {IGrid} gObj - Defines the grid object
 * @returns {void}
 * @hidden
 */
function updateColumnTypeForExportColumns(exportProperties, gObj) {
    const exportColumns = exportProperties.columns;
    const gridColumns = gObj.columns;
    for (let i = 0; i < exportColumns.length; i++) {
        if (gridColumns.length - 1 >= i) {
            if (gridColumns[i].columns) {
                for (let j = 0; j < gridColumns[i].columns.length; j++) {
                    exportColumns[i].columns[j].type = gridColumns[i].columns[j].type;
                }
            }
            else {
                exportColumns[i].type = gridColumns[i].type;
            }
        }
    }
}
/**
 * @hidden
 * @param {IGrid} grid - Defines the grid
 * @returns {void}
 */
function updatecloneRow(grid) {
    const nRows = [];
    const actualRows = grid.vRows;
    for (let i = 0; i < actualRows.length; i++) {
        if (actualRows[i].isDataRow) {
            nRows.push(actualRows[i]);
        }
        else if (!actualRows[i].isDataRow) {
            nRows.push(actualRows[i]);
            if (!actualRows[i].isExpand && actualRows[i].isCaptionRow) {
                i += getCollapsedRowsCount(actualRows[i], grid);
            }
        }
    }
    grid.vcRows = nRows;
}
let count = 0;
/**
 * @hidden
 * @param {Row<Column>} val - Defines the value
 * @param {IGrid} grid - Defines the grid
 * @returns {number} Returns the collapsed row count
 */
function getCollapsedRowsCount(val, grid) {
    count = 0;
    const gSummary = 'gSummary';
    const total = 'count';
    const gLen = grid.groupSettings.columns.length;
    const records = 'records';
    const items = 'items';
    const value = val[gSummary];
    let dataRowCnt = 0;
    const agrCnt = 'aggregatesCount';
    if (value === val.data[total]) {
        if (grid.groupSettings.columns.length && !isNullOrUndefined(val[agrCnt]) && val[agrCnt]) {
            if (grid.groupSettings.columns.length !== 1) {
                count += (val.indent !== 0 && (value) < 2) ? (val[gSummary] * ((gLen - val.indent) + (gLen - val.indent) * val[agrCnt])) :
                    (val[gSummary] * ((gLen - val.indent) + (gLen - val.indent - 1) * val[agrCnt])) + val[agrCnt];
            }
            else if (grid.groupSettings.columns.length === 1) {
                count += (val[gSummary] * (gLen - val.indent)) + val[agrCnt];
            }
        }
        else if (grid.groupSettings.columns.length) {
            if (grid.groupSettings.columns.length !== 1) {
                count += val[gSummary] * (grid.groupSettings.columns.length - val.indent);
            }
            else {
                count += val[gSummary];
            }
        }
        return count;
    }
    else {
        for (let i = 0, len = val.data[items].length; i < len; i++) {
            const gLevel = val.data[items][i];
            count += gLevel[items].length + ((gLen !== grid.columns.length) &&
                !isNullOrUndefined(gLevel[items][records]) ? gLevel[items][records].length : 0);
            dataRowCnt += (!isNullOrUndefined(gLevel[items][records]) && !isNullOrUndefined(val[agrCnt])) ? gLevel[items][records].length :
                gLevel[items].length;
            if (gLevel[items].GroupGuid && gLevel[items].childLevels !== 0) {
                recursive(gLevel);
            }
        }
        count += val.data[items].length;
        if (!isNullOrUndefined(val[agrCnt])) {
            if (val[agrCnt] && count && dataRowCnt !== 0) {
                count += ((count - dataRowCnt) * val[agrCnt]) + val[agrCnt];
            }
        }
    }
    return count;
}
/**
 * @param {Object[]} row - Defines the row
 * @returns {void}
 * @hidden
 */
function recursive(row$$1) {
    const items = 'items';
    const rCount = 'count';
    for (let j = 0, length = row$$1[items].length; j < length; j++) {
        const nLevel = row$$1[items][j];
        count += nLevel[rCount];
        if (nLevel[items].childLevels !== 0) {
            recursive(nLevel);
        }
    }
}
/**
 * @param {Object[]} collection - Defines the array
 * @param {Object} predicate - Defines the predicate
 * @returns {Object} Returns the object
 * @hidden
 */
function iterateArrayOrObject(collection, predicate) {
    const result = [];
    for (let i = 0, len = collection.length; i < len; i++) {
        const pred = predicate(collection[i], i);
        if (!isNullOrUndefined(pred)) {
            result.push(pred);
        }
    }
    return result;
}
/**
 * @param {Object[]} array - Defines the array
 * @returns {Object} Returns the object
 * @hidden
 */
function iterateExtend(array) {
    const obj = [];
    for (let i = 0; i < array.length; i++) {
        obj.push(extend({}, getActualProperties(array[i]), {}, true));
    }
    return obj;
}
/**
 * @param {string} template - Defines the template
 * @returns {Function} Returns the function
 * @hidden
 */
function templateCompiler(template) {
    if (template) {
        try {
            if (document.querySelectorAll(template).length) {
                return compile(document.querySelector(template).innerHTML.trim());
            }
            else {
                return compile(template);
            }
        }
        catch (e) {
            return compile(template);
        }
    }
    return undefined;
}
/**
 * @param {Element} node - Defines the column
 * @param {Object} customAttributes - Defines the index
 * @returns {void}
 * @hidden
 */
function setStyleAndAttributes(node, customAttributes) {
    const copyAttr = {};
    const literals = ['style', 'class'];
    //Dont touch the original object - make a copy
    extend(copyAttr, customAttributes, {});
    if ('style' in copyAttr) {
        setStyleAttribute(node, copyAttr[literals[0]]);
        delete copyAttr[literals[0]];
    }
    if ('class' in copyAttr) {
        addClass([node], copyAttr[literals[1]]);
        delete copyAttr[literals[1]];
    }
    attributes(node, copyAttr);
}
/**
 * @param {Object} copied - Defines the column
 * @param {Object} first - Defines the inndex
 * @param {Object} second - Defines the second object
 * @param {string[]} exclude - Defines the exclude
 * @returns {Object} Returns the object
 * @hidden
 */
function extend$1(copied, first, second, exclude) {
    const moved = extend(copied, first, second);
    const values = Object.keys(moved);
    for (let i = 0; i < values.length; i++) {
        if (exclude && exclude.indexOf(values[i]) !== -1) {
            delete moved[values[i]];
        }
    }
    return moved;
}
/**
 * @param {Column[]} columnModel - Defines the column
 * @param {number} ind - Defines the inndex
 * @returns {number} - Returns the columnindex
 * @hidden
 */
function setColumnIndex(columnModel, ind = 0) {
    for (let i = 0, len = columnModel.length; i < len; i++) {
        if (columnModel[i].columns) {
            columnModel[i].index = isNullOrUndefined(columnModel[i].index) ? ind : columnModel[i].index;
            ind++;
            ind = setColumnIndex(columnModel[i].columns, ind);
        }
        else {
            columnModel[i].index = isNullOrUndefined(columnModel[i].index) ? ind : columnModel[i].index;
            ind++;
        }
    }
    return ind;
}
/**
 * @param {Column[] | string[] | ColumnModel[]} columns - Defines the column
 * @param {boolean} autoWidth - Defines the autowidth
 * @param {IGrid} gObj - Defines the class name
 * @returns {Column} - Returns the columns
 * @hidden
 */
function prepareColumns(columns, autoWidth, gObj) {
    for (let c = 0, len = columns.length; c < len; c++) {
        let column;
        if (typeof columns[c] === 'string') {
            column = new Column({ field: columns[c] }, gObj);
        }
        else if (!(columns[c] instanceof Column) || columns[c].columns) {
            if (!columns[c].columns) {
                column = new Column(columns[c], gObj);
            }
            else {
                columns[c].columns = prepareColumns(columns[c].columns, null, gObj);
                column = new Column(columns[c], gObj);
            }
        }
        else {
            column = columns[c];
        }
        if (column.type && column.type.toLowerCase() === 'checkbox') {
            column.allowReordering = false;
        }
        column.headerText = isNullOrUndefined(column.headerText) ? column.foreignKeyValue || column.field || '' : column.headerText;
        column.foreignKeyField = column.foreignKeyField || column.field;
        column.valueAccessor = (typeof column.valueAccessor === 'string' ? getValue(column.valueAccessor, window)
            : column.valueAccessor) || valueAccessor;
        column.width = autoWidth && isNullOrUndefined(column.width) ? 200 : column.width;
        if (isNullOrUndefined(column.visible)) {
            column.visible = true;
        }
        columns[c] = column;
    }
    return columns;
}
/**
 * @param {HTMLElement} popUp - Defines the popup element
 * @param {MouseEvent | TouchEvent} e - Defines the moouse event
 * @param {string} className - Defines the class name
 * @returns {void}
 * @hidden
 */
function setCssInGridPopUp(popUp, e, className) {
    const popUpSpan = popUp.querySelector('span');
    const position = popUp.parentElement.getBoundingClientRect();
    const targetPosition = e.target.getBoundingClientRect();
    popUpSpan.className = className;
    popUp.style.display = '';
    const isBottomTail = (isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY :
        e.clientY) > popUp.offsetHeight + 10;
    popUp.style.top = targetPosition.top - position.top +
        (isBottomTail ? -(popUp.offsetHeight + 10) : popUp.offsetHeight + 10) + 'px'; //10px for tail element
    popUp.style.left = getPopupLeftPosition(popUp, e, targetPosition, position.left) + 'px';
    if (isBottomTail) {
        popUp.querySelector('.e-downtail').style.display = '';
        popUp.querySelector('.e-uptail').style.display = 'none';
    }
    else {
        popUp.querySelector('.e-downtail').style.display = 'none';
        popUp.querySelector('.e-uptail').style.display = '';
    }
}
/**
 * @param {HTMLElement} popup - Defines the popup element
 * @param {MouseEvent | TouchEvent} e  - Defines the mouse event
 * @param {Object} targetPosition - Defines the target position
 * @param {number} targetPosition.top - Defines the top position
 * @param {number} targetPosition.left  - Defines the left position
 * @param {number} targetPosition.right  - Defines the right position
 * @param {number} left - Defines the left position
 * @returns {number} Returns the popup left position
 * @hidden
 */
function getPopupLeftPosition(popup, e, targetPosition, left) {
    const width = popup.offsetWidth / 2;
    const x = getPosition(e).x;
    if (x - targetPosition.left < width) {
        return targetPosition.left - left;
    }
    else if (targetPosition.right - x < width) {
        return targetPosition.right - left - width * 2;
    }
    else {
        return x - left - width;
    }
}
/**
 * @param {Object} obj - Defines the object
 * @returns {Object} Returns the Properties
 * @hidden
 */
function getActualProperties(obj) {
    if (obj instanceof ChildProperty) {
        return getValue('properties', obj);
    }
    else {
        return obj;
    }
}
/**
 * @param {Element} elem - Defines the element
 * @param {string} selector - Defines the string selector
 * @param {boolean} isID - Defines the isID
 * @returns {Element} Returns the element
 * @hidden
 */
function parentsUntil(elem, selector, isID) {
    let parent = elem;
    while (parent) {
        if (isID ? parent.id === selector : parent.classList.contains(selector)) {
            break;
        }
        parent = parent.parentElement;
    }
    return parent;
}
/**
 * @param {Element} element - Defines the element
 * @param {Element} elements - Defines the element
 * @returns {number} Returns the element index
 * @hidden
 */
function getElementIndex(element, elements) {
    let index = -1;
    for (let i = 0, len = elements.length; i < len; i++) {
        if (elements[i].isEqualNode(element)) {
            index = i;
            break;
        }
    }
    return index;
}
/**
 * @param {Object} value - Defines the value
 * @param {Object} collection - defines the collection
 * @returns {number} Returns the array
 * @hidden
 */
function inArray(value, collection) {
    for (let i = 0, len = collection.length; i < len; i++) {
        if (collection[i] === value) {
            return i;
        }
    }
    return -1;
}
/**
 * @param {Object} collection - Defines the collection
 * @returns {Object} Returns the object
 * @hidden
 */
function getActualPropFromColl(collection) {
    const coll = [];
    for (let i = 0, len = collection.length; i < len; i++) {
        // eslint-disable-next-line no-prototype-builtins
        if (collection[i].hasOwnProperty('properties')) {
            coll.push(collection[i].properties);
        }
        else {
            coll.push(collection[i]);
        }
    }
    return coll;
}
/**
 * @param {Element} target - Defines the target element
 * @param {string} selector - Defines the selector
 * @returns {void}
 * @hidden
 */
function removeElement(target, selector) {
    const elements = [].slice.call(target.querySelectorAll(selector));
    for (let i = 0; i < elements.length; i++) {
        remove(elements[i]);
    }
}
/**
 * @param {MouseEvent | TouchEvent} e Defines the mouse event
 * @returns {IPosition} Returns the position
 * @hidden
 */
function getPosition(e) {
    const position = {};
    position.x = (isNullOrUndefined(e.clientX) ? e.changedTouches[0].clientX :
        e.clientX);
    position.y = (isNullOrUndefined(e.clientY) ? e.changedTouches[0].clientY :
        e.clientY);
    return position;
}
let uid = 0;
/**
 * @param {string} prefix - Defines the prefix string
 * @returns {string} Returns the uid
 * @hidden
 */
function getUid(prefix) {
    return prefix + uid++;
}
/**
 * @param {Element | DocumentFragment} elem - Defines the element
 * @param {Element[] | NodeList} children - Defines the Element
 * @returns {Element} Returns the element
 * @hidden
 */
function appendChildren(elem, children) {
    for (let i = 0, len = children.length; i < len; i++) {
        if (len === children.length) {
            elem.appendChild(children[i]);
        }
        else {
            elem.appendChild(children[0]);
        }
    }
    return elem;
}
/**
 * @param {Element} elem - Defines the element
 * @param {string} selector - Defines the selector
 * @param {boolean} isID - Defines isID
 * @returns {Element} Return the element
 * @hidden
 */
function parents(elem, selector, isID) {
    let parent = elem;
    const parents = [];
    while (parent) {
        if (isID ? parent.id === selector : parent.classList.contains(selector)) {
            parents.push(parent);
        }
        parent = parent.parentElement;
    }
    return parents;
}
/**
 * @param {AggregateType | string} type - Defines the type
 * @param {Object} data - Defines the data
 * @param {AggregateColumnModel} column - Defines the column
 * @param {Object} context - Defines the context
 * @returns {Object} Returns the calculated aggragate
 * @hidden
 */
function calculateAggregate(type, data, column, context) {
    if (type === 'Custom') {
        let temp = column.customAggregate;
        if (typeof temp === 'string') {
            temp = getValue(temp, window);
        }
        return temp ? temp.call(context, data, column) : '';
    }
    return (column.field in data || data instanceof Array) ? DataUtil.aggregates[type.toLowerCase()](data, column.field) : null;
}
/** @hidden */
let scrollWidth = null;
/** @hidden
 * @returns {number} - Returns the scrollbarwidth
 */
function getScrollBarWidth() {
    if (scrollWidth !== null) {
        return scrollWidth;
    }
    const divNode = document.createElement('div');
    let value = 0;
    divNode.style.cssText = 'width:100px;height: 100px;overflow: scroll;position: absolute;top: -9999px;';
    document.body.appendChild(divNode);
    value = (divNode.offsetWidth - divNode.clientWidth) | 0;
    document.body.removeChild(divNode);
    return scrollWidth = value;
}
/** @hidden */
let rowHeight;
/**
 * @param {HTMLElement} element - Defines the element
 * @returns {number} Returns the roww height
 * @hidden
 */
function getRowHeight(element) {
    if (rowHeight !== undefined) {
        return rowHeight;
    }
    const table$$1 = createElement('table', { className: table, styles: 'visibility: hidden', attrs: { role: 'grid' } });
    table$$1.innerHTML = '<tr><td class="e-rowcell">A<td></tr>';
    element.appendChild(table$$1);
    const rect = table$$1.querySelector('td').getBoundingClientRect();
    element.removeChild(table$$1);
    rowHeight = Math.ceil(rect.height);
    return rowHeight;
}
/** @hidden */
let actualRowHeight;
/**
 * @param {HTMLElement} element - Defines the HTMl element
 * @returns {number} Returns the row height
 * @hidden
 */
function getActualRowHeight(element) {
    if (actualRowHeight !== undefined) {
        return rowHeight;
    }
    const table$$1 = createElement('table', { className: table, styles: 'visibility: hidden', attrs: { role: 'grid' } });
    table$$1.innerHTML = '<tr><td class="e-rowcell">A<td></tr>';
    element.appendChild(table$$1);
    const rect = table$$1.querySelector('tr').getBoundingClientRect();
    element.removeChild(table$$1);
    return rect.height;
}
/**
 * @param {string} field - Defines the field
 * @returns {boolean} - Returns is complex field
 * @hidden
 */
function isComplexField(field) {
    return field.split('.').length > 1;
}
/**
 * @param {string} field - Defines the field
 * @returns {string} - Returns the get complex field ID
 * @hidden
 */
function getComplexFieldID(field = '') {
    return field.replace(/\./g, '___');
}
/**
 * @param {string} field - Defines the field
 * @returns {string} - Returns the set complex field ID
 * @hidden
 */
function setComplexFieldID(field = '') {
    return field.replace(/___/g, '.');
}
/**
 * @param {Column} col - Defines the column
 * @param {string} type - Defines the type
 * @param {Element} elem - Defines th element
 * @returns {boolean} Returns is Editable
 * @hidden
 */
function isEditable(col, type, elem) {
    const row$$1 = parentsUntil(elem, row);
    const isOldRow = !row$$1 ? true : row$$1 && !row$$1.classList.contains('e-insertedrow');
    if (type === 'beginEdit' && isOldRow) {
        if (col.isIdentity || col.isPrimaryKey || !col.allowEditing) {
            return false;
        }
        return true;
    }
    else if (type === 'add' && col.isIdentity) {
        return false;
    }
    else {
        if (isOldRow && !col.allowEditing && !col.isIdentity && !col.isPrimaryKey) {
            return false;
        }
        return true;
    }
}
/**
 * @param {IGrid} inst - Defines the IGrid
 * @returns {boolean} Returns is action prevent in boolean
 * @hidden
 */
function isActionPrevent(inst) {
    const dlg = select('#' + inst.element.id + 'EditConfirm', inst.element);
    return inst.editSettings.mode === 'Batch' &&
        (selectAll('.e-updatedtd', inst.element).length) && inst.editSettings.showConfirmDialog &&
        (dlg ? dlg.classList.contains('e-popup-close') : true);
}
/**
 * @param {any} elem - Defines the element
 * @param {boolean} action - Defines the boolean for action
 * @returns {void}
 * @hidden
 */
// eslint-disable-next-line
function wrap(elem, action) {
    const clName = 'e-wrap';
    elem = elem instanceof Array ? elem : [elem];
    for (let i = 0; i < elem.length; i++) {
        if (action) {
            elem[i].classList.add(clName);
        }
        else {
            elem[i].classList.remove(clName);
        }
    }
}
/**
 * @param {ServiceLocator} serviceLocator - Defines the service locator
 * @param {Column} column  - Defines the column
 * @returns {void}
 * @hidden
 */
function setFormatter(serviceLocator, column) {
    const fmtr = serviceLocator.getService('valueFormatter');
    const format = 'format';
    let args;
    if (column.type === 'date' || column.type === 'datetime') {
        args = { type: column.type, skeleton: column.format };
        if ((typeof (column.format) === 'string') && column.format !== 'yMd') {
            args[format] = column.format;
        }
    }
    switch (column.type) {
        case 'date':
            column.setFormatter(fmtr.getFormatFunction(args));
            column.setParser(fmtr.getParserFunction(args));
            break;
        case 'datetime':
            column.setFormatter(fmtr.getFormatFunction(args));
            column.setParser(fmtr.getParserFunction(args));
            break;
        case 'number':
            column.setFormatter(fmtr.getFormatFunction({ format: column.format }));
            column.setParser(fmtr.getParserFunction({ format: column.format }));
            break;
    }
}
/**
 * @param {Element} cells - Defines the cell element
 * @param {boolean} add - Defines the add
 * @param {string} args - Defines the args
 * @returns {void}
 * @hidden
 */
function addRemoveActiveClasses(cells, add, ...args) {
    for (let i = 0, len = cells.length; i < len; i++) {
        if (add) {
            classList(cells[i], [...args], []);
            cells[i].setAttribute('aria-selected', 'true');
        }
        else {
            classList(cells[i], [], [...args]);
            cells[i].removeAttribute('aria-selected');
        }
    }
}
/**
 * @param {string} result - Defines th string
 * @returns {string} Returns the distinct staing values
 * @hidden
 */
function distinctStringValues(result) {
    const temp = {};
    const res = [];
    for (let i = 0; i < result.length; i++) {
        if (!(result[i] in temp)) {
            res.push(result[i].toString());
            temp[result[i]] = 1;
        }
    }
    return res;
}
/**
 * @param {Element} target - Defines the target
 * @param {Dialog} dialogObj - Defines the dialog
 * @returns {void}
 * @hidden
 */
function getFilterMenuPostion(target, dialogObj) {
    const elementVisible = dialogObj.element.style.display;
    dialogObj.element.style.display = 'block';
    const dlgWidth = dialogObj.width;
    const newpos = calculateRelativeBasedPosition(target, dialogObj.element);
    dialogObj.element.style.display = elementVisible;
    dialogObj.element.style.top = (newpos.top + target.getBoundingClientRect().height) - 5 + 'px';
    const leftPos = ((newpos.left - dlgWidth) + target.clientWidth);
    if (leftPos < 1) {
        dialogObj.element.style.left = (dlgWidth + leftPos) - 16 + 'px'; // right calculation
    }
    else {
        dialogObj.element.style.left = leftPos + -4 + 'px';
    }
}
/**
 * @param {Object} args - Defines the args
 * @param {Popup} args.popup - Defines the args for popup
 * @param {Dialog} dialogObj - Defines the dialog obj
 * @returns {void}
 * @hidden
 */
function getZIndexCalcualtion(args, dialogObj) {
    args.popup.element.style.zIndex = (dialogObj.zIndex + 1).toString();
}
/**
 * @param {Element} elem - Defines the element
 * @returns {void}
 * @hidden
 */
function toogleCheckbox(elem) {
    const span = elem.querySelector('.e-frame');
    const input = span.previousSibling;
    if (span.classList.contains('e-check')) {
        input.checked = false;
        classList(span, ['e-uncheck'], ['e-check']);
    }
    else {
        input.checked = true;
        classList(span, ['e-check'], ['e-uncheck']);
    }
}
/**
 * @param {HTMLInputElement} elem - Defines the element
 * @param {boolean} checked - Defines is checked
 * @returns {void}
 * @hidden
 */
function setChecked(elem, checked) {
    elem.checked = checked;
}
/**
 * @param {string} uid - Defines the string
 * @param {Element} elem - Defines the Element
 * @param {string} className - Defines the classname
 * @returns {Element} Returns the box wrap
 * @hidden
 */
function createCboxWithWrap(uid, elem, className) {
    const div = createElement('div', { className: className });
    div.appendChild(elem);
    div.setAttribute('uid', uid);
    return div;
}
/**
 * @param {Element} elem - Defines the element
 * @param {boolean} checked - Defines is checked
 * @returns {void}
 * @hidden
 */
function removeAddCboxClasses(elem, checked) {
    removeClass([elem], ['e-check', 'e-stop', 'e-uncheck']);
    if (checked) {
        elem.classList.add('e-check');
    }
    else {
        elem.classList.add('e-uncheck');
    }
}
/**
 * Refresh the Row model's foreign data.
 *
 * @param {IRow<Column>} row - Grid Row model object.
 * @param {Column[]} columns - Foreign columns array.
 * @param {Object} data - Updated Row data.
 * @returns {void}
 * @hidden
 */
function refreshForeignData(row$$1, columns, data) {
    for (let i = 0; i < columns.length; i++) {
        setValue(columns[i].field, getForeignData(columns[i], data), row$$1.foreignKeyData);
    }
    const cells = row$$1.cells;
    for (let i = 0; i < cells.length; i++) {
        if (cells[i].isForeignKey) {
            setValue('foreignKeyData', getValue(cells[i].column.field, row$$1.foreignKeyData), cells[i]);
        }
    }
}
/**
 * Get the foreign data for the corresponding cell value.
 *
 * @param {Column} column - Foreign Key column
 * @param {Object} data - Row data.
 * @param {string | number} lValue - cell value.
 * @param {Object} foreignKeyData - foreign data source.
 * @returns {Object} Returns the object
 * @hidden
 */
function getForeignData(column, data, lValue, foreignKeyData) {
    const fField = column.foreignKeyField;
    let key = (!isNullOrUndefined(lValue) ? lValue : valueAccessor(column.field, data, column));
    key = isNullOrUndefined(key) ? '' : key;
    const query = new Query();
    const fdata = foreignKeyData || ((column.dataSource instanceof DataManager) && column.dataSource.dataSource.json.length ?
        column.dataSource.dataSource.json : column.columnData);
    if (key.getDay) {
        query.where(getDatePredicate({ field: fField, operator: 'equal', value: key, matchCase: false }));
    }
    else {
        query.where(fField, '==', key, false);
    }
    return new DataManager(fdata).executeLocal(query);
}
/**
 * To use to get the column's object by the foreign key value.
 *
 * @param {string} foreignKeyValue - Defines ForeignKeyValue.
 * @param {Column[]} columns - Array of column object.
 * @returns {Column} Returns the element
 * @hidden
 */
function getColumnByForeignKeyValue(foreignKeyValue, columns) {
    let column;
    return columns.some((col) => {
        column = col;
        return col.foreignKeyValue === foreignKeyValue;
    }) && column;
}
/**
 * @param {PredicateModel} filterObject - Defines the filterObject
 * @param {string} type - Defines the type
 * @returns {Predicate} Returns the Predicate
 * @hidden
 */
function getDatePredicate(filterObject, type) {
    let datePredicate;
    let prevDate;
    let nextDate;
    const prevObj = extend({}, getActualProperties(filterObject));
    const nextObj = extend({}, getActualProperties(filterObject));
    if (isNullOrUndefined(filterObject.value) || filterObject.value === '') {
        datePredicate = new Predicate(prevObj.field, prevObj.operator, prevObj.value, false);
        return datePredicate;
    }
    const value = new Date(filterObject.value);
    if (filterObject.operator === 'equal' || filterObject.operator === 'notequal') {
        if (type === 'datetime') {
            prevDate = new Date(value.setSeconds(value.getSeconds() - 1));
            nextDate = new Date(value.setSeconds(value.getSeconds() + 2));
            filterObject.value = new Date(value.setSeconds(nextDate.getSeconds() - 1));
        }
        else {
            prevDate = new Date(value.setHours(0) - 1);
            nextDate = new Date(value.setHours(24));
        }
        prevObj.value = prevDate;
        nextObj.value = nextDate;
        if (filterObject.operator === 'equal') {
            prevObj.operator = 'greaterthan';
            nextObj.operator = 'lessthan';
        }
        else if (filterObject.operator === 'notequal') {
            prevObj.operator = 'lessthanorequal';
            nextObj.operator = 'greaterthanorequal';
        }
        const predicateSt = new Predicate(prevObj.field, prevObj.operator, prevObj.value, false);
        const predicateEnd = new Predicate(nextObj.field, nextObj.operator, nextObj.value, false);
        datePredicate = filterObject.operator === 'equal' ? predicateSt.and(predicateEnd) : predicateSt.or(predicateEnd);
    }
    else {
        if (type === 'date' && (filterObject.operator === 'lessthanorequal' || filterObject.operator === 'greaterthan')) {
            prevObj.value = new Date(value.setHours(24) - 1);
        }
        if (typeof (prevObj.value) === 'string') {
            prevObj.value = new Date(prevObj.value);
        }
        const predicates = new Predicate(prevObj.field, prevObj.operator, prevObj.value, false);
        datePredicate = predicates;
    }
    if (filterObject.setProperties) {
        filterObject.setProperties({ ejpredicate: datePredicate }, true);
    }
    else {
        filterObject.ejpredicate = datePredicate;
    }
    return datePredicate;
}
/**
 * @param {Element} ele - Defines the element
 * @param {number} frzCols - Defines the frozen columns
 * @param {IGrid} gObj - Defines the IGrid
 * @returns {Element} Returns the element
 * @hidden
 */
function renderMovable(ele, frzCols, gObj) {
    frzCols = frzCols && gObj && gObj.isRowDragable() ? frzCols + 1 : frzCols;
    const mEle = ele.cloneNode(true);
    for (let i = 0; i < frzCols; i++) {
        mEle.removeChild(mEle.children[0]);
    }
    for (let i = frzCols, len = ele.childElementCount; i < len; i++) {
        ele.removeChild(ele.children[ele.childElementCount - 1]);
    }
    return mEle;
}
/**
 * @param {IGrid} grid - Defines the IGrid
 * @returns {boolean} Returns true if group adaptive is true
 * @hidden
 */
function isGroupAdaptive(grid) {
    return grid.enableVirtualization && grid.groupSettings.columns.length > 0 && grid.isVirtualAdaptive;
}
/**
 * @param {string} field - Defines the Field
 * @param {Object} object - Defines the objec
 * @returns {any} Returns the object
 * @hidden
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function getObject(field = '', object) {
    if (field) {
        let value = object;
        const splits = field.split('.');
        for (let i = 0; i < splits.length && !isNullOrUndefined(value); i++) {
            value = value[splits[i]];
        }
        return value;
    }
}
/**
 * @param {string | Object} format - defines the format
 * @param {string} colType - Defines the coltype
 * @returns {string} Returns the custom Data format
 * @hidden
 */
function getCustomDateFormat(format, colType) {
    const intl = new Internationalization();
    let formatvalue;
    const formatter = 'format';
    const type = 'type';
    if (colType === 'date') {
        formatvalue = typeof (format) === 'object' ?
            intl.getDatePattern({ type: format[type] ? format[type] : 'date', format: format[formatter] }, false) :
            intl.getDatePattern({ type: 'dateTime', skeleton: format }, false);
    }
    else {
        formatvalue = typeof (format) === 'object' ?
            intl.getDatePattern({ type: format[type] ? format[type] : 'dateTime', format: format[formatter] }, false) :
            intl.getDatePattern({ type: 'dateTime', skeleton: format }, false);
    }
    return formatvalue;
}
/**
 * @param {IGrid} gObj - Defines the IGrid
 * @param {HierarchyGridPrintMode} hierarchyPrintMode - Defines the hierarchyPrintMode
 * @returns {Object} Returns the object
 * @hidden
 */
function getExpandedState(gObj, hierarchyPrintMode) {
    const rows = gObj.getRowsObject();
    const obj = {};
    for (const row$$1 of rows) {
        if (row$$1.isExpand && !row$$1.isDetailRow) {
            const index = gObj.allowPaging && gObj.printMode === 'AllPages' ? row$$1.index +
                (gObj.pageSettings.currentPage * gObj.pageSettings.pageSize) - gObj.pageSettings.pageSize : row$$1.index;
            obj[index] = {};
            obj[index].isExpand = true;
            obj[index].gridModel = getPrintGridModel(row$$1.childGrid, hierarchyPrintMode);
            obj[index].gridModel.query = gObj.childGrid.query;
        }
    }
    return obj;
}
/**
 * @param {IGrid} gObj - Defines the grid objct
 * @param {HierarchyGridPrintMode} hierarchyPrintMode - Defines the hierarchyPrintMode
 * @returns {IGrid} Returns the IGrid
 * @hidden
 */
function getPrintGridModel(gObj, hierarchyPrintMode = 'Expanded') {
    const printGridModel = {};
    if (!gObj) {
        return printGridModel;
    }
    const isFrozen = gObj.isFrozenGrid() && !gObj.getFrozenColumns();
    for (const key of Print.printGridProp) {
        if (key === 'columns') {
            printGridModel[key] = getActualPropFromColl(isFrozen ? gObj.getColumns() : gObj[key]);
        }
        else if (key === 'allowPaging') {
            printGridModel[key] = gObj.printMode === 'CurrentPage';
        }
        else {
            printGridModel[key] = getActualProperties(gObj[key]);
        }
    }
    printGridModel['enableHover'] = false;
    if (gObj.childGrid && hierarchyPrintMode !== 'None') {
        printGridModel.expandedRows = getExpandedState(gObj, hierarchyPrintMode);
    }
    return printGridModel;
}
/**
 * @param {Object} copied - Defines the copied object
 * @param {Object} first - Defines the first object
 * @param {Object} second - Defines the second object
 * @param {boolean} deep - Defines the deep
 * @returns {Object} Returns the extended object
 * @hidden
 */
function extendObjWithFn(copied, first, second, deep) {
    const res = copied || {};
    let len = arguments.length;
    if (deep) {
        len = len - 1;
    }
    for (let i = 1; i < len; i++) {
        // eslint-disable-next-line prefer-rest-params
        if (!arguments[i]) {
            continue;
        }
        // eslint-disable-next-line prefer-rest-params
        const obj1 = arguments[i];
        const keys = Object.keys(Object.getPrototypeOf(obj1)).length ?
            Object.keys(obj1).concat(getPrototypesOfObj(obj1)) : Object.keys(obj1);
        for (let i = 0; i < keys.length; i++) {
            const source = res[keys[i]];
            const cpy = obj1[keys[i]];
            let cln;
            if (deep && (isObject(cpy) || Array.isArray(cpy))) {
                if (isObject(cpy)) {
                    cln = source ? source : {};
                    res[keys[i]] = extend({}, cln, cpy, deep);
                }
                else {
                    cln = source ? source : [];
                    res[keys[i]] = extend([], cln, cpy, deep);
                }
            }
            else {
                res[keys[i]] = cpy;
            }
        }
    }
    return res;
}
/**
 * @param {Object} obj - Defines the obj
 * @returns {string[]} Returns the string
 * @hidden
 */
function getPrototypesOfObj(obj) {
    let keys = [];
    while (Object.getPrototypeOf(obj) && Object.keys(Object.getPrototypeOf(obj)).length) {
        keys = keys.concat(Object.keys(Object.getPrototypeOf(obj)));
        obj = Object.getPrototypeOf(obj);
    }
    return keys;
}
/**
 * @param {Column[]} column - Defines the Column
 * @returns {number} Returns the column Depth
 * @hidden
 */
function measureColumnDepth(column) {
    let max = 0;
    for (let i = 0; i < column.length; i++) {
        const depth = checkDepth(column[i], 0);
        if (max < depth) {
            max = depth;
        }
    }
    return max + 1;
}
/**
 * @param {Column} col - Defines the Column
 * @param {number} index - Defines the index
 * @returns {number} Returns the depth
 * @hidden
 */
function checkDepth(col, index) {
    let max = index;
    const indices = [];
    if (col.columns) {
        index++;
        for (let i = 0; i < col.columns.length; i++) {
            indices[i] = checkDepth(col.columns[i], index);
        }
        for (let j = 0; j < indices.length; j++) {
            if (max < indices[j]) {
                max = indices[j];
            }
        }
        index = max;
    }
    return index;
}
/**
 * @param {IGrid} gObj - Defines the IGrid
 * @param {PredicateModel[]} filteredCols - Defines the PredicateModel
 * @returns {void}
 * @hidden
 */
function refreshFilteredColsUid(gObj, filteredCols) {
    for (let i = 0; i < filteredCols.length; i++) {
        filteredCols[i].uid = filteredCols[i].isForeignKey ?
            getColumnByForeignKeyValue(filteredCols[i].field, gObj.getForeignKeyColumns()).uid
            : gObj.enableColumnVirtualization ? getColumnModelByFieldName(gObj, filteredCols[i].field).uid
                : gObj.getColumnByField(filteredCols[i].field).uid;
    }
}
/** @hidden */
// eslint-disable-next-line @typescript-eslint/no-namespace
var Global;
(function (Global) {
    // eslint-disable-next-line prefer-const
    Global.timer = null;
})(Global || (Global = {}));
/**
 * @param {Element} element - Defines the element
 * @returns {Object} Returns the transform values
 * @hidden
 */
function getTransformValues(element) {
    const style = document.defaultView.getComputedStyle(element, null);
    const transformV = style.getPropertyValue('transform');
    const replacedTv = transformV.replace(/,/g, '');
    const translateX = parseFloat((replacedTv).split(' ')[4]);
    const translateY = parseFloat((replacedTv).split(' ')[5]);
    return { width: translateX, height: translateY };
}
/**
 * @param {Element} rootElement - Defines the root Element
 * @param {Element} element - Defines the element
 * @returns {void}
 * @hidden
 */
function applyBiggerTheme(rootElement, element) {
    if (rootElement.classList.contains('e-bigger')) {
        element.classList.add('e-bigger');
    }
}
/**
 * @param {HTMLElement} mTD - Defines the movable TD
 * @param {HTMLElement} fTD  - Defines the Frozen TD
 * @returns {void}
 * @hidden
 */
function alignFrozenEditForm(mTD, fTD) {
    if (mTD && fTD) {
        const mHeight = closest(mTD, '.' + row).getBoundingClientRect().height;
        const fHeight = closest(fTD, '.' + row).getBoundingClientRect().height;
        if (mHeight > fHeight) {
            fTD.style.height = mHeight + 'px';
        }
        else {
            mTD.style.height = fHeight + 'px';
        }
    }
}
/**
 * @param {Element} row - Defines row element
 * @param {IGrid} gridObj - Defines grid object
 * @returns {boolean} Returns isRowEnteredInGrid
 * @hidden
 */
function ensureLastRow(row$$1, gridObj) {
    const cntOffset = gridObj.getContent().firstElementChild.offsetHeight;
    return row$$1 && row$$1.getBoundingClientRect().top > cntOffset;
}
/**
 * @param {Element} row - Defines row element
 * @param {number} rowTop - Defines row top number
 * @returns {boolean} Returns first row is true
 * @hidden
 */
function ensureFirstRow(row$$1, rowTop) {
    return row$$1 && row$$1.getBoundingClientRect().top < rowTop;
}
/**
 * @param {number} index - Defines index
 * @param {IGrid} gObj - Defines grid object
 * @returns {boolean} Returns isRowEnteredInGrid
 * @hidden
 */
function isRowEnteredInGrid(index, gObj) {
    const rowHeight = gObj.getRowHeight();
    const startIndex = gObj.getContent().firstElementChild.scrollTop / rowHeight;
    const endIndex = startIndex + (gObj.getContent().firstElementChild.offsetHeight / rowHeight);
    return index < endIndex && index > startIndex;
}
/**
 * @param {IGrid} gObj - Defines the grid object
 * @param {Object} data - Defines the query
 * @returns {number} Returns the edited data index
 * @hidden
 */
function getEditedDataIndex(gObj, data) {
    const keyField = gObj.getPrimaryKeyFieldNames()[0];
    let dataIndex;
    gObj.getCurrentViewRecords().filter((e, index) => {
        if (e[keyField] === data[keyField]) {
            dataIndex = index;
        }
    });
    return dataIndex;
}
/**
 * @param {Object} args - Defines the argument
 * @param {Query} query - Defines the query
 * @returns {FilterStateObj} Returns the filter state object
 * @hidden
 */
function eventPromise(args, query) {
    const state = getStateEventArgument(query);
    const def = new Deferred();
    state.dataSource = def.resolve;
    state.action = args;
    return { state: state, deffered: def };
}
/**
 * @param {Query} query - Defines the query
 * @returns {Object} Returns the state event argument
 * @hidden
 */
function getStateEventArgument(query) {
    const adaptr = new UrlAdaptor();
    const dm = new DataManager({ url: '', adaptor: new UrlAdaptor });
    const state = adaptr.processQuery(dm, query);
    const data = JSON.parse(state.data);
    return data;
}
/**
 * @param {IGrid} gObj - Defines the Igrid
 * @returns {boolean} Returns the ispercentageWidth
 * @hidden
 */
function ispercentageWidth(gObj) {
    const columns = gObj.getVisibleColumns();
    let percentageCol = 0;
    let undefinedWidthCol = 0;
    for (let i = 0; i < columns.length; i++) {
        if (isUndefined(columns[i].width)) {
            undefinedWidthCol++;
        }
        else if (columns[i].width.toString().indexOf('%') !== -1) {
            percentageCol++;
        }
    }
    return (gObj.width === 'auto' || typeof (gObj.width) === 'string' && gObj.width.indexOf('%') !== -1) &&
        !gObj.groupSettings.showGroupedColumn && gObj.groupSettings.columns.length
        && percentageCol && !undefinedWidthCol;
}
/**
 * @param {IGrid} gObj - Defines the IGrid
 * @param {Row<Column>[]} rows - Defines the row
 * @param {HTMLTableRowElement[]} rowElms - Row elements
 * @param {number} index - Row index
 * @param {number} startRowIndex - Start Row Index
 * @returns {void}
 * @hidden
 */
function resetRowIndex(gObj, rows, rowElms, index, startRowIndex) {
    let startIndex = index ? index : 0;
    for (let i = startRowIndex ? startRowIndex : 0; i < rows.length; i++) {
        if (rows[i].isDataRow) {
            rows[i].index = startIndex;
            rows[i].isAltRow = gObj.enableAltRow ? startIndex % 2 !== 0 : false;
            rowElms[i].setAttribute(ariaRowIndex, startIndex.toString());
            if (rows[i].isAltRow) {
                rowElms[i].classList.add('e-altrow');
            }
            else {
                rowElms[i].classList.remove('e-altrow');
            }
            for (let j = 0; j < rowElms[i].cells.length; j++) {
                rowElms[i].cells[j].setAttribute('index', startIndex.toString());
            }
            startIndex++;
        }
    }
    if (!rows.length) {
        gObj.renderModule.emptyRow(true);
    }
}
/**
 * @param {IGrid} gObj - Defines the grid object
 * @param {Object} changes - Defines the changes
 * @param {string} type - Defines the type
 * @param {string} keyField - Defines the keyfield
 * @returns {void}
 * @hidden
 */
function compareChanges(gObj, changes, type, keyField) {
    const newArray = gObj.dataToBeUpdated[type].concat(changes[type]).reduce((r, o) => {
        r[o[keyField]] = r[o[keyField]] === undefined ? o : Object.assign(r[o[keyField]], o);
        return r;
    }, {});
    gObj.dataToBeUpdated[type] = Object.keys(newArray).map((k) => newArray[k]);
}
/**
 * @param {IGrid} gObj - Defines the grid object
 * @returns {void}
 * @hidden
 */
function setRowElements(gObj) {
    if (gObj.isFrozenGrid()) {
        (gObj).contentModule.rowElements =
            [].slice.call(gObj.element.querySelectorAll('.e-movableheader .e-row, .e-movablecontent .e-row'));
        const cls = gObj.getFrozenMode() === leftRight ? '.e-frozen-left-header .e-row, .e-frozen-left-content .e-row'
            : '.e-frozenheader .e-row, .e-frozencontent .e-row';
        (gObj).contentModule.freezeRowElements =
            [].slice.call(gObj.element.querySelectorAll(cls));
        if (gObj.getFrozenMode() === leftRight) {
            gObj.contentModule.frozenRightRowElements =
                [].slice.call(gObj.element.querySelectorAll('.e-frozen-right-header .e-row, .e-frozen-right-content .e-row'));
        }
    }
    else {
        (gObj).contentModule.rowElements =
            [].slice.call(gObj.element.querySelectorAll('.e-row:not(.e-addedrow)'));
    }
}
/**
 * @param {IGrid} gObj - Defines the grid object
 * @param {Cell<Column>} cells - Defines the callback function
 * @param {freezeTable} tableName - Defines the row
 * @returns {Cell<Column>[]} Returns the cell
 * @hidden
 */
function splitFrozenRowObjectCells(gObj, cells, tableName) {
    const left = gObj.getFrozenLeftCount();
    const movable = gObj.getMovableColumnsCount();
    const right = gObj.getFrozenRightColumnsCount();
    const frozenMode = gObj.getFrozenMode();
    const drag = gObj.isRowDragable() ? 1 : 0;
    const rightIndex = frozenMode === 'Right' ? left + movable : left + movable + drag;
    const mvblIndex = frozenMode === 'Right' ? left : left + drag;
    const mvblEndIdx = frozenMode === 'Right' ? cells.length - right - drag
        : right ? cells.length - right : cells.length;
    if (tableName === frozenLeft) {
        cells = cells.slice(0, left ? left + drag : cells.length);
    }
    else if (tableName === frozenRight) {
        cells = cells.slice(rightIndex, cells.length);
    }
    else if (tableName === 'movable') {
        cells = cells.slice(mvblIndex, mvblEndIdx);
    }
    return cells;
}
// eslint-disable-next-line
/** @hidden */
function gridActionHandler(gObj, callBack, rows, force, rowObj) {
    if (rows[0].length || force) {
        if (rowObj) {
            callBack(frozenLeft, rows[0], rowObj[0]);
        }
        else {
            callBack(frozenLeft, rows[0]);
        }
    }
    if (gObj.isFrozenGrid() && (rows[1].length || force)) {
        if (rowObj) {
            callBack('movable', rows[1], rowObj[1]);
        }
        else {
            callBack('movable', rows[1]);
        }
    }
    if ((gObj.getFrozenMode() === leftRight || gObj.getFrozenMode() === 'Right') && (rows[2].length || force)) {
        if (rowObj) {
            callBack(frozenRight, rows[2], rowObj[2]);
        }
        else {
            callBack(frozenRight, rows[2]);
        }
    }
}
/**
 * @param {IGrid} gObj - Defines the grid
 * @returns {Row<Column>} Returns the row
 * @hidden
 */
function getGridRowObjects(gObj) {
    return [gObj.getFrozenMode() !== 'Right' ? gObj.getRowsObject() : [], gObj.getMovableRowsObject(), gObj.getFrozenRightRowsObject()];
}
/**
 * @param {IGrid} gObj - Defines the grid
 * @returns {Element} Returns the element
 * @hidden
 */
function getGridRowElements(gObj) {
    return [
        gObj.getFrozenMode() !== 'Right' ? gObj.getAllDataRows(true) : [],
        gObj.getAllMovableDataRows(true), gObj.getAllFrozenRightDataRows(true)
    ];
}
/**
 * @param {Element} row - Defines the row
 * @param {number} start - Defines the start index
 * @param {number} end - Defines the end index
 * @returns {void}
 * @hidden
 */
function sliceElements(row$$1, start, end) {
    const cells = row$$1.children;
    const len = cells.length;
    let k = 0;
    for (let i = 0; i < len; i++, k++) {
        if (i >= start && i < end) {
            continue;
        }
        row$$1.removeChild(row$$1.children[k]);
        k--;
    }
}
/**
 * @param {IGrid} gObj - Defines the grid Object
 * @param {Column} col - Defines the column
 * @param {number} rowIndex - Defines the rowindex
 * @returns {Element} Returns the element
 * @hidden
 */
function getCellsByTableName(gObj, col, rowIndex) {
    if (col.getFreezeTableName() === 'movable') {
        return [].slice.call(gObj.getMovableDataRows()[rowIndex].getElementsByClassName(rowCell));
    }
    else if (col.getFreezeTableName() === frozenRight) {
        return [].slice.call(gObj.getFrozenRightDataRows()[rowIndex].getElementsByClassName(rowCell));
    }
    else {
        return [].slice.call(gObj.getDataRows()[rowIndex].getElementsByClassName(rowCell));
    }
}
/**
 * @param {IGrid} gObj - Defines the column
 * @param {Column} col - Defines the index
 * @param {number} rowIndex - Defines the rules
 * @param {number} index - Defines the movable column rules
 * @returns {Element} Returns the Element
 * @hidden
 */
function getCellByColAndRowIndex(gObj, col, rowIndex, index) {
    const left = gObj.getFrozenLeftCount();
    const movable = gObj.getMovableColumnsCount();
    index = col.getFreezeTableName() === 'movable' ? index - left : col.getFreezeTableName() === frozenRight
        ? index - (left + movable) : index;
    return getCellsByTableName(gObj, col, rowIndex)[index];
}
/**
 * @param {Column} col - Defines the column
 * @param {number} index - Defines the index
 * @param {Object} rules - Defines the rules
 * @param {Object} mRules - Defines the movable column rules
 * @param {Object} frRules - Defines the Frozen rules
 * @param {number} len - Defines the length
 * @param {boolean} isCustom - Defines custom form validation
 * @returns {void}
 * @hidden
 */
function setValidationRuels(col, index, rules, mRules, frRules, len, isCustom) {
    if (isCustom) {
        rules[getComplexFieldID(col.field)] = col.validationRules;
    }
    else {
        if (col.getFreezeTableName() === frozenLeft
            || (!index && col.getFreezeTableName() === frozenRight) || len === 1) {
            rules[getComplexFieldID(col.field)] = col.validationRules;
        }
        else if (col.getFreezeTableName() === 'movable' || !col.getFreezeTableName()) {
            mRules[getComplexFieldID(col.field)] = col.validationRules;
        }
        else if (col.getFreezeTableName() === frozenRight) {
            frRules[getComplexFieldID(col.field)] = col.validationRules;
        }
    }
}
/**
 * @param {IGrid} gObj - Defines the grid object
 * @returns {Element} Returns the Element
 * @hidden
 */
function getMovableTbody(gObj) {
    let tbody$$1;
    if (gObj.isFrozenGrid()) {
        tbody$$1 = gObj.frozenRows && gObj.editSettings.newRowPosition === 'Top' ? gObj.getMovableHeaderTbody()
            : gObj.getMovableContentTbody();
    }
    return tbody$$1;
}
/**
 * @param {IGrid} gObj - Defines the grid object
 * @returns {Element} Returns the Element
 * @hidden
 */
function getFrozenRightTbody(gObj) {
    let tbody$$1;
    if (gObj.getFrozenMode() === leftRight) {
        tbody$$1 = gObj.frozenRows && gObj.editSettings.newRowPosition === 'Top' ? gObj.getFrozenRightHeaderTbody()
            : gObj.getFrozenRightContentTbody();
    }
    return tbody$$1;
}
/**
 * @param {Element} tbody - Table body
 * @param {Element} mTbody - Movanle table body
 * @param {Element} frTbody - Frozen right table body
 * @param {Element[]} tr - Table rows
 * @param {Element[]} mTr - Movable table rows
 * @param {Element[]} frTr - Frozen right table rows
 * @param {Function} callBack - Callback function
 * @returns {void}
 * @hidden
 */
function setRowsInTbody(tbody$$1, mTbody, frTbody, tr, mTr, frTr, callBack) {
    if (tbody$$1 && tr) {
        callBack(tbody$$1, tr);
    }
    if (mTbody && mTr) {
        callBack(mTbody, mTr);
    }
    if (frTbody && frTr) {
        callBack(frTbody, frTr);
    }
}
/**
 * @param {string} numberFormat - Format
 * @param {string} type - Value type
 * @param {boolean} isExcel - Boolean property
 * @returns {string} returns formated value
 * @hidden
 */
function getNumberFormat(numberFormat, type, isExcel) {
    let format;
    const intl = new Internationalization();
    if (type === 'number') {
        try {
            format = intl.getNumberPattern({ format: numberFormat, currency: this.currency, useGrouping: true }, true);
        }
        catch (error) {
            format = numberFormat;
        }
    }
    else if (type === 'date' || type === 'time' || type === 'datetime') {
        try {
            format = intl.getDatePattern({ skeleton: numberFormat, type: type }, isExcel);
            if (isNullOrUndefined(format)) {
                // eslint-disable-next-line
                throw 'error';
            }
        }
        catch (error) {
            try {
                format = intl.getDatePattern({ format: numberFormat, type: type }, isExcel);
            }
            catch (error) {
                format = numberFormat;
            }
        }
    }
    else {
        format = numberFormat;
    }
    if (type !== 'number') {
        const patternRegex = /G|H|c|'| a|yy|y|EEEE|E/g;
        const mtch = { 'G': '', 'H': 'h', 'c': 'd', '\'': '"', ' a': ' AM/PM', 'yy': 'yy', 'y': 'yyyy', 'EEEE': 'dddd', 'E': 'ddd' };
        format = format.replace(patternRegex, (pattern) => {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return mtch[pattern];
        });
    }
    return format;
}
/**
 * @param {IGrid} gObj - Grid instance
 * @returns {void}
 * @hidden
 */
function addBiggerDialog(gObj) {
    if (gObj.enableAdaptiveUI) {
        const dialogs = document.getElementsByClassName('e-responsive-dialog');
        for (let i = 0; i < dialogs.length; i++) {
            dialogs[i].classList.add('e-bigger');
        }
    }
}
/**
 * @param {string} value - specifies the trr
 * @param {Object} mapObject - specifies the idx
 * @returns {Object | string} returns object or string
 * @hidden
 */
function performComplexDataOperation(value, mapObject) {
    let returnObj;
    const length = value.split('.').length;
    const splits = value.split('.');
    let duplicateMap = mapObject;
    for (let i = 0; i < length; i++) {
        returnObj = duplicateMap[splits[i]];
        duplicateMap = returnObj;
    }
    return returnObj;
}
/**
 * @param {Object} tr - specifies the trr
 * @param {number} idx - specifies the idx
 * @param {string} displayVal - specifies the displayval
 * @param {Row<Column>} rows - specifies the rows
 * @param {IGrid} parent - Grid instance
 * @param {boolean} isContent - check for content renderer
 * @returns {void}
 * @hidden
 */
function setDisplayValue(tr, idx, displayVal, rows, parent, isContent) {
    const trs = Object.keys(tr);
    for (let i = 0; i < trs.length; i++) {
        const td = tr[trs[i]].querySelectorAll('td.e-rowcell')[idx];
        if (tr[trs[i]].querySelectorAll('td.e-rowcell').length && td) {
            setStyleAttribute(tr[trs[i]].querySelectorAll('td.e-rowcell')[idx], { 'display': displayVal });
            if (tr[trs[i]].querySelectorAll('td.e-rowcell')[idx].classList.contains('e-hide')) {
                removeClass([tr[trs[i]].querySelectorAll('td.e-rowcell')[idx]], ['e-hide']);
            }
            if (isContent && parent.isRowDragable()) {
                const index = parent.getFrozenColumns() ? idx : idx + 1;
                rows[trs[i]].cells[index].visible = displayVal === '' ? true : false;
            }
            else {
                rows[trs[i]].cells[idx].visible = displayVal === '' ? true : false;
            }
        }
    }
}
// eslint-disable-next-line
/** @hidden */
function addRemoveEventListener(parent, evt, isOn, module) {
    for (const inst of evt) {
        if (isOn) {
            parent.on(inst.event, inst.handler, module);
        }
        else {
            parent.off(inst.event, inst.handler);
        }
    }
}
// eslint-disable-next-line
/** @hidden */
function createEditElement(parent, column, classNames, attr) {
    const complexFieldName = getComplexFieldID(column.field);
    attr = Object.assign(attr, {
        id: parent.element.id + complexFieldName,
        name: complexFieldName, 'e-mappinguid': column.uid
    });
    return parent.createElement('input', {
        className: classNames, attrs: attr
    });
}
/**
 * @param {IGrid} gObj - Grid instance
 * @param {string} uid - Defines column's uid
 * @returns {Column} returns column model
 * @hidden
 */
function getColumnModelByUid(gObj, uid) {
    let column;
    for (const col of (gObj.columnModel)) {
        if (col.uid === uid) {
            column = col;
            break;
        }
    }
    return column;
}
/**
 * @param {IGrid} gObj - Grid instance
 * @param {string} field - Defines column's uid
 * @returns {Column} returns column model
 * @hidden
 */
function getColumnModelByFieldName(gObj, field) {
    let column;
    if (!gObj.columnModel) {
        gObj.getColumns();
    }
    for (const col of (gObj.columnModel)) {
        if (col.field === field) {
            column = col;
            break;
        }
    }
    return column;
}
/**
 * @param {string} id - Defines component id
 * @param {string[]} evts - Defines events
 * @param {object} handlers - Defines event handlers
 * @param {any} instance - Defines class instance
 * @returns {void}
 * @hidden
 */
// eslint-disable-next-line
function registerEventHandlers(id, evts, handlers, instance) {
    instance.eventHandlers[id] = {};
    for (let i = 0; i < evts.length; i++) {
        instance.eventHandlers[id][evts[i]] = handlers[evts[i]];
    }
}
/**
 * @param {any} component - Defines component instance
 * @param {string[]} evts - Defines events
 * @param {any} instance - Defines class instance
 * @returns {void}
 * @hidden
 */
// eslint-disable-next-line
function removeEventHandlers(component, evts, instance) {
    for (let i = 0; i < evts.length; i++) {
        if (component.isDestroyed) {
            break;
        }
        component.removeEventListener(evts[i], instance.eventHandlers[component.element.id][evts[i]]);
    }
}
/**
 * @param {IGrid | IXLFilter} parent - Defines parent instance
 * @param {string[]} templates - Defines the templates name which are needs to clear
 * @returns {void}
 * @hidden
 */
function clearReactVueTemplates(parent, templates) {
    parent.destroyTemplate(templates);
    if (parent.isReact) {
        parent.renderTemplates();
    }
}
/**
 *
 * @param { Element } row - Defines row element
 * @returns { number } row index
 */
function getRowIndexFromElement(row$$1) {
    return parseInt(row$$1.getAttribute(ariaRowIndex), 10);
}
/**
 *
 * @param { string[] } fields - Defines grouped fields
 * @param { values } values - Defines caption keys
 * @param { any } instance - Defines dynamic class instance
 * @returns { Predicate } returns filter predicate
 */
// eslint-disable-next-line
function generateExpandPredicates(fields, values, instance) {
    let filterCols = [];
    for (let i = 0; i < fields.length; i++) {
        const column = instance.parent.getColumnByField(fields[i]);
        const value = values[i] === 'null' ? null : values[i];
        const pred = {
            field: fields[i], predicate: 'or', uid: column.uid, operator: 'equal', type: column.type,
            matchCase: instance.allowCaseSensitive, ignoreAccent: instance.parent.filterSettings.ignoreAccent
        };
        if (value === '' || isNullOrUndefined(value)) {
            filterCols = filterCols.concat(CheckBoxFilterBase.generateNullValuePredicates(pred));
        }
        else {
            filterCols.push(extend$1({}, { value: value }, pred));
        }
    }
    return CheckBoxFilterBase.getPredicate(filterCols);
}
/**
 *
 * @param { Predicate } pred - Defines filter predicate
 * @returns { Predicate[] } Returns formed predicate
 */
function getPredicates(pred) {
    const predicateList = [];
    for (const prop of Object.keys(pred)) {
        predicateList.push(pred[prop]);
    }
    return predicateList;
}
/**
 *
 * @param { number } index - Defines group caption indent
 * @param { Row<Column>[] } rowsObject - Defines rows object
 * @returns { { fields: string[], keys: string[] } } Returns grouped keys and values
 */
function getGroupKeysAndFields(index, rowsObject) {
    const fields = [];
    const keys = [];
    for (let i = index; i >= 0; i--) {
        if (rowsObject[i].isCaptionRow && fields.indexOf(rowsObject[i].data.field) === -1
            && (rowsObject[i].indent < rowsObject[index].indent || i === index)) {
            fields.push(rowsObject[i].data.field);
            keys.push(rowsObject[i].data.key);
            if (rowsObject[i].indent === 0) {
                break;
            }
        }
    }
    return { fields: fields, keys: keys };
}

/* tslint:disable-next-line:max-line-length */
/**
 * @hidden
 * `CheckBoxFilterBase` module is used to handle filtering action.
 */
class CheckBoxFilterBase {
    /**
     * Constructor for checkbox filtering module
     *
     * @param {IXLFilter} parent - specifies the IXLFilter
     * @hidden
     */
    constructor(parent) {
        this.existingPredicate = {};
        this.foreignKeyQuery = new Query();
        /** @hidden */
        this.filterState = true;
        this.values = {};
        this.renderEmpty = false;
        this.isCheckboxFilterTemplate = false;
        this.parent = parent;
        this.id = this.parent.element.id;
        this.valueFormatter = new ValueFormatter(this.parent.locale);
        this.cBoxTrue = createCheckBox(this.parent.createElement, false, { checked: true, label: ' ' });
        this.cBoxFalse = createCheckBox(this.parent.createElement, false, { checked: false, label: ' ' });
        this.cBoxTrue.insertBefore(this.parent.createElement('input', {
            className: 'e-chk-hidden', attrs: { type: 'checkbox' }
        }), this.cBoxTrue.firstChild);
        this.cBoxFalse.insertBefore(this.parent.createElement('input', {
            className: 'e-chk-hidden', attrs: { 'type': 'checkbox' }
        }), this.cBoxFalse.firstChild);
        this.cBoxFalse.querySelector('.e-frame').classList.add('e-uncheck');
        if (this.parent.enableRtl) {
            addClass([this.cBoxTrue, this.cBoxFalse], ['e-rtl']);
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    destroy() {
        this.closeDialog();
    }
    wireEvents() {
        EventHandler.add(this.dlg, 'click', this.clickHandler, this);
        EventHandler.add(this.dlg, 'keyup', this.keyupHandler, this);
        this.searchHandler = debounce(this.searchBoxKeyUp, 200);
        const elem = this.dialogObj.element.querySelector('.e-searchinput');
        if (elem) {
            EventHandler.add(elem, 'keyup', this.searchHandler, this);
        }
    }
    unWireEvents() {
        EventHandler.remove(this.dlg, 'click', this.clickHandler);
        EventHandler.remove(this.dlg, 'keyup', this.keyupHandler);
        const elem = this.dialogObj.element.querySelector('.e-searchinput');
        if (elem) {
            EventHandler.remove(elem, 'keyup', this.searchHandler);
        }
    }
    foreignKeyFilter(args, fColl, mPredicate) {
        const fPredicate = {};
        const filterCollection = [];
        const query = this.foreignKeyQuery.clone();
        this.options.column.dataSource.
            executeQuery(query.where(mPredicate)).then((e) => {
            this.options.column.columnData = e.result;
            this.parent.notify(generateQuery, { predicate: fPredicate, column: this.options.column });
            args.ejpredicate = fPredicate.predicate.predicates;
            const fpred = fPredicate.predicate.predicates;
            for (let i = 0; i < fpred.length; i++) {
                filterCollection.push({
                    field: fpred[i].field,
                    predicate: 'or',
                    matchCase: fpred[i].ignoreCase,
                    ignoreAccent: fpred[i].ignoreAccent,
                    operator: fpred[i].operator,
                    value: fpred[i].value,
                    type: this.options.type
                });
            }
            args.filterCollection = filterCollection.length ? filterCollection :
                fColl.filter((col) => col.field = this.options.field);
            this.options.handler(args);
        });
    }
    foreignFilter(args, value) {
        const operator = this.options.isRemote ?
            (this.options.column.type === 'string' ? 'contains' : 'equal') : (this.options.column.type ? 'contains' : 'equal');
        const initalPredicate = new Predicate(this.options.column.foreignKeyValue, operator, value, true, this.options.ignoreAccent);
        this.foreignKeyFilter(args, [args.filterCollection], initalPredicate);
    }
    searchBoxClick(e) {
        const target = e.target;
        if (target.classList.contains('e-searchclear')) {
            this.sInput.value = '';
            if (this.isCheckboxFilterTemplate) {
                this.parent.notify('refreshCheckbox', { event: e });
            }
            else {
                this.refreshCheckboxes();
            }
            this.updateSearchIcon();
            this.sInput.focus();
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    searchBoxKeyUp(e) {
        if (this.isCheckboxFilterTemplate) {
            this.parent.notify('refreshCheckbox', { event: e });
        }
        else {
            this.refreshCheckboxes();
        }
        this.updateSearchIcon();
    }
    updateSearchIcon() {
        if (this.sInput.value.length) {
            classList(this.sIcon, ['e-chkcancel-icon'], ['e-search-icon']);
        }
        else {
            classList(this.sIcon, ['e-search-icon'], ['e-chkcancel-icon']);
        }
    }
    /**
     * Gets the localized label by locale keyword.
     *
     * @param {string} key - Defines localization key
     * @returns {string} - returns localization label
     */
    getLocalizedLabel(key) {
        return this.localeObj.getConstant(key);
    }
    updateDataSource() {
        const dataSource = this.options.dataSource;
        const str = 'object';
        if (!(dataSource instanceof DataManager)) {
            for (let i = 0; i < dataSource.length; i++) {
                // eslint-disable-next-line valid-typeof
                if (typeof dataSource !== str) {
                    const obj = {};
                    obj[this.options.field] = dataSource[i];
                    dataSource[i] = obj;
                }
            }
        }
    }
    updateModel(options) {
        this.options = options;
        this.existingPredicate = options.actualPredicate || {};
        this.options.dataSource = options.dataSource;
        this.options.dataManager = options.dataManager ? options.dataManager : options.dataSource;
        this.updateDataSource();
        this.options.type = options.type;
        this.options.format = options.format || '';
        this.options.ignoreAccent = options.ignoreAccent || false;
        this.options.filteredColumns = options.filteredColumns || this.parent.filterSettings.columns;
        this.options.query = options.query || new Query();
        this.options.allowCaseSensitive = options.allowCaseSensitive || false;
        this.options.uid = options.column.uid;
        this.values = {};
        this.localeObj = options.localeObj;
        this.isFiltered = options.filteredColumns.length;
    }
    getAndSetChkElem(options) {
        this.dlg = this.parent.createElement('div', {
            id: this.id + this.options.type + '_excelDlg',
            attrs: { uid: this.options.column.uid },
            className: 'e-checkboxfilter e-filter-popup'
        });
        this.sBox = this.parent.createElement('div', { className: 'e-searchcontainer' });
        if (!options.hideSearchbox) {
            this.sInput = this.parent.createElement('input', {
                id: this.id + '_SearchBox',
                className: 'e-searchinput'
            });
            this.sIcon = this.parent.createElement('span', {
                className: 'e-searchclear e-search-icon e-icons e-input-group-icon', attrs: {
                    type: 'text', title: this.getLocalizedLabel('Search')
                }
            });
            this.searchBox = this.parent.createElement('span', { className: 'e-searchbox e-fields' });
            this.searchBox.appendChild(this.sInput);
            this.sBox.appendChild(this.searchBox);
            const inputargs = {
                element: this.sInput, floatLabelType: 'Never', properties: {
                    placeholder: this.getLocalizedLabel('Search')
                }
            };
            Input.createInput(inputargs, this.parent.createElement);
            this.searchBox.querySelector('.e-input-group').appendChild(this.sIcon);
        }
        this.spinner = this.parent.createElement('div', { className: 'e-spinner' }); //for spinner
        this.cBox = this.parent.createElement('div', {
            id: this.id + this.options.type + '_CheckBoxList',
            className: 'e-checkboxlist e-fields'
        });
        this.spinner.appendChild(this.cBox);
        this.sBox.appendChild(this.spinner);
        return this.sBox;
    }
    showDialog(options) {
        const args = {
            requestType: filterBeforeOpen,
            columnName: this.options.field, columnType: this.options.type, cancel: false
        };
        const filterModel = 'filterModel';
        args[filterModel] = this;
        this.parent.notify(cBoxFltrBegin, args);
        if (args.cancel) {
            options.cancel = args.cancel;
            return;
        }
        this.dialogObj = new Dialog({
            visible: false, content: this.sBox,
            close: this.closeDialog.bind(this),
            enableRtl: this.parent.enableRtl,
            width: (!isNullOrUndefined(parentsUntil(options.target, 'e-bigger')))
                || this.parent.element.classList.contains('e-device') ? 260 : 255,
            target: this.parent.element, animationSettings: { effect: 'None' },
            buttons: [{
                    click: this.btnClick.bind(this),
                    buttonModel: {
                        content: this.getLocalizedLabel(this.isExcel ? 'OKButton' : 'FilterButton'),
                        cssClass: this.parent.cssClass ? 'e-primary' + ' ' + this.parent.cssClass : 'e-primary',
                        isPrimary: true
                    }
                },
                {
                    click: this.btnClick.bind(this),
                    buttonModel: { cssClass: this.parent.cssClass ? 'e-flat' + ' ' + this.parent.cssClass : 'e-flat',
                        content: this.getLocalizedLabel(this.isExcel ? 'CancelButton' : 'ClearButton') }
                }],
            created: this.dialogCreated.bind(this),
            open: this.dialogOpen.bind(this),
            cssClass: this.parent.cssClass ? this.parent.cssClass : ''
        });
        const isStringTemplate = 'isStringTemplate';
        this.dialogObj[isStringTemplate] = true;
        this.renderResponsiveFilter(options);
        this.dlg.setAttribute('aria-label', this.getLocalizedLabel('ExcelFilterDialogARIA'));
        if (options.isResponsiveFilter) {
            const responsiveCnt = document.querySelector('.e-responsive-dialog > .e-dlg-content > .e-mainfilterdiv');
            responsiveCnt.appendChild(this.dlg);
        }
        else {
            this.parent.element.appendChild(this.dlg);
        }
        this.dialogObj.appendTo(this.dlg);
        this.dialogObj.element.style.maxHeight = options.isResponsiveFilter ? 'none' : this.options.height + 'px';
        this.dialogObj.show();
        const content = this.dialogObj.element.querySelector('.e-dlg-content');
        content.appendChild(this.sBox);
        this.wireEvents();
        createSpinner({ target: this.spinner }, this.parent.createElement);
        showSpinner(this.spinner);
        this.getAllData();
    }
    renderResponsiveFilter(options) {
        if (options.isResponsiveFilter) {
            this.dialogObj.buttons = [{}];
            this.dialogObj.position = { X: '', Y: '' };
            this.dialogObj.target = document.querySelector('.e-resfilter > .e-dlg-content > .e-mainfilterdiv');
            this.dialogObj.width = '100%';
        }
    }
    dialogCreated(e) {
        if (this.options.isResponsiveFilter) {
            this.dialogObj.element.style.left = '0px';
        }
        else {
            if (!Browser.isDevice) {
                getFilterMenuPostion(this.options.target, this.dialogObj);
            }
            else {
                this.dialogObj.position = { X: 'center', Y: 'center' };
            }
        }
        if (this.options.column.showColumnMenu) {
            this.parent.notify(filterDialogCreated, e);
        }
    }
    openDialog(options) {
        this.updateModel(options);
        this.getAndSetChkElem(options);
        this.showDialog(options);
    }
    closeDialog() {
        if (this.dialogObj && !this.dialogObj.isDestroyed) {
            this.isBlanks = false;
            const filterTemplateCol = this.options.columns.filter((col) => col.getFilterItemTemplate());
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const registeredTemplate = this.parent.registeredTemplate;
            if (filterTemplateCol.length && !isNullOrUndefined(registeredTemplate) && registeredTemplate.filterItemTemplate) {
                this.parent.destroyTemplate(['filterItemTemplate']);
            }
            if ((this.parent.isReact || this.parent.isVue) && this.parent.destroyTemplate !== undefined) {
                clearReactVueTemplates(this.parent, ['filterItemTemplate']);
            }
            this.parent.notify(filterMenuClose, { field: this.options.field });
            this.dialogObj.destroy();
            this.unWireEvents();
            remove(this.dlg);
            this.dlg = null;
            this.parent.notify(filterDialogClose, {});
        }
    }
    /**
     * @param {Column} col - Defines column details
     * @returns {void}
     * @hidden
     */
    clearFilter(col) {
        // eslint-disable-next-line max-len
        const args = { instance: this, handler: this.clearFilter, cancel: false };
        this.parent.notify(fltrPrevent, args);
        if (args.cancel) {
            return;
        }
        this.options.handler({ action: 'clear-filter', field: col ? col.field : this.options.field });
    }
    btnClick(e) {
        if (this.filterState) {
            if ((e.target.tagName.toLowerCase() === 'input' && e.target.classList.contains('e-searchinput')) ||
                e.keyCode === 13) {
                if (!this.isCheckboxFilterTemplate) {
                    this.fltrBtnHandler();
                }
            }
            else {
                const text = e.target.firstChild.textContent.toLowerCase();
                if (this.getLocalizedLabel(this.isExcel ? 'OKButton' : 'FilterButton').toLowerCase() === text) {
                    if (!this.isCheckboxFilterTemplate) {
                        this.fltrBtnHandler();
                    }
                }
                else if (this.getLocalizedLabel('ClearButton').toLowerCase() === text) {
                    this.clearFilter();
                }
            }
            this.closeDialog();
        }
        else if (!(e.target.tagName.toLowerCase() === 'input')) {
            this.clearFilter();
            this.closeDialog();
        }
        if (this.options.column.showColumnMenu) {
            this.parent.notify(afterFilterColumnMenuClose, {});
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    fltrBtnHandler() {
        let checked = [].slice.call(this.cBox.querySelectorAll('.e-check:not(.e-selectall)'));
        const check = checked;
        let optr = 'equal';
        const ddlValue = this.dialogObj.element.querySelector('.e-dropdownlist');
        if (ddlValue) {
            this.options.operator = optr = ddlValue.ej2_instances[0].value;
        }
        this.isMenuNotEqual = this.options.operator === 'notequal';
        let searchInput;
        if (!this.options.hideSearchbox) {
            searchInput = this.searchBox.querySelector('.e-searchinput');
        }
        const caseSen = this.options.allowCaseSensitive;
        const defaults = {
            field: this.options.field, predicate: this.isMenuNotEqual ? 'and' : 'or', uid: this.options.uid,
            operator: optr, type: this.options.type, matchCase: caseSen, ignoreAccent: this.options.ignoreAccent
        };
        const isNotEqual = this.itemsCnt !== checked.length && this.itemsCnt - checked.length < checked.length;
        if (isNotEqual && searchInput && searchInput.value === '') {
            optr = this.isMenuNotEqual ? 'equal' : 'notequal';
            checked = [].slice.call(this.cBox.querySelectorAll('.e-uncheck:not(.e-selectall)'));
            defaults.predicate = this.isMenuNotEqual ? 'or' : 'and';
            defaults.operator = optr;
        }
        let value;
        let val;
        let length;
        let fObj;
        let coll = [];
        if (checked.length !== this.itemsCnt || (searchInput && searchInput.value && searchInput.value !== '')) {
            for (let i = 0; i < checked.length; i++) {
                value = this.values[parentsUntil(checked[i], 'e-ftrchk').getAttribute('uid')];
                fObj = extend({}, { value: value }, defaults);
                if (value && !value.toString().length) {
                    fObj.operator = isNotEqual ? 'notequal' : 'equal';
                }
                if (value === '' || isNullOrUndefined(value)) {
                    coll = coll.concat(CheckBoxFilterBase.generateNullValuePredicates(defaults));
                }
                else {
                    coll.push(fObj);
                }
                const args = {
                    instance: this, handler: this.fltrBtnHandler, arg1: fObj.field, arg2: fObj.predicate, arg3: fObj.operator,
                    arg4: fObj.matchCase, arg5: fObj.ignoreAccent, arg6: fObj.value, cancel: false
                };
                this.parent.notify(fltrPrevent, args);
                if (args.cancel) {
                    return;
                }
            }
            if (this.options.type === 'date' || this.options.type === 'datetime') {
                length = check.length - 1;
                val = this.values[parentsUntil(check[length], 'e-ftrchk').getAttribute('uid')];
                if (isNullOrUndefined(val) && isNotEqual) {
                    coll.push({
                        field: defaults.field, matchCase: defaults.matchCase, operator: 'equal',
                        predicate: 'and', value: null
                    });
                }
            }
            this.initiateFilter(coll);
        }
        else {
            const isClearFilter = this.options.filteredColumns.some((value) => {
                return this.options.field === value.field;
            });
            if (isClearFilter) {
                this.clearFilter();
            }
        }
    }
    // eslint-disable-next-line
    /** @hidden */
    static generateNullValuePredicates(defaults) {
        const coll = [];
        if (defaults.type === 'string') {
            coll.push({
                field: defaults.field, ignoreAccent: defaults.ignoreAccent, matchCase: defaults.matchCase,
                operator: defaults.operator, predicate: defaults.predicate, value: ''
            });
        }
        coll.push({
            field: defaults.field,
            matchCase: defaults.matchCase, operator: defaults.operator, predicate: defaults.predicate, value: null
        });
        coll.push({
            field: defaults.field, matchCase: defaults.matchCase, operator: defaults.operator,
            predicate: defaults.predicate, value: undefined
        });
        return coll;
    }
    /** @hidden */
    initiateFilter(fColl) {
        const firstVal = fColl[0];
        let predicate;
        if (!isNullOrUndefined(firstVal)) {
            predicate = firstVal.ejpredicate ? firstVal.ejpredicate :
                new Predicate(firstVal.field, firstVal.operator, firstVal.value, !firstVal.matchCase, firstVal.ignoreAccent);
            for (let j = 1; j < fColl.length; j++) {
                predicate = fColl[j].ejpredicate !== undefined ?
                    predicate[fColl[j].predicate](fColl[j].ejpredicate) :
                    predicate[fColl[j].predicate](fColl[j].field, fColl[j].operator, fColl[j].value, !fColl[j].matchCase, fColl[j].ignoreAccent);
            }
            const args = {
                action: 'filtering', filterCollection: fColl, field: this.options.field,
                ejpredicate: Predicate.or(predicate)
            };
            this.options.handler(args);
        }
    }
    isForeignColumn(col) {
        return col.isForeignColumn ? col.isForeignColumn() : false;
    }
    refreshCheckboxes() {
        const val = this.sInput.value;
        const column = this.options.column;
        const query = this.isForeignColumn(column) ? this.foreignKeyQuery.clone() : this.options.query.clone();
        const foreignQuery = this.options.query.clone();
        const pred = query.queries.filter((e) => { return e && e.fn === 'onWhere'; })[0];
        query.queries = [];
        foreignQuery.queries = [];
        let parsed = (this.options.type !== 'string' && parseFloat(val)) ? parseFloat(val) : val;
        let operator = this.options.isRemote ?
            (this.options.type === 'string' ? 'contains' : 'equal') : (this.options.type ? 'contains' : 'equal');
        const matchCase = true;
        const ignoreAccent = this.options.ignoreAccent;
        const field = this.isForeignColumn(column) ? column.foreignKeyValue : column.field;
        parsed = (parsed === '' || parsed === undefined) ? undefined : parsed;
        let coll = [];
        const defaults = {
            field: field, predicate: 'or', uid: this.options.uid,
            operator: 'equal', type: this.options.type, matchCase: matchCase, ignoreAccent: ignoreAccent
        };
        let predicte;
        const moduleName = this.options.dataManager.adaptor.getModuleName;
        if (this.options.type === 'boolean') {
            if (parsed !== undefined &&
                this.getLocalizedLabel('FilterTrue').toLowerCase().indexOf(parsed.toLowerCase()) !== -1) {
                parsed = 'true';
            }
            else if (parsed !== undefined &&
                this.getLocalizedLabel('FilterFalse').toLowerCase().indexOf(parsed.toLowerCase()) !== -1) {
                parsed = 'false';
            }
            if (parsed !== undefined &&
                this.getLocalizedLabel('FilterTrue').toLowerCase().indexOf(parsed.toLowerCase()) !== -1 && moduleName) {
                // eslint-disable-next-line no-constant-condition
                parsed = (moduleName() === 'ODataAdaptor' || 'ODataV4Adaptor') ? true : 'true';
            }
            else if (parsed !== undefined &&
                this.getLocalizedLabel('FilterFalse').toLowerCase().indexOf(parsed.toLowerCase()) !== -1 && moduleName) {
                // eslint-disable-next-line no-constant-condition
                parsed = (moduleName() === 'ODataAdaptor' || 'ODataV4Adaptor') ? false : 'false';
            }
            operator = 'equal';
        }
        if ((this.options.type === 'date' || this.options.type === 'datetime') && this.options.format) {
            const intl = new Internationalization();
            const format = typeof (this.options.format) === 'string' ? this.options.format :
                this.options.format.format;
            if (format) {
                parsed = intl.parseDate(val, { format: format }) || new Date(val);
            }
            else {
                parsed = new Date(val);
            }
        }
        this.addDistinct(query);
        const args = {
            requestType: filterSearchBegin,
            filterModel: this, columnName: field, column: column,
            operator: operator, matchCase: matchCase, ignoreAccent: ignoreAccent, filterChoiceCount: null,
            query: query, value: parsed
        };
        this.parent.trigger(actionBegin, args, (filterargs) => {
            // eslint-disable-next-line no-self-assign
            filterargs.operator = filterargs.operator;
            predicte = new Predicate(field, filterargs.operator, parsed, filterargs.matchCase, filterargs.ignoreAccent);
            if (this.options.type === 'date' || this.options.type === 'datetime') {
                operator = 'equal';
                const filterObj = {
                    field: field, operator: operator, value: parsed, matchCase: matchCase,
                    ignoreAccent: ignoreAccent
                };
                if (!isNullOrUndefined(parsed)) {
                    predicte = getDatePredicate(filterObj, this.options.type);
                }
            }
            if (val && typeof val === 'string' && this.isBlanks &&
                this.getLocalizedLabel('Blanks').toLowerCase().indexOf(val.toLowerCase()) >= 0) {
                coll = coll.concat(CheckBoxFilterBase.generateNullValuePredicates(defaults));
                const emptyValPredicte = CheckBoxFilterBase.generatePredicate(coll);
                emptyValPredicte.predicates.push(predicte);
                query.where(emptyValPredicte);
            }
            else if (val.length) {
                predicte = !isNullOrUndefined(pred) ? predicte.and(pred.e) : predicte;
                query.where(predicte);
            }
            else if (!isNullOrUndefined(pred)) {
                query.where(pred.e);
            }
            filterargs.filterChoiceCount = !isNullOrUndefined(filterargs.filterChoiceCount) ? filterargs.filterChoiceCount : 1000;
            const fPredicate = {};
            showSpinner(this.spinner);
            this.renderEmpty = false;
            if (this.isForeignColumn(column) && val.length) {
                const colData = ('result' in column.dataSource) ? new DataManager(column.dataSource.result) :
                    column.dataSource;
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                colData.executeQuery(query).then((e) => {
                    const columnData = this.options.column.columnData;
                    this.options.column.columnData = e.result;
                    this.parent.notify(generateQuery, { predicate: fPredicate, column: column });
                    if (fPredicate.predicate.predicates.length) {
                        foreignQuery.where(fPredicate.predicate);
                    }
                    else {
                        this.renderEmpty = true;
                    }
                    this.options.column.columnData = columnData;
                    foreignQuery.take(filterargs.filterChoiceCount);
                    this.search(filterargs, foreignQuery);
                });
            }
            else {
                query.take(filterargs.filterChoiceCount);
                this.search(filterargs, query);
            }
        });
    }
    search(args, query) {
        if (this.parent.dataSource && 'result' in this.parent.dataSource) {
            this.filterEvent(args, query);
        }
        else {
            this.processSearch(query);
        }
    }
    getPredicateFromCols(columns) {
        const predicates = CheckBoxFilterBase.getPredicate(columns);
        const predicateList = [];
        const fPredicate = {};
        const isGrid = this.parent.getForeignKeyColumns !== undefined;
        const foreignColumn = isGrid ? this.parent.getForeignKeyColumns() : [];
        for (const prop of Object.keys(predicates)) {
            let col;
            if (isGrid && this.parent.getColumnByField(prop).isForeignColumn()) {
                col = getColumnByForeignKeyValue(prop, foreignColumn);
            }
            if (col) {
                this.parent.notify(generateQuery, { predicate: fPredicate, column: col });
                if (fPredicate.predicate.predicates.length) {
                    predicateList.push(Predicate.or(fPredicate.predicate.predicates));
                }
            }
            else {
                predicateList.push(predicates[prop]);
            }
        }
        return predicateList.length && Predicate.and(predicateList);
    }
    getQuery() {
        return this.parent.getQuery ? this.parent.getQuery().clone() : new Query();
    }
    getAllData() {
        this.customQuery = false;
        const query = this.getQuery();
        query.requiresCount(); //consider take query
        this.addDistinct(query);
        const args = {
            requestType: filterChoiceRequest, query: query, filterChoiceCount: null
        };
        const filterModel = 'filterModel';
        args[filterModel] = this;
        this.parent.trigger(actionBegin, args, (args) => {
            args.filterChoiceCount = !isNullOrUndefined(args.filterChoiceCount) ? args.filterChoiceCount : 1000;
            query.take(args.filterChoiceCount);
            if (!args.query.distincts.length) {
                this.customQuery = true;
                this.queryGenerate(query);
            }
            if (this.parent.dataSource && 'result' in this.parent.dataSource) {
                this.filterEvent(args, query);
            }
            else {
                this.processDataOperation(query, true);
            }
        });
    }
    addDistinct(query) {
        let filteredColumn = DataUtil.distinct(this.options.filteredColumns, 'field');
        if (filteredColumn.indexOf(this.options.column.field) <= -1) {
            filteredColumn = filteredColumn.concat(this.options.column.field);
        }
        query.distinct(filteredColumn);
        return query;
    }
    filterEvent(args, query) {
        const defObj = eventPromise(args, query);
        this.parent.trigger(dataStateChange, defObj.state);
        const def = defObj.deffered;
        def.promise.then((e) => {
            this.dataSuccess(e);
        });
    }
    processDataOperation(query, isInitial) {
        this.options.dataSource = this.options.dataSource instanceof DataManager ?
            this.options.dataSource : new DataManager(this.options.dataSource);
        const allPromise = [];
        const runArray = [];
        if (this.isForeignColumn(this.options.column) && isInitial) {
            const colData = ('result' in this.options.column.dataSource) ?
                new DataManager(this.options.column.dataSource.result) :
                this.options.column.dataSource;
            this.foreignKeyQuery.params = query.params;
            allPromise.push(colData.executeQuery(this.foreignKeyQuery));
            runArray.push((data) => this.foreignKeyData = data);
        }
        allPromise.push(this.options.dataSource.executeQuery(query));
        runArray.push(this.dataSuccess.bind(this));
        let i = 0;
        Promise.all(allPromise).then((e) => {
            for (let j = 0; j < e.length; j++) {
                runArray[i++](e[j].result);
            }
        });
    }
    dataSuccess(e) {
        this.fullData = e;
        const args1 = { dataSource: this.fullData, executeQuery: true, field: this.options.field };
        this.parent.notify(beforeCheckboxRenderer, args1);
        if (args1.executeQuery) {
            const query = new Query();
            if (!this.customQuery) {
                this.queryGenerate(query);
            }
            // query.select(this.options.field);
            const result = new DataManager(args1.dataSource).executeLocal(query);
            const col = this.options.column;
            this.filteredData = CheckBoxFilterBase.getDistinct(result, this.options.field, col, this.foreignKeyData).records || [];
        }
        const data = args1.executeQuery ? this.filteredData : args1.dataSource;
        this.processDataSource(null, true, data, args1);
        if (this.sInput) {
            this.sInput.focus();
        }
        const args = {
            requestType: filterAfterOpen,
            columnName: this.options.field, columnType: this.options.type
        };
        const filterModel = 'filterModel';
        args[filterModel] = this;
        this.parent.notify(cBoxFltrComplete, args);
        if (this.isCheckboxFilterTemplate) {
            hideSpinner(this.spinner);
        }
    }
    queryGenerate(query) {
        if (this.parent.searchSettings && this.parent.searchSettings.key.length) {
            const sSettings = this.parent.searchSettings;
            const fields = sSettings.fields.length ? sSettings.fields : this.options.columns.map((f) => f.field);
            query.search(sSettings.key, fields, sSettings.operator, sSettings.ignoreCase, sSettings.ignoreAccent);
        }
        if ((this.options.filteredColumns.length)) {
            const cols = [];
            for (let i = 0; i < this.options.filteredColumns.length; i++) {
                const filterColumn = this.options.filteredColumns[i];
                if (this.options.uid) {
                    filterColumn.uid = filterColumn.uid || this.parent.getColumnByField(filterColumn.field).uid;
                    if (filterColumn.uid !== this.options.uid) {
                        cols.push(this.options.filteredColumns[i]);
                    }
                }
                else {
                    if (filterColumn.field !== this.options.field) {
                        cols.push(this.options.filteredColumns[i]);
                    }
                }
            }
            const predicate = this.getPredicateFromCols(cols);
            if (predicate) {
                query.where(predicate);
            }
        }
    }
    processDataSource(query, isInitial, dataSource, args) {
        showSpinner(this.spinner);
        // query = query ? query : this.options.query.clone();
        // query.requiresCount();
        // let result: Object = new DataManager(dataSource as JSON[]).executeLocal(query);
        // let res: { result: Object[] } = result as { result: Object[] };
        this.updateResult();
        const args1 = { dataSource: this.fullData, isCheckboxFilterTemplate: false, column: this.options.column,
            element: this.cBox, type: this.options.type, format: this.options.type, btnObj: this.options.isResponsiveFilter ? null :
                this.dialogObj.btnObj[0], searchBox: this.searchBox };
        this.parent.notify(beforeCheckboxfilterRenderer, args1);
        this.isCheckboxFilterTemplate = args1.isCheckboxFilterTemplate;
        if (!this.isCheckboxFilterTemplate) {
            this.createFilterItems(dataSource, isInitial, args);
        }
    }
    processSearch(query) {
        this.processDataOperation(query);
    }
    updateResult() {
        this.result = {};
        const predicate = this.getPredicateFromCols(this.options.filteredColumns);
        const query = new Query();
        if (predicate) {
            query.where(predicate);
        }
        this.parent.notify(beforeCheckboxRendererQuery, { query: query });
        const result = new DataManager(this.fullData).executeLocal(query);
        for (const res of result) {
            this.result[getObject(this.options.field, res)] = true;
        }
    }
    clickHandler(e) {
        const target = e.target;
        const elem = parentsUntil(target, 'e-checkbox-wrapper');
        if (parentsUntil(target, 'e-searchbox')) {
            this.searchBoxClick(e);
        }
        if (elem && !this.isCheckboxFilterTemplate) {
            const selectAll$$1 = elem.querySelector('.e-selectall');
            if (selectAll$$1) {
                this.updateAllCBoxes(!selectAll$$1.classList.contains('e-check'));
            }
            else {
                toogleCheckbox(elem.parentElement);
            }
            this.updateIndeterminatenBtn();
            elem.querySelector('.e-chk-hidden').focus();
        }
        this.setFocus(parentsUntil(elem, 'e-ftrchk'));
    }
    keyupHandler(e) {
        this.setFocus(parentsUntil(e.target, 'e-ftrchk'));
    }
    setFocus(elem) {
        const prevElem = this.dlg.querySelector('.e-chkfocus');
        if (prevElem) {
            prevElem.classList.remove('e-chkfocus');
        }
        if (elem) {
            elem.classList.add('e-chkfocus');
        }
    }
    updateAllCBoxes(checked) {
        const cBoxes = [].slice.call(this.cBox.getElementsByClassName('e-frame'));
        for (const cBox of cBoxes) {
            removeAddCboxClasses(cBox, checked);
            setChecked(cBox.previousSibling, checked);
        }
    }
    dialogOpen() {
        if (this.parent.element.classList.contains('e-device')) {
            this.dialogObj.element.querySelector('.e-input-group').classList.remove('e-input-focus');
            if (!this.options.isResponsiveFilter) {
                this.dialogObj.element.querySelector('.e-btn').focus();
            }
        }
    }
    createCheckbox(value, checked, data) {
        const elem = checked ? this.cBoxTrue.cloneNode(true) :
            this.cBoxFalse.cloneNode(true);
        setChecked(elem.querySelector('input'), checked);
        const label = elem.querySelector('.e-label');
        const dummyData = extendObjWithFn({}, data, { column: this.options.column, parent: this.parent });
        label.innerHTML = !isNullOrUndefined(value) && value.toString().length ? value :
            this.getLocalizedLabel('Blanks');
        if (label.innerHTML === this.getLocalizedLabel('Blanks')) {
            this.isBlanks = true;
        }
        if (typeof value === 'boolean') {
            label.innerHTML = value === true ? this.getLocalizedLabel('FilterTrue') : this.getLocalizedLabel('FilterFalse');
        }
        addClass([label], ['e-checkboxfiltertext']);
        if (this.options.template && data[this.options.column.field] !== this.getLocalizedLabel('SelectAll')) {
            label.innerHTML = '';
            const isReactCompiler = this.parent.isReact && this.options.column.filter
                && typeof (this.options.column.filter.itemTemplate) !== 'string';
            if (isReactCompiler) {
                this.options.template(dummyData, this.parent, 'filterItemTemplate', null, null, null, label);
                this.parent.renderTemplates();
            }
            else {
                appendChildren(label, this.options.template(dummyData, this.parent, 'filterItemTemplate'));
            }
        }
        return elem;
    }
    updateIndeterminatenBtn() {
        const cnt = this.cBox.children.length - 1;
        let className = [];
        let disabled = false;
        const elem = this.cBox.querySelector('.e-selectall');
        const selected = this.cBox.querySelectorAll('.e-check:not(.e-selectall)').length;
        let btn;
        if (!this.options.isResponsiveFilter) {
            btn = this.dialogObj.btnObj[0];
            btn.disabled = false;
        }
        const input = elem.previousSibling;
        setChecked(input, false);
        input.indeterminate = false;
        if (cnt === selected) {
            className = ['e-check'];
            setChecked(input, true);
        }
        else if (selected) {
            className = ['e-stop'];
            input.indeterminate = true;
        }
        else {
            className = ['e-uncheck'];
            disabled = true;
            if (btn) {
                btn.disabled = true;
            }
        }
        if (btn) {
            this.filterState = !btn.disabled;
            btn.dataBind();
        }
        removeClass([elem], ['e-check', 'e-stop', 'e-uncheck']);
        addClass([elem], className);
        this.parent.notify(refreshCustomFilterOkBtn, { disabled: disabled });
    }
    createFilterItems(data, isInitial, args1) {
        const cBoxes = this.parent.createElement('div');
        let btn;
        let disabled = false;
        if (!this.options.isResponsiveFilter) {
            btn = this.dialogObj.btnObj[0];
        }
        let nullCounter = -1;
        let key = 'ejValue';
        if (!args1.executeQuery) {
            key = args1.field;
        }
        for (let i = 0; i < data.length; i++) {
            const val = getValue(key, data[i]);
            if (val === '' || isNullOrUndefined(val)) {
                nullCounter = nullCounter + 1;
            }
        }
        this.itemsCnt = nullCounter !== -1 ? data.length - nullCounter : data.length;
        if (data.length && !this.renderEmpty) {
            const selectAllValue = this.getLocalizedLabel('SelectAll');
            const innerDiv = this.cBox.querySelector('.e-checkfltrnmdiv');
            if (innerDiv) {
                innerDiv.classList.remove('e-checkfltrnmdiv');
            }
            const checkBox = this.createCheckbox(selectAllValue, false, { [this.options.field]: selectAllValue });
            const selectAll$$1 = createCboxWithWrap(getUid('cbox'), checkBox, 'e-ftrchk');
            selectAll$$1.querySelector('.e-frame').classList.add('e-selectall');
            cBoxes.appendChild(selectAll$$1);
            let predicate = new Predicate('field', 'equal', this.options.field);
            if (this.options.foreignKeyValue) {
                predicate = predicate.or('field', 'equal', this.options.foreignKeyValue);
            }
            const isColFiltered = new DataManager(this.options.filteredColumns).executeLocal(new Query().where(predicate)).length;
            let isRndere;
            for (let i = 0; i < data.length; i++) {
                const uid = getUid('cbox');
                this.values[uid] = getValue(key, data[i]);
                let value = getValue(this.options.field, data[i]);
                if (this.options.formatFn) {
                    value = this.valueFormatter.toView(value, this.options.formatFn);
                }
                const args = { value: value, column: this.options.column, data: data[i] };
                this.parent.notify(filterCboxValue, args);
                value = args.value;
                if ((value === '' || isNullOrUndefined(value))) {
                    if (isRndere) {
                        continue;
                    }
                    isRndere = true;
                }
                const checkbox = this.createCheckbox(value, this.getCheckedState(isColFiltered, this.values[uid]), getValue('dataObj', data[i]));
                cBoxes.appendChild(createCboxWithWrap(uid, checkbox, 'e-ftrchk'));
            }
            this.cBox.innerHTML = '';
            appendChildren(this.cBox, [].slice.call(cBoxes.children));
            this.updateIndeterminatenBtn();
            if (btn) {
                btn.disabled = false;
            }
            disabled = false;
        }
        else {
            cBoxes.appendChild(this.parent.createElement('span', { innerHTML: this.getLocalizedLabel('NoResult') }));
            this.cBox.innerHTML = '';
            this.cBox.appendChild(this.parent.createElement('div', { className: 'e-checkfltrnmdiv' }));
            appendChildren(this.cBox.children[0], [].slice.call(cBoxes.children));
            if (btn) {
                btn.disabled = true;
            }
            disabled = true;
        }
        if (btn) {
            this.filterState = !btn.disabled;
            btn.dataBind();
        }
        const args = { requestType: filterChoiceRequest, dataSource: this.renderEmpty ? [] : data };
        const filterModel = 'filterModel';
        args[filterModel] = this;
        this.parent.notify(cBoxFltrComplete, args);
        this.parent.notify(refreshCustomFilterOkBtn, { disabled: disabled });
        hideSpinner(this.spinner);
    }
    getCheckedState(isColFiltered, value) {
        if (!this.isFiltered || !isColFiltered) {
            return true;
        }
        else {
            const checkState = this.result[value];
            return this.options.operator === 'notequal' ? !checkState : checkState;
        }
    }
    static getDistinct(json, field, column, foreignKeyData$$1) {
        let len = json.length;
        const result = [];
        let value;
        const ejValue = 'ejValue';
        const lookup = {};
        const isForeignKey = column && column.isForeignColumn ? column.isForeignColumn() : false;
        while (len--) {
            value = json[len];
            value = getObject(field, value); //local remote diff, check with mdu
            if (!(value in lookup)) {
                const obj = {};
                obj[ejValue] = value;
                lookup[value] = true;
                if (isForeignKey) {
                    const foreignDataObj = getForeignData(column, {}, value, foreignKeyData$$1)[0];
                    setValue(foreignKeyData, foreignDataObj, json[len]);
                    value = getValue(column.foreignKeyValue, foreignDataObj);
                }
                setValue(field, isNullOrUndefined(value) ? null : value, obj);
                setValue('dataObj', json[len], obj);
                result.push(obj);
            }
        }
        return DataUtil.group(DataUtil.sort(result, field, DataUtil.fnAscending), 'ejValue');
    }
    static getPredicate(columns) {
        const cols = DataUtil.distinct(columns, 'field', true) || [];
        let collection = [];
        const pred = {};
        for (let i = 0; i < cols.length; i++) {
            collection = new DataManager(columns).executeLocal(new Query().where('field', 'equal', cols[i].field));
            if (collection.length !== 0) {
                pred[cols[i].field] = CheckBoxFilterBase.generatePredicate(collection);
            }
        }
        return pred;
    }
    static generatePredicate(cols) {
        const len = cols ? cols.length : 0;
        let predicate;
        const operate = 'or';
        const first = CheckBoxFilterBase.updateDateFilter(cols[0]);
        first.ignoreAccent = !isNullOrUndefined(first.ignoreAccent) ? first.ignoreAccent : false;
        if (first.type === 'date' || first.type === 'datetime') {
            predicate = getDatePredicate(first, first.type);
        }
        else {
            predicate = first.ejpredicate ? first.ejpredicate :
                new Predicate(first.field, first.operator, first.value, !CheckBoxFilterBase.getCaseValue(first), first.ignoreAccent);
        }
        for (let p = 1; p < len; p++) {
            cols[p] = CheckBoxFilterBase.updateDateFilter(cols[p]);
            if (len > 2 && p > 1 && cols[p].predicate === 'or') {
                if (cols[p].type === 'date' || cols[p].type === 'datetime') {
                    predicate.predicates.push(getDatePredicate(cols[p], cols[p].type));
                }
                else {
                    predicate.predicates.push(new Predicate(cols[p].field, cols[p].operator, cols[p].value, !CheckBoxFilterBase.getCaseValue(cols[p]), cols[p].ignoreAccent));
                }
            }
            else {
                if (cols[p].type === 'date' || cols[p].type === 'datetime') {
                    if (cols[p].predicate === 'and' && cols[p].operator === 'equal') {
                        predicate = predicate[operate](getDatePredicate(cols[p], cols[p].type), cols[p].type, cols[p].ignoreAccent);
                    }
                    else {
                        predicate = predicate[(cols[p].predicate)](getDatePredicate(cols[p], cols[p].type), cols[p].type, cols[p].ignoreAccent);
                    }
                }
                else {
                    predicate = cols[p].ejpredicate ?
                        predicate[cols[p].predicate](cols[p].ejpredicate) :
                        predicate[(cols[p].predicate)](cols[p].field, cols[p].operator, cols[p].value, !CheckBoxFilterBase.getCaseValue(cols[p]), cols[p].ignoreAccent);
                }
            }
        }
        return predicate || null;
    }
    static getCaseValue(filter) {
        if (isNullOrUndefined(filter.matchCase)) {
            if (filter.type === 'string' || isNullOrUndefined(filter.type) && typeof (filter.value) === 'string') {
                return false;
            }
            else {
                return true;
            }
        }
        else {
            return filter.matchCase;
        }
    }
    static updateDateFilter(filter) {
        if ((filter.type === 'date' || filter.type === 'datetime' || filter.value instanceof Date)) {
            filter.type = filter.type || 'date';
        }
        return filter;
    }
}

/**
 * @hidden
 * `ExcelFilter` module is used to handle filtering action.
 */
class ExcelFilterBase extends CheckBoxFilterBase {
    /**
     * Constructor for excel filtering module
     *
     * @param {IXLFilter} parent - parent details
     * @param {Object} customFltrOperators - operator details
     * @hidden
     */
    constructor(parent, customFltrOperators) {
        super(parent);
        this.childRefs = [];
        this.eventHandlers = {};
        this.isDevice = false;
        this.customFilterOperators = customFltrOperators;
        this.isExcel = true;
    }
    getCMenuDS(type, operator) {
        const options = {
            number: ['Equal', 'NotEqual', '', 'LessThan', 'LessThanOrEqual', 'GreaterThan',
                'GreaterThanOrEqual', 'Between', '', 'CustomFilter'],
            string: ['Equal', 'NotEqual', '', 'StartsWith', 'EndsWith', '', 'Contains', '', 'CustomFilter']
        };
        options.date = options.number;
        options.datetime = options.number;
        const model = [];
        for (let i = 0; i < options[type].length; i++) {
            if (options[type][i].length) {
                if (operator) {
                    model.push({
                        text: this.getLocalizedLabel(options[type][i]) + '...',
                        iconCss: 'e-icons e-icon-check ' + (operator === options[type][i].toLowerCase() ? '' : 'e-emptyicon')
                    });
                }
                else {
                    model.push({
                        text: this.getLocalizedLabel(options[type][i]) + '...'
                    });
                }
            }
            else {
                model.push({ separator: true });
            }
        }
        return model;
    }
    /**
     * To destroy the filter bar.
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        if (this.dlg) {
            this.unwireExEvents();
            super.closeDialog();
        }
        if (!this.isDevice && this.menuObj) {
            const li = this.menuObj.element.querySelector('li.e-focused');
            if (!(li && parentsUntil(li, 'e-excel-menu'))) {
                this.destroyCMenu();
            }
        }
        if (this.dlgObj && !this.dlgObj.isDestroyed) {
            this.removeDialog();
        }
    }
    createMenu(type, isFiltered, isCheckIcon, eleOptions) {
        const options = { string: 'TextFilter', date: 'DateFilter', datetime: 'DateTimeFilter', number: 'NumberFilter' };
        this.menu = this.parent.createElement('div', { className: 'e-contextmenu-wrapper' });
        if (this.parent.enableRtl) {
            this.menu.classList.add('e-rtl');
        }
        else {
            this.menu.classList.remove('e-rtl');
        }
        const ul = this.parent.createElement('ul');
        const icon = isFiltered ? 'e-excl-filter-icon e-filtered' : 'e-excl-filter-icon';
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (this.parent.allowSorting && this.parent.getModuleName() === 'grid'
            && !this.options.isResponsiveFilter) {
            const hdrele = this.parent.getColumnHeaderByUid(eleOptions.uid).getAttribute('aria-sort');
            const colIsSort = this.parent.getColumnByField(eleOptions.field).allowSorting;
            const isAsc = (!colIsSort || hdrele === 'ascending') ? 'e-disabled e-excel-ascending' : 'e-excel-ascending';
            const isDesc = (!colIsSort || hdrele === 'descending') ? 'e-disabled e-excel-descending' : 'e-excel-descending';
            const ascName = (type === 'string') ? this.getLocalizedLabel('SortAtoZ') : (type === 'datetime' || type === 'date') ?
                this.getLocalizedLabel('SortByOldest') : this.getLocalizedLabel('SortSmallestToLargest');
            const descName = (type === 'string') ? this.getLocalizedLabel('SortZtoA') : (type === 'datetime' || type === 'date') ?
                this.getLocalizedLabel('SortByNewest') : this.getLocalizedLabel('SortLargestToSmallest');
            ul.appendChild(this.createMenuElem(ascName, isAsc, 'e-sortascending'));
            ul.appendChild(this.createMenuElem(descName, isDesc, 'e-sortdescending'));
            const separator = this.parent.createElement('li', { className: 'e-separator e-menu-item e-excel-separator' });
            ul.appendChild(separator);
        }
        if (!this.options.isResponsiveFilter) {
            ul.appendChild(this.createMenuElem(this.getLocalizedLabel('ClearFilter'), isFiltered ? '' : 'e-disabled', icon));
        }
        if (type !== 'boolean') {
            ul.appendChild(this.createMenuElem(this.getLocalizedLabel(options[type]), 'e-submenu', isCheckIcon && this.ensureTextFilter() ? 'e-icon-check' : icon + ' e-emptyicon', true));
        }
        this.menu.appendChild(ul);
        this.parent.notify(beforeFltrcMenuOpen, { element: this.menu });
        this.parent.notify(refreshCustomFilterClearBtn, { isFiltered: isFiltered });
    }
    createMenuElem(val, className, iconName, isSubMenu) {
        const li = this.parent.createElement('li', { className: className + ' e-menu-item' });
        li.innerHTML = val;
        li.insertBefore(this.parent.createElement('span', { className: 'e-menu-icon e-icons ' + iconName }), li.firstChild);
        if (isSubMenu) {
            li.appendChild(this.parent.createElement('span', { className: 'e-icons e-caret' }));
        }
        return li;
    }
    wireExEvents() {
        EventHandler.add(this.dlg, 'mouseover', this.hoverHandler, this);
        EventHandler.add(this.dlg, 'click', this.clickExHandler, this);
    }
    unwireExEvents() {
        EventHandler.remove(this.dlg, 'mouseover', this.hoverHandler);
        EventHandler.remove(this.dlg, 'click', this.clickExHandler);
    }
    clickExHandler(e) {
        const options = { string: 'TextFilter', date: 'DateFilter', datetime: 'DateTimeFilter', number: 'NumberFilter' };
        const menuItem = parentsUntil(e.target, 'e-menu-item');
        if (menuItem) {
            if (this.getLocalizedLabel('ClearFilter') === menuItem.innerText.trim()) {
                this.clearFilter();
                this.closeDialog();
            }
            else if (this.options.isResponsiveFilter
                && this.getLocalizedLabel(options[this.options.type]) === menuItem.innerText.trim()) {
                this.hoverHandler(e);
            }
        }
    }
    destroyCMenu() {
        this.isCMenuOpen = false;
        if (this.menuObj && !this.menuObj.isDestroyed) {
            this.menuObj.destroy();
            remove(this.cmenu);
            this.parent.notify(renderResponsiveCmenu, { target: null, header: '', isOpen: false, col: this.options.column });
        }
    }
    hoverHandler(e) {
        if (this.options.isResponsiveFilter && e.type === 'mouseover') {
            return;
        }
        const target = e.target.querySelector('.e-contextmenu');
        const li = parentsUntil(e.target, 'e-menu-item');
        const focused = this.menu.querySelector('.e-focused');
        let isSubMenu;
        if (focused) {
            focused.classList.remove('e-focused');
        }
        if (li) {
            li.classList.add('e-focused');
            isSubMenu = li.classList.contains('e-submenu');
        }
        if (target) {
            return;
        }
        if (!isSubMenu) {
            const submenu = this.menu.querySelector('.e-submenu');
            if (!isNullOrUndefined(submenu)) {
                submenu.classList.remove('e-selected');
            }
            this.destroyCMenu();
        }
        const selectedMenu = this.ensureTextFilter();
        if (!this.isCMenuOpen && isSubMenu) {
            li.classList.add('e-selected');
            this.isCMenuOpen = true;
            const menuOptions = {
                items: this.getCMenuDS(this.options.type, selectedMenu ? selectedMenu.replace(/\s/g, '') : undefined),
                select: this.selectHandler.bind(this),
                onClose: this.destroyCMenu.bind(this),
                enableRtl: this.parent.enableRtl,
                beforeClose: this.preventClose.bind(this),
                cssClass: this.options.isResponsiveFilter && this.parent.cssClass ?
                    'e-res-contextmenu-wrapper' + ' ' + this.parent.cssClass : this.options.isResponsiveFilter ?
                    'e-res-contextmenu-wrapper' : this.parent.cssClass ? this.parent.cssClass : ''
            };
            this.parent.element.appendChild(this.cmenu);
            this.menuObj = new ContextMenu(menuOptions, this.cmenu);
            const client = this.menu.querySelector('.e-submenu').getBoundingClientRect();
            const pos = { top: 0, left: 0 };
            if (this.options.isResponsiveFilter) {
                const options = { string: 'TextFilter', date: 'DateFilter', datetime: 'DateTimeFilter', number: 'NumberFilter' };
                const content$$1 = document.querySelector('.e-responsive-dialog > .e-dlg-header-content');
                const height = content$$1.offsetHeight + 4;
                this.menuObj.element.style.height = 'calc(100% - ' + height + 'px)';
                this.menuObj.open(height, 0, document.body);
                const header = this.getLocalizedLabel(options[this.options.type]);
                this.parent.notify(renderResponsiveCmenu, {
                    target: this.menuObj.element.parentElement, header: header, isOpen: true
                });
            }
            else {
                if (Browser.isDevice) {
                    this.isDevice = true;
                    const contextRect = this.getContextBounds();
                    pos.top = (window.innerHeight - contextRect.height) / 2;
                    pos.left = (window.innerWidth - contextRect.width) / 2;
                    this.closeDialog();
                    this.isDevice = false;
                }
                else {
                    pos.top = Browser.isIE ? window.pageYOffset + client.top : window.scrollY + client.top;
                    pos.left = this.getCMenuYPosition(this.dlg);
                }
                this.menuObj.open(pos.top, pos.left, e.target);
            }
            applyBiggerTheme(this.parent.element, this.menuObj.element.parentElement);
        }
    }
    ensureTextFilter() {
        let selectedMenu;
        const predicates = this.existingPredicate[this.options.field];
        if (predicates && predicates.length === 2) {
            if (predicates[0].operator === 'greaterthanorequal' && predicates[1].operator === 'lessthanorequal') {
                selectedMenu = 'between';
            }
            else {
                selectedMenu = 'customfilter';
            }
        }
        else {
            if (predicates && predicates.length === 1) {
                this.optrData = this.customFilterOperators[this.options.type + 'Operator'];
                selectedMenu = predicates[0].operator;
            }
        }
        return selectedMenu;
    }
    preventClose(args) {
        if (this.options && this.options.isResponsiveFilter && args.event) {
            const target = args.event.target;
            const isFilterBack = target.classList.contains('e-resfilterback')
                || target.classList.contains('e-res-back-btn') || target.classList.contains('e-menu-item');
            args.cancel = !isFilterBack;
        }
        else {
            if (args.event instanceof MouseEvent && args.event.target.classList.contains('e-submenu')) {
                args.cancel = true;
            }
        }
    }
    getContextBounds() {
        this.menuObj.element.style.display = 'block';
        return this.menuObj.element.getBoundingClientRect();
    }
    getCMenuYPosition(target) {
        const contextWidth = this.getContextBounds().width;
        const targetPosition = target.getBoundingClientRect();
        const leftPos = targetPosition.right + contextWidth - this.parent.element.clientWidth;
        let targetBorder = target.offsetWidth - target.clientWidth;
        targetBorder = targetBorder ? targetBorder + 1 : 0;
        return (leftPos < 1) ? (targetPosition.right + 1 - targetBorder) : (targetPosition.left - contextWidth - 1 + targetBorder);
    }
    openDialog(options) {
        this.updateModel(options);
        this.getAndSetChkElem(options);
        this.showDialog(options);
        if (options.cancel) {
            return;
        }
        this.dialogObj.dataBind();
        const filterLength = (this.existingPredicate[options.field] && this.existingPredicate[options.field].length) ||
            this.options.filteredColumns.filter((col) => {
                return this.options.field === col.field;
            }).length;
        this.createMenu(options.type, filterLength > 0, (filterLength === 1 || filterLength === 2), options);
        this.dlg.insertBefore(this.menu, this.dlg.firstChild);
        this.dlg.classList.add('e-excelfilter');
        if (this.parent.enableRtl) {
            this.dlg.classList.add('e-rtl');
        }
        this.dlg.classList.remove('e-checkboxfilter');
        this.cmenu = this.parent.createElement('ul', { className: 'e-excel-menu' });
        if (options.column.showColumnMenu) {
            this.parent.notify(filterDialogCreated, {});
        }
        this.wireExEvents();
    }
    closeDialog() {
        this.destroy();
    }
    selectHandler(e) {
        if (e.item) {
            this.parent.notify(filterCmenuSelect, {});
            this.menuItem = e.item;
            this.renderDialogue(e);
        }
    }
    /**
     * @hidden
     * @param {MenuEventArgs} e - event args
     * @returns {void}
     */
    renderDialogue(e) {
        const target = e ? e.element : undefined;
        const column = this.options.field;
        const isComplex = !isNullOrUndefined(column) && isComplexField(column);
        const complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
        const mainDiv = this.parent.createElement('div', {
            className: 'e-xlfl-maindiv',
            id: isComplex ? complexFieldName + '-xlflmenu' : column + '-xlflmenu'
        });
        this.dlgDiv = this.parent.createElement('div', {
            className: 'e-xlflmenu',
            id: isComplex ? complexFieldName + '-xlfldlg' : column + '-xlfldlg'
        });
        if (this.options.isResponsiveFilter) {
            const responsiveCnt = document.querySelector('.e-resfilter > .e-dlg-content > .e-xl-customfilterdiv');
            responsiveCnt.appendChild(this.dlgDiv);
        }
        else {
            this.parent.element.appendChild(this.dlgDiv);
        }
        this.dlgObj = new Dialog({
            header: this.getLocalizedLabel('CustomFilter'),
            isModal: true,
            overlayClick: this.removeDialog.bind(this),
            showCloseIcon: true,
            closeOnEscape: false,
            target: document.body,
            // target: this.parent.element,
            visible: false,
            enableRtl: this.parent.enableRtl,
            open: () => {
                const row$$1 = this.dlgObj.element.querySelector('table.e-xlfl-table>tr');
                if (this.options.column.filterTemplate) {
                    row$$1.querySelector('#' + this.options.column.field + '-xlfl-frstvalue').focus();
                }
                else {
                    //(row.cells[1].querySelector('input:not([type=hidden])') as HTMLElement).focus();
                }
            },
            close: this.removeDialog.bind(this),
            created: this.createdDialog.bind(this, target, column),
            buttons: [{
                    click: this.filterBtnClick.bind(this, column),
                    buttonModel: {
                        content: this.getLocalizedLabel('OKButton'), isPrimary: true,
                        cssClass: this.parent.cssClass ? 'e-xlfl-okbtn' + ' ' + this.parent.cssClass : 'e-xlfl-okbtn'
                    }
                },
                {
                    click: this.removeDialog.bind(this),
                    buttonModel: { content: this.getLocalizedLabel('CancelButton'),
                        cssClass: this.parent.cssClass ? 'e-xlfl-cancelbtn' + ' ' + this.parent.cssClass : 'e-xlfl-cancelbtn' }
                }],
            content: mainDiv,
            width: 430,
            animationSettings: { effect: 'None' },
            cssClass: this.parent.cssClass ? this.parent.cssClass : ''
        });
        const isStringTemplate = 'isStringTemplate';
        this.dlgObj[isStringTemplate] = true;
        this.renderResponsiveDialog();
        this.dlgDiv.setAttribute('aria-label', this.getLocalizedLabel('CustomFilterDialogARIA'));
        this.childRefs.push(this.dlgObj);
        this.dlgObj.appendTo(this.dlgDiv);
    }
    renderResponsiveDialog() {
        if (this.options.isResponsiveFilter) {
            const rowResponsiveDlg = document.querySelector('.e-row-responsive-filter');
            if (rowResponsiveDlg) {
                rowResponsiveDlg.classList.remove('e-row-responsive-filter');
            }
            this.dlgObj.buttons = [{}];
            this.dlgObj.header = undefined;
            this.dlgObj.position = { X: '', Y: '' };
            this.dlgObj.target = document.querySelector('.e-resfilter > .e-dlg-content > .e-xl-customfilterdiv');
            this.dlgObj.width = '100%';
            this.dlgObj.isModal = false;
            this.dlgObj.showCloseIcon = false;
        }
    }
    /**
     * @hidden
     * @returns {void}
     */
    removeDialog() {
        this.parent.notify(customFilterClose, {});
        if ((this.parent.isReact || this.parent.isVue) && this.parent.destroyTemplate !== undefined) {
            clearReactVueTemplates(this.parent, ['filterTemplate']);
        }
        this.removeObjects(this.childRefs);
        remove(this.dlgDiv);
        this.parent.notify(filterDialogClose, {});
    }
    createdDialog(target, column) {
        this.renderCustomFilter(target, column);
        this.dlgObj.element.style.left = '0px';
        if (!this.options.isResponsiveFilter) {
            this.dlgObj.element.style.top = '0px';
        }
        else {
            const content$$1 = document.querySelector('.e-responsive-dialog > .e-dlg-header-content');
            const height = content$$1.offsetHeight + 4;
            this.dlgObj.element.style.top = height + 'px';
        }
        if (!this.options.isResponsiveFilter && Browser.isDevice && window.innerWidth < 440) {
            this.dlgObj.element.style.width = '90%';
        }
        this.parent.notify(beforeCustomFilterOpen, { column: column, dialog: this.dialogObj });
        this.dlgObj.show();
        applyBiggerTheme(this.parent.element, this.dlgObj.element.parentElement);
    }
    renderCustomFilter(target, column) {
        const dlgConetntEle = this.dlgObj.element.querySelector('.e-xlfl-maindiv');
        const dlgFields = this.parent.createElement('div', { innerHTML: this.getLocalizedLabel('ShowRowsWhere'), className: 'e-xlfl-dlgfields' });
        dlgConetntEle.appendChild(dlgFields);
        //column name
        const fieldSet = this.parent.createElement('div', { innerHTML: this.options.displayName, className: 'e-xlfl-fieldset' });
        dlgConetntEle.appendChild(fieldSet);
        this.renderFilterUI(column, dlgConetntEle);
    }
    /**
     * @hidden
     * @param {string} col - Defines column details
     * @returns {void}
     */
    filterBtnClick(col) {
        const isComplex = !isNullOrUndefined(col) && isComplexField(col);
        const complexFieldName = !isNullOrUndefined(col) && getComplexFieldID(col);
        const colValue = isComplex ? complexFieldName : col;
        const fValue = this.dlgDiv.querySelector('#' + colValue + '-xlfl-frstvalue').ej2_instances[0];
        const fOperator = this.dlgDiv.querySelector('#' + colValue + '-xlfl-frstoptr').ej2_instances[0];
        const sValue = this.dlgDiv.querySelector('#' + colValue + '-xlfl-secndvalue').ej2_instances[0];
        const sOperator = this.dlgDiv.querySelector('#' + colValue + '-xlfl-secndoptr').ej2_instances[0];
        let checkBoxValue;
        if (this.options.type === 'string') {
            const checkBox = this.dlgDiv.querySelector('#' + colValue + '-xlflmtcase').ej2_instances[0];
            checkBoxValue = checkBox.checked;
        }
        const andRadio = this.dlgDiv.querySelector('#' + colValue + 'e-xlfl-frstpredicate').ej2_instances[0];
        let predicate = (andRadio.checked ? 'and' : 'or');
        if (sValue.value === null) {
            predicate = 'or';
        }
        this.filterByColumn(this.options.field, fOperator.value, fValue.value, predicate, checkBoxValue, this.options.ignoreAccent, sOperator.value, sValue.value);
        this.removeDialog();
    }
    /**
     * @hidden
     * Filters grid row by column name with given options.
     *
     * @param {string} fieldName - Defines the field name of the filter column.
     * @param {string} firstOperator - Defines the first operator by how to filter records.
     * @param {string | number | Date | boolean} firstValue - Defines the first value which is used to filter records.
     * @param  {string} predicate - Defines the relationship between one filter query with another by using AND or OR predicate.
     * @param {boolean} matchCase - If ignore case set to true, then filter records with exact match or else
     * filter records with case insensitive(uppercase and lowercase letters treated as same).
     * @param {boolean} ignoreAccent - If ignoreAccent set to true, then ignores the diacritic characters or accents when filtering.
     * @param {string} secondOperator - Defines the second operator by how to filter records.
     * @param {string | number | Date | boolean} secondValue - Defines the first value which is used to filter records.
     * @returns {void}
     */
    filterByColumn(fieldName, firstOperator, firstValue, predicate, matchCase, ignoreAccent, secondOperator, secondValue) {
        const col = this.parent.getColumnByField ? this.parent.getColumnByField(fieldName) : this.options.column;
        const field = this.isForeignColumn(col) ? col.foreignKeyValue : fieldName;
        const fColl = [];
        let mPredicate;
        fColl.push({
            field: field,
            predicate: predicate,
            matchCase: matchCase,
            ignoreAccent: ignoreAccent,
            operator: firstOperator,
            value: firstValue,
            type: this.options.type
        });
        const arg = {
            instance: this, handler: this.filterByColumn, arg1: fieldName, arg2: firstOperator, arg3: firstValue, arg4: predicate,
            arg5: matchCase, arg6: ignoreAccent, arg7: secondOperator, arg8: secondValue, cancel: false
        };
        this.parent.notify(fltrPrevent, arg);
        if (arg.cancel) {
            return;
        }
        mPredicate = new Predicate(field, firstOperator.toLowerCase(), firstValue, !matchCase, ignoreAccent);
        if (!isNullOrUndefined(secondValue) && !isNullOrUndefined(secondOperator)) {
            fColl.push({
                field: field,
                predicate: predicate,
                matchCase: matchCase,
                ignoreAccent: ignoreAccent,
                operator: secondOperator,
                value: secondValue,
                type: this.options.type
            });
            // eslint-disable-next-line max-len
            mPredicate = mPredicate[predicate](field, secondOperator.toLowerCase(), secondValue, !matchCase, ignoreAccent);
        }
        const args = {
            action: 'filtering', filterCollection: fColl, field: this.options.field,
            ejpredicate: mPredicate, actualPredicate: fColl
        };
        if (this.isForeignColumn(col)) {
            this.foreignKeyFilter(args, fColl, mPredicate);
        }
        else {
            this.options.handler(args);
        }
    }
    // eslint-disable-next-line max-len
    renderOperatorUI(column, table$$1, elementID, predicates, isFirst) {
        const fieldElement = this.parent.createElement('tr', { className: 'e-xlfl-fields', attrs: { role: 'row' } });
        table$$1.appendChild(fieldElement);
        const xlfloptr = this.parent.createElement('td', { className: 'e-xlfl-optr' });
        fieldElement.appendChild(xlfloptr);
        const optrDiv = this.parent.createElement('div', { className: 'e-xlfl-optrdiv' });
        const isComplex = !isNullOrUndefined(column) && isComplexField(column);
        const complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
        const optrInput = this.parent
            .createElement('input', { id: isComplex ? complexFieldName + elementID : column + elementID });
        optrDiv.appendChild(optrInput);
        xlfloptr.appendChild(optrDiv);
        const optr = this.options.type + 'Operator';
        const dropDatasource = this.customFilterOperators[optr];
        this.optrData = dropDatasource;
        let selectedValue = this.dropSelectedVal(this.options.column, predicates, isFirst);
        //Trailing three dots are sliced.
        let menuText = '';
        if (this.menuItem) {
            menuText = this.menuItem.text.slice(0, -3);
            if (menuText !== this.getLocalizedLabel('CustomFilter')) {
                selectedValue = isFirst ? menuText : undefined;
            }
            if (menuText === this.getLocalizedLabel('Between')) {
                selectedValue = this.getLocalizedLabel(isFirst ? 'GreaterThanOrEqual' : 'LessThanOrEqual');
            }
        }
        const col = this.options.column;
        const dropOptr = new DropDownList(extend$1({
            dataSource: dropDatasource,
            fields: { text: 'text', value: 'value' },
            text: selectedValue,
            enableRtl: this.parent.enableRtl,
            cssClass: this.parent.cssClass ? this.parent.cssClass : null
        }, col.filter.params));
        this.childRefs.push(dropOptr);
        const evt = { 'open': this.dropDownOpen.bind(this), 'change': this.dropDownValueChange.bind(this) };
        registerEventHandlers(optrInput.id, [open, change], evt, this);
        dropOptr.addEventListener(open, this.eventHandlers[optrInput.id][open]);
        dropOptr.addEventListener(change, this.eventHandlers[optrInput.id][change]);
        dropOptr.appendTo(optrInput);
        const operator = this.getSelectedValue(selectedValue);
        return { fieldElement, operator };
    }
    removeHandlersFromComponent(component) {
        if (component.element.classList.contains('e-dropdownlist')) {
            removeEventHandlers(component, [open, change], this);
        }
        else if (component.element.classList.contains('e-autocomplete')) {
            removeEventHandlers(component, [actionComplete, focus], this);
        }
    }
    dropDownOpen(args) {
        args.popup.element.style.zIndex = (this.dialogObj.zIndex + 1).toString();
    }
    dropDownValueChange(args) {
        if (args.element.id.includes('-xlfl-frstoptr')) {
            this.firstOperator = args.value.toString();
        }
        else {
            this.secondOperator = args.value.toString();
        }
    }
    /**
     * @hidden
     * @returns {FilterUI} returns filter UI
     */
    getFilterUIInfo() {
        return { firstOperator: this.firstOperator, secondOperator: this.secondOperator, field: this.options.field };
    }
    getSelectedValue(text) {
        const selectedField = new DataManager(this.optrData).executeLocal(new Query().where('text', 'equal', text));
        return !isNullOrUndefined(selectedField[0]) ? selectedField[0].value : '';
    }
    dropSelectedVal(col, predicates, isFirst) {
        let operator;
        if (predicates && predicates.length > 0) {
            operator = predicates.length === 2 ?
                (isFirst ? predicates[0].operator : predicates[1].operator) :
                (isFirst ? predicates[0].operator : undefined);
        }
        else if (isFirst && col.type === 'string' && !col.filter.operator) {
            operator = 'startswith';
        }
        else {
            operator = isFirst ? col.filter.operator || 'equal' : undefined;
        }
        return this.getSelectedText(operator);
    }
    getSelectedText(operator) {
        const selectedField = new DataManager(this.optrData).executeLocal(new Query().where('value', 'equal', operator));
        return !isNullOrUndefined(selectedField[0]) ? selectedField[0].text : '';
    }
    renderFilterUI(column, dlgConetntEle) {
        const predicates = this.existingPredicate[column];
        const table$$1 = this.parent.createElement('table', { className: 'e-xlfl-table', attrs: { role: 'grid' } });
        dlgConetntEle.appendChild(table$$1);
        const colGroup$$1 = this.parent.createElement(colGroup);
        colGroup$$1.innerHTML = '<col style="width: 50%"></col><col style="width: 50%"></col>';
        table$$1.appendChild(colGroup$$1);
        //Renders first dropdown
        let optr = this.renderOperatorUI(column, table$$1, '-xlfl-frstoptr', predicates, true);
        this.firstOperator = optr.operator;
        //Renders first value
        this.renderFlValueUI(column, optr, '-xlfl-frstvalue', predicates, true);
        const predicate = this.parent.createElement('tr', { className: 'e-xlfl-predicate', attrs: { role: 'row' } });
        table$$1.appendChild(predicate);
        //Renders first radion button
        this.renderRadioButton(column, predicate, predicates);
        //Renders second dropdown
        optr = this.renderOperatorUI(column, table$$1, '-xlfl-secndoptr', predicates, false);
        this.secondOperator = optr.operator;
        //Renders second text box
        this.renderFlValueUI(column, optr, '-xlfl-secndvalue', predicates, false);
    }
    renderRadioButton(column, tr, predicates) {
        const td = this.parent.createElement('td', { className: 'e-xlfl-radio', attrs: { 'colSpan': '2' } });
        tr.appendChild(td);
        const radioDiv = this.parent
            .createElement('div', { className: 'e-xlfl-radiodiv', attrs: { 'style': 'display: inline-block' } });
        const isComplex = !isNullOrUndefined(column) && isComplexField(column);
        const complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
        const frstpredicate = this.parent.createElement('input', { id: isComplex ? complexFieldName + 'e-xlfl-frstpredicate' : column + 'e-xlfl-frstpredicate', attrs: { 'type': 'radio' } });
        const secndpredicate = this.parent.createElement('input', { id: isComplex ? complexFieldName + 'e-xlfl-secndpredicate' : column + 'e-xlfl-secndpredicate', attrs: { 'type': 'radio' } });
        //appends into div
        radioDiv.appendChild(frstpredicate);
        radioDiv.appendChild(secndpredicate);
        td.appendChild(radioDiv);
        if (this.options.type === 'string') {
            this.renderMatchCase(column, tr, td, '-xlflmtcase', predicates);
        }
        // Initialize AND RadioButton component.
        const andRadio = new RadioButton({
            label: this.getLocalizedLabel('AND'),
            name: 'default', checked: true,
            enableRtl: this.parent.enableRtl,
            cssClass: this.parent.cssClass ? this.parent.cssClass : ''
        });
        this.childRefs.push(andRadio);
        // Initialize OR RadioButton component.
        const orRadio = new RadioButton({
            label: this.getLocalizedLabel('OR'),
            name: 'default',
            enableRtl: this.parent.enableRtl,
            cssClass: this.parent.cssClass ? this.parent.cssClass : ''
        });
        this.childRefs.push(orRadio);
        const flValue = predicates && predicates.length === 2 ? predicates[1].predicate : 'and';
        if (flValue === 'and') {
            andRadio.checked = true;
            orRadio.checked = false;
        }
        else {
            orRadio.checked = true;
            andRadio.checked = false;
        }
        // Render initialized RadioButton.
        andRadio.appendTo(frstpredicate);
        orRadio.appendTo(secndpredicate);
        andRadio.element.nextElementSibling.classList.add('e-xlfl-radio-and');
        orRadio.element.nextElementSibling.classList.add('e-xlfl-radio-or');
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    removeObjects(elements) {
        for (const obj of elements) {
            if (obj && !obj.isDestroyed) {
                this.removeHandlersFromComponent(obj);
                obj.destroy();
            }
        }
    }
    // eslint-disable-next-line max-len
    renderFlValueUI(column, optr, elementId, predicates, isFirst) {
        const value = this.parent.createElement('td', { className: 'e-xlfl-value' });
        optr.fieldElement.appendChild(value);
        const isComplex = !isNullOrUndefined(column) && isComplexField(column);
        const complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
        const valueDiv = this.parent.createElement('div', { className: 'e-xlfl-valuediv' });
        const isFilteredCol = this.options.filteredColumns.some((col) => { return column === col.field; });
        const fltrPredicates = this.options.filteredColumns.filter((col) => col.field === column);
        if (this.options.column.filterTemplate) {
            let data = {};
            const columnObj = this.options.column;
            if (isFilteredCol && elementId) {
                data = this.getExcelFilterData(elementId, data, columnObj, predicates, fltrPredicates);
            }
            const isReactCompiler = this.parent.isReact && typeof (this.options.column.filterTemplate) !== 'string';
            const tempID = this.parent.element.id + columnObj.uid + 'filterTemplate';
            if (isReactCompiler) {
                this.options.column.getFilterTemplate()(data, this.parent, 'filterTemplate', tempID, null, null, valueDiv);
                this.parent.renderTemplates();
            }
            else {
                const element = this.options.column.getFilterTemplate()(data, this.parent, 'filterTemplate', tempID);
                appendChildren(valueDiv, element);
            }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            (this.parent.isAngular ? valueDiv.children[0] : valueDiv.querySelector('input')).id = isComplex ?
                complexFieldName + elementId : column + elementId;
            value.appendChild(valueDiv);
        }
        else {
            const valueInput = this.parent
                .createElement('input', { id: isComplex ? complexFieldName + elementId : column + elementId });
            valueDiv.appendChild(valueInput);
            value.appendChild(valueDiv);
            let flValue;
            let predicate;
            if (predicates && predicates.length > 0) {
                predicate = predicates.length === 2 ?
                    (isFirst ? predicates[0] : predicates[1]) :
                    (isFirst ? predicates[0] : undefined);
                flValue = (predicate && predicate.operator === optr.operator) ? predicate.value : undefined;
                if (isNullOrUndefined(flValue)) {
                    flValue = undefined;
                }
            }
            const types = {
                'string': this.renderAutoComplete.bind(this),
                'number': this.renderNumericTextBox.bind(this),
                'date': this.renderDate.bind(this),
                'datetime': this.renderDateTime.bind(this)
            };
            types[this.options.type](this.options, column, valueInput, flValue, this.parent.enableRtl);
        }
    }
    getExcelFilterData(elementId, data, columnObj, predicates, fltrPredicates) {
        const predIndex = elementId === '-xlfl-frstvalue' ? 0 : 1;
        if (elementId === '-xlfl-frstvalue' || fltrPredicates.length > 1) {
            data = { column: predicates instanceof Array ? predicates[predIndex] : predicates };
            const indx = this.options.column.columnData && fltrPredicates.length > 1 ?
                (this.options.column.columnData.length === 1 ? 0 : 1) : predIndex;
            data[this.options.field] = columnObj.foreignKeyValue ? this.options.column.columnData[indx][columnObj.foreignKeyValue] :
                fltrPredicates[indx].value;
            if (this.options.foreignKeyValue) {
                data[this.options.foreignKeyValue] = this.options.column.columnData[indx][columnObj.foreignKeyValue];
            }
        }
        return data;
    }
    // eslint-disable-next-line max-len
    renderMatchCase(column, tr, matchCase, elementId, predicates) {
        const matchCaseDiv = this.parent.createElement('div', { className: 'e-xlfl-matchcasediv', attrs: { 'style': 'display: inline-block' } });
        const isComplex = !isNullOrUndefined(column) && isComplexField(column);
        const complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
        const matchCaseInput = this.parent.createElement('input', { id: isComplex ? complexFieldName + elementId : column + elementId, attrs: { 'type': 'checkbox' } });
        matchCaseDiv.appendChild(matchCaseInput);
        matchCase.appendChild(matchCaseDiv);
        const flValue = predicates && predicates.length > 0 ?
            (predicates && predicates.length === 2 ? predicates[1].matchCase : predicates[0].matchCase) :
            false;
        // Initialize Match Case check box.
        const checkbox = new CheckBox({
            label: this.getLocalizedLabel('MatchCase'),
            enableRtl: this.parent.enableRtl, checked: flValue,
            cssClass: this.parent.cssClass ? this.parent.cssClass : ''
        });
        this.childRefs.push(checkbox);
        // Render initialized CheckBox.
        checkbox.appendTo(matchCaseInput);
    }
    // eslint-disable-next-line max-len
    renderDate(options, column, inputValue, fValue, isRtl) {
        const format = getCustomDateFormat(options.format, options.type) || options.format;
        const datePicker = new DatePicker(extend$1({
            format: format,
            cssClass: this.parent.cssClass ? 'e-popup-flmenu' + ' ' + this.parent.cssClass : 'e-popup-flmenu',
            placeholder: this.getLocalizedLabel('CustomFilterDatePlaceHolder'),
            width: '100%',
            enableRtl: isRtl,
            value: new Date(fValue),
            locale: this.parent.locale
        }, options.column.filter.params));
        this.childRefs.push(datePicker);
        datePicker.appendTo(inputValue);
    }
    // eslint-disable-next-line max-len
    renderDateTime(options, column, inputValue, fValue, isRtl) {
        const format = getCustomDateFormat(options.format, options.type);
        const dateTimePicker = new DateTimePicker(extend$1({
            format: format,
            cssClass: this.parent.cssClass ? 'e-popup-flmenu' + ' ' + this.parent.cssClass : 'e-popup-flmenu',
            placeholder: this.getLocalizedLabel('CustomFilterDatePlaceHolder'),
            width: '100%',
            enableRtl: isRtl,
            value: new Date(fValue),
            locale: this.parent.locale
        }, options.column.filter.params));
        this.childRefs.push(dateTimePicker);
        dateTimePicker.appendTo(inputValue);
    }
    completeAction(e) {
        e.result = distinctStringValues(e.result);
    }
    // eslint-disable-next-line max-len
    renderNumericTextBox(options, column, inputValue, fValue, isRtl) {
        const numericTextBox = new NumericTextBox(extend$1({
            format: options.format,
            placeholder: this.getLocalizedLabel('CustomFilterPlaceHolder'),
            enableRtl: isRtl,
            value: fValue,
            locale: this.parent.locale,
            cssClass: this.parent.cssClass ? this.parent.cssClass : null
        }, options.column.filter.params));
        this.childRefs.push(numericTextBox);
        numericTextBox.appendTo(inputValue);
    }
    // eslint-disable-next-line max-len
    renderAutoComplete(options, column, inputValue, fValue, isRtl) {
        const colObj = this.options.column;
        const isForeignColumn = this.isForeignColumn(colObj);
        const dataSource = isForeignColumn ? colObj.dataSource : options.dataSource;
        const fields = { value: isForeignColumn ? colObj.foreignKeyValue : column };
        const actObj = new AutoComplete(extend$1({
            dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
            fields: fields,
            query: this.getQuery(),
            sortOrder: 'Ascending',
            locale: this.parent.locale,
            cssClass: this.parent.cssClass ? 'e-popup-flmenu' + ' ' + this.parent.cssClass : 'e-popup-flmenu',
            autofill: true,
            placeholder: this.getLocalizedLabel('CustomFilterPlaceHolder'),
            enableRtl: isRtl,
            text: fValue
        }, colObj.filter.params));
        if (dataSource && 'result' in dataSource) {
            const defObj = eventPromise({ requestType: 'stringfilterrequest' }, this.getQuery());
            this.parent.trigger(dataStateChange, defObj.state);
            const def = defObj.deffered;
            def.promise.then((e) => {
                actObj.dataSource = new DataManager(e);
            });
        }
        this.childRefs.push(actObj);
        const evt = { 'actionComplete': this.acActionComplete(actObj, column), 'focus': this.acFocus(actObj, column, options, inputValue) };
        registerEventHandlers(inputValue.id, [actionComplete, focus], evt, this);
        actObj.addEventListener(focus, this.eventHandlers[inputValue.id][focus]);
        actObj.addEventListener(actionComplete, this.eventHandlers[inputValue.id][actionComplete]);
        actObj.appendTo(inputValue);
    }
    acActionComplete(actObj, column) {
        return (e) => {
            const isComplex = !isNullOrUndefined(column) && isComplexField(column);
            e.result = e.result.filter((obj, index, arr) => {
                return arr.map((mapObject) => {
                    return isComplex ? performComplexDataOperation(actObj.fields.value, mapObject)
                        : mapObject[actObj.fields.value];
                }).indexOf(isComplex ? performComplexDataOperation(actObj.fields.value, obj) :
                    obj[actObj.fields.value]) === index;
            });
        };
    }
    acFocus(actObj, column, options, inputValue) {
        return () => {
            const isComplex = !isNullOrUndefined(column) && isComplexField(column);
            const complexFieldName = !isNullOrUndefined(column) && getComplexFieldID(column);
            const columnvalue = isComplex ? complexFieldName : column;
            actObj.filterType = this.dlgDiv.querySelector('#' + columnvalue +
                (inputValue.id === (columnvalue + '-xlfl-frstvalue') ?
                    '-xlfl-frstoptr' :
                    '-xlfl-secndoptr')).ej2_instances[0].value;
            actObj.ignoreCase = options.type === 'string' ?
                !this.dlgDiv.querySelector('#' + columnvalue + '-xlflmtcase').ej2_instances[0].checked :
                true;
            actObj.filterType = !isNullOrUndefined(actObj.filterType) ? actObj.filterType :
                'equal';
        };
    }
}

/**
 * Common export
 */

/**
 * Base export
 */

/**
 *
 * The `Sort` module is used to handle sorting action.
 */
class Sort {
    /**
     * Constructor for Grid sorting module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {SortSettings} sortSettings - specifies the SortSettings
     * @param {string[]} sortedColumns - specifies the string
     * @param {ServiceLocator} locator - specifies the ServiceLocator
     * @hidden
     */
    constructor(parent, sortSettings, sortedColumns, locator) {
        this.contentRefresh = true;
        this.isModelChanged = true;
        this.aria = new AriaService();
        this.currentTarget = null;
        this.parent = parent;
        this.sortSettings = sortSettings;
        this.sortedColumns = sortedColumns;
        this.serviceLocator = locator;
        this.focus = locator.getService('focus');
        this.addEventListener();
        this.setFullScreenDialog();
    }
    /**
     * The function used to update sortSettings
     *
     * @returns {void}
     * @hidden
     */
    updateModel() {
        const sortedColumn = { field: this.columnName, direction: this.direction };
        let index;
        const gCols = this.parent.groupSettings.columns;
        let flag = false;
        if (!this.isMultiSort) {
            if (!gCols.length) {
                this.sortSettings.columns = [sortedColumn];
            }
            else {
                const sortedCols = [];
                for (let i = 0, len = gCols.length; i < len; i++) {
                    index = this.getSortedColsIndexByField(gCols[i], sortedCols);
                    if (this.columnName === gCols[i]) {
                        flag = true;
                        sortedCols.push(sortedColumn);
                    }
                    else {
                        const sCol = this.getSortColumnFromField(gCols[i]);
                        sortedCols.push({ field: sCol.field, direction: sCol.direction, isFromGroup: sCol.isFromGroup });
                    }
                }
                if (!flag) {
                    sortedCols.push(sortedColumn);
                }
                this.sortSettings.columns = sortedCols;
            }
        }
        else {
            index = this.getSortedColsIndexByField(this.columnName);
            if (index > -1) {
                this.sortSettings.columns.splice(index, 1);
            }
            this.sortSettings.columns.push(sortedColumn);
            // eslint-disable-next-line no-self-assign
            this.sortSettings.columns = this.sortSettings.columns;
        }
        this.parent.dataBind();
        this.lastSortedCol = this.columnName;
    }
    /**
     * The function used to trigger onActionComplete
     *
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    onActionComplete(e) {
        const args = !this.isRemove ? {
            columnName: this.columnName, direction: this.direction, requestType: 'sorting', type: actionComplete
        } : { requestType: 'sorting', type: actionComplete };
        this.isRemove = false;
        this.parent.trigger(actionComplete, extend(e, args));
    }
    /**
     * Sorts a column with the given options.
     *
     * @param {string} columnName - Defines the column name to sort.
     * @param {SortDirection} direction - Defines the direction of sorting field.
     * @param {boolean} isMultiSort - Specifies whether the previously sorted columns are to be maintained.
     * @returns {void}
     */
    sortColumn(columnName, direction, isMultiSort) {
        const gObj = this.parent;
        if (this.parent.getColumnByField(columnName).allowSorting === false || this.parent.isContextMenuOpen()) {
            this.parent.log('action_disabled_column', { moduleName: this.getModuleName(), columnName: columnName });
            return;
        }
        if (!gObj.allowMultiSorting) {
            isMultiSort = gObj.allowMultiSorting;
        }
        if (this.isActionPrevent()) {
            gObj.notify(preventBatch, {
                instance: this, handler: this.sortColumn,
                arg1: columnName, arg2: direction, arg3: isMultiSort
            });
            return;
        }
        this.backupSettings();
        this.columnName = columnName;
        this.direction = direction;
        this.isMultiSort = isMultiSort;
        this.removeSortIcons();
        this.updateSortedCols(columnName, isMultiSort);
        this.updateModel();
    }
    setFullScreenDialog() {
        if (this.serviceLocator) {
            this.serviceLocator.registerAdaptiveService(this, this.parent.enableAdaptiveUI, ResponsiveDialogAction.isSort);
        }
    }
    backupSettings() {
        this.lastSortedCols = iterateExtend(this.sortSettings.columns);
        this.lastCols = this.sortedColumns;
    }
    restoreSettings() {
        this.isModelChanged = false;
        this.isMultiSort = true;
        this.parent.setProperties({ sortSettings: { columns: this.lastSortedCols } }, true);
        //this.parent.sortSettings.columns =  this.lastSortedCols;
        this.sortedColumns = this.lastCols;
        this.isModelChanged = true;
    }
    updateSortedCols(columnName, isMultiSort) {
        if (!isMultiSort) {
            if (this.parent.allowGrouping) {
                for (let i = 0, len = this.sortedColumns.length; i < len; i++) {
                    if (this.parent.groupSettings.columns.indexOf(this.sortedColumns[i]) < 0) {
                        this.sortedColumns.splice(i, 1);
                        len--;
                        i--;
                    }
                }
            }
            else {
                this.sortedColumns.splice(0, this.sortedColumns.length);
            }
        }
        if (this.sortedColumns.indexOf(columnName) < 0) {
            this.sortedColumns.push(columnName);
        }
    }
    /**
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName()) {
            return;
        }
        if (this.contentRefresh) {
            const args = this.sortSettings.columns.length ? {
                columnName: this.columnName, direction: this.direction, requestType: 'sorting',
                type: actionBegin, target: this.currentTarget, cancel: false
            } : {
                requestType: 'sorting', type: actionBegin, cancel: false,
                target: this.currentTarget
            };
            this.parent.notify(modelChanged, args);
        }
        this.refreshSortSettings();
        this.removeSortIcons();
        this.addSortIcons();
    }
    refreshSortSettings() {
        this.sortedColumns.length = 0;
        const sortColumns = this.sortSettings.columns;
        for (let i = 0; i < sortColumns.length; i++) {
            if (!sortColumns[i].isFromGroup) {
                this.sortedColumns.push(sortColumns[i].field);
            }
        }
    }
    /**
     * Clears all the sorted columns of the Grid.
     *
     * @returns {void}
     */
    clearSorting() {
        const cols = getActualPropFromColl(this.sortSettings.columns);
        if (this.isActionPrevent()) {
            this.parent.notify(preventBatch, { instance: this, handler: this.clearSorting });
            return;
        }
        for (let i = 0, len = cols.length; i < len; i++) {
            this.removeSortColumn(cols[i].field);
        }
    }
    isActionPrevent() {
        return isActionPrevent(this.parent);
    }
    /**
     * Remove sorted column by field name.
     *
     * @param {string} field - Defines the column field name to remove sort.
     * @returns {void}
     * @hidden
     */
    removeSortColumn(field) {
        const gObj = this.parent;
        const cols = this.sortSettings.columns;
        if (cols.length === 0 && this.sortedColumns.indexOf(field) < 0) {
            return;
        }
        if (this.isActionPrevent()) {
            this.parent.notify(preventBatch, { instance: this, handler: this.removeSortColumn, arg1: field });
            return;
        }
        this.backupSettings();
        this.removeSortIcons();
        const args = { requestType: 'sorting', type: actionBegin, target: this.currentTarget };
        for (let i = 0, len = cols.length; i < len; i++) {
            if (cols[i].field === field) {
                if (gObj.allowGrouping && gObj.groupSettings.columns.indexOf(cols[i].field) > -1) {
                    continue;
                }
                this.sortedColumns.splice(this.sortedColumns.indexOf(cols[i].field), 1);
                cols.splice(i, 1);
                this.isRemove = true;
                if (this.isModelChanged) {
                    this.parent.notify(modelChanged, args);
                }
                break;
            }
        }
        if (!args.cancel) {
            this.addSortIcons();
        }
    }
    getSortedColsIndexByField(field, sortedColumns) {
        const cols = sortedColumns ? sortedColumns : this.sortSettings.columns;
        for (let i = 0, len = cols.length; i < len; i++) {
            if (cols[i].field === field) {
                return i;
            }
        }
        return -1;
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'sort';
    }
    initialEnd() {
        this.parent.off(contentReady, this.initialEnd);
        if (this.parent.getColumns().length && this.sortSettings.columns.length) {
            const gObj = this.parent;
            this.contentRefresh = false;
            this.isMultiSort = this.sortSettings.columns.length > 1;
            for (const col of gObj.sortSettings.columns.slice()) {
                if (this.sortedColumns.indexOf(col.field) > -1) {
                    this.sortColumn(col.field, col.direction, true);
                }
            }
            this.isMultiSort = false;
            this.contentRefresh = true;
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.evtHandlers = [{ event: setFullScreenDialog, handler: this.setFullScreenDialog },
            { event: contentReady, handler: this.initialEnd },
            { event: sortComplete, handler: this.onActionComplete },
            { event: inBoundModelChanged, handler: this.onPropertyChanged },
            { event: click, handler: this.clickHandler },
            { event: headerRefreshed, handler: this.refreshSortIcons },
            { event: keyPressed, handler: this.keyPressed },
            { event: cancelBegin, handler: this.cancelBeginEvent },
            { event: destroy, handler: this.destroy }];
        addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        addRemoveEventListener(this.parent, this.evtHandlers, false);
    }
    /**
     * To destroy the sorting
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        this.isModelChanged = false;
        const gridElement = this.parent.element;
        if (!gridElement || (!gridElement.querySelector('.' + gridHeader) && !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        if (this.parent.element.querySelector('.e-gridpopup').getElementsByClassName('e-sortdirect').length) {
            this.parent.element.querySelector('.e-gridpopup').style.display = 'none';
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (!this.parent.refreshing && (this.parent.isDestroyed || !this.parent.allowSorting)) {
            this.clearSorting();
        }
        this.isModelChanged = true;
        this.removeEventListener();
    }
    cancelBeginEvent(e) {
        if (e.requestType === 'sorting') {
            this.restoreSettings();
            this.refreshSortIcons();
            this.isMultiSort = true;
        }
    }
    clickHandler(e) {
        const gObj = this.parent;
        this.currentTarget = null;
        this.popUpClickHandler(e);
        const target = closest(e.target, '.e-headercell');
        if (target && !e.target.classList.contains('e-grptogglebtn') &&
            !(target.classList.contains('e-resized')) &&
            !e.target.classList.contains('e-rhandler') &&
            !e.target.classList.contains('e-columnmenu') &&
            !e.target.classList.contains('e-filtermenudiv') &&
            !parentsUntil(e.target, 'e-stackedheadercell') &&
            !(gObj.allowSelection && gObj.selectionSettings.allowColumnSelection &&
                e.target.classList.contains('e-headercell'))) {
            const gObj = this.parent;
            const colObj = gObj.getColumnByUid(target.querySelector('.e-headercelldiv').getAttribute('e-mappinguid'));
            if (colObj.type !== 'checkbox') {
                this.initiateSort(target, e, colObj);
                if (Browser.isDevice) {
                    this.showPopUp(e);
                }
            }
        }
        if (target) {
            target.classList.remove('e-resized');
        }
        if (parentsUntil(e.target, 'e-excel-ascending') ||
            parentsUntil(e.target, 'e-excel-descending')) {
            const colUid = closest(e.target, '.e-filter-popup').getAttribute('uid');
            const direction = isNullOrUndefined(parentsUntil(e.target, 'e-excel-descending')) ?
                'Ascending' : 'Descending';
            this.sortColumn(gObj.getColumnByUid(colUid).field, direction, false);
        }
    }
    keyPressed(e) {
        const ele = e.target;
        if (!this.parent.isEdit && (e.action === 'enter' || e.action === 'ctrlEnter' || e.action === 'shiftEnter')
            && closest(ele, '.e-headercell')) {
            const target = this.focus.getFocusedElement();
            if (isNullOrUndefined(target) || !target.classList.contains('e-headercell')
                || !target.querySelector('.e-headercelldiv')) {
                return;
            }
            const col = this.parent.getColumnByUid(target.querySelector('.e-headercelldiv').getAttribute('e-mappinguid'));
            this.initiateSort(target, e, col);
        }
    }
    initiateSort(target, e, column) {
        const gObj = this.parent;
        const field = column.field;
        this.currentTarget = e.target;
        const direction = !target.getElementsByClassName('e-ascending').length ? 'Ascending' :
            'Descending';
        this.isMultiSort = e.ctrlKey || this.enableSortMultiTouch ||
            (navigator.userAgent.indexOf('Mac OS') !== -1 && e.metaKey);
        if (e.shiftKey || (this.sortSettings.allowUnsort && target.getElementsByClassName('e-descending').length)
            && !(gObj.groupSettings.columns.indexOf(field) > -1)) {
            this.removeSortColumn(field);
        }
        else {
            this.sortColumn(field, direction, this.isMultiSort);
        }
    }
    showPopUp(e) {
        const target = closest(e.target, '.e-headercell');
        if (this.parent.allowMultiSorting && (!isNullOrUndefined(target) || this.parent.isContextMenuOpen())) {
            setCssInGridPopUp(this.parent.element.querySelector('.e-gridpopup'), e, 'e-sortdirect e-icons e-icon-sortdirect' + (this.sortedColumns.length > 1 ? ' e-spanclicked' : ''));
        }
    }
    popUpClickHandler(e) {
        const target = e.target;
        if (closest(target, '.e-headercell') || e.target.classList.contains(rowCell) ||
            closest(target, '.e-gridpopup')) {
            if (target.classList.contains('e-sortdirect')) {
                if (!target.classList.contains('e-spanclicked')) {
                    target.classList.add('e-spanclicked');
                    this.enableSortMultiTouch = true;
                }
                else {
                    target.classList.remove('e-spanclicked');
                    this.enableSortMultiTouch = false;
                    this.parent.element.querySelector('.e-gridpopup').style.display = 'none';
                }
            }
        }
        else {
            this.parent.element.querySelector('.e-gridpopup').style.display = 'none';
        }
    }
    addSortIcons() {
        const gObj = this.parent;
        let header;
        let filterElement;
        const cols = this.sortSettings.columns;
        const fieldNames = this.parent.getColumns().map((c) => c.field);
        for (let i = 0, len = cols.length; i < len; i++) {
            header = gObj.getColumnHeaderByField(cols[i].field);
            if (fieldNames.indexOf(cols[i].field) === -1 || isNullOrUndefined(header)) {
                continue;
            }
            this.aria.setSort(header, (cols[i].direction).toLowerCase());
            if (cols.length > 1) {
                header.querySelector('.e-headercelldiv').insertBefore(this.parent.createElement('span', { className: 'e-sortnumber', innerHTML: (i + 1).toString() }), header.querySelector('.e-headertext'));
            }
            filterElement = header.querySelector('.e-sortfilterdiv');
            if (cols[i].direction === 'Ascending') {
                classList(filterElement, ['e-ascending', 'e-icon-ascending'], []);
            }
            else {
                classList(filterElement, ['e-descending', 'e-icon-descending'], []);
            }
        }
    }
    removeSortIcons(position) {
        const gObj = this.parent;
        let header;
        const cols = this.sortSettings.columns;
        const fieldNames = this.parent.getColumns().map((c) => c.field);
        for (let i = position ? position : 0, len = !isNullOrUndefined(position) ? position + 1 : cols.length; i < len; i++) {
            header = gObj.getColumnHeaderByField(cols[i].field);
            if (isNullOrUndefined(header) || (gObj.allowGrouping && gObj.groupSettings.columns.indexOf(cols[i].field) > -1 &&
                !header.querySelector('.e-sortfilterdiv'))) {
                continue;
            }
            if (fieldNames.indexOf(cols[i].field) === -1) {
                continue;
            }
            this.aria.setSort(header, 'none');
            classList(header.querySelector('.e-sortfilterdiv'), [], ['e-descending', 'e-icon-descending', 'e-ascending', 'e-icon-ascending']);
            if (header.querySelector('.e-sortnumber')) {
                header.querySelector('.e-headercelldiv').removeChild(header.querySelector('.e-sortnumber'));
            }
        }
    }
    getSortColumnFromField(field) {
        for (let i = 0, len = this.sortSettings.columns.length; i < len; i++) {
            if (this.sortSettings.columns[i].field === field) {
                return this.sortSettings.columns[i];
            }
        }
        return false;
    }
    updateAriaAttr() {
        const fieldNames = this.parent.getColumns().map((c) => c.field);
        for (const col of this.sortedColumns) {
            if (fieldNames.indexOf(col) === -1) {
                continue;
            }
            const header = this.parent.getColumnHeaderByField(col);
            this.aria.setSort(header, this.getSortColumnFromField(col).direction);
        }
    }
    refreshSortIcons(params = { args: { isFrozen: false } }) {
        if (!params.args.isFrozen) {
            this.removeSortIcons();
            this.isMultiSort = true;
            this.removeSortIcons();
            this.addSortIcons();
            this.isMultiSort = false;
            this.updateAriaAttr();
        }
    }
    /**
     * To show the responsive custom sort dialog
     *
     * @param {boolean} enable - specifes dialog open
     * @returns {void}
     * @hidden
     */
    showCustomSort(enable) {
        this.responsiveDialogRenderer.isCustomDialog = enable;
        this.responsiveDialogRenderer.showResponsiveDialog();
    }
}

/**
 * `NumericContainer` module handles rendering and refreshing numeric container.
 */
class NumericContainer {
    /**
     * Constructor for numericContainer module
     *
     * @param {Pager} pagerModule - specifies the pagerModule
     * @hidden
     */
    constructor(pagerModule) {
        this.pagerModule = pagerModule;
    }
    /**
     * The function is used to render numericContainer
     *
     * @returns {void}
     * @hidden
     */
    render() {
        this.pagerElement = this.pagerModule.element;
        this.renderNumericContainer();
        this.refreshNumericLinks();
        this.wireEvents();
    }
    /**
     * Refreshes the numeric container of Pager.
     *
     * @returns {void}
     */
    refresh() {
        this.pagerModule.updateTotalPages();
        if (this.links.length) {
            this.updateLinksHtml();
        }
        this.refreshAriaAttrLabel();
        this.updateStyles();
    }
    /**
     * The function is used to refresh refreshNumericLinks
     *
     * @returns {void}
     * @hidden
     */
    refreshNumericLinks() {
        let link;
        const pagerObj = this.pagerModule;
        const div = pagerObj.element.querySelector('.e-numericcontainer');
        const frag = document.createDocumentFragment();
        div.innerHTML = '';
        for (let i = 1; i <= pagerObj.pageCount; i++) {
            link = createElement('a', {
                className: 'e-link e-numericitem e-spacing e-pager-default',
                attrs: { role: 'link', tabindex: '-1', 'aria-label': 'Page ' + i + ' of ' + pagerObj.totalPages + ' Pages',
                    href: 'javascript:void(0);', name: 'Goto page' + i }
            });
            if (pagerObj.currentPage === i) {
                classList(link, ['e-currentitem', 'e-active'], ['e-pager-default']);
                link.setAttribute('aria-selected', 'true');
            }
            frag.appendChild(link);
        }
        div.appendChild(frag);
        this.links = [].slice.call(div.childNodes);
    }
    /**
     * Binding events to the element while component creation
     *
     * @returns {void}
     * @hidden
     */
    wireEvents() {
        EventHandler.add(this.pagerElement, 'click', this.clickHandler, this);
    }
    /**
     * Unbinding events from the element while component destroy
     *
     * @returns {void}
     * @hidden
     */
    unwireEvents() {
        EventHandler.remove(this.pagerModule.element, 'click', this.clickHandler);
    }
    /**
     * To destroy the PagerMessage
     *
     * @function destroy
     * @returns {void}
     * @hidden
     */
    destroy() {
        this.unwireEvents();
    }
    refreshAriaAttrLabel() {
        const pagerObj = this.pagerModule;
        const numericContainer = pagerObj.element.querySelector('.e-numericcontainer');
        const links = numericContainer.querySelectorAll('a');
        for (let i = 0; i < links.length; i++) {
            if (links[i].hasAttribute('aria-label') && links[i].hasAttribute('index')) {
                links[i].setAttribute('aria-label', 'Page ' + links[i].getAttribute('index') + ' of ' + pagerObj.totalPages + ' Pages');
            }
        }
    }
    renderNumericContainer() {
        this.element = createElement('div', {
            className: 'e-pagercontainer', attrs: { 'role': 'navigation' }
        });
        this.renderFirstNPrev(this.element);
        this.renderPrevPagerSet(this.element);
        this.element.appendChild(createElement('div', { className: 'e-numericcontainer' }));
        this.renderNextPagerSet(this.element);
        this.renderNextNLast(this.element);
        this.pagerModule.element.appendChild(this.element);
    }
    renderFirstNPrev(pagerContainer) {
        this.first = createElement('div', {
            className: 'e-first e-icons e-icon-first',
            attrs: {
                title: this.pagerModule.getLocalizedLabel('firstPageTooltip'),
                'aria-label': this.pagerModule.getLocalizedLabel('firstPageTooltip'),
                tabindex: '-1'
            }
        });
        this.prev = createElement('div', {
            className: 'e-prev e-icons e-icon-prev',
            attrs: {
                title: this.pagerModule.getLocalizedLabel('previousPageTooltip'),
                'aria-label': this.pagerModule.getLocalizedLabel('previousPageTooltip'),
                tabindex: '-1'
            }
        });
        append([this.first, this.prev], pagerContainer);
    }
    renderPrevPagerSet(pagerContainer) {
        const prevPager = createElement('div');
        this.PP = createElement('a', {
            className: 'e-link e-pp e-spacing', innerHTML: '...',
            attrs: {
                title: this.pagerModule.getLocalizedLabel('previousPagerTooltip'), role: 'link',
                'aria-label': this.pagerModule.getLocalizedLabel('previousPagerTooltip'),
                tabindex: '-1',
                name: this.pagerModule.getLocalizedLabel('previousPagerTooltip'),
                href: 'javascript:void(0);'
            }
        });
        prevPager.appendChild(this.PP);
        pagerContainer.appendChild(prevPager);
    }
    renderNextPagerSet(pagerContainer) {
        const nextPager = createElement('div');
        this.NP = createElement('a', {
            className: 'e-link e-np e-spacing',
            innerHTML: '...', attrs: {
                title: this.pagerModule.getLocalizedLabel('nextPagerTooltip'), role: 'link',
                'aria-label': this.pagerModule.getLocalizedLabel('nextPagerTooltip'),
                tabindex: '-1',
                name: this.pagerModule.getLocalizedLabel('nextPagerTooltip'),
                href: 'javascript:void(0);'
            }
        });
        nextPager.appendChild(this.NP);
        pagerContainer.appendChild(nextPager);
    }
    renderNextNLast(pagerContainer) {
        this.next = createElement('div', {
            className: 'e-next e-icons e-icon-next',
            attrs: {
                title: this.pagerModule.getLocalizedLabel('nextPageTooltip'),
                'aria-label': this.pagerModule.getLocalizedLabel('nextPageTooltip'),
                tabindex: '-1'
            }
        });
        this.last = createElement('div', {
            className: 'e-last e-icons e-icon-last',
            attrs: {
                title: this.pagerModule.getLocalizedLabel('lastPageTooltip'),
                'aria-label': this.pagerModule.getLocalizedLabel('lastPageTooltip'),
                tabindex: '-1'
            }
        });
        append([this.next, this.last], pagerContainer);
    }
    clickHandler(e) {
        const pagerObj = this.pagerModule;
        const target = e.target;
        pagerObj.previousPageNo = pagerObj.currentPage;
        if (!target.classList.contains('e-disable') && !isNullOrUndefined(target.getAttribute('index'))) {
            pagerObj.currentPage = parseInt(target.getAttribute('index'), 10);
            pagerObj.dataBind();
        }
        return false;
    }
    updateLinksHtml() {
        const pagerObj = this.pagerModule;
        let currentPageSet;
        let pageNo;
        pagerObj.currentPage = pagerObj.totalPages === 1 ? 1 : pagerObj.currentPage;
        if (pagerObj.currentPage > pagerObj.totalPages && pagerObj.totalPages) {
            pagerObj.currentPage = pagerObj.totalPages;
        }
        currentPageSet = parseInt((pagerObj.currentPage / pagerObj.pageCount).toString(), 10);
        if (pagerObj.currentPage % pagerObj.pageCount === 0 && currentPageSet > 0) {
            currentPageSet = currentPageSet - 1;
        }
        for (let i = 0; i < pagerObj.pageCount; i++) {
            pageNo = (currentPageSet * pagerObj.pageCount) + 1 + i;
            if (pageNo <= pagerObj.totalPages) {
                this.links[i].style.display = '';
                this.links[i].setAttribute('index', pageNo.toString());
                this.links[i].innerHTML = !pagerObj.customText ? pageNo.toString() : pagerObj.customText + pageNo;
                if (pagerObj.currentPage !== pageNo) {
                    this.links[i].classList.add('e-pager-default');
                }
                else {
                    this.links[i].classList.remove('e-pager-default');
                }
            }
            else {
                this.links[i].innerHTML = !pagerObj.customText ? pageNo.toString() : pagerObj.customText + pageNo;
                this.links[i].style.display = 'none';
            }
            classList(this.links[i], [], ['e-currentitem', 'e-active']);
            this.links[i].removeAttribute('aria-selected');
        }
        this.first.setAttribute('index', '1');
        this.last.setAttribute('index', pagerObj.totalPages.toString());
        this.prev.setAttribute('index', (pagerObj.currentPage - 1).toString());
        this.next.setAttribute('index', (pagerObj.currentPage + 1).toString());
        this.pagerElement.querySelector('.e-mfirst').setAttribute('index', '1');
        this.pagerElement.querySelector('.e-mlast').setAttribute('index', pagerObj.totalPages.toString());
        this.pagerElement.querySelector('.e-mprev').setAttribute('index', (pagerObj.currentPage - 1).toString());
        this.pagerElement.querySelector('.e-mnext').setAttribute('index', (pagerObj.currentPage + 1).toString());
        this.PP.setAttribute('index', (parseInt(this.links[0].getAttribute('index'), 10) - pagerObj.pageCount).toString());
        this.NP.setAttribute('index', (parseInt(this.links[this.links.length - 1].getAttribute('index'), 10) + 1).toString());
    }
    updateStyles() {
        this.updateFirstNPrevStyles();
        this.updatePrevPagerSetStyles();
        this.updateNextPagerSetStyles();
        this.updateNextNLastStyles();
        if (this.links.length) {
            classList(this.links[(this.pagerModule.currentPage - 1) % this.pagerModule.pageCount], ['e-currentitem', 'e-active'], []);
            this.links[(this.pagerModule.currentPage - 1) % this.pagerModule.pageCount].setAttribute('aria-selected', 'true');
        }
    }
    updateFirstNPrevStyles() {
        const firstPage = ['e-firstpage', 'e-pager-default'];
        const firstPageDisabled = ['e-firstpagedisabled', 'e-disable'];
        const prevPage = ['e-prevpage', 'e-pager-default'];
        const prevPageDisabled = ['e-prevpagedisabled', 'e-disable'];
        if (this.pagerModule.totalPages > 0 && this.pagerModule.currentPage > 1) {
            classList(this.prev, prevPage, prevPageDisabled);
            classList(this.first, firstPage, firstPageDisabled);
            classList(this.pagerElement.querySelector('.e-mfirst'), firstPage, firstPageDisabled);
            classList(this.pagerElement.querySelector('.e-mprev'), prevPage, prevPageDisabled);
        }
        else {
            classList(this.prev, prevPageDisabled, prevPage);
            classList(this.first, firstPageDisabled, firstPage);
            classList(this.pagerElement.querySelector('.e-mprev'), prevPageDisabled, prevPage);
            classList(this.pagerElement.querySelector('.e-mfirst'), firstPageDisabled, firstPage);
        }
    }
    updatePrevPagerSetStyles() {
        if (this.pagerModule.currentPage > this.pagerModule.pageCount) {
            classList(this.PP, ['e-numericitem', 'e-pager-default'], ['e-nextprevitemdisabled', 'e-disable']);
        }
        else {
            classList(this.PP, ['e-nextprevitemdisabled', 'e-disable'], ['e-numericitem', 'e-pager-default']);
        }
    }
    updateNextPagerSetStyles() {
        const pagerObj = this.pagerModule;
        const firstPage = this.links[0].innerHTML.replace(pagerObj.customText, '');
        if (!firstPage.length || !this.links.length || (parseInt(firstPage, 10) + pagerObj.pageCount > pagerObj.totalPages)) {
            classList(this.NP, ['e-nextprevitemdisabled', 'e-disable'], ['e-numericitem', 'e-pager-default']);
        }
        else {
            classList(this.NP, ['e-numericitem', 'e-pager-default'], ['e-nextprevitemdisabled', 'e-disable']);
        }
    }
    updateNextNLastStyles() {
        const lastPage = ['e-lastpage', 'e-pager-default'];
        const lastPageDisabled = ['e-lastpagedisabled', 'e-disable'];
        const nextPage = ['e-nextpage', 'e-pager-default'];
        const nextPageDisabled = ['e-nextpagedisabled', 'e-disable'];
        const pagerObj = this.pagerModule;
        if (pagerObj.currentPage === pagerObj.totalPages || pagerObj.totalRecordsCount === 0) {
            classList(this.last, lastPageDisabled, lastPage);
            classList(this.next, nextPageDisabled, nextPage);
            classList(this.pagerElement.querySelector('.e-mlast'), lastPageDisabled, lastPage);
            classList(this.pagerElement.querySelector('.e-mnext'), nextPageDisabled, nextPage);
        }
        else {
            classList(this.last, lastPage, lastPageDisabled);
            classList(this.next, nextPage, nextPageDisabled);
            classList(this.pagerElement.querySelector('.e-mlast'), lastPage, lastPageDisabled);
            classList(this.pagerElement.querySelector('.e-mnext'), nextPage, nextPageDisabled);
        }
    }
}

/**
 * `PagerMessage` module is used to display pager information.
 */
class PagerMessage {
    /**
     * Constructor for externalMessage module
     *
     * @param {Pager} pagerModule - specifies the pager Module
     * @hidden
     */
    constructor(pagerModule) {
        this.pagerModule = pagerModule;
    }
    /**
     * The function is used to render pager message
     *
     * @returns {void}
     * @hidden
     */
    render() {
        const div = createElement('div', { className: 'e-parentmsgbar', attrs: { 'aria-label': 'Pager Information' } });
        this.pageNoMsgElem = createElement('span', { className: 'e-pagenomsg', styles: 'textalign:right' });
        this.pageCountMsgElem = createElement('span', { className: 'e-pagecountmsg', styles: 'textalign:right' });
        append([this.pageNoMsgElem, this.pageCountMsgElem], div);
        this.pagerModule.element.appendChild(div);
        this.refresh();
    }
    /**
     * Refreshes the pager information.
     *
     * @returns {void}
     */
    refresh() {
        const pagerObj = this.pagerModule;
        this.pageNoMsgElem.textContent = this.format(pagerObj.getLocalizedLabel('currentPageInfo'), [pagerObj.totalRecordsCount === 0 ? 0 :
                pagerObj.currentPage, pagerObj.totalPages || 0, pagerObj.totalRecordsCount || 0]) + ' ';
        this.pageCountMsgElem.textContent = this.format(pagerObj.getLocalizedLabel(pagerObj.totalRecordsCount <= 1 ? 'totalItemInfo' : 'totalItemsInfo'), [pagerObj.totalRecordsCount || 0, pagerObj.totalRecordsCount ? (pagerObj.pageSize * (pagerObj.currentPage - 1)) + 1 : 0,
            pagerObj.pageSize * pagerObj.currentPage > pagerObj.totalRecordsCount ? pagerObj.totalRecordsCount :
                pagerObj.pageSize * pagerObj.currentPage]);
        this.pageNoMsgElem.parentElement.setAttribute('aria-label', this.pageNoMsgElem.textContent + this.pageCountMsgElem.textContent);
    }
    /**
     * Hides the Pager information.
     *
     * @returns {void}
     */
    hideMessage() {
        if (this.pageNoMsgElem) {
            this.pageNoMsgElem.style.display = 'none';
        }
        if (this.pageCountMsgElem) {
            this.pageCountMsgElem.style.display = 'none';
        }
    }
    /**
     * Shows the Pager information.
     *
     * @returns {void}
     */
    showMessage() {
        if (!this.pageNoMsgElem) {
            this.render();
        }
        this.pageNoMsgElem.style.display = '';
        this.pageCountMsgElem.style.display = '';
    }
    /**
     * To destroy the PagerMessage
     *
     * @function destroy
     * @returns {void}
     * @hidden
     */
    destroy() {
        //destroy
    }
    format(str, args) {
        let regx;
        for (let i = 0; i < args.length; i++) {
            regx = new RegExp('\\{' + (i) + '\\}', 'gm');
            str = str.replace(regx, args[i].toString());
        }
        return str;
    }
}

var __decorate$5 = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * Represents the `Pager` component.
 * ```html
 * <div id="pager"/>
 * ```
 * ```typescript
 * <script>
 *   var pagerObj = new Pager({ totalRecordsCount: 50, pageSize:10 });
 *   pagerObj.appendTo("#pager");
 * </script>
 * ```
 */
let Pager = class Pager extends Component {
    /**
     * Constructor for creating the component.
     *
     * @param {PagerModel} options - specifies the options
     * @param {string} element - specifies the element
     * @param {string} parent - specifies the pager parent
     * @hidden
     */
    constructor(options, element, parent) {
        super(options, element);
        /** @hidden */
        this.hasParent = false;
        this.pageRefresh = 'pager-refresh';
        this.firstPagerFocus = false;
        this.parent = parent;
    }
    /**
     * To provide the array of modules needed for component rendering
     *
     * @returns {ModuleDeclaration[]} returns the modules declaration
     * @hidden
     */
    requiredModules() {
        const modules = [];
        if (this.enableExternalMessage) {
            modules.push({
                member: 'externalMessage',
                args: [this]
            });
        }
        if (this.checkpagesizes()) {
            modules.push({
                member: 'pagerdropdown',
                args: [this]
            });
        }
        return modules;
    }
    /**
     * Initialize the event handler
     *
     * @returns {void}
     * @hidden
     */
    preRender() {
        //preRender
        this.defaultConstants = {
            currentPageInfo: '{0} of {1} pages',
            totalItemsInfo: '({0} items)',
            totalItemInfo: '({0} item)',
            firstPageTooltip: 'Go to first page',
            lastPageTooltip: 'Go to last page',
            nextPageTooltip: 'Go to next page',
            previousPageTooltip: 'Go to previous page',
            nextPagerTooltip: 'Go to next pager items',
            previousPagerTooltip: 'Go to previous pager items',
            pagerDropDown: 'Items per page',
            pagerAllDropDown: 'Items',
            CurrentPageInfo: '{0} of {1} pages',
            TotalItemsInfo: '({0} items)',
            FirstPageTooltip: 'Go to first page',
            LastPageTooltip: 'Go to last page',
            NextPageTooltip: 'Go to next page',
            PreviousPageTooltip: 'Go to previous page',
            NextPagerTooltip: 'Go to next pager items',
            PreviousPagerTooltip: 'Go to previous pager items',
            PagerDropDown: 'Items per page',
            PagerAllDropDown: 'Items',
            All: 'All'
        };
        this.containerModule = new NumericContainer(this);
        this.pagerMessageModule = new PagerMessage(this);
    }
    /**
     * To Initialize the component rendering
     *
     * @returns {void}
     */
    render() {
        this.element.setAttribute('data-role', 'pager');
        this.element.setAttribute('aria-label', 'Pager Container');
        this.element.setAttribute('tabindex', '-1');
        if (!this.hasParent) {
            this.element.setAttribute('tabindex', '0');
        }
        if (this.template) {
            if (this.isReactTemplate()) {
                this.on(this.pageRefresh, this.pagerTemplate, this);
                this.notify(this.pageRefresh, {});
            }
            else {
                this.pagerTemplate();
            }
        }
        else {
            this.initLocalization();
            this.updateRTL();
            this.totalRecordsCount = this.totalRecordsCount || 0;
            this.renderFirstPrevDivForDevice();
            this.containerModule.render();
            if (this.enablePagerMessage) {
                this.pagerMessageModule.render();
            }
            this.renderNextLastDivForDevice();
            if (this.checkpagesizes() && this.pagerdropdownModule) {
                this.pagerdropdownModule.render();
            }
            this.addAriaLabel();
            if (this.enableExternalMessage && this.externalMessageModule) {
                this.externalMessageModule.render();
            }
            this.refresh();
            this.trigger('created', { 'currentPage': this.currentPage, 'totalRecordsCount': this.totalRecordsCount });
        }
        this.wireEvents();
        this.addListener();
    }
    /**
     * Get the properties to be maintained in the persisted state.
     *
     * @returns {string} returns the persist data
     * @hidden
     */
    getPersistData() {
        const keyEntity = ['currentPage', 'pageSize'];
        return this.addOnPersist(keyEntity);
    }
    /**
     * To destroy the Pager component.
     *
     * @method destroy
     * @returns {void}
     */
    destroy() {
        if (this.isDestroyed) {
            return;
        }
        if (this.isReactTemplate()) {
            this.off(this.pageRefresh, this.pagerTemplate);
            if (!this.hasParent) {
                this.destroyTemplate(['template']);
            }
        }
        this.removeListener();
        this.unwireEvents();
        super.destroy();
        this.containerModule.destroy();
        this.pagerMessageModule.destroy();
        if (!this.isReactTemplate()) {
            this.element.innerHTML = '';
        }
    }
    /**
     * Destroys the given template reference.
     *
     * @param {string[]} propertyNames - Defines the collection of template name.
     * @param {any} index - Defines the index
     */
    // eslint-disable-next-line
    destroyTemplate(propertyNames, index) {
        this.clearTemplate(propertyNames, index);
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'pager';
    }
    /**
     * Called internally if any of the property value changed.
     *
     * @param {PagerModel} newProp - specifies the new property
     * @param {PagerModel} oldProp - specifies the old propety
     * @returns {void}
     * @hidden
     */
    onPropertyChanged(newProp, oldProp) {
        if (this.isDestroyed) {
            return;
        }
        if (newProp.pageCount !== oldProp.pageCount) {
            this.containerModule.refreshNumericLinks();
            this.containerModule.refresh();
        }
        for (const prop of Object.keys(newProp)) {
            switch (prop) {
                case 'currentPage':
                    if (this.checkGoToPage(newProp.currentPage, oldProp.currentPage)) {
                        this.currentPageChanged(newProp, oldProp);
                    }
                    break;
                case 'pageSize':
                case 'totalRecordsCount':
                case 'customText':
                    if (this.checkpagesizes() && this.pagerdropdownModule) {
                        if (oldProp.pageSize !== newProp.pageSize) {
                            this.currentPage = 1;
                        }
                        this.pagerdropdownModule.setDropDownValue('value', this.pageSize);
                    }
                    if (newProp.pageSize !== oldProp.pageSize) {
                        this.pageSize = newProp.pageSize;
                        this.currentPageChanged(newProp, oldProp);
                    }
                    else {
                        this.refresh();
                    }
                    break;
                case 'pageSizes':
                    if (this.checkpagesizes() && this.pagerdropdownModule) {
                        this.pagerdropdownModule.destroy();
                        this.pagerdropdownModule.render();
                    }
                    this.refresh();
                    break;
                case 'template':
                    this.templateFn = this.compile(this.template);
                    this.refresh();
                    break;
                case 'locale':
                    this.initLocalization();
                    this.refresh();
                    break;
                case 'enableExternalMessage':
                    if (this.enableExternalMessage && this.externalMessageModule) {
                        this.externalMessageModule.render();
                    }
                    break;
                case 'externalMessage':
                    if (this.externalMessageModule) {
                        this.externalMessageModule.refresh();
                    }
                    break;
                case 'enableRtl':
                    this.updateRTL();
                    break;
                case 'enablePagerMessage':
                    if (this.enablePagerMessage) {
                        this.pagerMessageModule.showMessage();
                    }
                    else {
                        this.pagerMessageModule.hideMessage();
                    }
                    break;
            }
        }
    }
    wireEvents() {
        if (!this.hasParent) {
            EventHandler.add(this.element, 'keydown', this.keyPressHandler, this);
            EventHandler.add(document.body, 'keydown', this.keyDownHandler, this);
        }
        EventHandler.add(this.element, 'focusin', this.onFocusIn, this);
        EventHandler.add(this.element, 'focusout', this.onFocusOut, this);
    }
    unwireEvents() {
        if (!this.hasParent) {
            EventHandler.remove(this.element, 'keydown', this.keyPressHandler);
            EventHandler.remove(document.body, 'keydown', this.keyDownHandler);
        }
        EventHandler.remove(this.element, 'focusin', this.onFocusIn);
        EventHandler.remove(this.element, 'focusout', this.onFocusOut);
    }
    onFocusIn(e) {
        const focusedTabIndexElement = this.getFocusedTabindexElement();
        if (isNullOrUndefined(focusedTabIndexElement)) {
            const target = e.target;
            const dropDownPage = this.getDropDownPage();
            if (!this.hasParent) {
                this.element.tabIndex = -1;
            }
            if (target === this.element && !this.hasParent) {
                const focusablePagerElements = this.getFocusablePagerElements(this.element, []);
                this.addFocus(focusablePagerElements[0], true);
                return;
            }
            if (target === this.element) {
                this.element.tabIndex = 0;
                return;
            }
            if (target !== dropDownPage && !target.classList.contains('e-disable')) {
                this.addFocus(target, true);
            }
        }
    }
    onFocusOut(e) {
        const focusedElement = this.getFocusedElement();
        const dropDownPage = this.getDropDownPage();
        if (!isNullOrUndefined(focusedElement)) {
            this.removeFocus(focusedElement, true);
        }
        if (this.pageSizes && dropDownPage && dropDownPage.classList.contains('e-input-focus')) {
            this.removeFocus(dropDownPage, true);
        }
        this.setTabIndexForFocusLastElement();
        if (!this.hasParent) {
            this.element.tabIndex = 0;
        }
        if (this.hasParent) {
            this.element.tabIndex = -1;
        }
    }
    keyDownHandler(e) {
        if (e.altKey) {
            if (e.keyCode === 74) {
                const focusablePagerElements = this.getFocusablePagerElements(this.element, []);
                if (focusablePagerElements.length > 0) {
                    focusablePagerElements[0].focus();
                }
            }
        }
    }
    keyPressHandler(e) {
        const presskey = extend(e, { cancel: false });
        this.notify(keyPressed, presskey);
        if (presskey.cancel === true) {
            e.stopImmediatePropagation();
        }
    }
    addListener() {
        if (this.isDestroyed) {
            return;
        }
        if (!this.hasParent) {
            this.on(keyPressed, this.onKeyPress, this);
        }
    }
    removeListener() {
        if (this.isDestroyed) {
            return;
        }
        if (!this.hasParent) {
            this.off(keyPressed, this.onKeyPress);
        }
    }
    onKeyPress(e) {
        if (!this.hasParent) {
            if (this.checkPagerHasFocus()) {
                this.changePagerFocus(e);
            }
            else {
                e.preventDefault();
                this.setPagerFocus();
            }
        }
    }
    /**
     * @returns {boolean} - Return the true value if pager has focus
     * @hidden */
    checkPagerHasFocus() {
        return this.getFocusedTabindexElement() ? true : false;
    }
    /**
     * @returns {void}
     * @hidden */
    setPagerContainerFocus() {
        this.element.focus();
    }
    /**
     * @returns {void}
     * @hidden */
    setPagerFocus() {
        const focusablePagerElements = this.getFocusablePagerElements(this.element, []);
        if (focusablePagerElements.length > 0) {
            focusablePagerElements[0].focus();
        }
    }
    setPagerFocusForActiveElement() {
        const currentActivePage = this.getActiveElement();
        if (currentActivePage) {
            currentActivePage.focus();
        }
    }
    setTabIndexForFocusLastElement() {
        const focusablePagerElements = this.getFocusablePagerElements(this.element, []);
        const dropDownPage = this.getDropDownPage();
        if (this.pageSizes && dropDownPage && !isNullOrUndefined(dropDownPage.offsetParent)) {
            dropDownPage.tabIndex = 0;
        }
        else if (focusablePagerElements.length > 0) {
            focusablePagerElements[focusablePagerElements.length - 1].tabIndex = 0;
        }
    }
    /**
     * @param {KeyboardEventArgs} e - Keyboard Event Args
     * @returns {void}
     * @hidden */
    changePagerFocus(e) {
        if (e.shiftKey && e.keyCode === 9) {
            this.changeFocusByShiftTab(e);
        }
        else if (e.keyCode === 9) {
            this.changeFocusByTab(e);
        }
        else if (e.keyCode === 13 || e.keyCode === 32) {
            this.navigateToPageByEnterOrSpace(e);
        }
        else if (e.keyCode === 37 || e.keyCode === 39 || e.keyCode === 35 || e.keyCode === 36) {
            this.navigateToPageByKey(e);
        }
    }
    getFocusedTabindexElement() {
        let focusedTabIndexElement;
        const tabindexElements = this.element.querySelectorAll('[tabindex]:not([tabindex="-1"])');
        for (let i = 0; i < tabindexElements.length; i++) {
            const element = tabindexElements[i];
            if (element && (element.classList.contains('e-focused') || element.classList.contains('e-input-focus'))) {
                focusedTabIndexElement = element;
                break;
            }
        }
        return focusedTabIndexElement;
    }
    changeFocusByTab(e) {
        const currentItemPagerFocus = this.getFocusedTabindexElement();
        const focusablePagerElements = this.getFocusablePagerElements(this.element, []);
        const dropDownPage = this.getDropDownPage();
        if (focusablePagerElements.length > 0) {
            if (this.pageSizes && dropDownPage && currentItemPagerFocus === focusablePagerElements[focusablePagerElements.length - 1]) {
                dropDownPage.tabIndex = 0;
            }
            else {
                for (let i = 0; i < focusablePagerElements.length; i++) {
                    if (currentItemPagerFocus === focusablePagerElements[i]) {
                        const incrementNumber = i + 1;
                        if (incrementNumber < focusablePagerElements.length) {
                            e.preventDefault();
                            focusablePagerElements[incrementNumber].focus();
                        }
                        break;
                    }
                }
            }
        }
    }
    changeFocusByShiftTab(e) {
        const currentItemPagerFocus = this.getFocusedTabindexElement();
        const focusablePagerElements = this.getFocusablePagerElements(this.element, []);
        const dropDownPage = this.getDropDownPage();
        if (this.pageSizes && dropDownPage && dropDownPage.classList.contains('e-input-focus')) {
            dropDownPage.tabIndex = -1;
            this.addFocus(focusablePagerElements[focusablePagerElements.length - 1], true);
        }
        else if (focusablePagerElements.length > 0) {
            for (let i = 0; i < focusablePagerElements.length; i++) {
                if (currentItemPagerFocus === focusablePagerElements[i]) {
                    const decrementNumber = i - 1;
                    if (decrementNumber >= 0) {
                        e.preventDefault();
                        focusablePagerElements[decrementNumber].focus();
                    }
                    else if (this.hasParent) {
                        const rows = this.parent.getRows();
                        const lastRow = rows[rows.length - 1];
                        const lastCell = lastRow.lastChild;
                        e.preventDefault();
                        lastCell.focus();
                        this.firstPagerFocus = true;
                    }
                    break;
                }
            }
        }
    }
    /**
     * @returns {void}
     * @hidden */
    checkFirstPagerFocus() {
        if (this.firstPagerFocus) {
            this.firstPagerFocus = false;
            return true;
        }
        return false;
    }
    navigateToPageByEnterOrSpace(e) {
        const currentItemPagerFocus = this.getFocusedElement();
        if (currentItemPagerFocus) {
            this.goToPage(parseInt(currentItemPagerFocus.getAttribute('index'), 10));
            const currentActivePage = this.getActiveElement();
            const selectedClass = this.getClass(currentItemPagerFocus);
            const classElement = this.getElementByClass(selectedClass);
            if ((selectedClass === 'e-first' || selectedClass === 'e-prev' || selectedClass === 'e-next'
                || selectedClass === 'e-last' || selectedClass === 'e-pp' || selectedClass === 'e-np')
                && classElement && !classElement.classList.contains('e-disable')) {
                classElement.focus();
            }
            else if (this.checkFocusInAdaptiveMode(currentItemPagerFocus)) {
                this.changeFocusInAdaptiveMode(currentItemPagerFocus);
            }
            else {
                if (currentActivePage) {
                    currentActivePage.focus();
                }
            }
        }
    }
    navigateToPageByKey(e) {
        const actionClass = e.keyCode === 37 ? '.e-prev' : e.keyCode === 39 ? '.e-next'
            : e.keyCode === 35 ? '.e-last' : e.keyCode === 36 ? '.e-first' : '';
        const pagingItem = this.element.querySelector(actionClass);
        const currentItemPagerFocus = this.getFocusedElement();
        if (!isNullOrUndefined(pagingItem) && pagingItem.hasAttribute('index')
            && !isNaN(parseInt(pagingItem.getAttribute('index'), 10))) {
            this.goToPage(parseInt(pagingItem.getAttribute('index'), 10));
            const currentActivePage = this.getActiveElement();
            if (this.checkFocusInAdaptiveMode(currentItemPagerFocus)) {
                this.changeFocusInAdaptiveMode(currentItemPagerFocus);
            }
            else {
                if (currentActivePage) {
                    currentActivePage.focus();
                }
            }
        }
    }
    checkFocusInAdaptiveMode(element) {
        const selectedClass = this.getClass(element);
        return selectedClass === 'e-mfirst' || selectedClass === 'e-mprev' || selectedClass === 'e-mnext'
            || selectedClass === 'e-mlast' ? true : false;
    }
    changeFocusInAdaptiveMode(element) {
        const selectedClass = this.getClass(element);
        const classElement = this.getElementByClass(selectedClass);
        if (classElement && classElement.classList.contains('e-disable')) {
            if (selectedClass === 'e-mnext' || selectedClass === 'e-mlast') {
                const mPrev = this.element.querySelector('.e-mprev');
                mPrev.focus();
            }
            else {
                this.setPagerFocus();
            }
        }
    }
    removeTabindexLastElements() {
        const tabIndexElements = this.element.querySelectorAll('[tabindex]:not([tabindex="-1"])');
        if (tabIndexElements.length > 1) {
            for (let i = 1; i < tabIndexElements.length; i++) {
                const element = tabIndexElements[i];
                if (element) {
                    element.tabIndex = -1;
                }
            }
        }
    }
    getActiveElement() {
        return this.element.querySelector('.e-active');
    }
    getDropDownPage() {
        const dropDownPageHolder = this.element.querySelector('.e-pagerdropdown');
        let dropDownPage;
        if (dropDownPageHolder) {
            dropDownPage = dropDownPageHolder.children[0];
        }
        return dropDownPage;
    }
    getFocusedElement() {
        return this.element.querySelector('.e-focused');
    }
    getClass(element) {
        let currentClass;
        const classList$$1 = ['e-mfirst', 'e-mprev', 'e-first', 'e-prev', 'e-pp',
            'e-np', 'e-next', 'e-last', 'e-mnext', 'e-mlast'];
        for (let i = 0; i < classList$$1.length; i++) {
            if (element && element.classList.contains(classList$$1[i])) {
                currentClass = classList$$1[i];
                return currentClass;
            }
        }
        return currentClass;
    }
    getElementByClass(className) {
        return this.element.querySelector('.' + className);
    }
    getFocusablePagerElements(element, previousElements) {
        const target = element;
        const targetChildrens = target.children;
        let pagerElements = previousElements;
        for (let i = 0; i < targetChildrens.length; i++) {
            const element = targetChildrens[i];
            if (element.children.length > 0 && !element.classList.contains('e-pagesizes')) {
                pagerElements = this.getFocusablePagerElements(element, pagerElements);
            }
            else {
                const tabindexElement = targetChildrens[i];
                if (tabindexElement.hasAttribute('tabindex') && !element.classList.contains('e-disable')
                    && element.style.display !== 'none'
                    && !isNullOrUndefined(element.offsetParent)) {
                    pagerElements.push(tabindexElement);
                }
            }
        }
        return pagerElements;
    }
    addFocus(element, addFocusClass) {
        if (addFocusClass) {
            addClass([element], ['e-focused', 'e-focus']);
        }
        element.tabIndex = 0;
    }
    removeFocus(element, removeFocusClass) {
        if (removeFocusClass) {
            removeClass([element], ['e-focused', 'e-focus']);
        }
        element.tabIndex = -1;
    }
    /**
     * Gets the localized label by locale keyword.
     *
     * @param  {string} key - specifies the key
     * @returns {string} returns the localized label
     */
    getLocalizedLabel(key) {
        return this.localeObj.getConstant(key);
    }
    /**
     * Navigate to target page by given number.
     *
     * @param  {number} pageNo - Defines page number.
     * @returns {void}
     */
    goToPage(pageNo) {
        if (this.checkGoToPage(pageNo)) {
            this.currentPage = pageNo;
            this.dataBind();
        }
    }
    /**
     * @param {number} pageSize - specifies the pagesize
     * @returns {void}
     * @hidden
     */
    setPageSize(pageSize) {
        this.pageSize = pageSize;
        this.dataBind();
    }
    checkpagesizes() {
        if (this.pageSizes === true || this.pageSizes.length) {
            return true;
        }
        return false;
    }
    checkGoToPage(newPageNo, oldPageNo) {
        if (newPageNo !== this.currentPage) {
            this.previousPageNo = this.currentPage;
        }
        if (!isNullOrUndefined(oldPageNo)) {
            this.previousPageNo = oldPageNo;
        }
        if (this.previousPageNo !== newPageNo && (newPageNo >= 1 && newPageNo <= this.totalPages)) {
            return true;
        }
        return false;
    }
    currentPageChanged(newProp, oldProp) {
        if (this.enableQueryString) {
            this.updateQueryString(this.currentPage);
        }
        if (newProp.currentPage !== oldProp.currentPage || newProp.pageSize !== oldProp.pageSize) {
            const args = {
                currentPage: this.currentPage,
                newProp: newProp, oldProp: oldProp, cancel: false
            };
            this.trigger('click', args);
            if (!args.cancel) {
                this.refresh();
            }
        }
    }
    pagerTemplate() {
        if (this.isReactTemplate() && this.hasParent) {
            return;
        }
        let result;
        this.element.classList.add('e-pagertemplate');
        this.compile(this.template);
        const data = {
            currentPage: this.currentPage, pageSize: this.pageSize, pageCount: this.pageCount,
            totalRecordsCount: this.totalRecordsCount, totalPages: this.totalPages
        };
        const tempId = this.element.parentElement.id + '_template';
        if (this.isReactTemplate() && !this.isVue) {
            this.getPagerTemplate()(data, this, 'template', tempId, null, null, this.element);
            this.renderReactTemplates();
        }
        else {
            result = this.isVue ? this.getPagerTemplate()(data, this, 'template') : this.getPagerTemplate()(data);
            appendChildren(this.element, result);
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    updateTotalPages() {
        this.totalPages = this.isAllPage ? 1 : (this.totalRecordsCount % this.pageSize === 0) ? (this.totalRecordsCount / this.pageSize) :
            (parseInt((this.totalRecordsCount / this.pageSize).toString(), 10) + 1);
    }
    /**
     * @returns {Function} returns the function
     * @hidden
     */
    getPagerTemplate() {
        return this.templateFn;
    }
    /**
     * @param {string} template - specifies the template
     * @returns {Function} returns the function
     * @hidden
     */
    compile(template) {
        if (template) {
            try {
                if (document.querySelectorAll(template).length) {
                    this.templateFn = compile(document.querySelector(template).innerHTML.trim());
                }
            }
            catch (e) {
                this.templateFn = compile(template);
            }
        }
        return undefined;
    }
    /**
     * Refreshes page count, pager information and external message.
     *
     * @returns {void}
     */
    refresh() {
        if (this.template) {
            if (this.isReactTemplate()) {
                this.updateTotalPages();
                this.notify(this.pageRefresh, {});
            }
            else {
                this.element.innerHTML = '';
                this.updateTotalPages();
                this.pagerTemplate();
            }
        }
        else {
            this.updateRTL();
            const focusedTabIndexElement = this.getFocusedTabindexElement();
            this.containerModule.refresh();
            this.removeTabindexLastElements();
            if (focusedTabIndexElement && focusedTabIndexElement.classList.contains('e-disable')) {
                if (this.checkFocusInAdaptiveMode(focusedTabIndexElement)) {
                    this.changeFocusInAdaptiveMode(focusedTabIndexElement);
                }
                else {
                    this.setPagerFocusForActiveElement();
                }
            }
            if (this.enablePagerMessage) {
                this.pagerMessageModule.refresh();
            }
            if (this.pagerdropdownModule) {
                this.pagerdropdownModule.refresh();
            }
            if (this.enableExternalMessage && this.externalMessageModule) {
                this.externalMessageModule.refresh();
            }
            this.setTabIndexForFocusLastElement();
        }
    }
    updateRTL() {
        if (this.enableRtl) {
            this.element.classList.add('e-rtl');
        }
        else {
            this.element.classList.remove('e-rtl');
        }
    }
    initLocalization() {
        this.localeObj = new L10n(this.getModuleName(), this.defaultConstants, this.locale);
    }
    updateQueryString(value) {
        const updatedUrl = this.getUpdatedURL(window.location.href, 'page', value.toString());
        window.history.pushState({ path: updatedUrl }, '', updatedUrl);
    }
    getUpdatedURL(uri, key, value) {
        const regx = new RegExp('([?|&])' + key + '=.*?(&|#|$)', 'i');
        if (uri.match(regx)) {
            return uri.replace(regx, '$1' + key + '=' + value + '$2');
        }
        else {
            let hash = '';
            if (uri.indexOf('#') !== -1) {
                hash = uri.replace(/.*#/, '#');
                uri = uri.replace(/#.*/, '');
            }
            return uri + (uri.indexOf('?') !== -1 ? '&' : '?') + key + '=' + value + hash;
        }
    }
    renderFirstPrevDivForDevice() {
        this.element.appendChild(createElement('div', {
            className: 'e-mfirst e-icons e-icon-first',
            attrs: { title: this.getLocalizedLabel('firstPageTooltip'), tabindex: '-1' }
        }));
        this.element.appendChild(createElement('div', {
            className: 'e-mprev e-icons e-icon-prev',
            attrs: { title: this.getLocalizedLabel('previousPageTooltip'), tabindex: '-1' }
        }));
    }
    renderNextLastDivForDevice() {
        this.element.appendChild(createElement('div', {
            className: 'e-mnext e-icons e-icon-next',
            attrs: { title: this.getLocalizedLabel('nextPageTooltip'), tabindex: '-1' }
        }));
        this.element.appendChild(createElement('div', {
            className: 'e-mlast e-icons e-icon-last',
            attrs: { title: this.getLocalizedLabel('lastPageTooltip'), tabindex: '-1' }
        }));
    }
    addAriaLabel() {
        const classList$$1 = ['.e-mfirst', '.e-mprev', '.e-mnext', '.e-mlast'];
        if (!Browser.isDevice) {
            for (let i = 0; i < classList$$1.length; i++) {
                const element = this.element.querySelector(classList$$1[i]);
                element.setAttribute('aria-label', element.getAttribute('title'));
            }
        }
    }
    isReactTemplate() {
        return (this.isReact || this.isVue) && this.template && typeof (this.template) !== 'string';
    }
};
__decorate$5([
    Property(false)
], Pager.prototype, "enableQueryString", void 0);
__decorate$5([
    Property(false)
], Pager.prototype, "enableExternalMessage", void 0);
__decorate$5([
    Property(true)
], Pager.prototype, "enablePagerMessage", void 0);
__decorate$5([
    Property(12)
], Pager.prototype, "pageSize", void 0);
__decorate$5([
    Property(10)
], Pager.prototype, "pageCount", void 0);
__decorate$5([
    Property(1)
], Pager.prototype, "currentPage", void 0);
__decorate$5([
    Property()
], Pager.prototype, "totalRecordsCount", void 0);
__decorate$5([
    Property()
], Pager.prototype, "externalMessage", void 0);
__decorate$5([
    Property(false)
], Pager.prototype, "pageSizes", void 0);
__decorate$5([
    Property()
], Pager.prototype, "template", void 0);
__decorate$5([
    Property('')
], Pager.prototype, "customText", void 0);
__decorate$5([
    Event()
], Pager.prototype, "click", void 0);
__decorate$5([
    Property('')
], Pager.prototype, "cssClass", void 0);
__decorate$5([
    Event()
], Pager.prototype, "dropDownChanged", void 0);
__decorate$5([
    Event()
], Pager.prototype, "created", void 0);
Pager = __decorate$5([
    NotifyPropertyChanges
], Pager);

/**
 * `PagerDropDown` module handles selected pageSize from DropDownList.
 */
class PagerDropDown {
    /**
     * Constructor for pager module
     *
     * @param {Pager} pagerModule - specifies the pagermodule
     * @hidden
     */
    constructor(pagerModule) {
        this.pagerModule = pagerModule;
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     * @hidden
     */
    getModuleName() {
        return 'pagerdropdown';
    }
    /**
     * The function is used to render pager dropdown
     *
     * @returns {void}
     * @hidden
     */
    render() {
        const pagerObj = this.pagerModule;
        this.pagerDropDownDiv = createElement('div', { className: 'e-pagesizes' });
        const dropDownDiv = createElement('div', { className: 'e-pagerdropdown' });
        const defaultTextDiv = createElement('div', { className: 'e-pagerconstant' });
        const input = createElement('input', { attrs: { type: 'text', tabindex: '-1' } });
        this.pagerCons = createElement('span', {
            className: 'e-constant', innerHTML: this.pagerModule.getLocalizedLabel('pagerDropDown')
        });
        dropDownDiv.appendChild(input);
        defaultTextDiv.appendChild(this.pagerCons);
        this.pagerDropDownDiv.appendChild(dropDownDiv);
        this.pagerDropDownDiv.appendChild(defaultTextDiv);
        this.pagerModule.element.appendChild(this.pagerDropDownDiv);
        const pageSizesModule = this.pagerModule.pageSizes;
        const pageSizesArray = (pageSizesModule.length ? this.convertValue(pageSizesModule) :
            [this.pagerModule.getLocalizedLabel('All'), '5', '10', '12', '20']);
        const defaultValue = this.pagerModule.pageSize;
        this.dropDownListObject = new DropDownList({
            dataSource: pageSizesArray,
            value: defaultValue.toString(),
            change: this.onChange.bind(this),
            cssClass: this.pagerModule.cssClass ? 'e-alldrop' + ' ' + this.pagerModule.cssClass : 'e-alldrop'
        });
        this.dropDownListObject.appendTo(input);
        if (pageSizesModule.length) {
            this.dropDownListObject.element.value = this.pagerModule.pageSize.toString();
        }
        pagerObj.pageSize = defaultValue;
        pagerObj.dataBind();
        pagerObj.trigger('dropDownChanged', { pageSize: defaultValue });
        this.addEventListener();
    }
    /**
     * For internal use only - Get the pagesize.
     *
     * @param {ChangeEventArgs} e - specifies the changeeventargs
     * @returns {void}
     * @private
     * @hidden
     */
    onChange(e) {
        if (this.dropDownListObject.value === this.pagerModule.getLocalizedLabel('All')) {
            this.pagerModule.pageSize = this.pagerModule.totalRecordsCount;
            this.pagerModule.isAllPage = true;
            this.refresh();
            e.value = this.pagerModule.pageSize;
            if (document.getElementsByClassName('e-popup-open e-alldrop').length) {
                document.getElementsByClassName('e-popup-open e-alldrop')[0].style.display = 'none';
            }
        }
        else {
            this.pagerModule.pageSize = parseInt(this.dropDownListObject.value, 10);
            this.pagerModule.isAllPage = false;
            if (this.pagerCons.innerHTML !== this.pagerModule.getLocalizedLabel('pagerDropDown')) {
                this.refresh();
            }
        }
        this.pagerModule.dataBind();
        this.pagerModule.trigger('dropDownChanged', { pageSize: this.pagerModule.isAllPage ? this.pagerModule.totalRecordsCount :
                parseInt(this.dropDownListObject.value, 10) });
    }
    refresh() {
        if (this.pagerCons) {
            if (this.pagerModule.pageSize === this.pagerModule.totalRecordsCount) {
                this.pagerCons.innerHTML = this.pagerModule.getLocalizedLabel('pagerAllDropDown');
            }
            else {
                this.pagerCons.innerHTML = this.pagerModule.getLocalizedLabel('pagerDropDown');
            }
        }
    }
    beforeValueChange(prop) {
        if (typeof prop.newProp.value === 'number') {
            const val = prop.newProp.value.toString();
            prop.newProp.value = val;
        }
    }
    convertValue(pageSizeValue) {
        const item = pageSizeValue;
        for (let i = 0; i < item.length; i++) {
            item[i] = parseInt(item[i], 10) ? item[i].toString() : (this.pagerModule.getLocalizedLabel(item[i]) !== '')
                ? this.pagerModule.getLocalizedLabel(item[i]) : item[i];
        }
        return item;
    }
    setDropDownValue(prop, value) {
        if (this.dropDownListObject) {
            this.dropDownListObject[prop] = this.pagerModule.isAllPage ? this.pagerModule.getLocalizedLabel('All') : value;
        }
    }
    addEventListener() {
        this.dropDownListObject.on('beforeValueChange', this.beforeValueChange, this);
    }
    removeEventListener() {
        this.dropDownListObject.off('beforeValueChange', this.beforeValueChange);
    }
    /**
     * To destroy the Pagerdropdown
     *
     * @param {string} args - specifies the arguments
     * @param {string} args.requestType - specfies the request type
     * @returns {void}
     * @hidden
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    destroy(args) {
        if (this.dropDownListObject && !this.dropDownListObject.isDestroyed) {
            this.removeEventListener();
            this.dropDownListObject.destroy();
            remove(this.pagerDropDownDiv);
        }
    }
}

/**
 * `ExternalMessage` module is used to display user provided message.
 */
class ExternalMessage {
    /**
     * Constructor for externalMessage module
     *
     * @param {Pager} pagerModule - specifies the pagermodule
     * @hidden
     */
    constructor(pagerModule) {
        this.pagerModule = pagerModule;
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'externalMessage';
    }
    /**
     * The function is used to render pager externalMessage
     *
     * @returns {void}
     * @hidden
     */
    render() {
        this.element = createElement('div', { className: 'e-pagerexternalmsg', attrs: { 'aria-label': 'Pager external message' } });
        this.pagerModule.element.appendChild(this.element);
        this.refresh();
    }
    /**
     * Refreshes the external message of Pager.
     *
     * @returns {void}
     */
    refresh() {
        if (this.pagerModule.externalMessage && this.pagerModule.externalMessage.toString().length) {
            this.showMessage();
            this.element.innerHTML = this.pagerModule.externalMessage;
        }
        else {
            this.hideMessage();
        }
    }
    /**
     * Hides the external message of Pager.
     *
     * @returns {void}
     */
    hideMessage() {
        if (!isNullOrUndefined(this.element)) {
            this.element.style.display = 'none';
        }
    }
    /**
     * Shows the external message of the Pager.
     *
     * @returns {void}s
     */
    showMessage() {
        this.element.style.display = '';
    }
    /**
     * To destroy the PagerMessage
     *
     * @function destroy
     * @returns {void}
     * @hidden
     */
    destroy() {
        remove(this.element);
    }
}

/**
 * The `Page` module is used to render pager and handle paging action.
 */
class Page {
    /**
     * Constructor for the Grid paging module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {PageSettingsModel} pageSettings - specifies the PageSettingsModel
     * @hidden
     */
    constructor(parent, pageSettings) {
        this.isInitialRender = true;
        this.isCancel = false;
        Pager.Inject(ExternalMessage, PagerDropDown);
        this.parent = parent;
        this.pageSettings = pageSettings;
        this.addEventListener();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'pager';
    }
    /**
     * The function used to render pager from grid pageSettings
     *
     * @returns {void}
     * @hidden
     */
    render() {
        const gObj = this.parent;
        this.pagerDestroy();
        if (!isNullOrUndefined(this.parent.pagerTemplate)) {
            this.pageSettings.template = this.parent.pagerTemplate;
            this.parent.pageTemplateChange = true;
        }
        this.element = this.parent.createElement('div', { className: 'e-gridpager' });
        const pagerObj = extend$1({}, extend({}, getActualProperties(this.pageSettings)), {
            click: this.clickHandler.bind(this),
            dropDownChanged: this.onSelect.bind(this),
            enableRtl: gObj.enableRtl, locale: gObj.locale,
            created: this.addAriaAttr.bind(this)
        }, ['parentObj', 'propName']);
        pagerObj.cssClass = this.parent.cssClass ? this.parent.cssClass : '';
        this.pagerObj = new Pager(pagerObj, undefined, this.parent);
        this.pagerObj.hasParent = true;
        this.pagerObj.on(pagerRefresh, this.renderReactPagerTemplate, this);
        this.pagerObj.allowServerDataBinding = false;
    }
    onSelect(e) {
        this.pageSettings.pageSize = e.pageSize;
        if (!this.isInitialLoad) {
            this.pageSettings.currentPage = 1;
        }
    }
    addAriaAttr() {
        if (!(this.pageSettings.template)) {
            const numericContainerNew = this.parent.createElement('div', { className: 'e-numericcontainer' });
            const pagerContainer = this.element.querySelector('.e-pagercontainer');
            const frag = document.createDocumentFragment();
            const numericContainer = this.element.querySelector('.e-numericcontainer');
            const links = numericContainer.querySelectorAll('a');
            for (let i = 0; i < links.length; i++) {
                if (this.parent.getContentTable()) {
                    links[i].setAttribute('aria-owns', this.parent.getContentTable().id);
                }
                else {
                    links[i].setAttribute('aria-owns', this.parent.element.getAttribute('id') + '_content_table');
                }
                const numericContainerDiv = this.parent.createElement('div');
                numericContainerDiv.appendChild(links[i]);
                frag.appendChild(numericContainerDiv);
            }
            numericContainerNew.appendChild(frag);
            pagerContainer.replaceChild(numericContainerNew, numericContainer);
            const classList$$1 = ['.e-mfirst', '.e-mprev', '.e-first', '.e-prev', '.e-next', '.e-last', '.e-mnext', '.e-mlast'];
            for (let j = 0; j < classList$$1.length; j++) {
                const element = this.element.querySelector(classList$$1[j]);
                if (this.parent.getContentTable()) {
                    element.setAttribute('aria-owns', this.parent.getContentTable().id);
                }
            }
        }
    }
    dataReady(e) {
        this.updateModel(e);
    }
    /**
     * Refreshes the page count, pager information, and external message.
     *
     * @returns {void}
     */
    refresh() {
        this.pagerObj.refresh();
    }
    /**
     * Navigates to the target page according to the given number.
     *
     * @param  {number} pageNo - Defines the page number to navigate.
     * @returns {void}
     */
    goToPage(pageNo) {
        this.pagerObj.goToPage(pageNo);
    }
    /**
     * @param {number} pageSize - specifies the page size
     * @returns {void}
     * @hidden
     */
    setPageSize(pageSize) {
        this.pagerObj.setPageSize(pageSize);
    }
    /**
     * The function used to update pageSettings model
     *
     * @param {NotifyArgs} e - specfies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    updateModel(e) {
        this.parent.pageSettings.totalRecordsCount = e.count;
        this.parent.dataBind();
    }
    /**
     * The function used to trigger onActionComplete
     *
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    onActionComplete(e) {
        this.parent.trigger(actionComplete, extend(e, {
            currentPage: this.parent.pageSettings.currentPage, requestType: 'paging',
            type: actionComplete
        }));
    }
    /**
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName()) {
            return;
        }
        const newProp = e.properties;
        for (const prop of Object.keys(newProp)) {
            this.pagerObj[prop] = newProp[prop];
        }
        this.pagerObj.dataBind();
    }
    clickHandler(e) {
        const gObj = this.parent;
        if (this.isForceCancel || isActionPrevent(gObj) && !gObj.prevPageMoving && !this.isCancel) {
            if (!this.isForceCancel) {
                if (!isNullOrUndefined(e.newProp) && !isNullOrUndefined(e.newProp.pageSize)) {
                    gObj.notify(preventBatch, { instance: this, handler: this.setPageSize, arg1: e.newProp.pageSize });
                    this.pagerObj.pageSize = e.oldProp.pageSize;
                    gObj.pageSettings.pageSize = e.newProp.pageSize;
                }
                else if (e.currentPage) {
                    gObj.notify(preventBatch, { instance: this, handler: this.goToPage, arg1: e.currentPage });
                    this.pagerObj.currentPage = gObj.pageSettings.currentPage === this.pagerObj.currentPage ?
                        this.pagerObj.previousPageNo : gObj.pageSettings.currentPage;
                }
                this.isForceCancel = true;
                this.pagerObj.dataBind();
            }
            else {
                this.isForceCancel = false;
            }
            e.cancel = true;
            return;
        }
        gObj.pageSettings.pageSize = this.pagerObj.pageSize;
        gObj.prevPageMoving = false;
        const prevPage = this.pageSettings.currentPage;
        this.pageSettings.currentPage = e.currentPage;
        const args = {
            cancel: false, requestType: 'paging', previousPage: prevPage,
            currentPage: e.currentPage, type: actionBegin
        };
        if (!this.isCancel) {
            this.parent.notify(modelChanged, args);
        }
        if (args.cancel) {
            e.cancel = true;
            this.pagerObj.currentPage = prevPage;
            this.isCancel = true;
            return;
        }
        this.isCancel = false;
        this.parent.requestTypeAction = 'paging';
    }
    keyPressHandler(e) {
        if (e.action in keyActions) {
            e.preventDefault();
            this.element.querySelector(keyActions[e.action]).click();
        }
    }
    /**
     * Defines the text of the external message.
     *
     * @param  {string} message - Defines the message to update.
     * @returns {void}
     */
    updateExternalMessage(message) {
        if (!this.pagerObj.enableExternalMessage) {
            this.pagerObj.enableExternalMessage = true;
            this.pagerObj.dataBind();
        }
        this.pagerObj.externalMessage = message;
        this.pagerObj.dataBind();
    }
    appendToElement() {
        this.isInitialLoad = true;
        this.parent.element.appendChild(this.element);
        this.parent.setGridPager(this.element);
        this.pagerObj.isReact = this.parent.isReact;
        this.pagerObj.isVue = this.parent.isVue;
        this.pagerObj.appendTo(this.element);
        this.isInitialLoad = false;
    }
    enableAfterRender(e) {
        if (e.module === this.getModuleName() && e.enable) {
            this.render();
            this.appendToElement();
            if (this.isReactTemplate()) {
                this.pagerObj.updateTotalPages();
                this.created();
            }
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        this.handlers = {
            load: this.render,
            end: this.appendToElement,
            ready: this.dataReady,
            complete: this.onActionComplete,
            updateLayout: this.enableAfterRender,
            inboundChange: this.onPropertyChanged,
            keyPress: this.keyPressHandler,
            created: this.created
        };
        if (this.parent.isDestroyed) {
            return;
        }
        if (this.parent.isReact || this.parent.isVue) {
            this.parent.addEventListener(create, this.handlers.created.bind(this));
        }
        this.evtHandlers = [{ event: initialLoad, handler: this.handlers.load },
            { event: initialEnd, handler: this.handlers.end },
            { event: dataReady, handler: this.handlers.ready },
            { event: pageComplete, handler: this.handlers.complete },
            { event: uiUpdate, handler: this.handlers.updateLayout },
            { event: inBoundModelChanged, handler: this.handlers.inboundChange },
            { event: keyPressed, handler: this.handlers.keyPress },
            { event: destroy, handler: this.destroy }];
        addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    }
    created() {
        if (this.isInitialRender && this.isReactTemplate()) {
            this.isInitialRender = false;
            this.renderReactPagerTemplate();
        }
    }
    isReactTemplate() {
        return (this.parent.isReact || this.parent.isVue) && this.pagerObj.template && typeof (this.pagerObj.template) !== 'string';
    }
    renderReactPagerTemplate() {
        if (!this.isInitialRender && this.isReactTemplate()) {
            let result;
            this.parent.destroyTemplate(['pagerTemplate']);
            this.element.classList.add('e-pagertemplate');
            this.pagerObj.compile(this.pagerObj.template);
            const page = this.parent.pageSettings;
            const data = {
                currentPage: page.currentPage, pageSize: page.pageSize, pageCount: page.pageCount,
                totalRecordsCount: page.totalRecordsCount, totalPages: this.pagerObj.totalPages
            };
            const tempId = this.parent.id + '_pagertemplate';
            if (this.parent.isReact) {
                this.pagerObj.templateFn(data, this.parent, 'pagerTemplate', tempId, null, null, this.pagerObj.element);
                this.parent.renderTemplates();
            }
            else {
                result = this.pagerObj.templateFn(data, this.parent, 'pagerTemplate');
                appendChildren(this.pagerObj.element, result);
            }
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        if (this.parent.isReact || this.parent.isVue) {
            this.parent.removeEventListener(create, this.handlers.created);
        }
        this.parent.off(pagerRefresh, this.renderReactPagerTemplate);
        addRemoveEventListener(this.parent, this.evtHandlers, false);
    }
    /**
     * To destroy the pager
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        this.removeEventListener();
        if (this.isReactTemplate()) {
            this.parent.destroyTemplate(['pagerTemplate']);
        }
        this.pagerObj.destroy();
    }
    pagerDestroy() {
        if (this.pagerObj && !this.pagerObj.isDestroyed) {
            this.pagerObj.destroy();
            remove(this.element);
        }
    }
}
/**
 * @hidden
 */
const keyActions = {
    pageUp: '.e-prev',
    pageDown: '.e-next',
    ctrlAltPageDown: '.e-last',
    ctrlAltPageUp: '.e-first',
    altPageUp: '.e-pp',
    altPageDown: '.e-np'
};

/**
 * FilterCellRenderer class which responsible for building filter cell.
 *
 * @hidden
 */
class FilterCellRenderer extends CellRenderer {
    constructor() {
        super(...arguments);
        this.element = this.parent.createElement('TH', { className: 'e-filterbarcell' });
    }
    /**
     * Function to return the wrapper for the TH content.
     *
     * @returns {string} returns the gui
     */
    getGui() {
        return this.parent.createElement('div');
    }
    /**
     * Function to render the cell content based on Column object.
     *
     * @param  {Cell} cell
     * @param  {Object} data
     */
    /* tslint:disable-next-line:max-func-body-length */
    render(cell, data) {
        const tr = this.parent.element.querySelector('.e-filterbar');
        const node = this.element.cloneNode();
        const innerDIV = this.getGui();
        let input;
        const column = cell.column;
        tr.appendChild(node);
        node.setAttribute('e-mappinguid', column.uid);
        if (column.filterTemplate) {
            const fltrData = {};
            if (data) {
                fltrData[column.field] = data[column.field];
            }
            const col = 'column';
            fltrData[col] = column;
            if (column.visible) {
                const isReactCompiler = this.parent.isReact && typeof (column.filterTemplate) !== 'string';
                const tempID = this.parent.element.id + column.uid + 'filterTemplate';
                if (isReactCompiler) {
                    column.getFilterTemplate()(fltrData, this.parent, 'filterTemplate', tempID, null, null, node);
                    this.parent.renderTemplates();
                }
                else {
                    const element = column.getFilterTemplate()(fltrData, this.parent, 'filterTemplate', tempID);
                    appendChildren(node, element);
                }
            }
            else {
                node.classList.add('e-hide');
            }
        }
        else {
            if (column.type !== 'checkbox') {
                if ((isNullOrUndefined(column.allowFiltering) || column.allowFiltering) && !isNullOrUndefined(column.filterBarTemplate)) {
                    node.classList.add('e-fltrtemp');
                    attributes(innerDIV, {
                        'class': 'e-fltrtempdiv'
                    });
                    if (isNullOrUndefined(column.filterBarTemplate.create)) {
                        input = this.parent.createElement('input', {
                            id: column.field + '_filterBarcell', className: 'e-filterUi_input e-filtertext e-fltrTemp',
                            attrs: { type: 'search', title: column.headerText }
                        });
                        innerDIV.appendChild(input);
                    }
                    else {
                        const args = { column: column, node: Element };
                        let temp = column.filterBarTemplate.create;
                        if (typeof temp === 'string') {
                            temp = getValue(temp, window);
                        }
                        input = temp(args);
                        if (typeof input === 'string') {
                            const div = this.parent.createElement('div');
                            div.innerHTML = input;
                            input = div.firstChild;
                        }
                        attributes(innerDIV, {
                            class: 'e-filterUi_input e-filtertext e-fltrTemp',
                            title: column.headerText,
                            id: column.field + '_filterBarcell'
                        });
                        innerDIV.appendChild(input);
                    }
                }
                else {
                    attributes(innerDIV, {
                        'class': 'e-filterdiv e-fltrinputdiv'
                    });
                    input = this.parent.createElement('input', {
                        id: column.field + '_filterBarcell', className: 'e-filtertext',
                        attrs: {
                            type: 'search', title: column.headerText + cell.attributes.title,
                            value: data[cell.column.field] ? data[cell.column.field] : '', role: 'search'
                        }
                    });
                    innerDIV.appendChild(input);
                    const args = {
                        element: input, floatLabelType: 'Never',
                        properties: {
                            enableRtl: this.parent.enableRtl, showClearButton: true
                        }
                    };
                    Input.createInput(args, this.parent.createElement);
                }
                //TODO: apply intial filtering
                if (column.allowFiltering === false || column.field === '' || isNullOrUndefined(column.field)) {
                    input.setAttribute('disabled', 'true');
                    input.classList.add('e-disable');
                }
                if (!column.visible) {
                    node.classList.add('e-hide');
                }
                this.appendHtml(node, innerDIV);
                // render's the dropdownlist component if showFilterBarOperator sets to true
                if (this.parent.filterSettings.showFilterBarOperator && this.parent.filterSettings.type === 'FilterBar' &&
                    !this.parent.isPrinting && isNullOrUndefined(column.filterTemplate) && isNullOrUndefined(column.filterBarTemplate)) {
                    this.operatorIconRender(innerDIV, column, cell);
                }
                if ((isNullOrUndefined(column.allowFiltering) || column.allowFiltering) && !isNullOrUndefined(column.filterBarTemplate)) {
                    let templateWrite = column.filterBarTemplate.write;
                    const args = { element: input, column: column };
                    if (typeof templateWrite === 'string') {
                        templateWrite = getValue(templateWrite, window);
                    }
                    templateWrite.call(this, args);
                }
            }
        }
        return node;
    }
    /**
     * Function to specifies how the result content to be placed in the cell.
     *
     * @param {Element} node - specifies the node
     * @param {string|Element} innerHtml - specifies the innerHTML
     * @returns {Element} retruns the element
     */
    appendHtml(node, innerHtml) {
        node.appendChild(innerHtml);
        return node;
    }
    operatorIconRender(innerDIV, column, cell) {
        const gObj = this.parent;
        let operators;
        const fbicon = this.parent.createElement('input', {
            className: ' e-filterbaroperator e-icons e-icon-filter',
            id: cell.column.uid
        });
        innerDIV.querySelector('span').appendChild(fbicon);
        if (column.filter && column.filter.operator) {
            operators = column.filter.operator;
        }
        else if (gObj.filterSettings.columns.length) {
            for (let i = 0, a = gObj.filterSettings.columns; i < a.length; i++) {
                let col = a[i];
                if (col.field === column.field) {
                    operators = col.operator;
                }
                else {
                    operators = 'equal';
                }
            }
        }
        else {
            operators = 'equal';
        }
        if (!isNullOrUndefined(gObj.filterModule.operators[column.field])) {
            operators = gObj.filterModule.operators[column.field];
        }
        this.dropOptr = new DropDownList({
            fields: { text: 'text', value: 'value' },
            popupHeight: 'auto',
            value: operators,
            width: '0px',
            enabled: column.allowFiltering,
            popupWidth: 'auto',
            enableRtl: this.parent.enableRtl,
            change: this.internalEvent.bind(this),
            beforeOpen: function () {
                const operator = gObj.filterModule.customOperators;
                this.dataSource = operator[gObj.getColumnByUid(this.element.id).type + 'Operator'];
                for (let i = 0; i < this.dataSource.length; i++) {
                    if (column.filter && column.filter.operator && isNullOrUndefined(gObj.filterModule.operators[column.field]) &&
                        this.dataSource[i].value === column.filter.operator) {
                        this.value = column.filter.operator;
                    }
                }
            },
            cssClass: this.parent.cssClass ? this.parent.cssClass : null
        });
        this.dropOptr.appendTo(fbicon);
        const spanElmt = closest(this.dropOptr.element, 'span');
        spanElmt.classList.add('e-filterbardropdown');
        spanElmt.removeAttribute('tabindex');
    }
    internalEvent(e) {
        const gObj = this.parent;
        const col = gObj.getColumnByUid(e.element.getAttribute('id'));
        e.column = col;
        gObj.filterModule.operators[col.field] = e.value;
        gObj.notify(getFilterBarOperator, e);
    }
}

/**
 * `filter operators` render boolean column.
 *
 * @hidden
 */
class FlMenuOptrUI {
    constructor(parent, customFltrOperators, serviceLocator, filterSettings) {
        this.ddOpen = this.dropDownOpen.bind(this);
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.filterSettings = filterSettings;
        this.customFilterOperators = customFltrOperators;
        if (this.parent) {
            this.parent.on(filterMenuClose, this.destroyDropDownList, this);
            this.parent.on(destroy, this.destroyDropDownList, this);
        }
    }
    /**
     * @param {Element} dlgConetntEle - specifies the content element
     * @param {Element} target - specifies the target
     * @param {Column} column - specifies the column
     * @param {Dialog} dlgObj - specifies the dialog
     * @param {Object[]} operator - specifies the operator list
     * @returns {void}
     * @hidden
     */
    // eslint-disable-next-line max-len
    renderOperatorUI(dlgConetntEle, target, column, dlgObj, operator) {
        this.dialogObj = dlgObj;
        const optr = column.type + 'Operator';
        this.optrData = this.customOptr = !isNullOrUndefined(operator) ? operator :
            (!isNullOrUndefined(this.parent.filterSettings.operators) && !isNullOrUndefined(this.parent.filterSettings.operators[optr])) ?
                this.parent.filterSettings.operators[optr] : this.customFilterOperators[optr];
        const dropDatasource = this.customOptr;
        const selectedValue = this.dropSelectedVal(column, optr);
        const optrDiv = this.parent.createElement('div', { className: 'e-flm_optrdiv' });
        dlgConetntEle.appendChild(optrDiv);
        const optrInput = this.parent.createElement('input', { id: column.uid + '-floptr' });
        optrDiv.appendChild(optrInput);
        this.dropOptr = new DropDownList({
            dataSource: dropDatasource,
            fields: { text: 'text', value: 'value' },
            cssClass: this.parent.cssClass ? 'e-popup-flmenu' + ' ' + this.parent.cssClass : 'e-popup-flmenu',
            enableRtl: this.parent.enableRtl,
            text: selectedValue
        });
        this.dropOptr.addEventListener(open, this.ddOpen);
        this.dropOptr.appendTo('#' + column.uid + '-floptr');
    }
    renderResponsiveDropDownList(args) {
        args.popup.element.style.width = '100%';
    }
    dropDownOpen(args) {
        args.popup.element.style.zIndex = (this.dialogObj.zIndex + 1).toString();
        if (this.parent.enableAdaptiveUI) {
            this.renderResponsiveDropDownList(args);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    dropSelectedVal(col, optr) {
        let selValue = '';
        const columns = this.parent.filterSettings.columns;
        for (const column of columns) {
            if (col.field === column.field || (col.isForeignColumn() && col.foreignKeyValue === column.field)) {
                const selectedField = new DataManager(this.optrData).executeLocal(new Query().where('value', 'equal', column.operator));
                selValue = !isNullOrUndefined(selectedField[0]) ? selectedField[0].text : '';
            }
        }
        if (selValue === '') { // rewuired or not
            if (col.filter.operator) {
                const optrLen = Object.keys(this.optrData).length;
                for (let i = 0; i < optrLen; i++) {
                    if (this.optrData[i].value === col.filter.operator) {
                        selValue = this.optrData[i].text;
                    }
                }
            }
            else {
                selValue = this.optrData[0].text;
            }
        }
        return selValue;
    }
    /**
     * @returns {string} returns the operator
     * @hidden
     */
    getFlOperator() {
        return this.dropOptr.value;
    }
    destroyDropDownList() {
        if (this.dropOptr.isDestroyed) {
            return;
        }
        this.dropOptr.removeEventListener(open, this.ddOpen);
        this.dropOptr.destroy();
        this.parent.off(filterMenuClose, this.destroyDropDownList);
        this.parent.off(destroy, this.destroyDropDownList);
    }
}

/**
 * `string filterui` render string column.
 *
 * @hidden
 */
class StringFilterUI {
    constructor(parent, serviceLocator, filterSettings) {
        this.parent = parent;
        this.serLocator = serviceLocator;
        this.filterSettings = filterSettings;
        if (this.parent) {
            this.parent.on(filterMenuClose, this.destroy, this);
            this.parent.on(destroy, this.destroy, this);
        }
    }
    create(args) {
        this.instance = this.parent.createElement('input', { className: 'e-flmenu-input', id: 'strui-' + args.column.uid });
        args.target.appendChild(this.instance);
        this.dialogObj = args.dialogObj;
        this.actObj = this.getAutoCompleteOptions(args);
        this.actObj.appendTo(this.instance);
    }
    getAutoCompleteOptions(args) {
        const isForeignColumn = args.column.isForeignColumn();
        let foreignColumnQuery;
        if (isForeignColumn) {
            foreignColumnQuery = new Query();
            foreignColumnQuery.params = this.parent.query.params;
        }
        const dataSource = isForeignColumn ? args.column.dataSource : this.parent.dataSource;
        const fields = { value: isForeignColumn ? args.column.foreignKeyValue : args.column.field };
        const autoComplete = new AutoComplete(extend({
            dataSource: dataSource instanceof DataManager ? dataSource : new DataManager(dataSource),
            fields: fields,
            locale: this.parent.locale,
            enableRtl: this.parent.enableRtl,
            query: isForeignColumn ? foreignColumnQuery : this.parent.query.clone(),
            sortOrder: 'Ascending',
            cssClass: this.parent.cssClass ? 'e-popup-flmenu' + ' ' + this.parent.cssClass : 'e-popup-flmenu',
            autofill: true,
            placeholder: args.localizeText.getConstant('EnterValue')
        }, args.column.filter.params));
        this.acFocus = this.focus(autoComplete, args);
        this.acComplete = this.actionComplete(autoComplete);
        this.acOpen = this.openPopup.bind(this);
        autoComplete.addEventListener(focus, this.acFocus);
        autoComplete.addEventListener(open, this.acOpen);
        autoComplete.addEventListener(actionComplete, this.acComplete);
        if (dataSource && 'result' in dataSource) {
            const query = this.parent.getQuery ? this.parent.getQuery().clone() : new Query();
            const defObj = eventPromise({ requestType: 'stringfilterrequest' }, query);
            this.parent.trigger(dataStateChange, defObj.state);
            const def = defObj.deffered;
            def.promise.then((e) => {
                autoComplete.dataSource = new DataManager(e);
            });
        }
        return autoComplete;
    }
    write(args) {
        if (args.filteredValue !== '' && !isNullOrUndefined(args.filteredValue)) {
            const struiObj = document.querySelector('#strui-' + args.column.uid).ej2_instances[0];
            struiObj.value = args.filteredValue;
        }
    }
    read(element, column, filterOptr, filterObj) {
        const actuiObj = document.querySelector('#strui-' + column.uid).ej2_instances[0];
        if (Browser.isDevice) {
            actuiObj.hidePopup();
            actuiObj.focusOut();
        }
        let filterValue = actuiObj.value;
        if (isNullOrUndefined(filterValue) || filterValue === '') {
            filterValue = null;
        }
        filterObj.filterByColumn(column.field, filterOptr, filterValue, 'and', this.parent.filterSettings.enableCaseSensitivity);
    }
    openPopup(args) {
        getZIndexCalcualtion(args, this.dialogObj);
    }
    focus(actObj, args) {
        return () => {
            actObj.filterType = args.getOptrInstance.getFlOperator();
        };
    }
    actionComplete(actObj) {
        return (e) => {
            e.result = e.result.filter((obj, index, arr) => {
                return arr.map((mapObj) => {
                    return (getValue(actObj.fields.value, mapObj));
                }).indexOf(getValue((actObj.fields.value), obj)) === index;
            });
        };
    }
    destroy() {
        if (!this.actObj || this.actObj.isDestroyed) {
            return;
        }
        this.actObj.removeEventListener(focus, this.acFocus);
        this.actObj.removeEventListener(open, this.acOpen);
        this.actObj.removeEventListener(actionComplete, this.acComplete);
        this.actObj.destroy();
        this.parent.off(filterMenuClose, this.destroy);
        this.parent.off(destroy, this.destroy);
    }
}

/**
 * `numberfilterui` render number column.
 *
 * @hidden
 */
class NumberFilterUI {
    constructor(parent, serviceLocator, filterSettings) {
        this.filterSettings = filterSettings;
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        if (this.parent) {
            this.parent.on(filterMenuClose, this.destroy, this);
            this.parent.on(destroy, this.destroy, this);
        }
    }
    keyEventHandler(args) {
        if (args.keyCode === 13 || args.keyCode === 9) {
            const evt = document.createEvent('HTMLEvents');
            evt.initEvent('change', false, true);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.dispatchEvent(evt);
        }
    }
    create(args) {
        this.instance = this.parent.createElement('input', { className: 'e-flmenu-input', id: 'numberui-' + args.column.uid });
        args.target.appendChild(this.instance);
        this.numericTxtObj = new NumericTextBox(extend({
            format: typeof (args.column.format) === 'string' || isUndefined(args.column.format) ? args.column.format :
                args.column.format.format,
            locale: this.parent.locale,
            cssClass: this.parent.cssClass ? 'e-popup-flmenu' + ' ' + this.parent.cssClass : 'e-popup-flmenu',
            placeholder: args.localizeText.getConstant('EnterValue'),
            enableRtl: this.parent.enableRtl
        }, args.column.filter.params));
        this.numericTxtObj.appendTo(this.instance);
    }
    write(args) {
        const numberuiObj = document.querySelector('#numberui-' + args.column.uid).ej2_instances[0];
        numberuiObj.element.addEventListener('keydown', this.keyEventHandler);
        numberuiObj.value = args.filteredValue;
    }
    read(element, column, filterOptr, filterObj) {
        const numberuiObj = document.querySelector('#numberui-' + column.uid).ej2_instances[0];
        const filterValue = numberuiObj.value;
        filterObj.filterByColumn(column.field, filterOptr, filterValue, 'and', true);
    }
    destroy() {
        if (!this.numericTxtObj || this.numericTxtObj.isDestroyed) {
            return;
        }
        this.numericTxtObj.destroy();
        this.parent.off(filterMenuClose, this.destroy);
        this.parent.off(destroy, this.destroy);
    }
}

/**
 * `boolfilterui` render boolean column.
 *
 * @hidden
 */
class BooleanFilterUI {
    constructor(parent, serviceLocator, filterSettings) {
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.filterSettings = filterSettings;
        if (this.parent) {
            this.parent.on(filterMenuClose, this.destroy, this);
            this.parent.on(destroy, this.destroy, this);
        }
    }
    create(args) {
        const isForeignColumn = args.column.isForeignColumn();
        const dataSource = isForeignColumn ? args.column.dataSource : this.parent.dataSource;
        const fields = isForeignColumn ? args.column.foreignKeyValue : args.column.field;
        this.elem = this.parent.createElement('input', { className: 'e-flmenu-input', id: 'bool-ui-' + args.column.uid });
        args.target.appendChild(this.elem);
        this.dialogObj = args.dialogObj;
        this.dropInstance = new DropDownList(extend({
            dataSource: dataSource instanceof DataManager ?
                dataSource : new DataManager(dataSource),
            query: new Query().select(fields),
            fields: { text: fields, value: fields },
            placeholder: args.localizeText.getConstant('SelectValue'),
            cssClass: this.parent.cssClass ? 'e-popup-flmenu' + ' ' + this.parent.cssClass : 'e-popup-flmenu',
            locale: this.parent.locale,
            enableRtl: this.parent.enableRtl
        }, args.column.filter.params));
        this.ddOpen = this.openPopup.bind(this);
        this.ddComplete = this.actionComplete(fields);
        this.dropInstance.addEventListener(open, this.ddOpen);
        this.dropInstance.addEventListener(actionComplete, this.ddComplete);
        this.dropInstance.appendTo(this.elem);
    }
    write(args) {
        const drpuiObj = document.querySelector('#bool-ui-' + args.column.uid).ej2_instances[0];
        if (!isNullOrUndefined(args.filteredValue)) {
            drpuiObj.text = args.filteredValue;
        }
    }
    read(element, column, filterOptr, filterObj) {
        const drpuiObj = document.querySelector('#bool-ui-' + column.uid).ej2_instances[0];
        const filterValue = drpuiObj.value;
        filterObj.filterByColumn(column.field, filterOptr, filterValue, 'and', false);
    }
    openPopup(args) {
        getZIndexCalcualtion(args, this.dialogObj);
    }
    actionComplete(fields) {
        return (e) => {
            e.result = DataUtil.distinct(e.result, fields, true);
        };
    }
    destroy() {
        if (!this.dropInstance || this.dropInstance.isDestroyed) {
            return;
        }
        this.dropInstance.removeEventListener(open, this.ddOpen);
        this.dropInstance.removeEventListener(actionComplete, this.ddComplete);
        this.dropInstance.destroy();
        this.parent.off(filterMenuClose, this.destroy);
        this.parent.off(destroy, this.destroy);
    }
}

/**
 * `datefilterui` render date column.
 *
 * @hidden
 */
class DateFilterUI {
    constructor(parent, serviceLocator, filterSettings) {
        this.dpOpen = this.openPopup.bind(this);
        this.parent = parent;
        this.locator = serviceLocator;
        this.fltrSettings = filterSettings;
        if (this.parent) {
            this.parent.on(filterMenuClose, this.destroy, this);
            this.parent.on(destroy, this.destroy, this);
        }
    }
    create(args) {
        const format = getCustomDateFormat(args.column.format, args.column.type);
        this.dialogObj = args.dialogObj;
        this.inputElem = this.parent.createElement('input', { className: 'e-flmenu-input', id: 'dateui-' + args.column.uid });
        args.target.appendChild(this.inputElem);
        if (args.column.type === 'date') {
            this.datePickerObj = new DatePicker(extend({
                format: format,
                cssClass: this.parent.cssClass ? 'e-popup-flmenu' + ' ' + this.parent.cssClass : 'e-popup-flmenu',
                placeholder: args.localizeText.getConstant('ChooseDate'),
                width: '100%',
                locale: this.parent.locale,
                enableRtl: this.parent.enableRtl
            }, args.column.filter.params));
        }
        else if (args.column.type === 'datetime') {
            this.datePickerObj = new DateTimePicker(extend({
                format: format,
                cssClass: this.parent.cssClass ? 'e-popup-flmenu' + ' ' + this.parent.cssClass : 'e-popup-flmenu',
                placeholder: args.localizeText.getConstant('ChooseDate'),
                width: '100%',
                locale: this.parent.locale,
                enableRtl: this.parent.enableRtl
            }, args.column.filter.params));
        }
        this.datePickerObj.addEventListener(open, this.dpOpen);
        this.datePickerObj.appendTo(this.inputElem);
    }
    write(args) {
        const dateuiObj = document.querySelector('#dateui-' + args.column.uid).ej2_instances[0];
        dateuiObj.value = !isNullOrUndefined(args.filteredValue) ? new Date(args.filteredValue) : null;
    }
    read(element, column, filterOptr, filterObj) {
        const dateuiObj = document.querySelector('#dateui-' + column.uid).ej2_instances[0];
        let filterValue = dateuiObj.value;
        filterValue = isNullOrUndefined(filterValue) ? null : filterValue;
        filterObj.filterByColumn(column.field, filterOptr, filterValue, 'and', true);
    }
    openPopup(args) {
        args.popup.element.style.zIndex = (this.dialogObj.zIndex + 1).toString();
    }
    destroy() {
        this.parent.off(filterMenuClose, this.destroy);
        this.parent.off(destroy, this.destroy);
        if (isNullOrUndefined(this.datePickerObj) || this.datePickerObj.isDestroyed) {
            return;
        }
        this.datePickerObj.removeEventListener(open, this.dpOpen);
        this.datePickerObj.destroy();
    }
}

/**
 * `filter menu` render boolean column.
 *
 * @hidden
 */
class FilterMenuRenderer {
    constructor(parent, filterSettings, serviceLocator, customFltrOperators, fltrObj) {
        this.isDialogOpen = false;
        this.maxHeight = '350px';
        this.isMenuCheck = false;
        this.colTypes = {
            'string': StringFilterUI, 'number': NumberFilterUI, 'date': DateFilterUI, 'boolean': BooleanFilterUI, 'datetime': DateFilterUI
        };
        this.parent = parent;
        this.filterSettings = filterSettings;
        this.serviceLocator = serviceLocator;
        this.customFilterOperators = customFltrOperators;
        this.filterObj = fltrObj;
        this.flMuiObj = new FlMenuOptrUI(this.parent, this.customFilterOperators, this.serviceLocator);
        this.l10n = this.serviceLocator.getService('localization');
        this.menuFilterBase = new CheckBoxFilterBase(parent);
    }
    clearCustomFilter(col) {
        this.clearBtnClick(col);
    }
    applyCustomFilter(args) {
        this.filterBtnClick(args.col);
    }
    openDialog(args) {
        this.options = args;
        this.col = this.parent.getColumnByField(args.field);
        if (isNullOrUndefined(this.col.filter) || (isNullOrUndefined(this.col.filter.type) || this.col.filter.type === 'Menu')) { ///
            this.renderDlgContent(args.target, this.col);
        }
    }
    closeDialog(target) {
        if (!this.dlgObj) {
            return;
        }
        if (this.parent.isReact || this.parent.isVue) {
            clearReactVueTemplates(this.parent, ['filterTemplate']);
        }
        const elem = document.getElementById(this.dlgObj.element.id);
        if (this.dlgObj && !this.dlgObj.isDestroyed && elem) {
            const argument = { cancel: false, column: this.col, target: target, element: elem };
            this.parent.notify(filterMenuClose, argument);
            if (argument.cancel) {
                return;
            }
            this.isDialogOpen = false;
            if (this.isMenuCheck) {
                this.menuFilterBase.unWireEvents();
                this.parent.off(cBoxFltrComplete, this.actionComplete);
                this.isMenuCheck = false;
            }
            this.dlgObj.destroy();
            remove(elem);
        }
        this.parent.notify(filterDialogClose, {});
    }
    renderDlgContent(target, column) {
        const args = {
            requestType: filterBeforeOpen,
            columnName: column.field, columnType: column.type
        };
        const filterModel = 'filterModel';
        args[filterModel] = this;
        this.parent.trigger(actionBegin, args);
        const mainDiv = this.parent.createElement('div', { className: 'e-flmenu-maindiv', id: column.uid + '-flmenu' });
        this.dlgDiv = this.parent.createElement('div', { className: 'e-flmenu', id: column.uid + '-flmdlg' });
        this.dlgDiv.setAttribute('aria-label', this.l10n.getConstant('FilterMenuDialogARIA'));
        if (this.parent.enableAdaptiveUI) {
            const responsiveCnt = document.querySelector('.e-resfilter > .e-dlg-content > .e-mainfilterdiv');
            responsiveCnt.appendChild(this.dlgDiv);
        }
        else {
            this.parent.element.appendChild(this.dlgDiv);
        }
        this.dlgObj = new Dialog({
            showCloseIcon: false,
            closeOnEscape: false,
            locale: this.parent.locale,
            visible: false,
            enableRtl: this.parent.enableRtl,
            created: this.dialogCreated.bind(this, target, column),
            position: this.parent.element.classList.contains('e-device') ? { X: 'center', Y: 'center' } : { X: '', Y: '' },
            target: this.parent.element.classList.contains('e-device') ? document.body : this.parent.element,
            buttons: [{
                    click: this.filterBtnClick.bind(this, column),
                    buttonModel: {
                        content: this.l10n.getConstant('FilterButton'), isPrimary: true,
                        cssClass: this.parent.cssClass ? 'e-flmenu-okbtn' + ' ' + this.parent.cssClass : 'e-flmenu-okbtn'
                    }
                },
                {
                    click: this.clearBtnClick.bind(this, column),
                    buttonModel: { content: this.l10n.getConstant('ClearButton'),
                        cssClass: this.parent.cssClass ? 'e-flmenu-cancelbtn' + ' ' + this.parent.cssClass : 'e-flmenu-cancelbtn' }
                }],
            content: mainDiv,
            width: (!isNullOrUndefined(parentsUntil(target, 'e-bigger'))) || this.parent.element.classList.contains('e-device') ? 260 : 250,
            animationSettings: { effect: 'None' },
            cssClass: this.parent.cssClass ? 'e-filter-popup' + ' ' + this.parent.cssClass : 'e-filter-popup'
        });
        const isStringTemplate = 'isStringTemplate';
        this.dlgObj[isStringTemplate] = true;
        this.renderResponsiveDialog();
        this.dlgObj.appendTo(this.dlgDiv);
    }
    renderResponsiveDialog() {
        const gObj = this.parent;
        if (gObj.enableAdaptiveUI) {
            this.dlgObj.position = { X: '', Y: '' };
            this.dlgObj.target = document.querySelector('.e-resfilter > .e-dlg-content > .e-mainfilterdiv');
            this.dlgObj.width = '100%';
            this.dlgObj.isModal = false;
            this.dlgObj.buttons = [{}];
        }
    }
    dialogCreated(target, column) {
        if (!Browser.isDevice && target) {
            getFilterMenuPostion(target, this.dlgObj);
        }
        this.renderFilterUI(target, column);
        if (column.showColumnMenu) {
            this.parent.notify(filterDialogCreated, {});
        }
        if (this.parent.enableAdaptiveUI) {
            this.dlgObj.element.style.left = '0px';
            this.dlgObj.element.style.maxHeight = 'none';
        }
        else {
            this.dlgObj.element.style.maxHeight = this.maxHeight;
        }
        this.dlgObj.show();
        if (!column.filterTemplate) {
            this.writeMethod(column, this.dlgObj.element.querySelector('#' + column.uid + '-flmenu'));
        }
        const args = {
            requestType: filterAfterOpen,
            columnName: column.field, columnType: column.type
        };
        const filterModel = 'filterModel';
        args[filterModel] = this;
        this.isDialogOpen = true;
        if (!this.isMenuCheck) {
            this.parent.trigger(actionComplete, args);
        }
    }
    renderFilterUI(target, col) {
        const dlgConetntEle = this.dlgObj.element.querySelector('.e-flmenu-maindiv');
        this.parent.log('column_type_missing', { column: col });
        this.renderOperatorUI(dlgConetntEle, target, col);
        this.renderFlValueUI(dlgConetntEle, target, col);
    }
    renderOperatorUI(dlgConetntEle, target, column) {
        this.flMuiObj.renderOperatorUI(dlgConetntEle, target, column, this.dlgObj, this.filterObj.menuOperator);
    }
    renderFlValueUI(dlgConetntEle, target, column) {
        const valueDiv = this.parent.createElement('div', { className: 'e-flmenu-valuediv' });
        const fObj = this.filterObj;
        dlgConetntEle.appendChild(valueDiv);
        const instanceofFilterUI = new this.colTypes[column.type](this.parent, this.serviceLocator, this.parent.filterSettings);
        if (column.filterTemplate) {
            const fltrData = {};
            const valueInString = 'value';
            fltrData[column.field] = fltrData[valueInString] = fObj.values[column.field];
            if (column.foreignKeyValue) {
                fltrData[column.foreignKeyValue] = fObj.values[column.field];
                fltrData[column.field] = undefined;
            }
            const col = 'column';
            fltrData[col] = column;
            const isReactCompiler = this.parent.isReact && typeof (column.filterTemplate) !== 'string';
            const tempID = this.parent.element.id + column.uid + 'filterTemplate';
            if (isReactCompiler) {
                column.getFilterTemplate()(fltrData, this.parent, 'filterTemplate', tempID, null, null, valueDiv);
                this.parent.renderTemplates();
            }
            else {
                const compElement = column.getFilterTemplate()(fltrData, this.parent, 'filterTemplate', tempID);
                appendChildren(valueDiv, compElement);
            }
            if (this.isMenuCheck) {
                this.menuFilterBase.cBox = this.dlgObj.element.querySelector('.e-checkboxlist.e-fields');
                this.menuFilterBase.wireEvents();
                this.parent.on(cBoxFltrComplete, this.actionComplete, this);
                this.menuFilterBase.getAllData();
            }
        }
        else {
            if (!isNullOrUndefined(column.filter) && !isNullOrUndefined(column.filter.ui)
                && !isNullOrUndefined(column.filter.ui.create)) {
                let temp = column.filter.ui.create;
                if (typeof temp === 'string') {
                    temp = getValue(temp, window);
                }
                temp({
                    column: column, target: valueDiv,
                    getOptrInstance: this.flMuiObj, dialogObj: this.dlgObj
                });
            }
            else {
                instanceofFilterUI.create({
                    column: column, target: valueDiv,
                    getOptrInstance: this.flMuiObj, localizeText: this.l10n, dialogObj: this.dlgObj
                });
            }
        }
    }
    writeMethod(col, dlgContentEle) {
        let flValue;
        const target = dlgContentEle.querySelector('.e-flmenu-valinput');
        const instanceofFilterUI = new this.colTypes[col.type](this.parent, this.serviceLocator, this.parent.filterSettings);
        const columns = this.filterSettings.columns;
        for (const column of columns) {
            if (col.uid === column.uid) {
                flValue = column.value;
            }
        }
        if (!isNullOrUndefined(col.filter) && !isNullOrUndefined(col.filter.ui)
            && !isNullOrUndefined(col.filter.ui.write)) {
            let temp = col.filter.ui.write;
            if (typeof temp === 'string') {
                temp = getValue(temp, window);
            }
            temp({ column: col, target: target, parent: this.parent, filteredValue: flValue });
        }
        else {
            instanceofFilterUI.write({ column: col, target: target, parent: this.parent, filteredValue: flValue });
        }
    }
    filterBtnClick(col) {
        let flValue;
        const targ = this.dlgObj.element.querySelector('.e-flmenu-valuediv input');
        const flOptrValue = this.flMuiObj.getFlOperator();
        const instanceofFilterUI = new this.colTypes[col.type](this.parent, this.serviceLocator, this.parent.filterSettings);
        if (col.filterTemplate) {
            const element = this.dlgDiv.querySelector('.e-flmenu-valuediv');
            let fltrValue;
            if (element.children[0].value) {
                fltrValue = element.children[0].value;
            }
            else {
                if (!isNullOrUndefined(element.children[0].ej2_instances)) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    fltrValue = (this.parent.isAngular ? element.children[0] :
                        element.querySelector('input')).ej2_instances[0].value;
                }
                else {
                    const eControl = element.querySelector('.e-control');
                    fltrValue = col.type === 'boolean' ? eControl.checked :
                        !isNullOrUndefined(eControl.ej2_instances) ?
                            eControl.ej2_instances[0].value :
                            eControl.value;
                }
            }
            this.filterObj.filterByColumn(col.field, flOptrValue, fltrValue);
        }
        else {
            if (!isNullOrUndefined(col.filter) &&
                !isNullOrUndefined(col.filter.ui) && !isNullOrUndefined(col.filter.ui.read)) {
                let temp = col.filter.ui.read;
                if (typeof temp === 'string') {
                    temp = getValue(temp, window);
                }
                // eslint-disable-next-line
                flValue = temp({ element: targ, column: col, operator: flOptrValue, fltrObj: this.filterObj });
            }
            else {
                instanceofFilterUI.read(targ, col, flOptrValue, this.filterObj);
            }
        }
        this.closeDialog();
        if (this.parent.showColumnMenu) {
            this.parent.notify(afterFilterColumnMenuClose, {});
        }
    }
    closeResponsiveDialog() {
        this.closeDialog();
    }
    clearBtnClick(column) {
        this.filterObj.removeFilteredColsByField(column.field);
        this.closeDialog();
        const iconClass = this.parent.showColumnMenu && column.showColumnMenu ? '.e-columnmenu' : '.e-icon-filter';
        const col = this.parent.element.querySelector('[e-mappinguid="' + column.uid + '"]').parentElement;
        const flIcon = col.querySelector(iconClass);
        if (flIcon) {
            flIcon.classList.remove('e-filtered');
        }
    }
    destroy() {
        this.closeDialog();
    }
    /**
     * @returns {FilterUI} returns the filterUI
     * @hidden
     */
    getFilterUIInfo() {
        return { field: this.col.field, operator: this.flMuiObj.getFlOperator() };
    }
    renderCheckBoxMenu() {
        this.isMenuCheck = true;
        this.menuFilterBase.updateModel(this.options);
        this.menuFilterBase.getAndSetChkElem(this.options);
        this.dlgObj.buttons = [{
                click: this.menuFilterBase.btnClick.bind(this.menuFilterBase),
                buttonModel: {
                    content: this.menuFilterBase.getLocalizedLabel('FilterButton'),
                    cssClass: 'e-primary', isPrimary: true
                }
            },
            {
                click: this.menuFilterBase.btnClick.bind(this.menuFilterBase),
                buttonModel: { cssClass: 'e-flat', content: this.menuFilterBase.getLocalizedLabel('ClearButton') }
            }];
        this.menuFilterBase.dialogObj = this.dlgObj;
        this.menuFilterBase.dlg = this.dlgObj.element;
        this.menuFilterBase.dlg.classList.add('e-menucheckbox');
        this.menuFilterBase.dlg.classList.remove('e-checkboxfilter');
        this.maxHeight = '800px';
        return this.menuFilterBase.sBox.innerHTML;
    }
    actionComplete(args) {
        if (this.isMenuCheck) {
            this.parent.trigger(actionComplete, args);
        }
    }
}

/**
 * @hidden
 * `CheckBoxFilter` module is used to handle filtering action.
 */
class CheckBoxFilter {
    /**
     * Constructor for checkbox filtering module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {FilterSettings} filterSettings - specifies the filtersettings
     * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator
     * @hidden
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    constructor(parent, filterSettings, serviceLocator) {
        this.parent = parent;
        this.isresetFocus = true;
        this.checkBoxBase = new CheckBoxFilterBase(parent);
        this.addEventListener();
    }
    /**
     * To destroy the check box filter.
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        this.removeEventListener();
        this.checkBoxBase.closeDialog();
    }
    openDialog(options) {
        this.checkBoxBase.openDialog(options);
        this.parent.log('column_type_missing', { column: options.column });
    }
    closeDialog() {
        this.destroy();
        if (this.isresetFocus) {
            this.parent.notify(restoreFocus, {});
        }
    }
    closeResponsiveDialog() {
        this.checkBoxBase.closeDialog();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} - returns the module name
     * @private
     */
    getModuleName() {
        return 'checkboxFilter';
    }
    actionBegin(args) {
        this.parent.trigger(actionBegin, args);
    }
    actionComplete(args) {
        this.parent.trigger(actionComplete, args);
    }
    actionPrevent(args) {
        if (isActionPrevent(this.parent)) {
            this.parent.notify(preventBatch, args);
            args.cancel = true;
        }
    }
    clearCustomFilter(col) {
        this.checkBoxBase.clearFilter(col);
    }
    applyCustomFilter() {
        this.checkBoxBase.fltrBtnHandler();
        this.checkBoxBase.closeDialog();
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(cBoxFltrBegin, this.actionBegin, this);
        this.parent.on(cBoxFltrComplete, this.actionComplete, this);
        this.parent.on(fltrPrevent, this.actionPrevent, this);
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(cBoxFltrBegin, this.actionBegin);
        this.parent.off(cBoxFltrComplete, this.actionComplete);
        this.parent.off(fltrPrevent, this.actionPrevent);
    }
}

/**
 * @hidden
 * `ExcelFilter` module is used to handle filtering action.
 */
class ExcelFilter extends CheckBoxFilter {
    /**
     * Constructor for excelbox filtering module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {FilterSettings} filterSettings - specifies the Filtersettings
     * @param {ServiceLocator} serviceLocator - specifies the serviceLocator
     * @param {object} customFltrOperators - specifies the customFltrOperators
     * @hidden
     */
    constructor(parent, filterSettings, serviceLocator, customFltrOperators) {
        super(parent, filterSettings, serviceLocator);
        this.parent = parent;
        this.isresetFocus = true;
        this.excelFilterBase = new ExcelFilterBase(parent, customFltrOperators);
    }
    /**
     * To destroy the excel filter.
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        this.excelFilterBase.closeDialog();
    }
    openDialog(options) {
        this.excelFilterBase.openDialog(options);
    }
    closeDialog() {
        this.excelFilterBase.closeDialog();
        if (this.isresetFocus) {
            this.parent.notify(restoreFocus, {});
        }
    }
    clearCustomFilter(col) {
        this.excelFilterBase.clearFilter(col);
    }
    closeResponsiveDialog(isCustomFilter) {
        if (isCustomFilter) {
            this.excelFilterBase.removeDialog();
        }
        else {
            this.closeDialog();
        }
    }
    applyCustomFilter(args) {
        if (!args.isCustomFilter) {
            this.excelFilterBase.fltrBtnHandler();
            this.excelFilterBase.closeDialog();
        }
        else {
            this.excelFilterBase.filterBtnClick(args.col.field);
        }
    }
    filterByColumn(fieldName, firstOperator, firstValue, predicate, matchCase, ignoreAccent, secondOperator, secondValue) {
        this.excelFilterBase.filterByColumn(fieldName, firstOperator, firstValue, predicate, matchCase, ignoreAccent, secondOperator, secondValue);
    }
    /**
     * @returns {FilterUI} returns the filterUI
     * @hidden
     */
    getFilterUIInfo() {
        return this.excelFilterBase.getFilterUIInfo();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'excelFilter';
    }
}

/**
 *
 * The `Filter` module is used to handle filtering action.
 */
class Filter {
    /**
     * Constructor for Grid filtering module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {FilterSettings} filterSettings - specifies the filterSettings
     * @param {ServiceLocator} serviceLocator - specifes the serviceLocator
     * @hidden
     */
    constructor(parent, filterSettings, serviceLocator) {
        this.predicate = 'and';
        this.contentRefresh = true;
        this.filterByMethod = true;
        this.refresh = true;
        this.values = {};
        this.operators = {};
        this.cellText = {};
        this.nextFlMenuOpen = '';
        this.type = { 'Menu': FilterMenuRenderer, 'CheckBox': CheckBoxFilter, 'Excel': ExcelFilter };
        /** @hidden */
        this.filterOperators = {
            contains: 'contains', endsWith: 'endswith', equal: 'equal', greaterThan: 'greaterthan', greaterThanOrEqual: 'greaterthanorequal',
            lessThan: 'lessthan', lessThanOrEqual: 'lessthanorequal', notEqual: 'notequal', startsWith: 'startswith'
        };
        this.fltrDlgDetails = { field: '', isOpen: false };
        /** @hidden */
        this.skipNumberInput = ['=', ' ', '!'];
        this.skipStringInput = ['>', '<', '='];
        this.actualPredicate = {};
        this.parent = parent;
        this.filterSettings = filterSettings;
        this.serviceLocator = serviceLocator;
        this.addEventListener();
        this.setFullScreenDialog();
    }
    /**
     * To render filter bar when filtering enabled.
     *
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    render(e) {
        if (DataUtil.getObject('args.isFrozen', e) || (this.parent.getFrozenMode() === leftRight &&
            DataUtil.getObject('args.renderFrozenRightContent', e))) {
            return;
        }
        const gObj = this.parent;
        this.l10n = this.serviceLocator.getService('localization');
        this.getLocalizedCustomOperators();
        if (this.parent.filterSettings.type === 'FilterBar') {
            if (gObj.columns.length) {
                const fltrElem = this.parent.element.querySelector('.e-filterbar');
                if (fltrElem) {
                    remove(fltrElem);
                }
                const rowRenderer = new RowRenderer(this.serviceLocator, CellType.Filter, gObj);
                const cellrender = this.serviceLocator.getService('cellRendererFactory');
                cellrender.addCellRenderer(CellType.Filter, new FilterCellRenderer(this.parent, this.serviceLocator));
                this.valueFormatter = this.serviceLocator.getService('valueFormatter');
                rowRenderer.element = this.parent.createElement('tr', { className: 'e-filterbar', attrs: { role: 'row' } });
                const row$$1 = this.generateRow();
                row$$1.data = this.values;
                if (gObj.getFrozenMode() === 'Right') {
                    const thead = gObj.getFrozenRightHeader().querySelector('thead');
                    thead.appendChild(rowRenderer.element);
                }
                else {
                    this.parent.getHeaderContent().querySelector('thead').appendChild(rowRenderer.element);
                }
                const rowdrag = this.parent.element.querySelector('.e-rowdragheader');
                this.element = rowRenderer.render(row$$1, gObj.getColumns(), null, null, rowRenderer.element);
                const detail = this.element.querySelector('.e-detailheadercell');
                if (detail) {
                    detail.className = 'e-filterbarcell e-mastercell';
                }
                if (rowdrag) {
                    rowdrag.className = 'e-dragheadercell e-mastercell';
                }
                const gCells = [].slice.call(this.element.getElementsByClassName('e-grouptopleftcell'));
                if (gCells.length) {
                    gCells[gCells.length - 1].classList.add('e-lastgrouptopleftcell');
                }
                this.wireEvents();
                this.parent.notify(freezeRender, { case: 'filter' });
            }
        }
    }
    /**
     * To show the responsive custom filter dialog
     *
     * @param {boolean} enable - specifes dialog open
     * @returns {void}
     * @hidden
     */
    showCustomFilter(enable) {
        this.responsiveDialogRenderer.isCustomDialog = enable;
        this.responsiveDialogRenderer.showResponsiveDialog(this.column);
    }
    /**
     * To create the filter module.
     *
     * @param {Column} col - specifies the filtering column name
     * @returns {void}
     * @hidden
     */
    setFilterModel(col) {
        const type = col.filter.type || this.parent.filterSettings.type;
        this.filterModule = new this.type[type](this.parent, this.parent.filterSettings, this.serviceLocator, this.customOperators, this);
    }
    /**
     * To destroy the filter bar.
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        const gridElement = this.parent.element;
        if (!gridElement || (!gridElement.querySelector('.' + gridHeader) && !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        if (this.filterModule) {
            this.filterModule.destroy();
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if (!this.parent.refreshing && (this.parent.isDestroyed || !this.parent.allowFiltering)) {
            this.filterSettings.columns = [];
        }
        this.updateFilterMsg();
        this.removeEventListener();
        this.unWireEvents();
        if (this.filterSettings.type === 'FilterBar' && this.filterSettings.showFilterBarOperator) {
            const dropdownlist = [].slice.call(this.element.getElementsByClassName('e-filterbaroperator'));
            for (let i = 0; i < dropdownlist.length; i++) {
                if (dropdownlist[i].ej2_instances[0]) {
                    dropdownlist[i].ej2_instances[0].destroy();
                }
            }
        }
        if (this.element) {
            if (this.element.parentElement) {
                remove(this.element);
            }
            const filterBarElement = this.parent.getHeaderContent().querySelector('.e-filterbar');
            if (this.parent.isFrozenGrid() && filterBarElement) {
                remove(filterBarElement);
            }
        }
    }
    setFullScreenDialog() {
        if (this.serviceLocator) {
            this.serviceLocator.registerAdaptiveService(this, this.parent.enableAdaptiveUI, ResponsiveDialogAction.isFilter);
        }
    }
    generateRow() {
        const options = {};
        const row$$1 = new Row(options);
        row$$1.cells = this.generateCells();
        return row$$1;
    }
    generateCells() {
        //TODO: generate dummy column for group, detail, stacked row here for filtering;
        const cells = [];
        if (this.parent.allowGrouping) {
            for (let c = 0, len = this.parent.groupSettings.columns.length; c < len; c++) {
                cells.push(this.generateCell({}, CellType.HeaderIndent));
            }
        }
        if (this.parent.detailTemplate || this.parent.childGrid) {
            cells.push(this.generateCell({}, CellType.DetailHeader));
        }
        if (this.parent.isRowDragable() && this.parent.getFrozenMode() !== 'Right') {
            cells.push(this.generateCell({}, CellType.RowDragHIcon));
        }
        for (const dummy of this.parent.getColumns()) {
            cells.push(this.generateCell(dummy));
        }
        if (this.parent.getFrozenMode() === 'Right') {
            cells.push(this.generateCell({}, CellType.RowDragHIcon));
        }
        return cells;
    }
    generateCell(column, cellType) {
        const opt = {
            'visible': column.visible,
            'isDataCell': false,
            'rowId': '',
            'column': column,
            'cellType': cellType ? cellType : CellType.Filter,
            'attributes': { title: this.l10n.getConstant('FilterbarTitle') }
        };
        return new Cell(opt);
    }
    /**
     * To update filterSettings when applying filter.
     *
     * @returns {void}
     * @hidden
     */
    updateModel() {
        const col = this.parent.getColumnByField(this.fieldName);
        this.filterObjIndex = this.getFilteredColsIndexByField(col);
        this.prevFilterObject = this.filterSettings.columns[this.filterObjIndex];
        const arrayVal = Array.isArray(this.value) ? this.value : [this.value];
        const moduleName = this.parent.dataSource.adaptor && this.parent.dataSource.adaptor.getModuleName ? this.parent.dataSource.adaptor.getModuleName() : undefined;
        for (let i = 0, len = arrayVal.length; i < len; i++) {
            const field = col.isForeignColumn() ? col.foreignKeyValue : this.fieldName;
            const isMenuNotEqual = this.operator === 'notequal';
            this.currentFilterObject = {
                field: field, uid: col.uid, isForeignKey: col.isForeignColumn(), operator: this.operator,
                value: arrayVal[i], predicate: this.predicate,
                matchCase: this.matchCase, ignoreAccent: this.ignoreAccent, actualFilterValue: {}, actualOperator: {}
            };
            const index = this.getFilteredColsIndexByField(col);
            if (index > -1 && !Array.isArray(this.value)) {
                this.filterSettings.columns[index] = this.currentFilterObject;
            }
            else {
                this.filterSettings.columns.push(this.currentFilterObject);
            }
            if (isNullOrUndefined(this.value) && (this.operator === 'equal' || this.operator === 'notequal') &&
                (moduleName !== 'ODataAdaptor' && moduleName !== 'ODataV4Adaptor')) {
                this.filterSettings.columns = [];
                if (col.type === 'string') {
                    this.filterSettings.columns.push({
                        field: field, ignoreAccent: this.ignoreAccent, matchCase: this.matchCase,
                        operator: this.operator, predicate: isMenuNotEqual ? 'and' : 'or', value: ''
                    });
                }
                this.filterSettings.columns.push({
                    field: field, ignoreAccent: this.ignoreAccent, matchCase: this.matchCase,
                    operator: this.operator, predicate: isMenuNotEqual ? 'and' : 'or', value: undefined
                });
                this.filterSettings.columns.push({
                    field: field, ignoreAccent: this.ignoreAccent, matchCase: this.matchCase,
                    operator: this.operator, predicate: isMenuNotEqual ? 'and' : 'or', value: null
                });
            }
        }
        // eslint-disable-next-line no-self-assign
        this.filterSettings.columns = this.filterSettings.columns;
        this.parent.dataBind();
    }
    getFilteredColsIndexByField(col) {
        const cols = this.filterSettings.columns;
        for (let i = 0, len = cols.length; i < len; i++) {
            if (cols[i].uid === col.uid || (col.isForeignColumn() && this.parent.getColumnByUid(col.uid).field === col.foreignKeyValue)) {
                return i;
            }
        }
        return -1;
    }
    /**
     * To trigger action complete event.
     *
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    onActionComplete(e) {
        const args = !this.isRemove ? {
            currentFilterObject: this.currentFilterObject,
            /* tslint:disable:no-string-literal */
            currentFilteringColumn: !isNullOrUndefined(this.column) ? this.column.field : undefined,
            /* tslint:enable:no-string-literal */
            columns: this.filterSettings.columns, requestType: 'filtering', type: actionComplete
        } : {
            requestType: 'filtering', type: actionComplete
        };
        this.parent.trigger(actionComplete, extend(e, args));
        this.isRemove = false;
    }
    wireEvents() {
        EventHandler.add(this.parent.getHeaderContent(), 'keyup', this.keyUpHandlerImmediate, this);
    }
    unWireEvents() {
        EventHandler.remove(this.parent.getHeaderContent(), 'keyup', this.keyUpHandlerImmediate);
    }
    enableAfterRender(e) {
        if (e.module === this.getModuleName() && e.enable) {
            this.parent.getHeaderTable().classList.add('e-sortfilter');
            this.render();
        }
    }
    refreshFilterValue() {
        this.parent.removeEventListener(beforeDataBound, this.refreshFilterValueFn);
        if (this.filterSettings.type === 'FilterBar' && this.filterSettings.columns.length &&
            !this.parent.getCurrentViewRecords().length) {
            this.initialEnd();
        }
    }
    initialEnd() {
        this.parent.off(contentReady, this.initialEnd);
        if (this.parent.getColumns().length && this.filterSettings.columns.length) {
            const gObj = this.parent;
            this.contentRefresh = false;
            this.initialLoad = true;
            for (const col of gObj.filterSettings.columns) {
                this.filterByColumn(col.field, col.operator, col.value, col.predicate, col.matchCase, col.ignoreAccent, col.actualFilterValue, col.actualOperator);
            }
            this.initialLoad = false;
            this.updateFilterMsg();
            this.contentRefresh = true;
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(setFullScreenDialog, this.setFullScreenDialog, this);
        this.parent.on(uiUpdate, this.enableAfterRender, this);
        this.parent.on(filterComplete, this.onActionComplete, this);
        this.parent.on(inBoundModelChanged, this.onPropertyChanged, this);
        this.parent.on(keyPressed, this.keyUpHandler, this);
        this.parent.on(columnPositionChanged, this.columnPositionChanged, this);
        this.parent.on(headerRefreshed, this.render, this);
        this.parent.on(contentReady, this.initialEnd, this);
        this.parent.on(filterMenuClose, this.filterMenuClose, this);
        this.docClickHandler = this.clickHandler.bind(this);
        EventHandler.add(document, 'click', this.docClickHandler, this);
        EventHandler.add(this.parent.element, 'mousedown', this.refreshClearIcon, this);
        this.parent.on(filterOpen, this.columnMenuFilter, this);
        this.parent.on(click, this.filterIconClickHandler, this);
        this.parent.on('persist-data-changed', this.initialEnd, this);
        this.parent.on(closeFilterDialog, this.clickHandler, this);
        this.parent.on(destroy, this.destroy, this);
        this.refreshFilterValueFn = this.refreshFilterValue.bind(this);
        this.parent.addEventListener(beforeDataBound, this.refreshFilterValueFn);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        EventHandler.remove(document, 'click', this.docClickHandler);
        EventHandler.remove(this.parent.element, 'mousedown', this.refreshClearIcon);
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(setFullScreenDialog, this.setFullScreenDialog);
        this.parent.off(uiUpdate, this.enableAfterRender);
        this.parent.off(filterComplete, this.onActionComplete);
        this.parent.off(inBoundModelChanged, this.onPropertyChanged);
        this.parent.off(keyPressed, this.keyUpHandler);
        this.parent.off(columnPositionChanged, this.columnPositionChanged);
        this.parent.off(headerRefreshed, this.render);
        this.parent.off(filterOpen, this.columnMenuFilter);
        this.parent.off(filterMenuClose, this.filterMenuClose);
        this.parent.off(click, this.filterIconClickHandler);
        this.parent.off(closeFilterDialog, this.clickHandler);
        this.parent.off(destroy, this.destroy);
    }
    refreshClearIcon(e) {
        if (this.parent.allowFiltering && this.parent.filterSettings.type === 'FilterBar' &&
            e.target.classList.contains('e-clear-icon')) {
            const targetText = e.target.previousElementSibling;
            Input.setValue(null, targetText, 'Never', true);
            if (this.filterSettings.mode === 'Immediate') {
                this.removeFilteredColsByField(targetText.id.slice(0, -14)); //Length of _filterBarcell = 14
            }
        }
    }
    filterMenuClose() {
        this.fltrDlgDetails.isOpen = false;
    }
    /**
     * Filters the Grid row by fieldName, filterOperator, and filterValue.
     *
     * @param  {string} fieldName - Defines the field name of the filter column.
     * @param  {string} filterOperator - Defines the operator to filter records.
     * @param  {string | number | Date | boolean} filterValue - Defines the value which is used to filter records.
     * @param  {string} predicate - Defines the relationship of one filter query with another by using AND or OR predicate.
     * @param  {boolean} matchCase - If match case is set to true, then the filter records
     * the exact match or <br> filters records that are case insensitive (uppercase and lowercase letters treated the same).
     * @param {boolean} ignoreAccent - If ignoreAccent set to true, then filter ignores the diacritic characters or accents while filtering.
     * @param  {string} actualFilterValue - Defines the actual filter value for the filter column.
     * @param  {string} actualOperator - Defines the actual filter operator for the filter column.
     * @returns {void}
     */
    filterByColumn(fieldName, filterOperator, filterValue, predicate, matchCase, ignoreAccent, actualFilterValue, actualOperator) {
        const gObj = this.parent;
        let filterCell;
        this.column = gObj.grabColumnByFieldFromAllCols(fieldName);
        if (this.filterSettings.type === 'FilterBar' && this.filterSettings.showFilterBarOperator
            && isNullOrUndefined(this.column.filterBarTemplate) && isNullOrUndefined(this.column.filterTemplate)) {
            filterOperator = this.getOperatorName(fieldName);
        }
        if (!this.column) {
            return;
        }
        if (this.filterSettings.type === 'FilterBar') {
            filterCell = gObj.getHeaderContent().querySelector('[id=\'' + this.column.field + '_filterBarcell\']');
        }
        if (!isNullOrUndefined(this.column.allowFiltering) && !this.column.allowFiltering) {
            this.parent.log('action_disabled_column', { moduleName: this.getModuleName(), columnName: this.column.headerText });
            return;
        }
        if (isActionPrevent(gObj)) {
            gObj.notify(preventBatch, {
                instance: this, handler: this.filterByColumn, arg1: fieldName, arg2: filterOperator, arg3: filterValue, arg4: predicate,
                arg5: matchCase, arg6: ignoreAccent, arg7: actualFilterValue, arg8: actualOperator
            });
            return;
        }
        this.predicate = predicate ? predicate : Array.isArray(filterValue) ? 'or' : 'and';
        this.value = filterValue;
        this.matchCase = matchCase || false;
        this.ignoreAccent = this.ignoreAccent = !isNullOrUndefined(ignoreAccent) ? ignoreAccent : this.parent.filterSettings.ignoreAccent;
        this.fieldName = fieldName;
        this.operator = filterOperator;
        filterValue = !isNullOrUndefined(filterValue) ? filterValue.toString() : filterValue;
        if (filterValue === '') {
            filterValue = null;
        }
        if (this.column.type === 'number' || this.column.type === 'date') {
            this.matchCase = true;
        }
        gObj.getColumnHeaderByField(fieldName).setAttribute('aria-filtered', 'true');
        if (filterCell && this.filterSettings.type === 'FilterBar') {
            if ((filterValue && filterValue.length < 1) || (!this.filterByMethod &&
                this.checkForSkipInput(this.column, filterValue))) {
                this.filterStatusMsg = (filterValue && filterValue.length < 1) ? '' : this.l10n.getConstant('InvalidFilterMessage');
                this.updateFilterMsg();
                return;
            }
            if (filterCell.value !== filterValue) {
                filterCell.value = filterValue;
            }
        }
        if (!isNullOrUndefined(this.column.format)) {
            this.applyColumnFormat(filterValue);
            if (this.initialLoad && this.filterSettings.type === 'FilterBar') {
                filterCell.value = this.values[this.column.field];
            }
        }
        else {
            this.values[this.column.field] = filterValue; //this line should be above updateModel
        }
        const predObj = {
            field: this.fieldName,
            predicate: predicate,
            matchCase: matchCase,
            ignoreAccent: ignoreAccent,
            operator: this.operator,
            value: this.value,
            type: this.column.type
        };
        const filterColumn = this.parent.filterSettings.columns.filter((fColumn) => {
            return (fColumn.field === this.fieldName);
        });
        if (filterColumn.length > 1 && !isNullOrUndefined(this.actualPredicate[this.fieldName])) {
            this.actualPredicate[this.fieldName].push(predObj);
        }
        else {
            this.actualPredicate[this.fieldName] = [predObj];
        }
        if (this.checkAlreadyColFiltered(this.column.field)) {
            return;
        }
        this.updateModel();
    }
    applyColumnFormat(filterValue) {
        const getFlvalue = (this.column.type === 'date' || this.column.type === 'datetime') ?
            new Date(filterValue) : parseFloat(filterValue);
        if ((this.column.type === 'date' || this.column.type === 'datetime') && filterValue &&
            filterValue.split(',').length > 1) {
            this.values[this.column.field] = ((filterValue).split(',')).map((val) => {
                if (val === '') {
                    val = null;
                }
                return this.setFormatForFlColumn(new Date(val), this.column);
            });
        }
        else {
            this.values[this.column.field] = this.setFormatForFlColumn(getFlvalue, this.column);
        }
    }
    // To skip the second time request to server while applying initial filtering - EJ2-44361
    skipUid(col) {
        let flag = true;
        const colLen = Object.keys((col));
        for (let i = 0; i < colLen.length; i++) {
            const key = Object.keys(col[colLen[i]]);
            if (key.length === 1 && key[0] === 'uid') {
                flag = false;
            }
        }
        return flag;
    }
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName()) {
            return;
        }
        for (const prop of Object.keys(e.properties)) {
            switch (prop) {
                case 'columns':
                    // eslint-disable-next-line no-case-declarations
                    const col = 'columns';
                    // eslint-disable-next-line no-case-declarations
                    const args = {
                        currentFilterObject: this.currentFilterObject, currentFilteringColumn: this.column ?
                            this.column.field : undefined, action: 'filter', columns: this.filterSettings.columns,
                        requestType: 'filtering', type: actionBegin, cancel: false
                    };
                    if (this.contentRefresh && this.skipUid(e.properties[col])) {
                        this.parent.notify(modelChanged, args);
                        if (args.cancel) {
                            if (isNullOrUndefined(this.prevFilterObject)) {
                                this.filterSettings.columns.splice(this.filterSettings.columns.length - 1, 1);
                            }
                            else {
                                this.filterSettings.columns[this.filterObjIndex] = this.prevFilterObject;
                            }
                            return;
                        }
                        this.updateFilterIcon();
                        this.refreshFilterSettings();
                        this.updateFilterMsg();
                        this.updateFilter();
                    }
                    break;
                case 'showFilterBarStatus':
                    if (e.properties[prop]) {
                        this.updateFilterMsg();
                    }
                    else if (this.parent.allowPaging) {
                        this.parent.updateExternalMessage('');
                    }
                    break;
                case 'showFilterBarOperator':
                case 'type':
                    this.parent.refreshHeader();
                    this.refreshFilterSettings();
                    break;
            }
        }
    }
    refreshFilterSettings() {
        if (this.filterSettings.type === 'FilterBar') {
            for (let i = 0; i < this.filterSettings.columns.length; i++) {
                this.column = this.parent.grabColumnByUidFromAllCols(this.filterSettings.columns[i].uid);
                let filterValue = this.filterSettings.columns[i].value;
                filterValue = !isNullOrUndefined(filterValue) && filterValue.toString();
                if (!isNullOrUndefined(this.column.format)) {
                    this.applyColumnFormat(filterValue);
                }
                else {
                    const key = this.filterSettings.columns[i].field;
                    this.values[key] = this.filterSettings.columns[i].value;
                }
                const filterElement = this.getFilterBarElement(this.column.field);
                if (filterElement) {
                    if (this.cellText[this.filterSettings.columns[i].field] !== ''
                        && !isNullOrUndefined(this.cellText[this.filterSettings.columns[i].field])) {
                        filterElement.value = this.cellText[this.column.field];
                    }
                    else {
                        filterElement.value = this.filterSettings.columns[i].value;
                    }
                }
            }
            if (this.filterSettings.columns.length === 0) {
                const col = this.parent.getColumns();
                for (let i = 0; i < col.length; i++) {
                    const filterElement = this.getFilterBarElement(col[i].field);
                    if (filterElement && filterElement.value !== '') {
                        filterElement.value = '';
                        delete this.values[col[i].field];
                    }
                }
            }
        }
    }
    updateFilterIcon() {
        if (this.filterSettings.columns.length === 0 && this.parent.element.querySelector('.e-filtered')) {
            const fltrIconElement = [].slice.call(this.parent.element.getElementsByClassName('e-filtered'));
            for (let i = 0, len = fltrIconElement.length; i < len; i++) {
                fltrIconElement[i].removeAttribute('aria-filtered');
                fltrIconElement[i].classList.remove('e-filtered');
            }
        }
    }
    getFilterBarElement(col) {
        const selector = '[id=\'' + col + '_filterBarcell\']';
        let filterElement;
        if (selector && !isNullOrUndefined(this.element)) {
            filterElement = this.element.querySelector(selector);
        }
        return filterElement;
    }
    /**
     * @private
     * @returns {void}
     */
    refreshFilter() {
        this.refreshFilterSettings();
        this.updateFilterMsg();
    }
    /**
     * Clears all the filtered rows of the Grid.
     *
     * @param {string[]} fields - returns the fields
     * @returns {void}
     */
    clearFiltering(fields) {
        const cols = getActualPropFromColl(this.filterSettings.columns);
        if (!isNullOrUndefined(fields)) {
            this.refresh = false;
            fields.forEach((field) => { this.removeFilteredColsByField(field, false); });
            this.parent.setProperties({ filterSettings: { columns: this.filterSettings.columns } }, true);
            this.parent.renderModule.refresh();
            this.refresh = true;
            return;
        }
        if (isActionPrevent(this.parent)) {
            this.parent.notify(preventBatch, { instance: this, handler: this.clearFiltering });
            return;
        }
        for (let i = 0; i < cols.length; i++) {
            cols[i].uid = cols[i].uid || this.parent.getColumnByField(cols[i].field).uid;
        }
        const colUid = cols.map((f) => f.uid);
        const filteredcols = colUid.filter((item, pos) => colUid.indexOf(item) === pos);
        this.refresh = false;
        for (let i = 0, len = filteredcols.length; i < len; i++) {
            this.removeFilteredColsByField(this.parent.getColumnByUid(filteredcols[i]).field, false);
        }
        this.refresh = true;
        if (filteredcols.length) {
            this.parent.renderModule.refresh();
        }
        if (this.parent.filterSettings.columns.length === 0 && this.parent.element.querySelector('.e-filtered')) {
            const fltrElement = [].slice.call(this.parent.element.getElementsByClassName('e-filtered'));
            for (let i = 0, len = fltrElement.length; i < len; i++) {
                fltrElement[0].removeAttribute('aria-filtered');
                fltrElement[0].classList.remove('e-filtered');
            }
        }
        this.isRemove = true;
        this.filterStatusMsg = '';
        this.updateFilterMsg();
    }
    checkAlreadyColFiltered(field) {
        const columns = this.filterSettings.columns;
        for (const col of columns) {
            if (col.field === field && col.value === this.value &&
                col.operator === this.operator && col.predicate === this.predicate) {
                return true;
            }
        }
        return false;
    }
    columnMenuFilter(args) {
        this.column = args.col;
        const ele = closest(args.target, '#' + args.id);
        if (args.isClose && !ele) {
            this.filterModule.closeDialog();
        }
        else if (ele) {
            this.filterDialogOpen(this.column, args.target);
        }
    }
    filterDialogOpen(col, target, left, top) {
        if (this.filterModule) {
            this.filterModule.closeDialog();
        }
        this.setFilterModel(col);
        this.filterModule.openDialog(this.createOptions(col, target, left, top));
    }
    /**
     * Create filter dialog options
     *
     * @param  {Column} col - Filtering column detail.
     * @param  {Element} target -  Filter dialog target.
     * @param  {number} left -  Filter dialog left position.
     * @param  {number} top -  Filter dialog top position.
     * @returns {Object} returns the created dialog options
     * @hidden
     */
    createOptions(col, target, left, top) {
        const gObj = this.parent;
        const dataSource = col.filter.dataSource || gObj.dataSource && 'result' in gObj.dataSource ? gObj.dataSource :
            gObj.getDataModule().dataManager;
        const type = col.filter.type || this.parent.filterSettings.type;
        const options = {
            type: col.type, field: col.field, displayName: col.headerText,
            dataSource: dataSource, format: col.format, height: 800, columns: gObj.getColumns(),
            filteredColumns: gObj.filterSettings.columns, target: target, dataManager: gObj.getDataModule().dataManager,
            formatFn: col.getFormatter(), ignoreAccent: gObj.filterSettings.ignoreAccent,
            parserFn: col.getParser(), query: gObj.query, template: col.getFilterItemTemplate(),
            hideSearchbox: isNullOrUndefined(col.filter.hideSearchbox) ? false : col.filter.hideSearchbox,
            handler: this.filterHandler.bind(this), localizedStrings: gObj.getLocaleConstants(),
            position: { X: left, Y: top }, column: col, foreignKeyValue: col.foreignKeyValue,
            actualPredicate: this.actualPredicate, localeObj: gObj.localeObj,
            isRemote: gObj.getDataModule().isRemote(), allowCaseSensitive: this.filterSettings.enableCaseSensitivity,
            isResponsiveFilter: this.parent.enableAdaptiveUI,
            operator: this.actualPredicate[col.field] && type === 'Menu' ? this.actualPredicate[col.field][0].operator : 'equal'
        };
        return options;
    }
    /**
     * Removes filtered column by field name.
     *
     * @param  {string} field - Defines column field name to remove filter.
     * @param  {boolean} isClearFilterBar - Specifies whether the filter bar value needs to be cleared.
     * @returns {void}
     * @hidden
     */
    removeFilteredColsByField(field, isClearFilterBar) {
        let fCell;
        const cols = this.filterSettings.columns;
        if (isActionPrevent(this.parent)) {
            const args = { instance: this, handler: this.removeFilteredColsByField, arg1: field, arg2: isClearFilterBar };
            this.parent.notify(preventBatch, args);
            return;
        }
        const colUid = cols.map((f) => f.uid);
        const filteredColsUid = colUid.filter((item, pos) => colUid.indexOf(item) === pos);
        for (let i = 0, len = filteredColsUid.length; i < len; i++) {
            cols[i].uid = cols[i].uid || this.parent.getColumnByField(cols[i].field).uid;
            let len = cols.length;
            const column = this.parent.grabColumnByUidFromAllCols(filteredColsUid[i]);
            if (column.field === field || (column.field === column.foreignKeyValue && column.isForeignColumn())) {
                const currentPred = this.filterSettings.columns.filter((e) => {
                    return e.uid === column.uid;
                })[0];
                if (this.filterSettings.type === 'FilterBar' && !isClearFilterBar) {
                    const selector = '[id=\'' + column.field + '_filterBarcell\']';
                    fCell = this.parent.getHeaderContent().querySelector(selector);
                    if (fCell) {
                        fCell.value = '';
                        delete this.values[field];
                    }
                }
                while (len--) {
                    if (cols[len].uid === column.uid) {
                        cols.splice(len, 1);
                    }
                }
                const fltrElement = this.parent.getColumnHeaderByField(column.field);
                fltrElement.removeAttribute('aria-filtered');
                if (this.filterSettings.type !== 'FilterBar') {
                    const iconClass = this.parent.showColumnMenu && column.showColumnMenu ? '.e-columnmenu' : '.e-icon-filter';
                    fltrElement.querySelector(iconClass).classList.remove('e-filtered');
                }
                this.isRemove = true;
                if (this.actualPredicate[field]) {
                    delete this.actualPredicate[field];
                }
                if (this.values[field]) {
                    delete this.values[field];
                }
                if (this.refresh) {
                    this.parent.notify(modelChanged, {
                        requestType: 'filtering', type: actionBegin, currentFilterObject: currentPred,
                        currentFilterColumn: column, action: 'clearFilter'
                    });
                }
                break;
            }
        }
        this.updateFilterMsg();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'filter';
    }
    keyUpHandlerImmediate(e) {
        if (e.keyCode !== 13) {
            this.keyUpHandler(e);
        }
    }
    keyUpHandler(e) {
        const gObj = this.parent;
        const target = e.target;
        if (target && matches(target, '.e-filterbar input')) {
            const closeHeaderEle = closest(target, 'th.e-filterbarcell');
            this.column = gObj.getColumnByUid(closeHeaderEle.getAttribute('e-mappinguid'));
            if (!this.column) {
                return;
            }
            if (e.action === 'altDownArrow' && this.parent.filterSettings.showFilterBarOperator) {
                const dropDownListInput = closest(target, 'span').querySelector('.e-filterbaroperator');
                dropDownListInput.ej2_instances[0].showPopup();
                dropDownListInput.focus();
            }
            if ((this.filterSettings.mode === 'Immediate' || (e.keyCode === 13 &&
                !e.target.classList.contains('e-filterbaroperator')))
                && e.keyCode !== 9 && !this.column.filterTemplate) {
                this.value = target.value.trim();
                this.processFilter(e);
            }
        }
        if (e.action === 'altDownArrow' && this.filterSettings.type !== 'FilterBar') {
            const element = gObj.focusModule.currentInfo.element;
            if (element && element.classList.contains('e-headercell')) {
                const column = gObj.getColumnByUid(element.firstElementChild.getAttribute('e-mappinguid'));
                this.openMenuByField(column.field);
                this.parent.focusModule.clearIndicator();
            }
        }
        if (e.action === 'escape' && this.filterSettings.type === 'Menu' && this.filterModule) {
            this.filterModule.closeDialog();
            gObj.notify(restoreFocus, {});
        }
    }
    updateCrossIcon(element) {
        if (element.value.length) {
            element.nextElementSibling.classList.remove('e-hide');
        }
    }
    updateFilterMsg() {
        if (this.filterSettings.type === 'FilterBar') {
            const gObj = this.parent;
            let getFormatFlValue;
            const columns = this.filterSettings.columns;
            let column;
            if (!this.filterSettings.showFilterBarStatus) {
                return;
            }
            if (columns.length > 0 && this.filterStatusMsg !== this.l10n.getConstant('InvalidFilterMessage')) {
                this.filterStatusMsg = '';
                for (let index = 0; index < columns.length; index++) {
                    column = gObj.grabColumnByUidFromAllCols(columns[index].uid) || gObj.grabColumnByFieldFromAllCols(columns[index].field);
                    if (index) {
                        this.filterStatusMsg += ' && ';
                    }
                    if (!isNullOrUndefined(column.format)) {
                        const flValue = (column.type === 'date' || column.type === 'datetime') ?
                            this.valueFormatter.fromView(this.values[column.field], column.getParser(), column.type) :
                            this.values[column.field];
                        if (!(column.type === 'date' || column.type === 'datetime')) {
                            const formater = this.serviceLocator.getService('valueFormatter');
                            getFormatFlValue = formater.toView(flValue, column.getParser()).toString();
                        }
                        else {
                            getFormatFlValue = this.setFormatForFlColumn(flValue, column);
                        }
                        this.filterStatusMsg += column.headerText + ': ' + getFormatFlValue;
                    }
                    else {
                        this.filterStatusMsg += column.headerText + ': ' + this.values[column.field];
                    }
                }
            }
            if (gObj.allowPaging) {
                gObj.updateExternalMessage(this.filterStatusMsg);
            }
            //TODO: virtual paging
            this.filterStatusMsg = '';
        }
    }
    setFormatForFlColumn(value, column) {
        const formater = this.serviceLocator.getService('valueFormatter');
        return formater.toView(value, column.getFormatter()).toString();
    }
    checkForSkipInput(column, value) {
        let isSkip;
        if (column.type === 'number') {
            if (DataUtil.operatorSymbols[value] || this.skipNumberInput.indexOf(value) > -1) {
                isSkip = true;
            }
        }
        else if (column.type === 'string') {
            for (const val of value) {
                if (this.skipStringInput.indexOf(val) > -1) {
                    isSkip = true;
                }
            }
        }
        return isSkip;
    }
    processFilter(e) {
        this.stopTimer();
        this.startTimer(e);
    }
    startTimer(e) {
        this.timer = window.setInterval(() => { this.onTimerTick(); }, e.keyCode === 13 ? 0 : this.filterSettings.immediateModeDelay);
    }
    stopTimer() {
        window.clearInterval(this.timer);
    }
    onTimerTick() {
        const selector = '[id=\'' + this.column.field + '_filterBarcell\']';
        let filterElement = this.element.querySelector(selector);
        if (!filterElement && this.parent.isFrozenGrid()) {
            filterElement = this.parent.getHeaderContent().querySelector(selector);
        }
        let filterValue;
        this.cellText[this.column.field] = filterElement.value;
        this.stopTimer();
        if (!isNullOrUndefined(this.column.filterBarTemplate)) {
            let templateRead = this.column.filterBarTemplate.read;
            if (typeof templateRead === 'string') {
                templateRead = getValue(templateRead, window);
            }
            if (!isNullOrUndefined(templateRead)) {
                this.value = templateRead.call(this, filterElement);
            }
        }
        else {
            filterValue = JSON.parse(JSON.stringify(filterElement.value));
        }
        if (isNullOrUndefined(this.value) || this.value === '') {
            this.removeFilteredColsByField(this.column.field);
            return;
        }
        this.validateFilterValue(this.value);
        this.filterByMethod = false;
        this.filterByColumn(this.column.field, this.operator, this.value, this.predicate, this.filterSettings.enableCaseSensitivity, this.ignoreAccent);
        this.filterByMethod = true;
        filterElement.value = filterValue;
        this.updateFilterMsg();
    }
    validateFilterValue(value) {
        let skipInput;
        let index;
        this.matchCase = this.filterSettings.enableCaseSensitivity;
        switch (this.column.type) {
            case 'number':
                if (this.column.filter.operator) {
                    this.operator = this.column.filter.operator;
                }
                else {
                    this.operator = this.filterOperators.equal;
                }
                skipInput = ['>', '<', '=', '!'];
                for (let i = 0; i < value.length; i++) {
                    if (skipInput.indexOf(value[i]) > -1) {
                        index = i;
                        break;
                    }
                }
                this.getOperator(value.substring(index));
                if (index !== 0) {
                    this.value = value.substring(0, index);
                }
                if (this.value !== '' && value.length >= 1) {
                    this.value = this.valueFormatter.fromView(this.value, this.column.getParser(), this.column.type);
                }
                if (isNaN(this.value)) {
                    this.filterStatusMsg = this.l10n.getConstant('InvalidFilterMessage');
                }
                break;
            case 'date':
            case 'datetime':
                this.operator = this.filterOperators.equal;
                if (this.value !== '' && !(this.value instanceof Date)) {
                    this.getOperator(value);
                    this.value = this.valueFormatter.fromView(this.value, this.column.getParser(), this.column.type);
                    if (isNullOrUndefined(this.value)) {
                        this.filterStatusMsg = this.l10n.getConstant('InvalidFilterMessage');
                    }
                }
                break;
            case 'string':
                this.matchCase = false;
                if (value.charAt(0) === '*') {
                    this.value = this.value.slice(1);
                    this.operator = this.filterOperators.startsWith;
                }
                else if (value.charAt(value.length - 1) === '%') {
                    this.value = this.value.slice(0, -1);
                    this.operator = this.filterOperators.startsWith;
                }
                else if (value.charAt(0) === '%') {
                    this.value = this.value.slice(1);
                    this.operator = this.filterOperators.endsWith;
                }
                else {
                    if (this.column.filter.operator) {
                        this.operator = this.column.filter.operator;
                    }
                    else {
                        this.operator = this.filterOperators.startsWith;
                    }
                }
                break;
            case 'boolean':
                if (value.toLowerCase() === 'true' || value === '1') {
                    this.value = true;
                }
                else if (value.toLowerCase() === 'false' || value === '0') {
                    this.value = false;
                }
                else if (value.length) {
                    this.filterStatusMsg = this.l10n.getConstant('InvalidFilterMessage');
                }
                this.operator = this.filterOperators.equal;
                break;
            default:
                if (this.column.filter.operator) {
                    this.operator = this.column.filter.operator;
                }
                else {
                    this.operator = this.filterOperators.equal;
                }
        }
    }
    getOperator(value) {
        const singleOp = value.charAt(0);
        const multipleOp = value.slice(0, 2);
        const operators = extend({ '=': this.filterOperators.equal, '!': this.filterOperators.notEqual }, DataUtil.operatorSymbols);
        // eslint-disable-next-line no-prototype-builtins
        if (operators.hasOwnProperty(singleOp) || operators.hasOwnProperty(multipleOp)) {
            this.operator = operators[singleOp];
            this.value = value.substring(1);
            if (!this.operator) {
                this.operator = operators[multipleOp];
                this.value = value.substring(2);
            }
        }
        if (this.operator === this.filterOperators.lessThan || this.operator === this.filterOperators.greaterThan) {
            if (this.value.charAt(0) === '=') {
                this.operator = this.operator + 'orequal';
                this.value = this.value.substring(1);
            }
        }
    }
    columnPositionChanged() {
        if (this.parent.filterSettings.type !== 'FilterBar') {
            return;
        }
    }
    getLocalizedCustomOperators() {
        const numOptr = [
            { value: 'equal', text: this.l10n.getConstant('Equal') },
            { value: 'greaterthan', text: this.l10n.getConstant('GreaterThan') },
            { value: 'greaterthanorequal', text: this.l10n.getConstant('GreaterThanOrEqual') },
            { value: 'lessthan', text: this.l10n.getConstant('LessThan') },
            { value: 'lessthanorequal', text: this.l10n.getConstant('LessThanOrEqual') },
            { value: 'notequal', text: this.l10n.getConstant('NotEqual') }
        ];
        this.customOperators = {
            stringOperator: [
                { value: 'startswith', text: this.l10n.getConstant('StartsWith') },
                { value: 'endswith', text: this.l10n.getConstant('EndsWith') },
                { value: 'contains', text: this.l10n.getConstant('Contains') },
                { value: 'equal', text: this.l10n.getConstant('Equal') },
                { value: 'notequal', text: this.l10n.getConstant('NotEqual') }
            ],
            numberOperator: numOptr,
            dateOperator: numOptr,
            datetimeOperator: numOptr,
            booleanOperator: [
                { value: 'equal', text: this.l10n.getConstant('Equal') },
                { value: 'notequal', text: this.l10n.getConstant('NotEqual') }
            ]
        };
    }
    /**
     * @param {string} field - specifies the field name
     * @returns {void}
     * @hidden
     */
    openMenuByField(field) {
        const gObj = this.parent;
        if (gObj.enableAdaptiveUI) {
            this.showCustomFilter(false);
            return;
        }
        const column = gObj.getColumnByField(field);
        const header = gObj.getColumnHeaderByField(field);
        const target = header.querySelector('.e-filtermenudiv');
        if (!target) {
            return;
        }
        const gClient = gObj.element.getBoundingClientRect();
        const fClient = target.getBoundingClientRect();
        this.filterDialogOpen(column, target, fClient.right - gClient.left, fClient.bottom - gClient.top);
    }
    filterIconClickHandler(e) {
        const target = e.target;
        if (target.classList.contains('e-filtermenudiv') && (this.parent.filterSettings.type === 'Menu' ||
            this.parent.filterSettings.type === 'CheckBox' || this.parent.filterSettings.type === 'Excel')) {
            const gObj = this.parent;
            const col = gObj.getColumnByUid(parentsUntil(target, 'e-headercell').firstElementChild.getAttribute('e-mappinguid'));
            this.column = col;
            if (this.fltrDlgDetails.field === col.field && this.fltrDlgDetails.isOpen) {
                return;
            }
            if (this.filterModule) {
                this.filterModule.closeDialog();
            }
            this.fltrDlgDetails = { field: col.field, isOpen: true };
            this.openMenuByField(col.field);
        }
    }
    clickHandler(e) {
        if (this.filterSettings.type === 'FilterBar' && this.filterSettings.showFilterBarOperator) {
            if (parentsUntil(e.target, 'e-filterbarcell') &&
                e.target.classList.contains('e-input-group-icon')) {
                const filterOperatorElement = closest(e.target, 'div').
                    querySelector('.e-filterbaroperator');
                if (filterOperatorElement) {
                    filterOperatorElement.focus();
                }
                else {
                    e.target.focus();
                }
            }
            if (e.target.classList.contains('e-list-item')) {
                const inputId = document.querySelector('.e-popup-open').getAttribute('id').replace('_popup', '');
                if (inputId.indexOf('grid-column') !== -1) {
                    closest(document.getElementById(inputId), 'div').querySelector('.e-filtertext').focus();
                }
            }
        }
        if (this.filterSettings.mode === 'Immediate' || this.parent.filterSettings.type === 'Menu' ||
            this.parent.filterSettings.type === 'CheckBox' || this.parent.filterSettings.type === 'Excel') {
            const target = e.target;
            const datepickerEle = target.classList.contains('e-day'); // due to datepicker popup cause
            const dialog = parentsUntil(this.parent.element, 'e-dialog');
            let hasDialog = false;
            const popupEle = parentsUntil(target, 'e-popup');
            const hasDialogClosed = this.parent.element.querySelector('.e-filter-popup');
            if (dialog && popupEle) {
                hasDialog = dialog.id === popupEle.id;
            }
            if ((hasDialogClosed && (parentsUntil(target, 'e-excel-ascending') ||
                parentsUntil(target, 'e-excel-descending')))) {
                this.filterModule.closeDialog(target);
            }
            if (parentsUntil(target, 'e-filter-popup') || target.classList.contains('e-filtermenudiv')) {
                return;
            }
            else if (this.filterModule && (!parentsUntil(target, 'e-popup-wrapper')
                && (!closest(target, '.e-filter-item.e-menu-item'))) && !datepickerEle) {
                if ((hasDialog && (!parentsUntil(target, 'e-filter-popup'))
                    && (!parentsUntil(target, 'e-popup-flmenu'))) || (!popupEle && hasDialogClosed)) {
                    this.filterModule.isresetFocus = parentsUntil(target, 'e-grid') &&
                        parentsUntil(target, 'e-grid').id === this.parent.element.id;
                    this.filterModule.closeDialog(target);
                }
            }
        }
    }
    filterHandler(args) {
        this.actualPredicate[args.field] = args.actualPredicate;
        const dataManager = new DataManager(this.filterSettings.columns);
        const query = new Query().where('field', this.filterOperators.equal, args.field);
        const result = dataManager.executeLocal(query);
        for (let i = 0; i < result.length; i++) {
            let index = -1;
            for (let j = 0; j < this.filterSettings.columns.length; j++) {
                if (result[i].field === this.filterSettings.columns[j].field) {
                    index = j;
                    break;
                }
            }
            if (index !== -1) {
                this.filterSettings.columns.splice(index, 1);
            }
        }
        if (this.values[args.field]) {
            delete this.values[args.field];
        }
        const col = this.parent.getColumnByField(args.field);
        const iconClass = this.parent.showColumnMenu && col.showColumnMenu ? '.e-columnmenu' : '.e-icon-filter';
        const filterIconElement = this.parent.getColumnHeaderByField(args.field).querySelector(iconClass);
        if (args.action === 'filtering') {
            this.filterSettings.columns = this.filterSettings.columns.concat(args.filterCollection);
            if (this.filterSettings.columns.length && filterIconElement) {
                filterIconElement.classList.add('e-filtered');
            }
        }
        else {
            if (filterIconElement) {
                filterIconElement.classList.remove('e-filtered');
            }
            args.requestType = 'filtering';
            this.parent.renderModule.refresh(args); //hot-fix onpropertychanged not working for object { array }
        }
        this.parent.dataBind();
    }
    updateFilter() {
        const cols = this.filterSettings.columns;
        this.actualPredicate = {};
        for (let i = 0; i < cols.length; i++) {
            this.column = this.parent.getColumnByField(cols[i].field) ||
                getColumnByForeignKeyValue(cols[i].field, this.parent.getForeignKeyColumns());
            let fieldName = cols[i].field;
            if (!this.parent.getColumnByField(cols[i].field)) {
                fieldName = getColumnByForeignKeyValue(cols[i].field, this.parent.getForeignKeyColumns()).field;
            }
            this.refreshFilterIcon(fieldName, cols[i].operator, cols[i].value, cols[i].type, cols[i].predicate, cols[i].matchCase, cols[i].ignoreAccent, cols[i].uid);
        }
    }
    refreshFilterIcon(fieldName, operator, value, type, predicate, matchCase, ignoreAccent, uid) {
        const obj = {
            field: fieldName,
            predicate: predicate,
            matchCase: matchCase,
            ignoreAccent: ignoreAccent,
            operator: operator,
            value: value,
            type: type
        };
        if (this.actualPredicate[fieldName]) {
            this.actualPredicate[fieldName].push(obj);
        }
        else {
            this.actualPredicate[fieldName] = [obj];
        }
        const field = uid ? this.parent.grabColumnByUidFromAllCols(uid).field : fieldName;
        this.addFilteredClass(field);
    }
    addFilteredClass(fieldName) {
        let filterIconElement;
        const col = this.parent.getColumnByField(fieldName);
        if (this.parent.showColumnMenu && col.showColumnMenu) {
            filterIconElement = this.parent.getColumnHeaderByField(fieldName).querySelector('.e-columnmenu');
        }
        else if (col) {
            filterIconElement = this.parent.getColumnHeaderByField(fieldName).querySelector('.e-icon-filter');
        }
        if (filterIconElement) {
            filterIconElement.classList.add('e-filtered');
        }
    }
    /**
     * @hidden
     * @returns {FilterUI} returns the FilterUI
     */
    getFilterUIInfo() {
        return this.filterModule ? this.filterModule.getFilterUIInfo() : {};
    }
    /**
     * @param {string} field - specifies the field name
     * @returns {string} returns the operator name
     * @hidden
     */
    getOperatorName(field) {
        return document.getElementById(this.parent.getColumnByField(field).uid).ej2_instances[0].value;
    }
    /**
     * Renders checkbox items in Menu filter dialog.
     *
     * @returns {void}
     */
    renderCheckboxOnFilterMenu() {
        return this.filterModule.renderCheckBoxMenu();
    }
}

const resizeClassList = {
    root: 'e-rhandler',
    suppress: 'e-rsuppress',
    icon: 'e-ricon',
    helper: 'e-rhelper',
    header: 'th.e-headercell',
    cursor: 'e-rcursor'
};
/**
 * `Resize` module is used to handle Resize to fit for columns.
 *
 * @hidden
 * @private
 */
class Resize {
    /**
     * Constructor for the Grid resize module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @hidden
     */
    constructor(parent) {
        this.tapped = false;
        this.isDblClk = true;
        this.parent = parent;
        if (this.parent.isDestroyed) {
            return;
        }
        this.widthService = new ColumnWidthService(parent);
        this.addEventListener();
    }
    /**
     * Resize by field names.
     *
     * @param  {string|string[]} fName - Defines the field name.
     * @returns {void}
     */
    autoFitColumns(fName) {
        const columnName = (fName === undefined || fName === null || fName.length <= 0) ?
            this.parent.getColumns().map((x) => x.field) : (typeof fName === 'string') ? [fName] : fName;
        this.parent.isAutoFitColumns = true;
        this.findColumn(columnName);
    }
    autoFit() {
        const newarray = this.parent.getColumns().filter((c) => c.autoFit === true)
            .map((c) => c.field || c.headerText);
        if (newarray.length > 0) {
            this.autoFitColumns(newarray);
        }
        if (this.parent.resizeSettings.mode === 'Auto') {
            this.widthService.setWidthToTable();
        }
    }
    resizeColumn(fName, index, id) {
        const gObj = this.parent;
        let tWidth = 0;
        let headerTable;
        let contentTable;
        let footerTable;
        const headerDivTag = 'e-gridheader';
        const contentDivTag = gridContent;
        const footerDivTag = gridFooter;
        let indentWidth = 0;
        const uid = id ? id : this.parent.getUidByColumnField(fName);
        const columnIndex = this.parent.getNormalizedColumnIndex(uid);
        let headerTextClone;
        let contentTextClone;
        let footerTextClone;
        const columnIndexByField = this.parent.getColumnIndexByField(fName);
        const left = gObj.getFrozenColumns() || gObj.getFrozenLeftColumnsCount();
        const movable = gObj.getMovableColumnsCount();
        if (!isNullOrUndefined(gObj.getFooterContent())) {
            footerTable = gObj.getFooterContentTable();
        }
        if (gObj.isFrozenGrid()) {
            const col = gObj.getColumnByField(fName);
            if (col.getFreezeTableName() === frozenLeft) {
                headerTable = gObj.getHeaderTable();
                contentTable = gObj.getContentTable();
                headerTextClone = headerTable.querySelector('[e-mappinguid="' + uid + '"]').parentElement.cloneNode(true);
                contentTextClone = contentTable.querySelectorAll(`td:nth-child(${columnIndex + 1})`);
                if (footerTable) {
                    footerTextClone = footerTable.querySelectorAll(`td:nth-child(${columnIndex + 1})`);
                }
            }
            else if (col.getFreezeTableName() === 'movable') {
                headerTable = gObj.getHeaderContent().querySelector('.' + movableHeader).children[0];
                contentTable = gObj.getContent().querySelector('.' + movableContent).children[0];
                headerTextClone = headerTable.querySelector('[e-mappinguid="' + uid + '"]').parentElement.cloneNode(true);
                contentTextClone = contentTable.querySelectorAll(`td:nth-child(${(columnIndex - left) + 1})`);
                if (footerTable) {
                    footerTable = gObj.getFooterContent().querySelector('.e-movablefootercontent').children[0];
                    footerTextClone = footerTable.querySelectorAll(`td:nth-child(${(columnIndex - left) + 1})`);
                }
            }
            else if (col.getFreezeTableName() === frozenRight) {
                headerTable = gObj.getHeaderContent().querySelector('.e-frozen-right-header').children[0];
                contentTable = gObj.getContent().querySelector('.e-frozen-right-content').children[0];
                headerTextClone = headerTable.querySelector('[e-mappinguid="' + uid + '"]').parentElement.cloneNode(true);
                contentTextClone = contentTable.querySelectorAll(`td:nth-child(${(columnIndex - (left + movable)) + 1})`);
                if (footerTable) {
                    footerTable = gObj.getFooterContent().querySelector('.e-movablefootercontent').children[0];
                    footerTextClone = footerTable.querySelectorAll(`td:nth-child(${(columnIndex - (left + movable)) + 1})`);
                }
            }
        }
        else {
            headerTable = gObj.getHeaderTable();
            contentTable = gObj.getContentTable();
            headerTextClone = headerTable.querySelector('[e-mappinguid="' + uid + '"]').parentElement.cloneNode(true);
            contentTextClone = contentTable.querySelectorAll(`td:nth-child(${columnIndex + 1}):not(.e-groupcaption)`);
            if (footerTable) {
                footerTextClone = footerTable.querySelectorAll(`td:nth-child(${columnIndex + 1}):not(.e-groupcaption)`);
            }
        }
        const indentWidthClone = [].slice.call(headerTable.querySelector('tr').getElementsByClassName('e-grouptopleftcell'));
        if (indentWidthClone.length > 0) {
            for (let i = 0; i < indentWidthClone.length; i++) {
                indentWidth += indentWidthClone[i].offsetWidth;
            }
        }
        const detailsElement = contentTable.querySelector('.e-detailrowcollapse') ||
            contentTable.querySelector('.e-detailrowexpand');
        if ((this.parent.detailTemplate || this.parent.childGrid) && detailsElement) {
            indentWidth += detailsElement.offsetWidth;
        }
        const headerText = [headerTextClone];
        const contentText = [];
        const footerText = [];
        if (footerTable) {
            for (let i = 0; i < footerTextClone.length; i++) {
                footerText[i] = footerTextClone[i].cloneNode(true);
            }
        }
        for (let i = 0; i < contentTextClone.length; i++) {
            contentText[i] = contentTextClone[i].cloneNode(true);
        }
        const wHeader = this.createTable(headerTable, headerText, headerDivTag);
        let wFooter = null;
        let wContent = null;
        if (gObj.getCurrentViewRecords().length) {
            wContent = this.createTable(contentTable, contentText, contentDivTag);
        }
        if (footerText.length) {
            wFooter = this.createTable(footerTable, footerText, footerDivTag);
        }
        const columnbyindex = gObj.getColumns()[columnIndexByField];
        const width = columnbyindex.width = formatUnit(Math.max(wHeader, wContent, wFooter));
        const colMaxWidth = columnbyindex.maxWidth && parseFloat(columnbyindex.maxWidth.toString());
        if (parseInt(width, 10) > colMaxWidth) {
            columnbyindex.width = colMaxWidth;
        }
        this.widthService.setColumnWidth(gObj.getColumns()[columnIndexByField]);
        const result = gObj.getColumns().some((x) => x.width === null
            || x.width === undefined || x.width.length <= 0);
        if (result === false) {
            const element = gObj.getColumns();
            for (let i = 0; i < element.length; i++) {
                if (element[i].visible) {
                    tWidth = tWidth + parseFloat(element[i].width);
                }
            }
        }
        let calcTableWidth = tWidth + indentWidth;
        if (tWidth > 0 && !gObj.isFrozenGrid()) {
            if (this.parent.detailTemplate || this.parent.childGrid) {
                this.widthService.setColumnWidth(new Column({ width: '30px' }));
            }
            if (this.parent.resizeSettings.mode === 'Auto') {
                calcTableWidth = '100%';
            }
            headerTable.style.width = formatUnit(calcTableWidth);
            contentTable.style.width = formatUnit(calcTableWidth);
            if (!isNullOrUndefined(footerTable)) {
                footerTable.style.width = formatUnit(calcTableWidth);
            }
        }
        if (gObj.isFrozenGrid()) {
            this.widthService.refreshFrozenScrollbar();
        }
        const tableWidth = headerTable.offsetWidth;
        const contentwidth = (gObj.getContent().scrollWidth);
        if (contentwidth > tableWidth) {
            headerTable.classList.add('e-tableborder');
            contentTable.classList.add('e-tableborder');
        }
        else {
            headerTable.classList.remove('e-tableborder');
            contentTable.classList.remove('e-tableborder');
        }
        if (!isNullOrUndefined(footerTable)) {
            footerTable.classList.add('e-tableborder');
        }
    }
    /**
     * To destroy the resize
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        const gridElement = this.parent.element;
        if (!gridElement || (!gridElement.querySelector('.' + gridHeader) && !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        this.widthService = null;
        this.unwireEvents();
        this.removeEventListener();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'resize';
    }
    findColumn(fName) {
        for (let i = 0; i < fName.length; i++) {
            const fieldName = fName[i];
            const columnIndex = this.parent.getColumnIndexByField(fieldName);
            const column = this.parent.getColumns()[columnIndex];
            if (columnIndex > -1 && !isNullOrUndefined(column) && column.visible === true) {
                this.resizeColumn(fieldName, columnIndex);
            }
        }
    }
    /**
     * To create table for autofit
     *
     * @param {Element} table - specifies the table
     * @param {Element[]} text - specifies the text
     * @param {string} tag - specifies the tag name
     * @returns {number} returns the number
     * @hidden
     */
    createTable(table$$1, text, tag) {
        const myTableDiv = this.parent.createElement('div');
        myTableDiv.className = this.parent.element.className;
        myTableDiv.style.cssText = 'display: inline-block;visibility:hidden;position:absolute';
        const mySubDiv = this.parent.createElement('div');
        mySubDiv.className = tag;
        const myTable = this.parent.createElement('table', { attrs: { role: 'grid' } });
        myTable.className = table$$1.className;
        myTable.classList.add('e-resizetable');
        myTable.style.cssText = 'table-layout: auto;width: auto';
        const myTr = this.parent.createElement('tr', { attrs: { role: 'row' } });
        for (let i = 0; i < text.length; i++) {
            const tr = myTr.cloneNode();
            tr.className = table$$1.querySelector('tr').className;
            tr.appendChild(text[i]);
            myTable.appendChild(tr);
        }
        mySubDiv.appendChild(myTable);
        myTableDiv.appendChild(mySubDiv);
        document.body.appendChild(myTableDiv);
        const offsetWidthValue = myTable.getBoundingClientRect().width;
        document.body.removeChild(myTableDiv);
        return Math.ceil(offsetWidthValue);
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(headerRefreshed, this.refreshHeight, this);
        this.parent.on(initialEnd, this.wireEvents, this);
        this.parent.on(contentReady, this.autoFit, this);
        this.parent.on(refreshHandlers, this.refreshHeight, this);
        this.parent.on(destroy, this.destroy, this);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(headerRefreshed, this.refreshHeight);
        this.parent.off(initialEnd, this.wireEvents);
        this.parent.off(refreshHandlers, this.refreshHeight);
        this.parent.off(destroy, this.destroy);
    }
    /**
     * @returns {void}
     * @hidden
     */
    render() {
        this.unwireEvents();
        this.wireEvents();
        this.setHandlerHeight();
    }
    refreshHeight() {
        if (this.parent.getHeaderTable()) {
            const element = this.getResizeHandlers();
            for (let i = 0; i < element.length; i++) {
                if (element[i].parentElement.offsetHeight > 0) {
                    element[i].style.height = element[i].parentElement.offsetHeight + 'px';
                }
            }
            this.setHandlerHeight();
        }
    }
    wireEvents() {
        EventHandler.add(this.parent.getHeaderContent(), Browser.touchStartEvent, this.touchResizeStart, this);
        EventHandler.add(this.parent.getHeaderContent(), dblclick, this.callAutoFit, this);
    }
    unwireEvents() {
        EventHandler.remove(this.parent.getHeaderContent(), Browser.touchStartEvent, this.touchResizeStart);
        EventHandler.remove(this.parent.getHeaderContent(), dblclick, this.callAutoFit);
    }
    getResizeHandlers() {
        return this.parent.isFrozenGrid() ?
            [].slice.call(this.parent.getHeaderContent().getElementsByClassName(resizeClassList.root))
            : [].slice.call(this.parent.getHeaderTable().getElementsByClassName(resizeClassList.root));
    }
    setHandlerHeight() {
        const element = [].slice.call(this.parent.getHeaderTable().getElementsByClassName(resizeClassList.suppress));
        for (let i = 0; i < element.length; i++) {
            element[i].style.height = element[i].parentElement.offsetHeight + 'px';
        }
    }
    callAutoFit(e) {
        if (e.target.classList.contains('e-rhandler')) {
            const col = this.getTargetColumn(e);
            if (col.columns) {
                return;
            }
            this.resizeColumn(col.field, this.parent.getNormalizedColumnIndex(col.uid), col.uid);
            const header = closest(e.target, resizeClassList.header);
            header.classList.add('e-resized');
        }
    }
    touchResizeStart(e) {
        if (!Global.timer) {
            Global.timer = setTimeout(() => {
                Global.timer = null;
            }, 300);
            return this.resizeStart(e);
        }
        else {
            clearTimeout(Global.timer);
            Global.timer = null;
            this.callAutoFit(e);
        }
    }
    resizeStart(e) {
        if (e.target.classList.contains('e-rhandler')) {
            if (!this.helper) {
                if (this.getScrollBarWidth() === 0) {
                    if (this.parent.allowGrouping) {
                        for (let i = 0; i < this.parent.groupSettings.columns.length; i++) {
                            this.widthService.setColumnWidth(new Column({ width: '30px' }), i);
                        }
                    }
                    for (const col of this.refreshColumnWidth()) {
                        this.widthService.setColumnWidth(col);
                    }
                    this.widthService.setWidthToTable();
                }
                this.refreshStackedColumnWidth();
                this.element = e.target;
                if (this.parent.getVisibleFrozenColumns()) {
                    const mtbody = this.parent.getMovableContentTbody();
                    const ftbody = this.parent.getFrozenLeftContentTbody();
                    const frtbody = this.parent.getFrozenRightContentTbody();
                    const mtr = [].slice.call(mtbody.querySelectorAll('tr'));
                    const ftr = [].slice.call(ftbody.querySelectorAll('tr'));
                    let frTr = [];
                    if (this.parent.getFrozenMode() === leftRight && frtbody) {
                        frTr = [].slice.call(frtbody.querySelectorAll('tr'));
                    }
                    for (let i = 0; i < mtr.length; i++) {
                        gridActionHandler(this.parent, (tableName, row$$1) => {
                            if (this.parent.rowHeight) {
                                row$$1[i].style.height = this.parent.rowHeight + 'px';
                            }
                            else {
                                row$$1[i].style.removeProperty('height');
                            }
                        }, [ftr, mtr, frTr]);
                    }
                }
                this.parentElementWidth = this.parent.element.getBoundingClientRect().width;
                this.appendHelper();
                this.column = this.getTargetColumn(e);
                this.pageX = this.getPointX(e);
                if (this.column.getFreezeTableName() === frozenRight) {
                    if (this.parent.enableRtl) {
                        this.minMove = (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0)
                            - parseFloat(isNullOrUndefined(this.column.width) ? '' : this.column.width.toString());
                    }
                    else {
                        this.minMove = parseFloat(isNullOrUndefined(this.column.width) ? '' : this.column.width.toString())
                            - (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0);
                    }
                }
                else if (this.parent.enableRtl) {
                    this.minMove = parseFloat(this.column.width.toString())
                        - (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0);
                }
                else {
                    this.minMove = (this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 0)
                        - parseFloat(isNullOrUndefined(this.column.width) ? '' : this.column.width.toString());
                }
                this.minMove += this.pageX;
            }
            if (Browser.isDevice && !this.helper.classList.contains(resizeClassList.icon)) {
                this.helper.classList.add(resizeClassList.icon);
                EventHandler.add(document, Browser.touchStartEvent, this.removeHelper, this);
                EventHandler.add(this.helper, Browser.touchStartEvent, this.resizeStart, this);
            }
            else {
                const args = { e: e, column: this.column };
                this.parent.trigger(resizeStart, args, (args) => {
                    if (args.cancel || this.parent.isEdit) {
                        this.cancelResizeAction();
                        return;
                    }
                    EventHandler.add(document, Browser.touchEndEvent, this.resizeEnd, this);
                    EventHandler.add(this.parent.element, Browser.touchMoveEvent, this.resizing, this);
                    this.updateCursor('add');
                });
            }
        }
    }
    cancelResizeAction(removeEvents) {
        if (removeEvents) {
            EventHandler.remove(this.parent.element, Browser.touchMoveEvent, this.resizing);
            EventHandler.remove(document, Browser.touchEndEvent, this.resizeEnd);
            this.updateCursor('remove');
        }
        if (Browser.isDevice) {
            EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);
            EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);
        }
        detach(this.helper);
        this.refresh();
    }
    getWidth(width, minWidth, maxWidth) {
        if (minWidth && width < minWidth) {
            return minWidth;
        }
        else if ((maxWidth && width > maxWidth)) {
            return maxWidth;
        }
        else {
            return width;
        }
    }
    updateResizeEleHeight() {
        const elements = [].slice.call(this.parent.getHeaderContent().getElementsByClassName('e-rhandler'));
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.height = this.element.parentElement.offsetHeight + 'px';
        }
    }
    getColData(column, mousemove) {
        return {
            width: parseFloat(isNullOrUndefined(this.widthService.getWidth(column)) || this.widthService.getWidth(column) === 'auto' ? '0'
                : this.widthService.getWidth(column).toString()) + mousemove,
            minWidth: column.minWidth ? parseFloat(column.minWidth.toString()) : null,
            maxWidth: column.maxWidth ? parseFloat(column.maxWidth.toString()) : null
        };
    }
    resizing(e) {
        if (isNullOrUndefined(this.column)) {
            return;
        }
        let offsetWidth = 0;
        if (isNullOrUndefined(this.column)) {
            offsetWidth = parentsUntil(this.element, 'th').offsetWidth;
        }
        if (this.parent.allowTextWrap) {
            this.updateResizeEleHeight();
            this.setHelperHeight();
        }
        let pageX = this.getPointX(e);
        let mousemove = this.parent.enableRtl ? -(pageX - this.pageX) : (pageX - this.pageX);
        if (this.column.getFreezeTableName() === frozenRight) {
            mousemove = this.parent.enableRtl ? (pageX - this.pageX) : (this.pageX - pageX);
        }
        const colData = this.getColData(this.column, mousemove);
        if (!colData.width) {
            colData.width = closest(this.element, 'th').offsetWidth;
        }
        let width = this.getWidth(colData.width, colData.minWidth, colData.maxWidth);
        this.parent.log('resize_min_max', { column: this.column, width });
        if (this.column.getFreezeTableName() === frozenRight) {
            if ((this.parent.enableRtl && this.minMove >= pageX) || (!this.parent.enableRtl && this.minMove <= pageX)) {
                width = this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 10;
                this.pageX = pageX = this.minMove;
            }
        }
        if ((this.column.getFreezeTableName() !== frozenRight
            && ((!this.parent.enableRtl && this.minMove >= pageX) || (this.parent.enableRtl && this.minMove <= pageX)))
            || (this.column.getFreezeTableName() === frozenRight && ((this.parent.enableRtl && this.minMove >= pageX)
                || (!this.parent.enableRtl && this.minMove <= pageX)))) {
            width = this.column.minWidth ? parseFloat(this.column.minWidth.toString()) : 10;
            this.pageX = pageX = this.minMove;
        }
        if (width !== parseFloat(isNullOrUndefined(this.column.width) || this.column.width === 'auto' ?
            offsetWidth.toString() : this.column.width.toString())) {
            this.pageX = pageX;
            this.column.width = formatUnit(width);
            const args = {
                e: e,
                column: this.column
            };
            this.parent.trigger(onResize, args);
            if (args.cancel) {
                this.cancelResizeAction(true);
                return;
            }
            let columns = [this.column];
            let finalColumns = [this.column];
            if (this.column.columns) {
                columns = this.getSubColumns(this.column, []);
                columns = this.calulateColumnsWidth(columns, false, mousemove);
                finalColumns = this.calulateColumnsWidth(columns, true, mousemove);
            }
            for (const col of finalColumns) {
                this.widthService.setColumnWidth(col, null, 'resize');
            }
            this.updateHelper();
        }
        this.isDblClk = false;
    }
    calulateColumnsWidth(columns, isUpdate, mousemove) {
        const finalColumns = [];
        for (const col of columns) {
            let totalWidth = 0;
            for (let i = 0; i < columns.length; i++) {
                totalWidth += parseFloat(columns[i].width.toString());
            }
            const colData = this.getColData(col, (parseFloat(col.width)) * mousemove / totalWidth);
            const colWidth = this.getWidth(colData.width, colData.minWidth, colData.maxWidth);
            if ((colWidth !== parseFloat(col.width.toString()))) {
                if (isUpdate) {
                    col.width = formatUnit(colWidth < 1 ? 1 : colWidth);
                }
                finalColumns.push(col);
            }
        }
        return finalColumns;
    }
    getSubColumns(column, subColumns) {
        for (const col of column.columns) {
            if (col.visible !== false && col.allowResizing) {
                if (col.columns) {
                    this.getSubColumns(col, subColumns);
                }
                else {
                    subColumns.push(col);
                }
            }
        }
        return subColumns;
    }
    resizeEnd(e) {
        if (!this.helper || this.parent.isDestroyed) {
            return;
        }
        EventHandler.remove(this.parent.element, Browser.touchMoveEvent, this.resizing);
        EventHandler.remove(document, Browser.touchEndEvent, this.resizeEnd);
        this.updateCursor('remove');
        detach(this.helper);
        const args = { e: e, column: this.column };
        const content$$1 = this.parent.getContent().querySelector('.' + content);
        const cTable = content$$1.querySelector('.' + movableContent) ? content$$1.querySelector('.' + movableContent) : content$$1;
        if (cTable.scrollHeight > cTable.clientHeight) {
            this.parent.scrollModule.setPadding();
            cTable.style.overflowY = 'scroll';
        }
        this.parent.trigger(resizeStop, args);
        closest(this.element, '.e-headercell').classList.add('e-resized');
        if (parentsUntil(this.element, 'e-frozenheader')) {
            this.isFrozenColResized = true;
        }
        else {
            this.isFrozenColResized = false;
        }
        if (this.parent.isFrozenGrid()) {
            this.parent.notify(freezeRender, { case: 'textwrap' });
        }
        if (this.parent.allowTextWrap) {
            this.updateResizeEleHeight();
            this.parent.notify(textWrapRefresh, { case: 'textwrap' });
        }
        this.refresh();
        this.doubleTapEvent(e);
        this.isDblClk = true;
    }
    getPointX(e) {
        if (e.touches && e.touches.length) {
            return e.touches[0].pageX;
        }
        else {
            return e.pageX;
        }
    }
    refreshColumnWidth() {
        const columns = this.parent.getColumns();
        for (const ele of [].slice.apply(this.parent.getHeaderContent().querySelectorAll('th.e-headercell'))) {
            for (const column of columns) {
                if (ele.querySelector('[e-mappinguid]') &&
                    ele.querySelector('[e-mappinguid]').getAttribute('e-mappinguid') === column.uid && column.visible) {
                    column.width = ele.getBoundingClientRect().width;
                    break;
                }
            }
        }
        return columns;
    }
    refreshStackedColumnWidth() {
        for (const stackedColumn of this.parent.getStackedColumns(this.parent.columns)) {
            stackedColumn.width = this.getStackedWidth(stackedColumn, 0);
        }
    }
    getStackedWidth(column, width) {
        for (const col of column.columns) {
            if (col.visible !== false) {
                if (col.columns) {
                    this.getStackedWidth(col, width);
                }
                else {
                    width += col.width;
                }
            }
        }
        return width;
    }
    getTargetColumn(e) {
        let cell = closest(e.target, resizeClassList.header);
        cell = cell.querySelector('.e-headercelldiv') || cell.querySelector('.e-stackedheadercelldiv');
        const uid = cell.getAttribute('e-mappinguid');
        return this.parent.getColumnByUid(uid);
    }
    updateCursor(action) {
        const headerRows = [].slice.call(this.parent.getHeaderContent().querySelectorAll('th'));
        headerRows.push(this.parent.element);
        for (const row$$1 of headerRows) {
            row$$1.classList[action](resizeClassList.cursor);
        }
    }
    refresh() {
        this.column = null;
        this.pageX = null;
        this.element = null;
        this.helper = null;
    }
    appendHelper() {
        this.helper = this.parent.createElement('div', {
            className: resizeClassList.helper
        });
        this.parent.element.appendChild(this.helper);
        this.setHelperHeight();
    }
    setHelperHeight() {
        const isFrozen = this.parent.isFrozenGrid();
        let height = isFrozen ? this.parent.getContent().querySelector('.' + content).offsetHeight
            : this.parent.getContent().offsetHeight - this.getScrollBarWidth();
        const rect = closest(this.element, resizeClassList.header);
        let tr = [].slice.call(this.parent.getHeaderContent().querySelectorAll('tr'));
        const right = this.parent.getFrozenRightColumnsCount();
        if (isFrozen) {
            if (parentsUntil(rect, movableHeader)) {
                tr = [].slice.call(this.parent.getHeaderContent().querySelector('.' + movableHeader).querySelectorAll('tr'));
            }
            else if (right && parentsUntil(rect, 'e-frozen-right-header')) {
                tr = [].slice.call(this.parent.getHeaderContent().querySelector('.e-frozen-right-header').querySelectorAll('tr'));
            }
            else {
                tr = [].slice.call(this.parent.getHeaderContent().querySelector('.e-frozen-left-header').querySelectorAll('tr'));
            }
        }
        for (let i = tr.indexOf(rect.parentElement); i < tr.length && i > -1; i++) {
            height += tr[i].offsetHeight;
        }
        const pos = this.calcPos(rect);
        if (parentsUntil(rect, 'e-frozen-right-header')) {
            pos.left += (this.parent.enableRtl ? rect.offsetWidth - 2 : 0 - 1);
        }
        else {
            pos.left += (this.parent.enableRtl ? 0 - 1 : rect.offsetWidth - 2);
        }
        this.helper.style.cssText = 'height: ' + height + 'px; top: ' + pos.top + 'px; left:' + Math.floor(pos.left) + 'px;';
        if (this.parent.enableVirtualization) {
            this.helper.classList.add('e-virtual-rhandler');
        }
    }
    getScrollBarWidth(height) {
        const ele = this.parent.getContent().firstChild;
        return (ele.scrollHeight > ele.clientHeight && height) ||
            ele.scrollWidth > ele.clientWidth ? getScrollBarWidth() : 0;
    }
    removeHelper(e) {
        const cls = e.target.classList;
        if (!(cls.contains(resizeClassList.root) || cls.contains(resizeClassList.icon)) && this.helper) {
            EventHandler.remove(document, Browser.touchStartEvent, this.removeHelper);
            EventHandler.remove(this.helper, Browser.touchStartEvent, this.resizeStart);
            detach(this.helper);
            this.refresh();
        }
    }
    updateHelper() {
        const rect = closest(this.element, resizeClassList.header);
        let left;
        if (parentsUntil(rect, 'e-frozen-right-header')) {
            left = Math.floor(this.calcPos(rect).left + (this.parent.enableRtl ? rect.offsetWidth - 2 : 0 - 1));
        }
        else {
            left = Math.floor(this.calcPos(rect).left + (this.parent.enableRtl ? 0 - 1 : rect.offsetWidth - 2));
        }
        const borderWidth = 2; // to maintain the helper inside of grid element.
        if (left > this.parentElementWidth) {
            left = this.parentElementWidth - borderWidth;
        }
        if (this.parent.isFrozenGrid()) {
            const table$$1 = closest(rect, '.' + table);
            const fLeft = table$$1.offsetLeft;
            if (left < fLeft) {
                left = fLeft;
            }
        }
        this.helper.style.left = left + 'px';
    }
    calcPos(elem) {
        let parentOffset = {
            top: 0,
            left: 0
        };
        const offset = elem.getBoundingClientRect();
        const doc = elem.ownerDocument;
        let offsetParent = parentsUntil(elem, 'e-grid') || doc.documentElement;
        while (offsetParent &&
            (offsetParent === doc.body || offsetParent === doc.documentElement) &&
            offsetParent.style.position === 'static') {
            offsetParent = offsetParent.parentNode;
        }
        if (offsetParent && offsetParent !== elem && offsetParent.nodeType === 1) {
            parentOffset = offsetParent.getBoundingClientRect();
        }
        return {
            top: offset.top - parentOffset.top,
            left: offset.left - parentOffset.left
        };
    }
    doubleTapEvent(e) {
        if (this.getUserAgent() && this.isDblClk) {
            if (!this.tapped) {
                this.tapped = setTimeout(() => {
                    this.tapped = null;
                }, 300);
            }
            else {
                clearTimeout(this.tapped);
                this.callAutoFit(e);
                this.tapped = null;
            }
        }
    }
    getUserAgent() {
        const userAgent = Browser.userAgent.toLowerCase();
        return /iphone|ipod|ipad/.test(userAgent);
    }
    timeoutHandler() {
        this.tapped = null;
    }
}

/**
 *
 * The `Reorder` module is used for reordering columns.
 */
class Reorder {
    /**
     * Constructor for the Grid reorder module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @hidden
     */
    constructor(parent) {
        this.parent = parent;
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(headerDrop, this.headerDrop, this);
        this.parent.on(uiUpdate, this.enableAfterRender, this);
        this.parent.on(reorderComplete, this.onActionComplete, this);
        this.parent.on(columnDrag, this.drag, this);
        this.parent.on(columnDragStart, this.dragStart, this);
        this.parent.on(columnDragStop, this.dragStop, this);
        this.parent.on(headerDrop, this.headerDrop, this);
        this.parent.on(headerRefreshed, this.createReorderElement, this);
        this.parent.on(keyPressed, this.keyPressHandler, this);
        this.parent.on(destroy, this.destroy, this);
    }
    chkDropPosition(srcElem, destElem) {
        const col = this.parent.getColumnByUid(destElem.firstElementChild.getAttribute('e-mappinguid'));
        const bool = col ? !col.lockColumn : true;
        return ((srcElem.parentElement.isEqualNode(destElem.parentElement) || this.parent.enableColumnVirtualization)
            || (this.parent.isFrozenGrid()
                && Array.prototype.indexOf.call(closest(srcElem, 'thead').children, srcElem.parentElement)
                    === Array.prototype.indexOf.call(closest(destElem, 'thead').children, destElem.parentElement)))
            && this.targetParentContainerIndex(srcElem, destElem) > -1 && bool;
    }
    chkDropAllCols(srcElem, destElem) {
        let isFound;
        const headers = this.getHeaderCells();
        let header;
        while (!isFound && headers.length > 0) {
            header = headers.pop();
            isFound = srcElem !== header && this.targetParentContainerIndex(srcElem, destElem) > -1;
        }
        return isFound;
    }
    findColParent(col, cols, parent) {
        // eslint-disable-next-line no-self-assign
        parent = parent;
        for (let i = 0, len = cols.length; i < len; i++) {
            if (col === cols[i]) {
                return true;
            }
            else if (cols[i].columns) {
                const cnt = parent.length;
                parent.push(cols[i]);
                if (!this.findColParent(col, cols[i].columns, parent)) {
                    parent.splice(cnt, parent.length - cnt);
                }
                else {
                    return true;
                }
            }
        }
        return false;
    }
    getColumnsModel(cols) {
        let columnModel = [];
        let subCols = [];
        if (!this.parent.getFrozenColumns() && this.parent.isFrozenGrid()) {
            return this.parent.getColumns();
        }
        else {
            for (let i = 0, len = cols.length; i < len; i++) {
                columnModel.push(cols[i]);
                if (cols[i].columns) {
                    subCols = subCols.concat(cols[i].columns);
                }
            }
            if (subCols.length) {
                columnModel = columnModel.concat(this.getColumnsModel(subCols));
            }
        }
        return columnModel;
    }
    headerDrop(e) {
        const gObj = this.parent;
        const dropElement = this.element.querySelector('.e-headercelldiv') || this.element.querySelector('.e-stackedheadercelldiv');
        const uId = dropElement.getAttribute('e-mappinguid');
        const column = gObj.getColumnByUid(uId);
        if (!closest(e.target, 'th') || (!isNullOrUndefined(column) && (!column.allowReordering || column.lockColumn))) {
            this.parent.log('action_disabled_column', { moduleName: this.getModuleName(), column });
            return;
        }
        const destElem = closest(e.target, '.e-headercell');
        const destElemDiv = destElem.querySelector('.e-headercelldiv') || destElem.querySelector('.e-stackedheadercelldiv');
        const destElemUid = destElemDiv.getAttribute('e-mappinguid');
        if (!isNullOrUndefined(destElemUid)) {
            const destColumn = gObj.getColumnByUid(destElemUid);
            if (isNullOrUndefined(destColumn) || !destColumn.allowReordering || destColumn.lockColumn) {
                this.parent.log('action_disabled_column', { moduleName: this.getModuleName(), column, destColumn });
                return;
            }
        }
        if (destElem && !(!this.chkDropPosition(this.element, destElem) || !this.chkDropAllCols(this.element, destElem))) {
            if (this.parent.enableColumnVirtualization) {
                const columns = this.parent.columns;
                const sourceUid = this.element.querySelector('.e-headercelldiv').getAttribute('e-mappinguid');
                const col = this.parent.columns.filter((col) => col.uid === sourceUid);
                let colMatchIndex = null;
                const column = col[0];
                const destUid = destElem.querySelector('.e-headercelldiv').getAttribute('e-mappinguid');
                columns.some((col, index) => {
                    if (col.uid === destUid) {
                        colMatchIndex = index;
                        return col.uid === destUid;
                    }
                    return false;
                });
                if (!isNullOrUndefined(colMatchIndex)) {
                    this.moveColumns(colMatchIndex, column);
                }
            }
            else {
                const newIndex = this.targetParentContainerIndex(this.element, destElem);
                const uid = this.element.firstElementChild.getAttribute('e-mappinguid');
                this.destElement = destElem;
                this.parent.notify(setReorderDestinationElement, { ele: destElem });
                if (uid) {
                    this.moveColumns(newIndex, this.parent.getColumnByUid(uid));
                }
                else {
                    const headers = this.getHeaderCells();
                    const oldIdx = getElementIndex(this.element, headers);
                    const columns = this.getColumnsModel(this.parent.columns);
                    this.moveColumns(newIndex, columns[oldIdx]);
                }
            }
        }
    }
    isActionPrevent(gObj) {
        return isActionPrevent(gObj);
    }
    moveColumns(destIndex, column, reorderByColumn, preventRefresh) {
        const gObj = this.parent;
        if (this.isActionPrevent(gObj)) {
            gObj.notify(preventBatch, { instance: this, handler: this.moveColumns, arg1: destIndex, arg2: column });
            return;
        }
        const isFrozen = !gObj.getFrozenColumns() && gObj.isFrozenGrid();
        const parent = this.getColParent(column, this.parent.columns);
        const cols = parent ? parent.columns : isFrozen ? this.parent.getColumns() : this.parent.columns;
        let srcIdx = inArray(column, cols);
        if (((this.parent.isFrozenGrid() && parent) || this.parent.lockcolPositionCount) && !reorderByColumn &&
            !this.parent.enableColumnVirtualization) {
            for (let i = 0; i < cols.length; i++) {
                if (cols[i].field === column.field) {
                    srcIdx = i;
                    break;
                }
            }
            const col = this.parent.getColumnByUid(this.destElement.firstElementChild.getAttribute('e-mappinguid'));
            if (col) {
                for (let i = 0; i < cols.length; i++) {
                    if (cols[i].field === col.field) {
                        destIndex = i;
                        break;
                    }
                }
            }
            else {
                for (let i = 0; i < cols.length; i++) {
                    if (cols[i].headerText === this.destElement.innerText.trim()) {
                        destIndex = i;
                    }
                }
            }
        }
        if (!gObj.allowReordering || srcIdx === destIndex || srcIdx === -1 || destIndex === -1) {
            return;
        }
        cols.splice(destIndex, 0, cols.splice(srcIdx, 1)[0]);
        const args = { column: column, destIndex: destIndex, columns: cols, parent: parent, cancel: false };
        gObj.notify(refreshFrozenColumns, args);
        if (args.cancel) {
            return;
        }
        gObj.getColumns(true);
        gObj.notify(columnPositionChanged, { fromIndex: destIndex, toIndex: srcIdx });
        if (preventRefresh !== false) {
            gObj.notify(modelChanged, {
                type: actionBegin, requestType: 'reorder', fromIndex: destIndex, toIndex: srcIdx, toColumnUid: column.uid
            });
        }
    }
    targetParentContainerIndex(srcElem, destElem) {
        let cols = !this.parent.getFrozenColumns() && this.parent.isFrozenGrid() ? this.parent.getColumns() :
            this.parent.columns;
        const headers = this.getHeaderCells();
        const flatColumns = this.getColumnsModel(cols);
        const parent = this.getColParent(flatColumns[getElementIndex(srcElem, headers)], cols);
        cols = parent ? parent.columns : cols;
        return inArray(flatColumns[getElementIndex(destElem, headers)], cols);
    }
    getHeaderCells() {
        const frozenColumns = this.parent.getFrozenColumns();
        if (frozenColumns || this.parent.isFrozenGrid() || this.parent.lockcolPositionCount) {
            let fTh;
            let mTh;
            let fHeaders = [];
            const fRows = [].slice.call(this.parent.getHeaderTable().getElementsByClassName('e-columnheader'));
            if (frozenColumns || this.parent.isFrozenGrid()) {
                const mRows = [].slice.call(this.parent.getHeaderContent()
                    .querySelector('.' + movableHeader).getElementsByClassName('e-columnheader'));
                for (let i = 0; i < fRows.length; i++) {
                    fTh = [].slice.call(fRows[i].getElementsByClassName('e-headercell'));
                    mTh = [].slice.call(mRows[i].getElementsByClassName('e-headercell'));
                    let isAvail;
                    for (let k = 0; k < fTh.length; k++) {
                        for (let j = 0; j < mTh.length; j++) {
                            if (mTh[j].innerText === fTh[k].innerText) {
                                isAvail = true;
                                break;
                            }
                        }
                        if (!isAvail) {
                            fHeaders = fHeaders.concat([fTh[k]]);
                        }
                    }
                    for (let j = 0; j < mTh.length; j++) {
                        fHeaders.push(mTh[j]);
                    }
                }
                if (this.parent.getFrozenRightColumnsCount()) {
                    let frTh;
                    const frRows = [].slice.call(this.parent.getHeaderContent().querySelector('.e-frozen-right-header')
                        .getElementsByClassName('e-columnheader'));
                    frTh = [].slice.call(frRows[0].getElementsByClassName('e-headercell'));
                    for (let i = 0; i < frTh.length; i++) {
                        fHeaders.push(frTh[i]);
                    }
                }
            }
            else {
                for (let i = 0; i < fRows.length; i++) {
                    mTh = [].slice.call(fRows[i].getElementsByClassName('e-headercell'));
                    for (let k = 0; k < mTh.length; k++) {
                        let isAvail;
                        for (let j = k + 1; j < mTh.length; j++) {
                            if (mTh[j].innerText === mTh[k].innerText) {
                                isAvail = true;
                                break;
                            }
                        }
                        if (!isAvail) {
                            fHeaders = fHeaders.concat([mTh[k]]);
                        }
                    }
                }
            }
            return fHeaders;
        }
        else {
            return [].slice.call(this.parent.element.getElementsByClassName('e-headercell'));
        }
    }
    getColParent(column, columns) {
        const parents$$1 = [];
        this.findColParent(column, columns, parents$$1);
        return parents$$1[parents$$1.length - 1];
    }
    reorderSingleColumn(fromFName, toFName) {
        const fColumn = this.parent.enableColumnVirtualization ?
            this.parent.columns.filter((col) => col.field === fromFName)[0]
            : this.parent.getColumnByField(fromFName);
        const toColumn = this.parent.enableColumnVirtualization ?
            this.parent.columns.filter((col) => col.field === toFName)[0]
            : this.parent.getColumnByField(toFName);
        if ((!isNullOrUndefined(fColumn) && (!fColumn.allowReordering || fColumn.lockColumn)) ||
            (!isNullOrUndefined(toColumn) && (!toColumn.allowReordering || fColumn.lockColumn))) {
            this.parent.log('action_disabled_column', { moduleName: this.getModuleName(), column: fColumn, destColumn: toColumn });
            return;
        }
        const column = toColumn;
        const parent = this.getColParent(column, this.parent.columns);
        const columns = parent ? parent.columns : this.parent.columns;
        const destIndex = inArray(column, columns);
        if (destIndex > -1) {
            this.moveColumns(destIndex, fColumn, true);
        }
    }
    reorderMultipleColumns(fromFNames, toFName) {
        let toIndex = this.parent.getColumnIndexByField(toFName);
        const toColumn = this.parent.getColumnByField(toFName);
        if (toIndex < 0 || (!isNullOrUndefined(toColumn) && (!toColumn.allowReordering || toColumn.lockColumn))) {
            return;
        }
        for (let i = 0; i < fromFNames.length; i++) {
            const column = this.parent.getColumnByField(fromFNames[i]);
            if (!isNullOrUndefined(column) && (!column.allowReordering || column.lockColumn)) {
                return;
            }
        }
        for (let i = 0; i < fromFNames.length; i++) {
            const column = this.parent.getColumnByIndex(toIndex);
            const parent = this.getColParent(column, this.parent.columns);
            const columns = parent ? parent.columns : this.parent.columns;
            const destIndex = inArray(column, columns);
            if (destIndex > -1) {
                this.moveColumns(destIndex, this.parent.getColumnByField(fromFNames[i]), true, true);
            }
            if (this.parent.getColumnIndexByField(fromFNames[i + 1]) >= destIndex) {
                toIndex++; //R to L
            }
        }
    }
    moveTargetColumn(column, toIndex) {
        if (toIndex > -1) {
            this.moveColumns(toIndex, column, true);
        }
    }
    reorderSingleColumnByTarget(fieldName, toIndex) {
        this.moveTargetColumn(this.parent.getColumnByField(fieldName), toIndex);
    }
    reorderMultipleColumnByTarget(fieldName, toIndex) {
        for (let i = 0; i < fieldName.length; i++) {
            this.reorderSingleColumnByTarget(fieldName[i], toIndex);
        }
    }
    /**
     * Changes the position of the Grid columns by field names.
     *
     * @param  {string | string[]} fromFName - Defines the origin field names.
     * @param  {string} toFName - Defines the destination field name.
     * @returns {void}
     */
    reorderColumns(fromFName, toFName) {
        if (typeof fromFName === 'string') {
            this.reorderSingleColumn(fromFName, toFName);
            this.fromCol = fromFName;
        }
        else {
            this.reorderMultipleColumns(fromFName, toFName);
            this.fromCol = fromFName[0];
        }
    }
    /**
     * Changes the position of the Grid columns by field index.
     *
     * @param  {number} fromIndex - Defines the origin field index.
     * @param  {number} toIndex - Defines the destination field index.
     * @returns {void}
     */
    reorderColumnByIndex(fromIndex, toIndex) {
        this.moveTargetColumn(this.parent.getColumnByIndex(fromIndex), toIndex);
    }
    /**
     * Changes the position of the Grid columns by field index.
     *
     * @param  {string | string[]} fieldName - Defines the field name.
     * @param  {number} toIndex - Defines the destination field index.
     * @returns {void}
     */
    reorderColumnByTargetIndex(fieldName, toIndex) {
        if (typeof fieldName === 'string') {
            this.reorderSingleColumnByTarget(fieldName, toIndex);
        }
        else {
            this.reorderMultipleColumnByTarget(fieldName, toIndex);
        }
    }
    enableAfterRender(e) {
        if (e.module === this.getModuleName() && e.enable) {
            this.createReorderElement();
        }
    }
    createReorderElement(e) {
        if (e && e.args.isXaxis) {
            this.setDisplay('none');
        }
        const header = this.parent.element.querySelector('.' + headerContent);
        this.upArrow = header.appendChild(this.parent
            .createElement('div', { className: 'e-icons e-icon-reorderuparrow e-reorderuparrow', attrs: { style: 'display:none' } }));
        this.downArrow = header.appendChild(this.parent
            .createElement('div', { className: 'e-icons e-icon-reorderdownarrow e-reorderdownarrow', attrs: { style: 'display:none' } }));
    }
    /**
     * The function used to trigger onActionComplete
     *
     * @param {NotifyArgs} e - specified the NotifyArgs
     * @returns {void}
     * @hidden
     */
    onActionComplete(e) {
        this.parent.trigger(actionComplete, extend(e, { type: actionComplete }));
        const target = this.fromCol && this.parent.getColumnHeaderByField(this.fromCol);
        if (target) {
            this.parent.focusModule.onClick({ target }, true);
        }
    }
    /**
     * To destroy the reorder
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        const gridElement = this.parent.element;
        if (this.parent.isDestroyed || !gridElement || (!gridElement.querySelector('.' + gridHeader) &&
            !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        if (this.upArrow.parentNode) {
            remove(this.upArrow);
        }
        if (this.downArrow.parentNode) {
            remove(this.downArrow);
        }
        this.parent.off(headerDrop, this.headerDrop);
        this.parent.off(uiUpdate, this.enableAfterRender);
        this.parent.off(reorderComplete, this.onActionComplete);
        this.parent.off(columnDrag, this.drag);
        this.parent.off(columnDragStart, this.dragStart);
        this.parent.off(columnDragStop, this.dragStop);
        this.parent.off(headerRefreshed, this.createReorderElement);
        this.parent.off(keyPressed, this.keyPressHandler);
        this.parent.off(destroy, this.destroy);
        //call ejdrag and drop destroy
    }
    keyPressHandler(e) {
        const gObj = this.parent;
        switch (e.action) {
            case 'ctrlLeftArrow':
            case 'ctrlRightArrow':
                // eslint-disable-next-line no-case-declarations
                const element = gObj.focusModule.currentInfo.element;
                if (element && element.classList.contains('e-headercell')) {
                    const column = gObj.getColumnByUid(element.firstElementChild.getAttribute('e-mappinguid'));
                    const visibleCols = gObj.getVisibleColumns();
                    const index = visibleCols.indexOf(column);
                    const toCol = e.action === 'ctrlLeftArrow' ? visibleCols[index - 1] : visibleCols[index + 1];
                    if (toCol && toCol.field && column.field) {
                        this.reorderColumns(column.field, toCol.field);
                    }
                }
                break;
        }
    }
    drag(e) {
        const gObj = this.parent;
        let target = e.target;
        if (!e.column.allowReordering || e.column.lockColumn) {
            return;
        }
        const closest$$1 = closest(target, '.e-headercell:not(.e-stackedHeaderCell)');
        const cloneElement = gObj.element.querySelector('.e-cloneproperties');
        const content$$1 = gObj.isFrozenGrid() ? gObj.getMovableVirtualContent() : gObj.getContent().firstElementChild;
        const isLeft = this.x > getPosition(e.event).x + content$$1.scrollLeft;
        removeClass([].slice.call(gObj.getHeaderTable().getElementsByClassName('e-reorderindicate')), ['e-reorderindicate']);
        this.setDisplay('none');
        this.stopTimer();
        classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);
        this.updateScrollPostion(e.event);
        if (closest$$1 && !closest$$1.isEqualNode(this.element)) {
            target = closest$$1;
            //consider stacked, detail header cell
            if (!(!this.chkDropPosition(this.element, target) || !this.chkDropAllCols(this.element, target))) {
                this.updateArrowPosition(target, isLeft);
                classList(target, ['e-allowDrop', 'e-reorderindicate'], []);
            }
            else if (!(gObj.allowGrouping && parentsUntil(e.target, 'e-groupdroparea'))) {
                classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
            }
        }
        gObj.trigger(columnDrag, { target: target, draggableType: 'headercell', column: e.column });
    }
    updateScrollPostion(e) {
        const x = getPosition(e).x;
        const cliRect = this.parent.element.getBoundingClientRect();
        const cliRectBaseRight = cliRect.right;
        if (this.parent.isFrozenGrid()) {
            this.updateFrozenScrollPosition(x, cliRect);
        }
        else {
            const cliRectBaseLeft = cliRect.left;
            const scrollElem = this.parent.getContent().firstElementChild;
            if (x > cliRectBaseLeft && x < cliRectBaseLeft + 35) {
                this.timer = window.setInterval(() => { this.setScrollLeft(scrollElem, true); }, 50);
            }
            else if (x < cliRectBaseRight && x > cliRectBaseRight - 35) {
                this.timer = window.setInterval(() => { this.setScrollLeft(scrollElem, false); }, 50);
            }
        }
    }
    updateFrozenScrollPosition(x, cliRect) {
        const scrollElem = this.parent.getContent().querySelector('.' + movableContent);
        const mhdrCliRect = this.parent.element.querySelector('.' + movableHeader).getBoundingClientRect();
        const left = this.parent.getFrozenLeftCount();
        const right = this.parent.getFrozenRightColumnsCount();
        const cliRectBaseRight = right ? mhdrCliRect.right : cliRect.right;
        const cliRectBaseLeft = left ? mhdrCliRect.left : cliRect.left;
        if (x > cliRectBaseLeft && x < cliRectBaseLeft + 35) {
            this.timer = window.setInterval(() => { this.setScrollLeft(scrollElem, true); }, 50);
        }
        else if (x < cliRectBaseRight && x > cliRectBaseRight - 35) {
            this.timer = window.setInterval(() => { this.setScrollLeft(scrollElem, false); }, 50);
        }
    }
    setScrollLeft(scrollElem, isLeft) {
        const scrollLeft = scrollElem.scrollLeft;
        scrollElem.scrollLeft = scrollElem.scrollLeft + (isLeft ? -5 : 5);
        if (scrollLeft !== scrollElem.scrollLeft) {
            this.setDisplay('none');
        }
    }
    stopTimer() {
        window.clearInterval(this.timer);
    }
    updateArrowPosition(target, isLeft) {
        const cliRect = target.getBoundingClientRect();
        const cliRectBase = this.parent.element.getBoundingClientRect();
        if ((isLeft && cliRect.left < cliRectBase.left) || (!isLeft && cliRect.right > cliRectBase.right)) {
            return;
        }
        if (this.parent.isFrozenGrid() && target.classList.contains('e-headercell')) {
            const left = this.parent.getFrozenLeftCount();
            const right = this.parent.getFrozenRightColumnsCount();
            const dropEle = this.element.querySelector('.e-headercelldiv');
            const dropCol = dropEle ? this.parent.getColumnByUid(dropEle.getAttribute('data-uid')) : null;
            const col = this.parent.getColumnByUid(target.firstElementChild.getAttribute('e-mappinguid'));
            const fhdrWidth = Math.round(this.parent.getFrozenVirtualHeader().getBoundingClientRect().right);
            const mhdrRight = Math.round(this.parent.getMovableVirtualHeader().getBoundingClientRect().right);
            if (col) {
                if (left && !right && this.parent.getNormalizedColumnIndex(col.uid) >= left
                    && ((isLeft && Math.round(cliRect.left) < fhdrWidth) || (!isLeft && mhdrRight < cliRect.right))) {
                    return;
                }
                if (!left && right && dropCol && dropCol.getFreezeTableName() !== col.getFreezeTableName()
                    && (!isLeft && Math.round(cliRect.right) < fhdrWidth)) {
                    return;
                }
            }
        }
        let isSticky = this.parent.getHeaderContent().classList.contains('e-sticky');
        this.upArrow.style.top = isSticky ? cliRect.top + cliRect.height + 'px' : cliRect.top + cliRect.height - cliRectBase.top + 'px';
        this.downArrow.style.top = isSticky ? cliRect.top - 7 + 'px' : cliRect.top - cliRectBase.top - 7 + 'px';
        this.upArrow.style.left = this.downArrow.style.left = isSticky ? (isLeft ? cliRect.left : cliRect.right) - 4 + 'px' :
            (isLeft ? cliRect.left : cliRect.right) - cliRectBase.left - 4 + 'px';
        this.setDisplay('');
    }
    dragStart(e) {
        const gObj = this.parent;
        const target = e.target;
        this.element = target.classList.contains('e-headercell') ? target :
            parentsUntil(target, 'e-headercell');
        if (!e.column.allowReordering || e.column.lockColumn) {
            return;
        }
        const content$$1 = gObj.isFrozenGrid() ? gObj.getMovableVirtualContent() : gObj.getContent().firstElementChild;
        this.x = getPosition(e.event).x + content$$1.scrollLeft;
        gObj.trigger(columnDragStart, {
            target: target, draggableType: 'headercell', column: e.column
        });
    }
    dragStop(e) {
        const gObj = this.parent;
        this.setDisplay('none');
        this.stopTimer();
        if (!e.cancel) {
            gObj.trigger(columnDrop, { target: e.target, draggableType: 'headercell', column: e.column });
        }
        removeClass([].slice.call(gObj.getHeaderTable().getElementsByClassName('e-reorderindicate')), ['e-reorderindicate']);
    }
    setDisplay(display) {
        this.upArrow.style.display = display;
        this.downArrow.style.display = display;
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} return the module name
     * @private
     */
    getModuleName() {
        return 'reorder';
    }
}

// eslint-disable-next-line valid-jsdoc
/**
 *
 * Reorder module is used to handle row reordering.
 *
 * @hidden
 */
class RowDD {
    /**
     * Constructor for the Grid print module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @hidden
     */
    constructor(parent) {
        this.selectedRows = [];
        this.isOverflowBorder = true;
        this.selectedRowColls = [];
        this.isRefresh = true;
        this.isReplaceDragEle = true;
        this.istargetGrid = false;
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.helper = (e) => {
            const gObj = this.parent;
            const target = this.draggable.currentStateTarget;
            const visualElement = this.parent.createElement('div', {
                className: 'e-cloneproperties e-draganddrop e-grid e-dragclone',
                styles: 'height:"auto", z-index:2, width:' + gObj.element.offsetWidth
            });
            const table$$1 = this.parent.createElement('table', { styles: 'width:' + gObj.element.offsetWidth, attrs: { role: 'grid' } });
            const tbody$$1 = this.parent.createElement(tbody, { attrs: { role: 'rowgroup' } });
            if (document.getElementsByClassName('e-griddragarea').length ||
                (gObj.rowDropSettings.targetID && ((!target.classList.contains('e-selectionbackground')
                    && gObj.selectionSettings.type !== 'Single') || !parentsUntil(target, 'e-rowcell'))) ||
                (!gObj.rowDropSettings.targetID && !parentsUntil(target, 'e-rowdragdrop'))) {
                return false;
            }
            if (gObj.rowDropSettings.targetID &&
                gObj.selectionSettings.mode === 'Row' && gObj.selectionSettings.type === 'Single') {
                gObj.selectRow(parseInt(this.draggable.currentStateTarget.parentElement.getAttribute(ariaRowIndex), 10));
            }
            this.startedRow = closest(target, 'tr').cloneNode(true);
            const frzCols = this.parent.isFrozenGrid();
            if (frzCols) {
                const rowIndex = parseInt(closest(target, 'tr').getAttribute(ariaRowIndex), 10);
                this.startedRow.innerHTML = '';
                this.startedRow.innerHTML += gObj.getRowByIndex(rowIndex).innerHTML;
                this.startedRow.innerHTML += gObj.getMovableRowByIndex(rowIndex).innerHTML;
                if (gObj.getFrozenMode() === leftRight) {
                    this.startedRow.innerHTML += gObj.getFrozenRightRowByIndex(rowIndex).innerHTML;
                }
            }
            this.processArgs(target);
            const args = {
                selectedRow: this.rows, dragelement: target,
                cloneElement: visualElement, cancel: false, data: this.rowData
            };
            const selectedRows = gObj.getSelectedRows();
            gObj.trigger(rowDragStartHelper, args);
            const cancel = 'cancel';
            if (args[cancel]) {
                return false;
            }
            removeElement(this.startedRow, '.e-indentcell');
            removeElement(this.startedRow, '.e-detailrowcollapse');
            removeElement(this.startedRow, '.e-detailrowexpand');
            this.removeCell(this.startedRow, gridChkBox);
            const exp = new RegExp('e-active', 'g'); //high contrast issue
            this.startedRow.innerHTML = this.startedRow.innerHTML.replace(exp, '');
            tbody$$1.appendChild(this.startedRow);
            if (gObj.getSelectedRowIndexes().length > 1 && this.startedRow.hasAttribute('aria-selected')) {
                const index = gObj.getFrozenMode() === leftRight ? 3 : 2;
                const dropCountEle = this.parent.createElement('span', {
                    className: 'e-dropitemscount', innerHTML: frzCols ? '' + selectedRows.length / index : '' + selectedRows.length
                });
                visualElement.appendChild(dropCountEle);
            }
            const ele = closest(target, 'tr').querySelector('.e-icon-rowdragicon');
            if (ele) {
                ele.classList.add('e-dragstartrow');
            }
            table$$1.appendChild(tbody$$1);
            visualElement.appendChild(table$$1);
            gObj.element.appendChild(visualElement);
            return visualElement;
        };
        this.dragStart = (e) => {
            const gObj = this.parent;
            document.body.classList.add('e-prevent-select');
            if (document.getElementsByClassName('e-griddragarea').length) {
                return;
            }
            const target = e.target;
            const spanCssEle = this.parent.element.querySelector('.e-dropitemscount');
            if (this.parent.getSelectedRecords().length > 1 && spanCssEle) {
                spanCssEle.style.left = this.parent.element.querySelector('.e-cloneproperties table')
                    .offsetWidth - 5 + 'px';
            }
            this.processArgs(target);
            gObj.trigger(rowDragStart, {
                rows: this.rows, target: e.target,
                draggableType: 'rows', fromIndex: parseInt(this.rows[0].getAttribute(ariaRowIndex), 10),
                data: (Object.keys(this.rowData[0]).length > 0) ? this.rowData : this.currentViewData()
            });
            this.dragStartData = this.rowData;
            const dropElem = document.getElementById(gObj.rowDropSettings.targetID);
            if (gObj.rowDropSettings.targetID && dropElem && dropElem.ej2_instances &&
                dropElem.ej2_instances[0].getModuleName() === 'grid') {
                dropElem.ej2_instances[0].getContent().classList.add('e-allowRowDrop');
            }
        };
        this.drag = (e) => {
            const gObj = this.parent;
            this.isDropGrid = this.parent;
            this.istargetGrid = false;
            if (this.parent.rowDropSettings.targetID) {
                const dropElement = document.getElementById(gObj.rowDropSettings.targetID);
                this.isDropGrid = dropElement.ej2_instances[0];
                if (parentsUntil(e.target, 'e-grid')) {
                    this.istargetGrid = this.parent.rowDropSettings.targetID === parentsUntil(e.target, 'e-grid').id;
                }
            }
            const cloneElement = this.parent.element.querySelector('.e-cloneproperties');
            const target = this.getElementFromPosition(cloneElement, e.event);
            classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur', 'e-movecur', 'e-grabcur']);
            this.isOverflowBorder = true;
            this.hoverState = gObj.enableHover;
            const trElement = parentsUntil(target, 'e-grid') ? closest(e.target, 'tr') : null;
            if (!e.target) {
                return;
            }
            this.processArgs(target);
            const args = {
                rows: this.rows, target: target, draggableType: 'rows',
                data: this.rowData, originalEvent: e, cancel: false
            };
            gObj.trigger(rowDrag, args);
            this.stopTimer();
            if (args.cancel) {
                return;
            }
            gObj.element.classList.add('e-rowdrag');
            this.dragTarget = trElement && parentsUntil(target, 'e-grid').id === cloneElement.parentElement.id ?
                parseInt(trElement.getAttribute(ariaRowIndex), 10) : parseInt(this.startedRow.getAttribute(ariaRowIndex), 10);
            if (gObj.rowDropSettings.targetID) {
                if (!parentsUntil(target, 'e-grid') ||
                    parentsUntil(cloneElement.parentElement, 'e-grid').id === parentsUntil(target, 'e-grid').id) {
                    classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
                }
                else {
                    classList(cloneElement, ['e-grabcur'], ['e-notallowedcur']);
                }
            }
            else {
                const elem = parentsUntil(target, 'e-grid');
                if (elem && elem.id === cloneElement.parentElement.id) {
                    classList(cloneElement, ['e-movecur'], ['e-defaultcur']);
                }
                else {
                    classList(cloneElement, ['e-notallowedcur'], ['e-movecur']);
                }
            }
            if (parentsUntil(this.isDropGrid.element, 'e-grid')) {
                if ((!this.isDropGrid.groupSettings.columns.length || e.target.classList.contains('e-selectionbackground')) &&
                    !this.isDropGrid.element.querySelector('.e-emptyrow')) {
                    if (parentsUntil(target, 'e-grid') && parentsUntil(target, 'e-grid').id === this.isDropGrid.element.id) {
                        this.updateScrollPostion(e.event);
                    }
                    if (((this.isOverflowBorder || this.parent.frozenRows > this.dragTarget) &&
                        (parseInt(this.startedRow.getAttribute(ariaRowIndex), 10) !== this.dragTarget || this.istargetGrid))
                        || (this.istargetGrid && trElement && this.isDropGrid.getRowByIndex(this.isDropGrid.getCurrentViewRecords().length - 1).
                            getAttribute('data-uid') === trElement.getAttribute('data-uid'))) {
                        this.moveDragRows(e, this.startedRow, trElement);
                    }
                    else {
                        let islastRowIndex;
                        if (this.parent.enableVirtualization) {
                            islastRowIndex = trElement && parseInt(trElement.getAttribute(ariaRowIndex), 10) ===
                                this.parent.renderModule.data.dataManager.dataSource.json.length - 1;
                        }
                        else {
                            const lastRowUid = this.parent.getRowByIndex(this.parent.getCurrentViewRecords().length - 1).
                                getAttribute('data-uid');
                            islastRowIndex = trElement && lastRowUid === trElement.getAttribute('data-uid') && lastRowUid !==
                                this.startedRow.getAttribute('data-uid');
                        }
                        if (islastRowIndex && !this.parent.rowDropSettings.targetID) {
                            const bottomborder = this.parent.createElement('div', { className: 'e-lastrow-dragborder' });
                            const gridcontentEle = this.parent.getContent();
                            bottomborder.style.width = this.parent.element.offsetWidth - this.getScrollWidth() + 'px';
                            if (this.parent.enableVirtualization) {
                                bottomborder.style.zIndex = '1';
                            }
                            if (!gridcontentEle.getElementsByClassName('e-lastrow-dragborder').length) {
                                gridcontentEle.classList.add('e-grid-relative');
                                gridcontentEle.appendChild(bottomborder);
                                bottomborder.style.bottom = this.getScrollWidth() + 'px';
                            }
                        }
                        this.removeBorder(trElement);
                    }
                }
                if (target && target.classList.contains(content)
                    && !this.isDropGrid.element.querySelector('.e-emptyrow') && this.istargetGrid) {
                    this.removeBorder(trElement);
                    const rowIndex = this.isDropGrid.getCurrentViewRecords().length - 1;
                    const selector = '.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse';
                    let rowElement = [];
                    rowElement = [].slice.call(this.isDropGrid.getRowByIndex(rowIndex).querySelectorAll(selector));
                    if (this.isDropGrid.isFrozenGrid()) {
                        rowElement = this.borderRowElement(rowIndex, selector);
                    }
                    if (rowElement.length > 0) {
                        addRemoveActiveClasses(rowElement, true, 'e-dragborder');
                    }
                }
            }
        };
        this.dragStop = (e) => {
            document.body.classList.remove('e-prevent-select');
            if (isActionPrevent(this.parent)) {
                this.parent.notify(preventBatch, {
                    instance: this, handler: this.processDragStop, arg1: e
                });
            }
            else {
                this.processDragStop(e);
            }
        };
        this.processDragStop = (e) => {
            const gObj = this.parent;
            if (this.parent.isDestroyed) {
                return;
            }
            const targetEle = this.getElementFromPosition(e.helper, e.event);
            const target = targetEle && !targetEle.classList.contains('e-dlg-overlay') ?
                targetEle : e.target;
            gObj.element.classList.remove('e-rowdrag');
            const dropElement = document.getElementById(gObj.rowDropSettings.targetID);
            if (gObj.rowDropSettings.targetID && dropElement && dropElement.ej2_instances &&
                dropElement.ej2_instances[0].getModuleName() === 'grid') {
                dropElement.ej2_instances[0].getContent().classList.remove('e-allowRowDrop');
            }
            if (parentsUntil(this.isDropGrid.element, 'e-grid')) {
                this.stopTimer();
                this.isDropGrid.enableHover = this.hoverState;
                this.isDropGrid.getContent().classList.remove('e-grid-relative');
                this.removeBorder(targetEle);
                const stRow = this.isDropGrid.element.querySelector('.e-dragstartrow');
                if (stRow) {
                    stRow.classList.remove('e-dragstartrow');
                }
            }
            this.processArgs(target);
            const args = {
                target: target, draggableType: 'rows',
                cancel: false,
                fromIndex: parseInt(this.rows[0].getAttribute(ariaRowIndex), 10),
                dropIndex: this.dragTarget, rows: this.rows,
                data: (Object.keys(this.dragStartData[0]).length > 0) ? this.dragStartData : this.currentViewData()
            };
            gObj.trigger(rowDrop, args, () => {
                if (!(parentsUntil(target, row) || parentsUntil(target, 'e-emptyrow')
                    || parentsUntil(target, gridContent)) || args.cancel) {
                    this.dragTarget = null;
                    remove(e.helper);
                    return;
                }
                this.isRefresh = false;
                const selectedIndexes = this.parent.getSelectedRowIndexes();
                if (gObj.isRowDragable()) {
                    if (!this.parent.rowDropSettings.targetID &&
                        this.startedRow.querySelector('td.e-selectionbackground') && selectedIndexes.length > 1 &&
                        selectedIndexes.length !== this.parent.getCurrentViewRecords().length) {
                        this.reorderRows(selectedIndexes, args.dropIndex);
                    }
                    else {
                        this.reorderRows([parseInt(this.startedRow.getAttribute(ariaRowIndex), 10)], this.dragTarget);
                    }
                    this.dragTarget = null;
                    if (!gObj.rowDropSettings.targetID) {
                        remove(e.helper);
                        if (gObj.enableVirtualization) {
                            gObj.refresh();
                        }
                        else {
                            this.rowOrder(args);
                        }
                    }
                }
                this.isRefresh = true;
            });
        };
        this.removeCell = (targetRow, className) => {
            return [].slice.call(targetRow.querySelectorAll('td')).filter((cell) => {
                if (cell.classList.contains(className)) {
                    targetRow.deleteCell(cell.cellIndex);
                }
            });
        };
        this.parent = parent;
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(initialEnd, this.initializeDrag, this);
        this.parent.on(columnDrop, this.columnDrop, this);
        this.parent.on(rowDragAndDropComplete, this.onActionComplete, this);
        this.onDataBoundFn = this.onDataBound.bind(this);
        this.parent.addEventListener(dataBound, this.onDataBoundFn);
        this.parent.on(uiUpdate, this.enableAfterRender, this);
        this.parent.on(destroy, this.destroy, this);
    }
    refreshRow(args, tbody$$1, mtbody, frTbody, target, mTarget, frTarget) {
        const gObj = this.parent;
        const frzCols = gObj.isFrozenGrid();
        const isLeftRight = gObj.getFrozenMode() === leftRight;
        let tbodyMovableHeader;
        let tbodyMovableContent;
        let frHdr;
        let frCnt;
        const tbodyContent = gObj.getContentTable().querySelector(tbody);
        const tbodyHeader = gObj.getHeaderTable().querySelector(tbody);
        if (frzCols) {
            tbodyMovableHeader = gObj.getMovableHeaderTbody();
            tbodyMovableContent = gObj.getMovableContentTbody();
            if (isLeftRight) {
                frHdr = gObj.getFrozenRightHeaderTbody();
                frCnt = gObj.getFrozenRightContentTbody();
            }
        }
        const index = gObj.getFrozenMode() === leftRight ? 3 : 2;
        for (let i = 0, len = args.rows.length; i < len; i++) {
            if (frzCols) {
                if (i % index === 0) {
                    tbody$$1.insertBefore(args.rows[i], target);
                }
                else if (i % index === 1) {
                    mtbody.insertBefore(args.rows[i], mTarget);
                }
                else {
                    frTbody.insertBefore(args.rows[i], frTarget);
                }
            }
            else {
                tbody$$1.insertBefore(args.rows[i], target);
            }
        }
        const tr = [].slice.call(tbody$$1.getElementsByClassName(row));
        let mtr;
        let frTr;
        if (frzCols) {
            mtr = [].slice.call(mtbody.getElementsByClassName(row));
            if (isLeftRight) {
                frTr = [].slice.call(frTbody.getElementsByClassName(row));
            }
        }
        this.refreshData(tr, mtr, frTr);
        if (this.parent.frozenRows) {
            for (let i = 0, len = tr.length; i < len; i++) {
                if (i < this.parent.frozenRows) {
                    setRowsInTbody(tbodyHeader, tbodyMovableHeader, frHdr, tr, mtr, frTr, (tbody$$1, rows) => {
                        tbody$$1.appendChild(rows[i]);
                    });
                }
                else {
                    setRowsInTbody(tbodyContent, tbodyMovableContent, frCnt, tr, mtr, frTr, (tbody$$1, rows) => {
                        tbody$$1.appendChild(rows[i]);
                    });
                }
            }
        }
    }
    updateFrozenRowreOrder(args) {
        const gObj = this.parent;
        let tbodyMovH;
        let tbodyMovC;
        let tbodyFrH;
        let tbodyFrC;
        const frzCols = this.parent.isFrozenGrid();
        const isLeftRight = gObj.getFrozenMode() === leftRight;
        const tbodyC = gObj.getContentTable().querySelector(tbody);
        const tbodyH = gObj.getHeaderTable().querySelector(tbody);
        if (frzCols) {
            tbodyMovH = gObj.getMovableHeaderTbody();
            tbodyMovC = gObj.getMovableContentTbody();
            if (isLeftRight) {
                tbodyFrH = gObj.getFrozenRightHeaderTbody();
                tbodyFrC = gObj.getFrozenRightContentTbody();
            }
        }
        const tr = [].slice.call(tbodyH.getElementsByClassName(row)).concat([].slice.call(tbodyC.getElementsByClassName(row)));
        let mtr;
        let frTr;
        if (frzCols) {
            mtr = [].slice.call(tbodyMovH.getElementsByClassName(row))
                .concat([].slice.call(tbodyMovC.getElementsByClassName(row)));
            if (isLeftRight) {
                frTr = [].slice.call(tbodyFrH.getElementsByClassName(row))
                    .concat([].slice.call(tbodyFrC.getElementsByClassName(row)));
            }
        }
        const tbody$$1 = gObj.createElement(tbody, { attrs: { role: 'rowgroup' } });
        const mtbody = gObj.createElement(tbody, { attrs: { role: 'rowgroup' } });
        const frTbody = gObj.createElement(tbody, { attrs: { role: 'rowgroup' } });
        this.parent.clearSelection();
        const targetRows = this.refreshRowTarget(args);
        for (let i = 0, len = tr.length; i < len; i++) {
            tbody$$1.appendChild(tr[i]);
            if (frzCols) {
                mtbody.appendChild(mtr[i]);
                if (isLeftRight) {
                    frTbody.appendChild(frTr[i]);
                }
            }
        }
        this.refreshRow(args, tbody$$1, mtbody, frTbody, targetRows.target, targetRows.mTarget, targetRows.frTarget);
    }
    refreshRowTarget(args) {
        const gObj = this.parent;
        let mTr;
        let frTr;
        let targetIdx = parseInt(args.target.parentElement.getAttribute(ariaRowIndex), 10);
        if (args.fromIndex < args.dropIndex || args.fromIndex === args.dropIndex) {
            targetIdx = targetIdx + 1;
        }
        const tr = gObj.getRowByIndex(targetIdx);
        if (gObj.isFrozenGrid()) {
            mTr = gObj.getMovableRowByIndex(targetIdx);
            if (gObj.getFrozenMode() === leftRight) {
                frTr = gObj.getFrozenRightRowByIndex(targetIdx);
            }
        }
        const rows = {
            target: tr, mTarget: mTr, frTarget: frTr
        };
        return rows;
    }
    updateFrozenColumnreOrder(args) {
        const gObj = this.parent;
        let mtbody;
        let frTbody;
        const frzCols = this.parent.isFrozenGrid();
        const tbody$$1 = gObj.getContentTable().querySelector(tbody);
        if (frzCols) {
            mtbody = gObj.getMovableContentTbody();
            if (gObj.getFrozenMode() === leftRight) {
                frTbody = gObj.getFrozenRightContentTbody();
            }
        }
        this.parent.clearSelection();
        const targetRows = this.refreshRowTarget(args);
        this.refreshRow(args, tbody$$1, mtbody, frTbody, targetRows.target, targetRows.mTarget, targetRows.frTarget);
    }
    refreshData(tr, mtr, frTr) {
        const rowObj = {};
        const movobj = {};
        const frObj = {};
        const recordobj = {};
        const rowObjects = this.parent.getRowsObject();
        const movbObject = this.parent.getMovableRowsObject();
        const frRightObject = this.parent.getFrozenRightRowsObject();
        const currentViewData = this.parent.getCurrentViewRecords();
        for (let i = 0, len = tr.length; i < len; i++) {
            const index = parseInt(tr[i].getAttribute(ariaRowIndex), 10);
            rowObj[i] = rowObjects[index];
            recordobj[i] = currentViewData[index];
            if (this.parent.isFrozenGrid()) {
                movobj[i] = movbObject[index];
                if (frTr) {
                    frObj[i] = frRightObject[index];
                }
            }
        }
        const rows = this.parent.getRows();
        let movbRows;
        let frRightRows;
        if (this.parent.isFrozenGrid()) {
            movbRows = this.parent.getMovableRows();
            if (frTr) {
                frRightRows = this.parent.getFrozenRightRows();
            }
        }
        for (let i = 0, len = tr.length; i < len; i++) {
            rows[i] = tr[i];
            rowObjects[i] = rowObj[i];
            currentViewData[i] = recordobj[i];
            if (this.parent.isFrozenGrid()) {
                movbRows[i] = mtr[i];
                movbObject[i] = movobj[i];
                if (frTr) {
                    frRightRows[i] = frTr[i];
                    frRightObject[i] = frObj[i];
                }
            }
        }
        resetRowIndex(this.parent, rowObjects, tr);
        if (this.parent.isFrozenGrid()) {
            resetRowIndex(this.parent, movbObject, mtr);
            if (frTr) {
                resetRowIndex(this.parent, frRightObject, frTr);
            }
        }
    }
    rowOrder(args) {
        if (args.dropIndex === args.fromIndex || isNaN(args.dropIndex)) {
            return;
        }
        if (this.parent.isDetail()) {
            this.parent.detailCollapseAll();
            const rows = [].slice.call(this.parent.getContentTable().querySelector(tbody).children);
            const rowObjects = this.parent.getRowsObject();
            rows.filter((row$$1) => {
                if (row$$1.classList.contains('e-detailrow')) {
                    row$$1.remove();
                }
            });
            for (let i = 0, len = rowObjects.length; i < len; i++) {
                if (!rowObjects[i]) {
                    break;
                }
                if (rowObjects[i].isDetailRow) {
                    this.parent.getRowsObject().splice(i, 1);
                    i--;
                }
            }
        }
        if (args.target.classList.contains('e-rowcelldrag') || args.target.classList.contains('e-dtdiagonalright')
            || args.target.classList.contains('e-dtdiagonaldown')) {
            args.target = args.target.parentElement;
        }
        if (!args.target.classList.contains('e-rowcell') && parentsUntil(args.target, 'e-rowcell')) {
            args.target = parentsUntil(args.target, 'e-rowcell');
        }
        if (this.parent.frozenRows) {
            this.updateFrozenRowreOrder(args);
        }
        else {
            this.updateFrozenColumnreOrder(args);
        }
        if (this.selectedRowColls.length > 0) {
            this.parent.selectRows(this.selectedRowColls);
            const indexes = [];
            if (this.parent.filterSettings.columns.length || this.parent.sortSettings.columns.length) {
                for (let i = 0, len = args.rows.length; i < len; i++) {
                    indexes.push(parseInt(args.rows[i].getAttribute(ariaRowIndex), 10));
                }
                this.selectedRowColls = indexes;
            }
            this.selectedRowColls = [];
        }
    }
    currentViewData() {
        const selectedIndexes = this.parent.getSelectedRowIndexes();
        const currentVdata = [];
        const fromIdx = parseInt(this.startedRow.getAttribute(ariaRowIndex), 10);
        for (let i = 0, n = selectedIndexes.length; i < n; i++) {
            const currentV = 'currentViewData';
            currentVdata[i] = this.parent[currentV][selectedIndexes[i]];
        }
        if (!this.parent.rowDropSettings.targetID && selectedIndexes.length === 0) {
            currentVdata[0] = this.parent.currentViewData[fromIdx];
        }
        return currentVdata;
    }
    saveChange(changeRecords, query) {
        this.parent.getDataModule().saveChanges(changeRecords, this.parent.getPrimaryKeyFieldNames()[0], {}, query)
            .then(() => {
            this.parent.notify(modelChanged, {
                type: actionBegin, requestType: 'rowdraganddrop'
            });
        }).catch((e) => {
            const error = 'error';
            const message = 'message';
            if (!isNullOrUndefined(e[error]) && !isNullOrUndefined(e[error][message])) {
                e[error] = e[error][message];
            }
            this.parent.trigger(actionFailure, e);
        });
    }
    reorderRows(fromIndexes, toIndex) {
        const selectedIndexes = this.parent.getSelectedRowIndexes();
        const selectedRecords = [];
        const draggedRecords = [];
        const currentViewData = this.parent.renderModule.data.dataManager.dataSource.json;
        const skip = this.parent.allowPaging ?
            (this.parent.pageSettings.currentPage * this.parent.pageSettings.pageSize) - this.parent.pageSettings.pageSize : 0;
        let dropIdx = toIndex + skip;
        let actualIdx = fromIndexes[0] + skip;
        for (let i = 0, len = fromIndexes.length; i < len; i++) {
            draggedRecords[i] = currentViewData[fromIndexes[i] + skip];
        }
        for (let i = 0, len = selectedIndexes.length; i < len; i++) {
            selectedRecords[i] = currentViewData[selectedIndexes[i] + skip];
        }
        for (let i = 0, len = draggedRecords.length; i < len; i++) {
            if (i !== 0) {
                for (let j = 0, len1 = currentViewData.length; j < len1; j++) {
                    if (JSON.stringify(this.parent.renderModule.data.dataManager.dataSource.json[j]) ===
                        JSON.stringify(draggedRecords[i])) {
                        actualIdx = j;
                        break;
                    }
                }
                for (let j = 0, len1 = currentViewData.length; j < len1; j++) {
                    if (JSON.stringify(this.parent.renderModule.data.dataManager.dataSource.json[j]) === JSON.stringify(draggedRecords[i - 1])) {
                        if (actualIdx > j) {
                            dropIdx = j + 1;
                        }
                        break;
                    }
                }
            }
            this.reorderRow(actualIdx - skip, dropIdx - skip);
        }
        if (this.isRefresh) {
            this.parent.notify(modelChanged, {
                type: actionBegin, requestType: 'rowdraganddrop'
            });
        }
        for (let i = 0, len = selectedRecords.length; i < len; i++) {
            for (let j = 0, len1 = currentViewData.length; j < len1; j++) {
                if (JSON.stringify(this.parent.renderModule.data.dataManager.dataSource.json[j]) === JSON.stringify(selectedRecords[i])) {
                    selectedIndexes[i] = j - skip;
                    break;
                }
            }
        }
        this.selectedRowColls = selectedIndexes;
    }
    stopTimer() {
        window.clearInterval(this.timer);
    }
    /**
    * To trigger action complete event.
    *
    * @param {NotifyArgs} e - specifies the NotifyArgs
    * @returns {void}
    * @hidden
    */
    onActionComplete(e) {
        this.parent.trigger(actionComplete, extend(e, { type: actionComplete, requestType: 'rowdraganddrop' }));
    }
    initializeDrag() {
        const gObj = this.parent;
        this.draggable = new Draggable(gObj.element, {
            dragTarget: '.e-rowcelldrag, .e-rowdragdrop, .e-rowcell',
            distance: 5,
            helper: this.helper,
            dragStart: this.dragStart,
            drag: this.drag,
            dragStop: this.dragStop,
            isReplaceDragEle: this.isReplaceDragEle,
            isPreventSelect: false
        });
    }
    updateScrollPostion(e) {
        const y = getPosition(e).y;
        const cliRect = this.isDropGrid.getContent().getBoundingClientRect();
        const rowHeight = this.isDropGrid.getRowHeight() - 15;
        const scrollElem = this.isDropGrid.getContent().firstElementChild;
        const virtualScrollbtm = this.parent.enableVirtualization ? 20 : 0;
        if (cliRect.top >= y) {
            const scrollPixel = -(this.isDropGrid.getRowHeight());
            this.isOverflowBorder = false;
            this.timer = window.setInterval(() => { this.setScrollDown(scrollElem, scrollPixel); }, 200);
        }
        else if (cliRect.top + this.isDropGrid.getContent().clientHeight - rowHeight - 33 - virtualScrollbtm <= y) {
            const scrollPixel = (this.isDropGrid.getRowHeight());
            this.isOverflowBorder = false;
            this.timer = window.setInterval(() => { this.setScrollDown(scrollElem, scrollPixel); }, 200);
        }
    }
    setScrollDown(scrollElem, scrollPixel) {
        scrollElem.scrollTop = scrollElem.scrollTop + scrollPixel;
    }
    moveDragRows(e, startedRow, targetRow) {
        const cloneElement = this.parent.element.querySelector('.e-cloneproperties');
        const element = closest(e.target, 'tr');
        if (parentsUntil(element, 'e-grid') &&
            (parentsUntil(cloneElement.parentElement, 'e-grid').id === parentsUntil(element, 'e-grid').id || this.istargetGrid)) {
            const targetElement = element ?
                element : this.startedRow;
            this.setBorder(targetElement, e.event, startedRow, targetRow);
        }
    }
    setBorder(element, event, startedRow, targetRow) {
        let node = this.parent.element;
        if (this.istargetGrid) {
            node = this.isDropGrid.element;
        }
        const cloneElement = this.parent.element.querySelector('.e-cloneproperties');
        this.removeFirstRowBorder(element);
        this.removeLastRowBorder(element);
        if (parentsUntil(element, 'e-grid') && element.classList.contains(row) && ((!this.parent.rowDropSettings.targetID &&
            parentsUntil(cloneElement.parentElement, 'e-grid').id === parentsUntil(element, 'e-grid').id) || this.istargetGrid)) {
            removeClass(node.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'), ['e-dragborder']);
            let rowElement = [];
            const targetRowIndex = parseInt(targetRow.getAttribute(ariaRowIndex), 10);
            if (targetRow && targetRowIndex === 0) {
                const div = this.parent.createElement('div', { className: 'e-firstrow-dragborder' });
                const gridheaderEle = this.isDropGrid.getHeaderContent();
                gridheaderEle.classList.add('e-grid-relative');
                div.style.width = node.offsetWidth - this.getScrollWidth() + 'px';
                if (!gridheaderEle.getElementsByClassName('e-firstrow-dragborder').length) {
                    gridheaderEle.appendChild(div);
                }
            }
            else if (this.parent.rowDropSettings.targetID && targetRow) {
                element = this.isDropGrid.getRowByIndex(targetRowIndex - 1);
                rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));
            }
            else if (targetRow && parseInt(startedRow.getAttribute(ariaRowIndex), 10) > targetRowIndex) {
                element = this.parent.getRowByIndex(targetRowIndex - 1);
                rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));
            }
            else {
                rowElement = [].slice.call(element.querySelectorAll('.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse'));
            }
            const frzCols = this.parent.isFrozenGrid();
            if (targetRow && targetRowIndex !== 0 && frzCols) {
                const rowIndex = parseInt(element.getAttribute(ariaRowIndex), 10);
                const selector = '.e-rowcell,.e-rowdragdrop,.e-detailrowcollapse';
                rowElement = this.borderRowElement(rowIndex, selector);
            }
            if (rowElement.length > 0) {
                addRemoveActiveClasses(rowElement, true, 'e-dragborder');
            }
        }
    }
    borderRowElement(rowIndex, selector) {
        let lastRow = [];
        lastRow = [].slice.call(this.isDropGrid.getRowByIndex(rowIndex).querySelectorAll(selector)).
            concat([].slice.call(this.isDropGrid.getMovableRowByIndex(rowIndex).querySelectorAll(selector)));
        if (this.isDropGrid.getFrozenMode() === leftRight) {
            lastRow = lastRow.concat([].slice.call(this.isDropGrid.getFrozenRightRowByIndex(rowIndex).querySelectorAll(selector)));
        }
        return lastRow;
    }
    getScrollWidth() {
        const scrollElem = this.parent.getContent().firstElementChild;
        return scrollElem.scrollWidth > scrollElem.offsetWidth ? Scroll.getScrollBarWidth() : 0;
    }
    removeFirstRowBorder(element) {
        if (this.isDropGrid.element.getElementsByClassName('e-firstrow-dragborder').length > 0 && element &&
            element.rowIndex !== 0) {
            remove(this.isDropGrid.element.getElementsByClassName('e-firstrow-dragborder')[0]);
        }
    }
    removeLastRowBorder(element) {
        let islastRowIndex;
        if (this.parent.enableVirtualization) {
            islastRowIndex = element && parseInt(element.getAttribute(ariaRowIndex), 10) !==
                this.parent.renderModule.data.dataManager.dataSource.json.length - 1;
        }
        else {
            islastRowIndex = element &&
                this.parent.getRowByIndex(this.parent.getCurrentViewRecords().length - 1).getAttribute('data-uid') !==
                    element.getAttribute('data-uid');
        }
        if (this.parent.element.getElementsByClassName('e-lastrow-dragborder').length > 0 && element && islastRowIndex) {
            remove(this.parent.element.getElementsByClassName('e-lastrow-dragborder')[0]);
        }
    }
    removeBorder(element) {
        this.removeFirstRowBorder(element);
        if (!this.parent.rowDropSettings.targetID) {
            this.removeLastRowBorder(element);
        }
        element = (this.isDropGrid.isFrozenGrid() ? this.isDropGrid.getMovableRows() : this.isDropGrid.getRows()).filter((row$$1) => row$$1.querySelector('td.e-dragborder'))[0];
        if (element) {
            let rowElement = [].slice.call(element.getElementsByClassName('e-dragborder'));
            if (this.parent.isFrozenGrid()) {
                const rowIndex = parseInt(element.getAttribute(ariaRowIndex), 10);
                const selector = '.e-dragborder';
                rowElement = this.borderRowElement(rowIndex, selector);
            }
            addRemoveActiveClasses(rowElement, false, 'e-dragborder');
        }
    }
    getElementFromPosition(element, event) {
        const position = getPosition(event);
        element.style.display = 'none';
        const target = document.elementFromPoint(position.x, position.y);
        element.style.display = '';
        return target;
    }
    onDataBound() {
        if (this.selectedRowColls.length > 0 && this.parent.enableVirtualization) {
            this.parent.selectRows(this.selectedRowColls);
            this.selectedRowColls = [];
        }
    }
    getTargetIdx(targetRow) {
        return targetRow ? parseInt(targetRow.getAttribute(ariaRowIndex), 10) : 0;
    }
    singleRowDrop(e) {
        const targetRow = closest(e.target, 'tr');
        const srcControl = e.droppedElement.parentElement.ej2_instances[0];
        const currentIndex = targetRow ? targetRow.rowIndex : srcControl.currentViewData.length - 1;
        this.reorderRow(this.startedRowIndex, currentIndex);
    }
    columnDrop(e) {
        const gObj = this.parent;
        if (e.droppedElement.getAttribute('action') !== 'grouping' &&
            (parentsUntil(e.target, row) || parentsUntil(e.target, 'e-emptyrow') || parentsUntil(e.target, gridContent))) {
            const targetRow = closest(e.target, 'tr');
            let srcControl;
            let currentIndex;
            if ((e.droppedElement.querySelector('tr').getAttribute('single-dragrow') !== 'true' &&
                e.droppedElement.parentElement.id === gObj.element.id)
                || (e.droppedElement.querySelector('tr').getAttribute('single-dragrow') === 'true' &&
                    e.droppedElement.parentElement.id !== gObj.element.id)) {
                return;
            }
            if (e.droppedElement.parentElement.id !== gObj.element.id) {
                srcControl = e.droppedElement.parentElement.ej2_instances[0];
            }
            else if (this.isSingleRowDragDrop || e.droppedElement.querySelector('tr').getAttribute('single-dragrow') === 'true') {
                this.singleRowDrop(e);
                return;
            }
            if (srcControl.element.id !== gObj.element.id && srcControl.rowDropSettings.targetID !== gObj.element.id) {
                return;
            }
            const records = srcControl.getSelectedRecords();
            let targetIndex = currentIndex = this.getTargetIdx(targetRow);
            if (isNaN(targetIndex)) {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                targetIndex = currentIndex = 0;
            }
            if (gObj.allowPaging) {
                targetIndex = targetIndex + (gObj.pageSettings.currentPage * gObj.pageSettings.pageSize) - gObj.pageSettings.pageSize;
            }
            //Todo: drag and drop mapper & BatchChanges
            gObj.notify(rowsAdded, { toIndex: targetIndex, records: records });
            gObj.notify(modelChanged, {
                type: actionBegin, requestType: 'rowdraganddrop'
            });
            const selectedRows = srcControl.getSelectedRowIndexes();
            const skip = srcControl.allowPaging ?
                (srcControl.pageSettings.currentPage * srcControl.pageSettings.pageSize) - srcControl.pageSettings.pageSize : 0;
            this.selectedRows = [];
            for (let i = 0, len = records.length; i < len; i++) {
                this.selectedRows.push(skip + selectedRows[i]);
            }
            srcControl.notify(rowsRemoved, { indexes: this.selectedRows, records: records });
            srcControl.notify(modelChanged, {
                type: actionBegin, requestType: 'rowdraganddrop'
            });
        }
    }
    reorderRow(fromIndexes, toIndex) {
        const gObj = this.parent;
        if (!gObj.sortSettings.columns.length && !gObj.groupSettings.columns.length && !gObj.filterSettings.columns.length) {
            //Todo: drag and drop mapper & BatchChanges
            const skip = gObj.allowPaging ?
                (gObj.pageSettings.currentPage * gObj.pageSettings.pageSize) - gObj.pageSettings.pageSize : 0;
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            toIndex = toIndex + skip;
            this.selectedRows = gObj.getSelectedRowIndexes();
            gObj.notify(rowPositionChanged, {
                fromIndex: fromIndexes + skip,
                toIndex: toIndex
            });
        }
    }
    enableAfterRender(e) {
        if (e.module === this.getModuleName() && e.enable) {
            this.initializeDrag();
        }
    }
    /**
     * To destroy the print
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        const gridElement = this.parent.element;
        if (this.parent.isDestroyed || !gridElement || (!gridElement.querySelector('.' + gridHeader) &&
            !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        this.draggable.destroy();
        this.parent.off(initialEnd, this.initializeDrag);
        this.parent.off(columnDrop, this.columnDrop);
        this.parent.off(rowDragAndDropComplete, this.onActionComplete);
        this.parent.removeEventListener(dataBound, this.onDataBoundFn);
        this.parent.off(uiUpdate, this.enableAfterRender);
        this.parent.off(destroy, this.destroy);
        //destory ejdrag and drop
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'rowDragAndDrop';
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    processArgs(target) {
        const gObj = this.parent;
        const dragIdx = parseInt(this.startedRow.getAttribute(ariaRowIndex), 10);
        if ((gObj.getSelectedRecords().length > 0 && this.startedRow.cells[0].classList.contains('e-selectionbackground') === false)
            || gObj.getSelectedRecords().length === 0) {
            if (this.parent.enableVirtualization) {
                this.rows = [this.startedRow];
            }
            else {
                this.rows = [this.parent.getRowByIndex(dragIdx)];
                if (gObj.isFrozenGrid()) {
                    this.rows = [gObj.getRowByIndex(dragIdx), gObj.getMovableRowByIndex(dragIdx)];
                    if (gObj.getFrozenMode() === leftRight) {
                        this.rows = [
                            gObj.getRowByIndex(dragIdx), gObj.getMovableRowByIndex(dragIdx), gObj.getFrozenRightRowByIndex(dragIdx)
                        ];
                    }
                }
            }
            this.rowData = [this.parent.getRowInfo((this.startedRow).querySelector('.' + rowCell)).rowData];
        }
        else {
            this.rows = gObj.getSelectedRows();
            this.rowData = gObj.getSelectedRecords();
        }
    }
}

// eslint-disable-next-line valid-jsdoc
/**
 *
 * The `Group` module is used to handle group action.
 */
class Group {
    /**
     * Constructor for Grid group module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {GroupSettingsModel} groupSettings - specifies the GroupSettingsModel
     * @param {string[]} sortedColumns - specifies the sortedColumns
     * @param {ServiceLocator} serviceLocator - specifies the serviceLocator
     * @hidden
     */
    constructor(parent, groupSettings, sortedColumns, serviceLocator) {
        //Internal variables
        this.sortRequired = true;
        this.isAppliedGroup = false;
        this.isAppliedUnGroup = false;
        this.reorderingColumns = [];
        this.visualElement = createElement('div', {
            className: 'e-cloneproperties e-dragclone e-gdclone',
            styles: 'line-height:23px', attrs: { action: 'grouping' }
        });
        this.helper = (e) => {
            const gObj = this.parent;
            const target = e.sender.target;
            const element = target.classList.contains('e-groupheadercell') ? target :
                parentsUntil(target, 'e-groupheadercell');
            if (!element || (!target.classList.contains('e-drag') && this.groupSettings.allowReordering)) {
                return false;
            }
            this.column = gObj.getColumnByField(element.firstElementChild.getAttribute('ej-mappingname'));
            this.visualElement.textContent = element.textContent;
            this.visualElement.style.width = element.offsetWidth + 2 + 'px';
            this.visualElement.style.height = element.offsetHeight + 2 + 'px';
            this.visualElement.setAttribute('e-mappinguid', this.column.uid);
            gObj.element.appendChild(this.visualElement);
            return this.visualElement;
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        this.dragStart = (e) => {
            this.parent.element.classList.add('e-ungroupdrag');
        };
        this.drag = (e) => {
            if (this.groupSettings.allowReordering) {
                this.animateDropper(e);
            }
            const target = e.target;
            const cloneElement = this.parent.element.querySelector('.e-cloneproperties');
            this.parent.trigger(columnDrag, { target: target, draggableType: 'headercell', column: this.column });
            if (!this.groupSettings.allowReordering) {
                classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);
                if (!(parentsUntil(target, gridContent) || parentsUntil(target, 'e-headercell'))) {
                    classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
                }
            }
        };
        this.dragStop = (e) => {
            this.parent.element.classList.remove('e-ungroupdrag');
            const preventDrop = !(parentsUntil(e.target, gridContent) || parentsUntil(e.target, 'e-gridheader'));
            if (this.groupSettings.allowReordering && preventDrop) {
                remove(e.helper);
                if (parentsUntil(e.target, 'e-groupdroparea')) {
                    this.rearrangeGroup();
                }
                else if (!(parentsUntil(e.target, 'e-grid'))) {
                    const field = this.parent.getColumnByUid(e.helper.getAttribute('e-mappinguid')).field;
                    if (this.groupSettings.columns.indexOf(field) !== -1) {
                        this.ungroupColumn(field);
                    }
                }
                return;
            }
            else if (preventDrop) {
                remove(e.helper);
                return;
            }
        };
        this.animateDropper = (e) => {
            const uid = this.parent.element.querySelector('.e-cloneproperties').getAttribute('e-mappinguid');
            const dragField = this.parent.getColumnByUid(uid).field;
            const parent = parentsUntil(e.target, 'e-groupdroparea');
            const dropTarget = parentsUntil(e.target, 'e-group-animator');
            const grouped = [].slice.call(this.element.getElementsByClassName('e-groupheadercell'))
                .map((e) => e.querySelector('div').getAttribute('ej-mappingname'));
            const cols = JSON.parse(JSON.stringify(grouped));
            if (dropTarget || parent) {
                if (dropTarget) {
                    const dropField = dropTarget.querySelector('div[ej-mappingname]').getAttribute('ej-mappingname');
                    const dropIndex = +(dropTarget.getAttribute('index'));
                    if (dropField !== dragField) {
                        const dragIndex = cols.indexOf(dragField);
                        if (dragIndex !== -1) {
                            cols.splice(dragIndex, 1);
                        }
                        const flag = dropIndex !== -1 && dragIndex === dropIndex;
                        cols.splice(dropIndex + (flag ? 1 : 0), 0, dragField);
                    }
                }
                else if (parent && cols.indexOf(dragField) === -1) {
                    cols.push(dragField);
                }
                this.element.innerHTML = '';
                if (cols.length && !this.element.classList.contains('e-grouped')) {
                    this.element.classList.add('e-grouped');
                }
                this.reorderingColumns = cols;
                for (let c = 0; c < cols.length; c++) {
                    this.addColToGroupDrop(cols[c]);
                }
            }
            else {
                this.addLabel();
                this.removeColFromGroupDrop(dragField);
            }
        };
        this.drop = (e) => {
            const gObj = this.parent;
            const column = gObj.getColumnByUid(e.droppedElement.getAttribute('e-mappinguid'));
            this.element.classList.remove('e-hover');
            remove(e.droppedElement);
            this.aria.setDropTarget(this.parent.element.querySelector('.e-groupdroparea'), false);
            this.aria.setGrabbed(this.parent.getHeaderTable().querySelector('[aria-grabbed=true]'), false);
            if (isNullOrUndefined(column) || column.allowGrouping === false ||
                parentsUntil(gObj.getColumnHeaderByUid(column.uid), 'e-grid').getAttribute('id') !==
                    gObj.element.getAttribute('id')) {
                this.parent.log('action_disabled_column', { moduleName: this.getModuleName(), columnName: column.headerText });
                return;
            }
            this.groupColumn(column.field);
        };
        this.contentRefresh = true;
        this.aria = new AriaService();
        this.parent = parent;
        this.groupSettings = groupSettings;
        this.serviceLocator = serviceLocator;
        this.sortedColumns = sortedColumns;
        this.focus = serviceLocator.getService('focus');
        this.addEventListener();
        this.groupGenerator = new GroupModelGenerator(this.parent);
    }
    addLabel() {
        if (!this.element.getElementsByClassName('e-group-animator').length) {
            const dragLabel = this.l10n.getConstant('GroupDropArea');
            this.element.innerHTML = dragLabel;
            this.element.classList.remove('e-grouped');
        }
    }
    rearrangeGroup() {
        this.sortRequired = false;
        this.updateModel();
    }
    columnDrag(e) {
        if (this.groupSettings.allowReordering && e.column.allowGrouping) {
            this.animateDropper(e);
        }
        const cloneElement = this.parent.element.querySelector('.e-cloneproperties');
        classList(cloneElement, ['e-defaultcur'], ['e-notallowedcur']);
        if (!parentsUntil(e.target, 'e-groupdroparea') &&
            !(this.parent.allowReordering && parentsUntil(e.target, 'e-headercell'))) {
            classList(cloneElement, ['e-notallowedcur'], ['e-defaultcur']);
        }
        if (e.target.classList.contains('e-groupdroparea')) {
            this.element.classList.add('e-hover');
        }
        else {
            this.element.classList.remove('e-hover');
        }
    }
    columnDragStart(e) {
        if (e.target.classList.contains('e-stackedheadercell')) {
            return;
        }
        const dropArea = this.parent.element.querySelector('.e-groupdroparea');
        this.aria.setDropTarget(dropArea, e.column.allowGrouping);
        const element = e.target.classList.contains('e-headercell') ? e.target : parentsUntil(e.target, 'e-headercell');
        this.aria.setGrabbed(element, true, !e.column.allowGrouping);
    }
    columnDrop(e) {
        const gObj = this.parent;
        if (e.droppedElement.getAttribute('action') === 'grouping') {
            const column = gObj.getColumnByUid(e.droppedElement.getAttribute('e-mappinguid'));
            if (isNullOrUndefined(column) || column.allowGrouping === false ||
                parentsUntil(gObj.getColumnHeaderByUid(column.uid), 'e-grid').getAttribute('id') !==
                    gObj.element.getAttribute('id')) {
                return;
            }
            this.ungroupColumn(column.field);
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(uiUpdate, this.enableAfterRender, this);
        this.parent.on(groupComplete, this.onActionComplete, this);
        this.parent.on(ungroupComplete, this.onActionComplete, this);
        this.parent.on(inBoundModelChanged, this.onPropertyChanged, this);
        this.parent.on(click, this.clickHandler, this);
        this.parent.on(columnDrag, this.columnDrag, this);
        this.parent.on(columnDragStart, this.columnDragStart, this);
        this.parent.on(headerDrop, this.columnDrop, this);
        this.parent.on(columnDrop, this.columnDrop, this);
        this.parent.on(headerRefreshed, this.refreshSortIcons, this);
        this.parent.on(sortComplete, this.refreshSortIcons, this);
        this.parent.on(keyPressed, this.keyPressHandler, this);
        this.parent.on(contentReady, this.initialEnd, this);
        this.parent.on(onEmpty, this.initialEnd, this);
        this.parent.on(initialEnd, this.render, this);
        this.parent.on(groupAggregates, this.onGroupAggregates, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on('group-expand-collapse', this.updateExpand, this);
        this.parent.on('persist-data-changed', this.initialEnd, this);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(initialEnd, this.render);
        this.parent.off(uiUpdate, this.enableAfterRender);
        this.parent.off(groupComplete, this.onActionComplete);
        this.parent.off(ungroupComplete, this.onActionComplete);
        this.parent.off(inBoundModelChanged, this.onPropertyChanged);
        this.parent.off(click, this.clickHandler);
        this.parent.off(columnDrag, this.columnDrag);
        this.parent.off(columnDragStart, this.columnDragStart);
        this.parent.off(columnDrop, this.columnDrop);
        this.parent.off(headerDrop, this.columnDrop);
        this.parent.off(headerRefreshed, this.refreshSortIcons);
        this.parent.off(sortComplete, this.refreshSortIcons);
        this.parent.off(keyPressed, this.keyPressHandler);
        this.parent.off(groupAggregates, this.onGroupAggregates);
        this.parent.off(destroy, this.destroy);
        this.parent.off('group-expand-collapse', this.updateExpand);
    }
    initialEnd() {
        const gObj = this.parent;
        this.parent.off(contentReady, this.initialEnd);
        this.parent.off(onEmpty, this.initialEnd);
        if (this.parent.getColumns().length && this.groupSettings.columns.length) {
            this.contentRefresh = false;
            for (const col of gObj.groupSettings.columns) {
                this.groupColumn(col);
            }
            this.contentRefresh = true;
        }
    }
    keyPressHandler(e) {
        const gObj = this.parent;
        if (e.action !== 'ctrlSpace' && (!this.groupSettings.columns.length ||
            ['altDownArrow', 'altUpArrow', 'ctrlDownArrow', 'ctrlUpArrow', 'enter'].indexOf(e.action) === -1)) {
            return;
        }
        e.preventDefault();
        switch (e.action) {
            case 'altDownArrow':
            case 'altUpArrow':
                // eslint-disable-next-line no-case-declarations
                const selected = gObj.allowSelection ? gObj.getSelectedRowIndexes() : [];
                if (selected.length) {
                    const rows = gObj.getContentTable().querySelector(tbody).children;
                    const dataRow = gObj.getDataRows()[selected[selected.length - 1]];
                    let grpRow;
                    for (let i = dataRow.rowIndex; i >= 0; i--) {
                        if (!rows[i].classList.contains(row) && !rows[i].classList.contains('e-detailrow')) {
                            grpRow = rows[i];
                            break;
                        }
                    }
                    this.expandCollapseRows(grpRow.querySelector(e.action === 'altUpArrow' ?
                        '.e-recordplusexpand' : '.e-recordpluscollapse'));
                }
                break;
            case 'ctrlDownArrow':
                this.expandAll();
                break;
            case 'ctrlUpArrow':
                this.collapseAll();
                break;
            case 'enter':
                if (this.parent.isEdit || (closest(e.target, '#' + this.parent.element.id + '_searchbar') !== null)) {
                    return;
                }
                // eslint-disable-next-line no-case-declarations
                const element = this.focus.getFocusedElement();
                // eslint-disable-next-line no-case-declarations
                const row$$1 = element ? element.parentElement.querySelector('[class^="e-record"]') : null;
                if (!row$$1) {
                    break;
                }
                this.expandCollapseRows(row$$1);
                break;
            case 'ctrlSpace':
                // eslint-disable-next-line no-case-declarations
                const elem = gObj.focusModule.currentInfo.element;
                if (elem && elem.classList.contains('e-headercell')) {
                    const column = gObj.getColumnByUid(elem.firstElementChild.getAttribute('e-mappinguid'));
                    if (column.field && gObj.groupSettings.columns.indexOf(column.field) < 0) {
                        this.groupColumn(column.field);
                    }
                    else {
                        this.ungroupColumn(column.field);
                    }
                }
                break;
        }
    }
    clickHandler(e) {
        this.expandCollapseRows(e.target);
        this.applySortFromTarget(e.target);
        this.unGroupFromTarget(e.target);
        this.toogleGroupFromHeader(e.target);
    }
    unGroupFromTarget(target) {
        if (target.classList.contains('e-ungroupbutton')) {
            this.ungroupColumn(target.parentElement.getAttribute('ej-mappingname'));
        }
    }
    toogleGroupFromHeader(target) {
        if (this.groupSettings.showToggleButton) {
            if (target.classList.contains('e-grptogglebtn')) {
                if (target.classList.contains('e-toggleungroup')) {
                    this.ungroupColumn(this.parent.getColumnByUid(target.parentElement.getAttribute('e-mappinguid')).field);
                }
                else {
                    this.groupColumn(this.parent.getColumnByUid(target.parentElement.getAttribute('e-mappinguid')).field);
                }
            }
            else {
                if (target.classList.contains('e-toggleungroup')) {
                    this.ungroupColumn(target.parentElement.getAttribute('ej-mappingname'));
                }
            }
        }
    }
    applySortFromTarget(target) {
        const gObj = this.parent;
        const gHeader = closest(target, '.e-groupheadercell');
        if (gObj.allowSorting && gHeader && !target.classList.contains('e-ungroupbutton') &&
            !target.classList.contains('e-toggleungroup')) {
            const field = gHeader.firstElementChild.getAttribute('ej-mappingname');
            if (gObj.getColumnHeaderByField(field).getElementsByClassName('e-ascending').length) {
                gObj.sortColumn(field, 'Descending', true);
            }
            else {
                gObj.sortColumn(field, 'Ascending', true);
            }
        }
    }
    /**
     * Expands or collapses grouped rows by target element.
     *
     * @param  {Element} target - Defines the target element of the grouped row.
     * @returns {void}
     */
    expandCollapseRows(target) {
        const trgt = parentsUntil(target, 'e-recordplusexpand') ||
            parentsUntil(target, 'e-recordpluscollapse');
        if (trgt) {
            const rowNodes = this.parent.getContentTable().querySelector(tbody).children;
            let isHide;
            let dataManager;
            let query;
            const gObj = this.parent;
            const indent = trgt.parentElement.getElementsByClassName('e-indentcell').length;
            const uid = trgt.parentElement.getAttribute('data-uid');
            const captionRow = gObj.getRowObjectFromUID(uid);
            let expand = false;
            if (trgt.classList.contains('e-recordpluscollapse')) {
                addClass([trgt], 'e-recordplusexpand');
                removeClass([trgt], 'e-recordpluscollapse');
                trgt.firstElementChild.className = 'e-icons e-gdiagonaldown e-icon-gdownarrow';
                expand = true;
                captionRow.isExpand = true;
                if (isGroupAdaptive(gObj)) {
                    this.updateVirtualRows(gObj, target, expand, query, dataManager);
                }
                if (this.parent.groupSettings.enableLazyLoading) {
                    this.parent.contentModule.captionExpand(trgt.parentElement);
                }
            }
            else {
                isHide = true;
                captionRow.isExpand = false;
                removeClass([trgt], 'e-recordplusexpand');
                addClass([trgt], 'e-recordpluscollapse');
                trgt.firstElementChild.className = 'e-icons e-gnextforward e-icon-grightarrow';
                if (isGroupAdaptive(gObj)) {
                    this.updateVirtualRows(gObj, target, !isHide, query, dataManager);
                }
                if (this.parent.groupSettings.enableLazyLoading) {
                    this.parent.contentModule.captionCollapse(trgt.parentElement);
                }
            }
            this.aria.setExpand(trgt, expand);
            if (!isGroupAdaptive(gObj) && !this.parent.groupSettings.enableLazyLoading) {
                const rowObjs = gObj.getRowsObject();
                const startIdx = rowObjs.indexOf(captionRow);
                const rowsState = {};
                let cacheStartIdx = gObj.enableInfiniteScrolling && gObj.infiniteScrollSettings &&
                    gObj.infiniteScrollSettings.enableCache && rowObjs.length !== rowNodes.length ?
                    Array.from(rowNodes).indexOf(trgt.parentElement) : undefined;
                for (let i = startIdx; i < rowObjs.length; i++) {
                    if (i > startIdx && rowObjs[i].indent === indent) {
                        break;
                    }
                    if (rowObjs[i].isDetailRow) {
                        const visible = rowObjs[i - 1].isExpand && rowObjs[i - 1].visible;
                        if (cacheStartIdx && cacheStartIdx > 0 && cacheStartIdx < rowNodes.length) {
                            rowNodes[cacheStartIdx].style.display = visible ? '' : 'none';
                        }
                        else if (isNullOrUndefined(cacheStartIdx)) {
                            rowNodes[i].style.display = visible ? '' : 'none';
                        }
                    }
                    else if (rowsState[rowObjs[i].parentUid] === false) {
                        rowObjs[i].visible = false;
                        if (cacheStartIdx && cacheStartIdx > 0 && cacheStartIdx < rowNodes.length) {
                            rowNodes[cacheStartIdx].style.display = 'none';
                        }
                        else if (isNullOrUndefined(cacheStartIdx)) {
                            rowNodes[i].style.display = 'none';
                        }
                    }
                    else {
                        if (!(rowObjs[i].isDataRow || rowObjs[i].isCaptionRow || rowObjs[i].isDetailRow || rowObjs[i].isAggregateRow)) {
                            const visible = rowObjs[i].cells.some((cell) => cell.isDataCell
                                && cell.visible);
                            if (visible === rowObjs[i].visible) {
                                continue;
                            }
                        }
                        rowObjs[i].visible = true;
                        if (cacheStartIdx && cacheStartIdx > 0 && cacheStartIdx < rowNodes.length) {
                            rowNodes[cacheStartIdx].style.display = '';
                            rowNodes[cacheStartIdx].classList.remove('e-hide');
                        }
                        else if (isNullOrUndefined(cacheStartIdx)) {
                            rowNodes[i].style.display = '';
                            rowNodes[i].classList.remove('e-hide');
                        }
                    }
                    if (rowObjs[i].isCaptionRow) {
                        rowsState[rowObjs[i].uid] = rowObjs[i].isExpand && rowObjs[i].visible;
                    }
                    if (!isNullOrUndefined(cacheStartIdx)) {
                        cacheStartIdx++;
                    }
                }
                this.parent.notify(refreshExpandandCollapse, { rows: this.parent.getRowsObject() });
            }
            this.parent.notify(captionActionComplete, { isCollapse: isHide, parentUid: uid });
        }
    }
    updateVirtualRows(gObj, target, isExpand, query, dataManager) {
        const rObj = gObj.getRowObjectFromUID(target.closest('tr').getAttribute('data-uid'));
        rObj.isExpand = isExpand;
        updatecloneRow(gObj);
        this.parent.notify(refreshVirtualMaxPage, {});
        query = gObj.getDataModule().generateQuery(false);
        query.queries = gObj.getDataModule().aggregateQuery(gObj.getQuery().clone()).queries;
        const args = { requestType: 'virtualscroll', rowObject: rObj };
        if (gObj.contentModule) {
            args.virtualInfo = gObj.contentModule.prevInfo;
        }
        dataManager = gObj.getDataModule().getData(args, query.requiresCount());
        dataManager.then((e) => gObj.renderModule.dataManagerSuccess(e, args));
    }
    expandCollapse(isExpand) {
        if (!this.parent.groupSettings.columns.length) {
            return;
        }
        if (!isExpand) {
            this.parent.notify(initialCollapse, isExpand);
        }
        const rowNodes = this.parent.getContentTable().querySelector(tbody).children;
        const rowObjs = this.parent.getRowsObject();
        let row$$1;
        for (let i = 0, len = rowNodes.length; i < len; i++) {
            if (rowNodes[i].querySelectorAll('.e-recordplusexpand, .e-recordpluscollapse').length) {
                row$$1 = rowNodes[i].querySelector(isExpand ? '.e-recordpluscollapse' : '.e-recordplusexpand');
                if (row$$1) {
                    row$$1.className = isExpand ? 'e-recordplusexpand' : 'e-recordpluscollapse';
                    row$$1.firstElementChild.className = isExpand ? 'e-icons e-gdiagonaldown e-icon-gdownarrow' :
                        'e-icons e-gnextforward e-icon-grightarrow';
                }
                if (!(rowNodes[i].firstElementChild.classList.contains('e-recordplusexpand') ||
                    rowNodes[i].firstElementChild.classList.contains('e-recordpluscollapse'))) {
                    rowNodes[i].style.display = isExpand ? '' : 'none';
                }
            }
            else {
                rowNodes[i].style.display = isExpand ? '' : 'none';
            }
            if (rowObjs[i].isCaptionRow) {
                rowObjs[i].isExpand = isExpand ? true : false;
            }
        }
        this.parent.updateVisibleExpandCollapseRows();
        this.parent.notify(refreshExpandandCollapse, { rows: this.parent.getRowsObject() });
    }
    /**
     * Expands all the grouped rows of the Grid.
     *
     * @returns {void}
     */
    expandAll() {
        this.expandCollapse(true);
    }
    /**
     * Collapses all the grouped rows of the Grid.
     *
     * @returns {void}
     */
    collapseAll() {
        this.expandCollapse(false);
    }
    /**
     * The function is used to render grouping
     *
     * @returns {void}
     * @hidden
     */
    render() {
        this.l10n = this.serviceLocator.getService('localization');
        this.renderGroupDropArea();
        this.initDragAndDrop();
        this.refreshToggleBtn();
    }
    renderGroupDropArea() {
        const groupElem = this.parent.element.querySelector('.e-groupdroparea');
        if (groupElem) {
            remove(groupElem);
        }
        this.element = this.parent.createElement('div', { className: 'e-groupdroparea', attrs: { 'tabindex': '-1' } });
        if (this.groupSettings.allowReordering) {
            this.element.classList.add('e-group-animate');
        }
        this.updateGroupDropArea();
        this.parent.element.insertBefore(this.element, this.parent.element.firstChild);
        if (!this.groupSettings.showDropArea) {
            this.element.style.display = 'none';
        }
    }
    updateGroupDropArea(clear) {
        if (this.groupSettings.showDropArea && !this.groupSettings.columns.length) {
            const dragLabel = this.l10n.getConstant('GroupDropArea');
            this.element.innerHTML = dragLabel;
            this.element.classList.remove('e-grouped');
        }
        else {
            if ((this.element.innerHTML === this.l10n.getConstant('GroupDropArea') && (this.groupSettings.columns.length === 1
                || !this.isAppliedGroup && !this.isAppliedUnGroup)) || clear) {
                this.element.innerHTML = '';
            }
            this.element.classList.add('e-grouped');
        }
    }
    initDragAndDrop() {
        this.initializeGHeaderDrop();
        this.initializeGHeaderDrag();
    }
    initializeGHeaderDrag() {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const drag = new Draggable(this.element, {
            dragTarget: this.groupSettings.allowReordering ? '.e-drag' : '.e-groupheadercell',
            distance: this.groupSettings.allowReordering ? -10 : 5,
            helper: this.helper,
            dragStart: this.dragStart,
            drag: this.drag,
            dragStop: this.dragStop
        });
    }
    initializeGHeaderDrop() {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        const drop = new Droppable(this.element, {
            accept: '.e-dragclone',
            drop: this.drop
        });
    }
    /**
     * Groups a column by column name.
     *
     * @param  {string} columnName - Defines the column name to group.
     * @returns {void}
     */
    groupColumn(columnName) {
        const gObj = this.parent;
        const column = gObj.getColumnByField(columnName);
        if (isNullOrUndefined(column) || column.allowGrouping === false ||
            (this.contentRefresh && this.groupSettings.columns.indexOf(columnName) > -1)) {
            this.parent.log('action_disabled_column', { moduleName: this.getModuleName(), columnName: column.headerText });
            return;
        }
        if (isActionPrevent(gObj)) {
            gObj.notify(preventBatch, { instance: this, handler: this.groupColumn, arg1: columnName });
            return;
        }
        column.visible = gObj.groupSettings.showGroupedColumn;
        this.colName = columnName;
        this.isAppliedGroup = true;
        if (this.contentRefresh) {
            this.updateModel();
        }
        else {
            this.addColToGroupDrop(columnName);
        }
        this.updateGroupDropArea();
        this.isAppliedGroup = false;
    }
    /**
     * Ungroups a column by column name.
     *
     * @param  {string} columnName - Defines the column name to ungroup.
     * @returns {void}
     */
    ungroupColumn(columnName) {
        const gObj = this.parent;
        const column = this.parent.enableColumnVirtualization ?
            this.parent.columns.filter((c) => c.field === columnName)[0] : gObj.getColumnByField(columnName);
        if (isNullOrUndefined(column) || column.allowGrouping === false || this.groupSettings.columns.indexOf(columnName) < 0) {
            return;
        }
        if (isActionPrevent(gObj)) {
            gObj.notify(preventBatch, { instance: this, handler: this.ungroupColumn, arg1: columnName });
            return;
        }
        column.visible = true;
        this.colName = column.field;
        const columns = JSON.parse(JSON.stringify(this.groupSettings.columns));
        columns.splice(columns.indexOf(this.colName), 1);
        if (this.sortedColumns.indexOf(columnName) < 0) {
            for (let i = 0, len = gObj.sortSettings.columns.length; i < len; i++) {
                if (columnName === gObj.sortSettings.columns[i].field) {
                    gObj.sortSettings.columns.splice(i, 1);
                    break;
                }
            }
        }
        if (this.groupSettings.allowReordering) {
            this.reorderingColumns = columns;
        }
        this.groupSettings.columns = columns;
        if (gObj.allowGrouping) {
            this.isAppliedUnGroup = true;
            this.parent.dataBind();
        }
    }
    /**
     * The function used to update groupSettings
     *
     * @returns {void}
     * @hidden
     */
    updateModel() {
        let columns = JSON.parse(JSON.stringify(this.groupSettings.columns));
        columns = this.reorderingColumns.length ? JSON.parse(JSON.stringify(this.reorderingColumns)) : columns;
        if (this.sortRequired) {
            if (columns.indexOf(this.colName) === -1) {
                columns.push(this.colName);
            }
            this.groupAddSortingQuery(this.colName);
        }
        this.sortRequired = true;
        this.parent.groupSettings.columns = columns;
        this.parent.dataBind();
    }
    /**
     * The function used to trigger onActionComplete
     *
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    onActionComplete(e) {
        if (e.requestType === 'grouping') {
            this.addColToGroupDrop(this.colName);
        }
        else {
            this.removeColFromGroupDrop(this.colName);
        }
        const args = this.groupSettings.columns.indexOf(this.colName) > -1 ? {
            columnName: this.colName, requestType: 'grouping', type: actionComplete
        } : { requestType: 'ungrouping', type: actionComplete };
        this.parent.trigger(actionComplete, extend(e, args));
        this.colName = null;
    }
    groupAddSortingQuery(colName) {
        let i = 0;
        while (i < this.parent.sortSettings.columns.length) {
            if (this.parent.sortSettings.columns[i].field === colName) {
                break;
            }
            i++;
        }
        if (this.parent.sortSettings.columns.length === i) {
            this.parent.sortSettings.columns.push({ field: colName, direction: 'Ascending', isFromGroup: true });
        }
        else if (!this.parent.allowSorting) {
            this.parent.sortSettings.columns[i].direction = 'Ascending';
        }
    }
    createElement(field) {
        const gObj = this.parent;
        let direction = 'Ascending';
        const animator = this.parent.createElement('div', { className: 'e-grid-icon e-group-animator' });
        let groupedColumn = this.parent.createElement('div', { className: 'e-grid-icon e-groupheadercell' });
        const childDiv = this.parent.createElement('div', { attrs: { 'ej-mappingname': field } });
        if (isComplexField(field)) {
            childDiv.setAttribute('ej-complexname', getComplexFieldID(field));
        }
        const column = this.parent.getColumnByField(field);
        //Todo headerTemplateID for grouped column, disableHtmlEncode
        const headerCell = gObj.getColumnHeaderByUid(column.uid);
        // if (!isNullOrUndefined(column.headerTemplate)) {
        //     if (column.headerTemplate.indexOf('#') !== -1) {
        //         childDiv.innerHTML = document.querySelector(column.headerTemplate).innerHTML.trim();
        //     } else {
        //         childDiv.innerHTML = column.headerTemplate;
        //     }
        //     childDiv.firstElementChild.classList.add('e-grouptext');
        // } else {
        if (this.groupSettings.allowReordering) {
            childDiv.appendChild(this.parent.createElement('span', {
                className: 'e-drag e-icons e-icon-drag', innerHTML: '&nbsp;',
                attrs: { title: 'Drag', tabindex: '-1', 'aria-label': 'Drag the grouped column' }
            }));
        }
        childDiv.appendChild(this.parent.createElement('span', {
            className: 'e-grouptext', innerHTML: column.headerText,
            attrs: { tabindex: '-1', 'aria-label': 'sort the grouped column' }
        }));
        // }
        if (this.groupSettings.showToggleButton) {
            childDiv.appendChild(this.parent.createElement('span', {
                className: 'e-togglegroupbutton e-icons e-icon-ungroup e-toggleungroup', innerHTML: '&nbsp;',
                attrs: { tabindex: '-1', 'aria-label': 'ungroup button' }
            }));
        }
        if (headerCell.querySelectorAll('.e-ascending,.e-descending').length) {
            direction = headerCell.querySelector('.e-ascending') ? 'Ascending' : 'Descending';
        }
        childDiv.appendChild(this.parent.createElement('span', {
            className: 'e-groupsort e-icons ' +
                ('e-' + direction.toLowerCase() + ' e-icon-' + direction.toLowerCase()), innerHTML: '&nbsp;',
            attrs: { tabindex: '-1', 'aria-label': 'sort the grouped column', role: 'button' }
        }));
        childDiv.appendChild(this.parent.createElement('span', {
            className: 'e-ungroupbutton e-icons e-icon-hide', innerHTML: '&nbsp;',
            attrs: { title: this.l10n.getConstant('UnGroup'),
                tabindex: '-1', 'aria-label': 'ungroup the grouped column', role: 'button' },
            styles: this.groupSettings.showUngroupButton ? '' : 'display:none'
        }));
        groupedColumn.appendChild(childDiv);
        if (this.groupSettings.allowReordering) {
            animator.appendChild(groupedColumn);
            animator.appendChild(this.createSeparator());
            groupedColumn = animator;
        }
        return groupedColumn;
    }
    addColToGroupDrop(field) {
        const groupElem = isComplexField(field) ? this.parent.element.querySelector('.e-groupdroparea div[ej-complexname=' +
            getComplexFieldID(field) + ']') : this.parent.element.querySelector('.e-groupdroparea div[ej-mappingname=' + field + ']');
        if (this.groupSettings.allowReordering && groupElem) {
            return;
        }
        const column = this.parent.getColumnByField(field);
        if (isNullOrUndefined(column)) {
            return;
        }
        const groupedColumn = this.createElement(field);
        if (this.groupSettings.allowReordering) {
            const index = this.element.getElementsByClassName('e-group-animator').length;
            groupedColumn.setAttribute('index', index.toString());
        }
        this.element.appendChild(groupedColumn);
        //Todo:  rtl
    }
    createSeparator() {
        return this.parent.createElement('span', {
            className: 'e-nextgroup e-icons e-icon-next', innerHTML: '&nbsp;',
            attrs: { tabindex: '-1', 'aria-label': 'Separator for the grouped columns' },
            styles: this.groupSettings.showUngroupButton ? '' : 'display:none'
        });
    }
    refreshToggleBtn(isRemove) {
        if (this.groupSettings.showToggleButton) {
            const headers = [].slice.call(this.parent.getHeaderTable().getElementsByClassName('e-headercelldiv'));
            for (let i = 0, len = headers.length; i < len; i++) {
                if (!((headers[i].classList.contains('e-emptycell')) || (headers[i].classList.contains('e-headerchkcelldiv')))) {
                    const column = this.parent.getColumnByUid(headers[i].getAttribute('e-mappinguid'));
                    if (!this.parent.showColumnMenu || (this.parent.showColumnMenu && !column.showColumnMenu)) {
                        if (headers[i].getElementsByClassName('e-grptogglebtn').length) {
                            remove(headers[i].querySelectorAll('.e-grptogglebtn')[0]);
                        }
                        if (!isRemove) {
                            headers[i].appendChild(this.parent.createElement('span', {
                                className: 'e-grptogglebtn e-icons ' +
                                    (this.groupSettings.columns.indexOf(column.field) > -1 ? 'e-toggleungroup e-icon-ungroup'
                                        : 'e-togglegroup e-icon-group'), attrs: { tabindex: '-1', 'aria-label': 'Group button' }
                            }));
                        }
                    }
                }
            }
        }
    }
    removeColFromGroupDrop(field) {
        if (!isNullOrUndefined(this.getGHeaderCell(field))) {
            const elem = this.getGHeaderCell(field);
            if (this.groupSettings.allowReordering) {
                const parent = parentsUntil(elem, 'e-group-animator');
                remove(parent);
            }
            else {
                remove(elem);
            }
            this.updateGroupDropArea();
        }
        this.isAppliedUnGroup = false;
    }
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName()) {
            return;
        }
        for (const prop of Object.keys(e.properties)) {
            switch (prop) {
                case 'columns':
                    // eslint-disable-next-line no-case-declarations
                    let args;
                    if (this.contentRefresh) {
                        if (!this.isAppliedUnGroup) {
                            if (!this.isAppliedGroup) {
                                this.updateGroupDropArea(true);
                                for (let j = 0; j < this.parent.sortSettings.columns.length; j++) {
                                    if (this.parent.sortSettings.columns[j].isFromGroup) {
                                        this.parent.sortSettings.columns.splice(j, 1);
                                        j--;
                                    }
                                }
                                for (let i = 0; i < this.groupSettings.columns.length; i++) {
                                    this.colName = this.groupSettings.columns[i];
                                    const col = this.parent.getColumnByField(this.colName);
                                    col.visible = this.parent.groupSettings.showGroupedColumn;
                                    this.groupAddSortingQuery(this.colName);
                                    if (i < this.groupSettings.columns.length - 1) {
                                        this.addColToGroupDrop(this.groupSettings.columns[i]);
                                    }
                                }
                            }
                            args = {
                                columnName: this.colName, requestType: e.properties[prop].length ? 'grouping' : 'ungrouping',
                                type: actionBegin
                            };
                        }
                        else {
                            args = { columnName: this.colName, requestType: 'ungrouping', type: actionBegin };
                        }
                        if (!this.groupSettings.showGroupedColumn) {
                            const columns = e.oldProperties[prop];
                            for (let i = 0; i < columns.length; i++) {
                                if (e.properties[prop].indexOf(columns[i]) === -1) {
                                    this.parent.getColumnByField(columns[i]).visible = true;
                                }
                            }
                        }
                        this.parent.notify(modelChanged, args);
                    }
                    break;
                case 'showDropArea':
                    this.updateGroupDropArea();
                    if (this.groupSettings.showDropArea) {
                        this.element.style.display = '';
                        this.parent.headerModule.refreshUI();
                    }
                    else {
                        this.element.style.display = 'none';
                    }
                    break;
                case 'showGroupedColumn':
                    this.updateGroupedColumn(this.groupSettings.showGroupedColumn);
                    this.parent.notify(modelChanged, { requestType: 'refresh' });
                    break;
                case 'showUngroupButton':
                    this.updateButtonVisibility(this.groupSettings.showUngroupButton, 'e-ungroupbutton');
                    break;
                case 'showToggleButton':
                    this.updateButtonVisibility(this.groupSettings.showToggleButton, 'e-togglegroupbutton ');
                    this.parent.refreshHeader();
                    break;
                case 'enableLazyLoading':
                    this.parent.freezeRefresh();
                    break;
            }
        }
    }
    updateGroupedColumn(isVisible) {
        for (let i = 0; i < this.groupSettings.columns.length; i++) {
            this.parent.getColumnByField(this.groupSettings.columns[i]).visible = isVisible;
        }
    }
    updateButtonVisibility(isVisible, className) {
        const gHeader = [].slice.call(this.element.getElementsByClassName(className));
        for (let i = 0; i < gHeader.length; i++) {
            gHeader[i].style.display = isVisible ? '' : 'none';
        }
    }
    enableAfterRender(e) {
        if (e.module === this.getModuleName() && e.enable) {
            this.render();
        }
    }
    /**
     * To destroy the reorder
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        const gridElement = this.parent.element;
        if (!gridElement || (!gridElement.querySelector('.' + gridHeader) && !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        if ((this.parent.isDestroyed || !this.parent.allowGrouping) && !this.parent.refreshing) {
            this.clearGrouping();
        }
        this.removeEventListener();
        this.refreshToggleBtn(true);
        if (this.element.parentNode) {
            remove(this.element);
        }
        //call ejdrag and drop destroy
    }
    /**
     * Clears all the grouped columns of the Grid.
     *
     * @returns {void}
     */
    clearGrouping() {
        const cols = JSON.parse(JSON.stringify(this.groupSettings.columns));
        this.contentRefresh = false;
        for (let i = 0, len = cols.length; i < len; i++) {
            if (i === (len - 1)) {
                this.contentRefresh = true;
            }
            this.ungroupColumn(cols[i]);
        }
        this.contentRefresh = true;
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'group';
    }
    refreshSortIcons() {
        const gObj = this.parent;
        let header;
        const cols = gObj.sortSettings.columns;
        const gCols = gObj.groupSettings.columns;
        const fieldNames = this.parent.getColumns().map((c) => c.field);
        this.refreshToggleBtn();
        for (let i = 0, len = cols.length; i < len; i++) {
            if (fieldNames.indexOf(cols[i].field) === -1) {
                continue;
            }
            header = gObj.getColumnHeaderByField(cols[i].field);
            if (!gObj.allowSorting && (this.sortedColumns.indexOf(cols[i].field) > -1 ||
                this.groupSettings.columns.indexOf(cols[i].field) > -1)) {
                classList(header.querySelector('.e-sortfilterdiv'), ['e-ascending', 'e-icon-ascending'], []);
                if (cols.length > 1) {
                    header.querySelector('.e-headercelldiv').appendChild(this.parent.createElement('span', { className: 'e-sortnumber', innerHTML: (i + 1).toString() }));
                }
            }
            else if (this.getGHeaderCell(cols[i].field) && this.getGHeaderCell(cols[i].field).getElementsByClassName('e-groupsort').length) {
                if (cols[i].direction === 'Ascending') {
                    classList(this.getGHeaderCell(cols[i].field).querySelector('.e-groupsort'), ['e-ascending', 'e-icon-ascending'], ['e-descending', 'e-icon-descending']);
                }
                else {
                    classList(this.getGHeaderCell(cols[i].field).querySelector('.e-groupsort'), ['e-descending', 'e-icon-descending'], ['e-ascending', 'e-icon-ascending']);
                }
            }
        }
        for (let i = 0, len = gCols.length; i < len; i++) {
            if (fieldNames.indexOf(gCols[i]) === -1) {
                continue;
            }
            gObj.getColumnHeaderByField(gCols[i]).setAttribute('aria-grouped', 'true');
        }
    }
    getGHeaderCell(field) {
        if (this.element && this.element.querySelector('[ej-mappingname="' + field + '"]')) {
            return this.element.querySelector('[ej-mappingname="' + field + '"]').parentElement;
        }
        return null;
    }
    onGroupAggregates(editedData) {
        const aggregates = this.iterateGroupAggregates(editedData);
        const rowData = this.groupGenerator.generateRows(aggregates, {});
        const summaryRows = this.parent.getRowsObject().filter((row$$1) => !row$$1.isDataRow);
        const updateSummaryRows = rowData.filter((data) => !data.isDataRow);
        if (this.parent.isReact || this.parent.isVue) {
            this.parent.destroyTemplate(['groupFooterTemplate', 'groupCaptionTemplate', 'footerTemplate']);
        }
        for (let i = 0; i < updateSummaryRows.length; i++) {
            const row$$1 = updateSummaryRows[i];
            const cells = row$$1.cells.filter((cell) => cell.isDataCell);
            const args = { cells: cells, data: row$$1.data, dataUid: summaryRows[i] ? summaryRows[i].uid : '' };
            this.parent.notify(refreshAggregateCell, args);
        }
    }
    iterateGroupAggregates(editedData) {
        const updatedData = editedData instanceof Array ? editedData : [];
        const rows = this.parent.getRowsObject();
        const initData = this.parent.getCurrentViewRecords();
        const deletedCols = [];
        let changeds = rows.map((row$$1) => {
            if (row$$1.edit === 'delete') {
                deletedCols.push(row$$1.data);
            }
            return row$$1.changes instanceof Object ? row$$1.changes : row$$1.data;
        });
        const field = this.parent.getPrimaryKeyFieldNames()[0];
        changeds = updatedData.length === 0 ? changeds : updatedData;
        const mergeData = initData.map((item) => {
            const pKeyVal = DataUtil.getObject(field, item);
            let value;
            const hasVal = changeds.some((cItem) => {
                value = cItem;
                return pKeyVal === DataUtil.getObject(field, cItem);
            });
            return hasVal ? value : item;
        });
        const eData = editedData;
        if (!(eData.type && eData.type === 'cancel') && deletedCols.length > 0) {
            for (let i = 0; i < deletedCols.length; i++) {
                const index = mergeData.indexOf(deletedCols[i]);
                mergeData.splice(index, 1);
            }
        }
        const aggregates = [];
        const aggregateRows = this.parent.aggregates;
        for (let j = 0; j < aggregateRows.length; j++) {
            const row$$1 = aggregateRows[j];
            for (let k = 0; k < row$$1.columns.length; k++) {
                let aggr = {};
                const type = row$$1.columns[k].type.toString();
                aggr = { type: type.toLowerCase(), field: row$$1.columns[k].field };
                aggregates.push(aggr);
            }
        }
        let result;
        let aggrds;
        const groupedCols = this.parent.groupSettings.columns;
        for (let l = 0; l < groupedCols.length; l++) {
            aggrds = result ? result : mergeData;
            result = DataUtil.group(aggrds, groupedCols[l], aggregates, null, null);
        }
        return result;
    }
    updateExpand(args) {
        const uid = args.uid;
        const isExpand = args.isExpand;
        const rows = this.parent.getRowsObject();
        for (let i = 0; i < rows.length; i++) {
            const row$$1 = rows[i];
            if (row$$1.uid === uid || isNullOrUndefined(uid)) {
                row$$1.isExpand = isExpand;
                for (let j = i + 1; j < rows.length; j++) {
                    const childRow = rows[j];
                    let closestParent;
                    if (childRow.parentUid !== row$$1.uid) {
                        closestParent = rows.filter((x) => x.uid === childRow.parentUid)[0];
                    }
                    if (childRow.parentUid === row$$1.uid) {
                        childRow.visible = row$$1.isExpand;
                    }
                    else if (!isNullOrUndefined(closestParent) && childRow.parentUid === closestParent.uid) {
                        if (closestParent.isExpand && closestParent.visible === true) {
                            childRow.visible = true;
                        }
                        else if (closestParent.isExpand && closestParent.visible === false) {
                            childRow.visible = false;
                        }
                    }
                    if (isNullOrUndefined(uid)) {
                        break;
                    }
                }
            }
        }
        this.parent.notify(contentReady, { rows: rows, args: { isFrozen: false, rows: rows } });
    }
}

/**
 * The `DetailRow` module is used to handle detail template and hierarchy Grid operations.
 */
class DetailRow {
    /**
     * Constructor for the Grid detail template module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {ServiceLocator} locator - specifes the serviceLocator
     * @hidden
     */
    constructor(parent, locator) {
        //Internal variables
        this.aria = new AriaService();
        this.childRefs = [];
        this.parent = parent;
        if (this.parent.isDestroyed) {
            return;
        }
        this.focus = locator.getService('focus');
        this.parent.on(click, this.clickHandler, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(keyPressed, this.keyPressHandler, this);
        this.parent.on(expandChildGrid, this.expand, this);
        this.parent.on(columnVisibilityChanged, this.refreshColSpan, this);
        this.parent.on(destroy, this.destroyChildGrids, this);
        this.parent.on(destroyChildGrid, this.destroyChildGrids, this);
    }
    clickHandler(e) {
        this.toogleExpandcollapse(closest(e.target, 'td'));
    }
    toogleExpandcollapse(target) {
        const gObj = this.parent;
        const table$$1 = this.parent.getContentTable();
        const lastrowIdx = this.parent.getCurrentViewRecords().length - 1;
        const parent = 'parentDetails';
        let childGrid;
        const isExpanded = target && target.classList.contains('e-detailrowcollapse');
        if (!(target && (target.classList.contains('e-detailrowcollapse') || target.classList.contains('e-detailrowexpand')))) {
            return;
        }
        const tr = target.parentElement;
        const uid = tr.getAttribute('data-uid');
        const rowObj = gObj.getRowObjectFromUID(uid);
        const nextRow = this.parent.getContentTable().querySelector(tbody).children[tr.rowIndex + 1];
        if (target.classList.contains('e-detailrowcollapse')) {
            const data = rowObj.data;
            if (this.isDetailRow(nextRow)) {
                nextRow.style.display = '';
                gObj.notify(detailStateChange, { data: data,
                    childGrid: gObj.childGrid, detailElement: target, isExpanded: isExpanded });
            }
            else if (gObj.getDetailTemplate() || gObj.childGrid) {
                const rowId = getUid('grid-row');
                const detailRow = this.parent.createElement('tr', { className: 'e-detailrow', attrs: { 'data-uid': rowId, role: 'row' } });
                const detailCell = this.parent.createElement('td', { className: 'e-detailcell' });
                let colSpan = this.parent.getVisibleColumns().length;
                if (this.parent.allowRowDragAndDrop) {
                    colSpan++;
                }
                detailCell.setAttribute('colspan', colSpan.toString());
                const row$$1 = new Row({
                    isDataRow: true,
                    isExpand: true,
                    uid: rowId,
                    isDetailRow: true,
                    cells: [new Cell({ cellType: CellType.Indent }), new Cell({ isDataCell: true, visible: true })]
                });
                row$$1.parentUid = rowObj.uid;
                for (let i = 0, len = gObj.groupSettings.columns.length; i < len; i++) {
                    detailRow.appendChild(this.parent.createElement('td', { className: 'e-indentcell' }));
                    row$$1.cells.unshift(new Cell({ cellType: CellType.Indent }));
                }
                detailRow.appendChild(this.parent.createElement('td', { className: 'e-detailindentcell' }));
                detailRow.appendChild(detailCell);
                tr.parentNode.insertBefore(detailRow, tr.nextSibling);
                if (gObj.detailTemplate) {
                    const isReactCompiler = this.parent.isReact && typeof (gObj.detailTemplate) !== 'string';
                    const detailTemplateID = gObj.element.id + 'detailTemplate';
                    if (isReactCompiler) {
                        gObj.getDetailTemplate()(data, gObj, 'detailTemplate', detailTemplateID, null, null, detailCell);
                        this.parent.renderTemplates();
                    }
                    else {
                        appendChildren(detailCell, gObj.getDetailTemplate()(data, gObj, 'detailTemplate', detailTemplateID, undefined, undefined, undefined, this.parent['root']));
                    }
                }
                else {
                    childGrid = new Grid(this.getGridModel(gObj, rowObj, gObj.printMode));
                    this.childRefs.push(childGrid);
                    if (childGrid.query) {
                        childGrid.query = childGrid.query.clone();
                    }
                    childGrid[parent] = {
                        parentID: gObj.element.id,
                        parentPrimaryKeys: gObj.getPrimaryKeyFieldNames(),
                        parentKeyField: gObj.childGrid.queryString,
                        parentKeyFieldValue: data[gObj.childGrid.queryString],
                        parentRowData: data
                    };
                    childGrid.isLegacyTemplate = gObj.isReact
                        || gObj.isLegacyTemplate;
                    if (gObj.isPrinting) {
                        childGrid.isPrinting = true;
                        childGrid.on(contentReady, this.promiseResolve(childGrid), this);
                        childGrid.on(onEmpty, this.promiseResolve(childGrid), this);
                    }
                    rowObj.childGrid = childGrid;
                    const modules = childGrid.getInjectedModules();
                    const injectedModues = gObj.getInjectedModules();
                    if (!modules || modules.length !== injectedModues.length) {
                        childGrid.setInjectedModules(injectedModues);
                    }
                    const gridElem = this.parent.createElement('div', {
                        id: 'child' + parents(tr, 'e-grid').length +
                            '_grid' + tr.rowIndex + getUid('')
                    });
                    detailCell.appendChild(gridElem);
                    childGrid.appendTo(gridElem);
                }
                detailRow.appendChild(detailCell);
                if (tr.nextSibling) {
                    tr.parentNode.insertBefore(detailRow, tr.nextSibling);
                }
                else {
                    tr.parentNode.appendChild(detailRow);
                }
                const rowElems = gObj.getRows();
                const rowObjs = gObj.getRowsObject();
                rowElems.splice(rowElems.indexOf(tr) + 1, 0, detailRow);
                rowObjs.splice(rowObjs.indexOf(rowObj) + 1, 0, row$$1);
                gObj.trigger(detailDataBound, { detailElement: detailCell, data: data, childGrid: childGrid });
                gObj.notify(detailDataBound, { rows: rowObjs });
            }
            classList(target, ['e-detailrowexpand'], ['e-detailrowcollapse']);
            classList(target.firstElementChild, ['e-dtdiagonaldown', 'e-icon-gdownarrow'], ['e-dtdiagonalright', 'e-icon-grightarrow']);
            rowObj.isExpand = true;
            if (target.classList.contains('e-lastrowcell') && this.parent.getContent().clientHeight > table$$1.scrollHeight) {
                removeClass(target.parentElement.querySelectorAll('td'), 'e-lastrowcell');
                const detailrowIdx = table$$1.querySelector(tbody).getElementsByClassName('e-detailrow').length - 1;
                addClass(table$$1.querySelector(tbody).getElementsByClassName('e-detailrow')[detailrowIdx].childNodes, ['e-lastrowcell']);
                this.lastrowcell = true;
            }
            this.aria.setExpand(target, true);
        }
        else {
            if (this.isDetailRow(nextRow)) {
                nextRow.style.display = 'none';
                gObj.notify(detailStateChange, { data: rowObj.data,
                    childGrid: gObj.childGrid, detailElement: target, isExpanded: isExpanded });
            }
            classList(target, ['e-detailrowcollapse'], ['e-detailrowexpand']);
            classList(target.firstElementChild, ['e-dtdiagonalright', 'e-icon-grightarrow'], ['e-dtdiagonaldown', 'e-icon-gdownarrow']);
            if (parseInt(tr.getAttribute(ariaRowIndex), 10) === lastrowIdx && this.lastrowcell) {
                addClass(target.parentElement.querySelectorAll('td'), 'e-lastrowcell');
                this.lastrowcell = false;
            }
            rowObj.isExpand = false;
            this.aria.setExpand(target, false);
        }
        if (!isNullOrUndefined(gObj.detailTemplate)) {
            gObj.updateVisibleExpandCollapseRows();
            gObj.notify(refreshExpandandCollapse, { rows: gObj.getRowsObject() });
        }
    }
    /**
     * @hidden
     * @param {IGrid} gObj - specifies the grid Object
     * @param {Row<Column>}rowObj - specifies the row object
     * @param {string} printMode - specifies the printmode
     * @returns {Object} returns the object
     */
    getGridModel(gObj, rowObj, printMode) {
        let gridModel;
        if (gObj.isPrinting && rowObj.isExpand && gObj.expandedRows &&
            gObj.expandedRows[rowObj.index] && gObj.expandedRows[rowObj.index].gridModel) {
            gObj.expandedRows[rowObj.index].gridModel.hierarchyPrintMode = gObj.childGrid.hierarchyPrintMode;
            gridModel = gObj.expandedRows[rowObj.index].gridModel;
        }
        else {
            if (gObj.isPrinting && gObj.childGrid.allowPaging) {
                gObj.childGrid.allowPaging = printMode === 'CurrentPage';
            }
            gridModel = extend({}, {}, gObj.childGrid, true);
        }
        return gridModel;
    }
    promiseResolve(grid) {
        return () => {
            grid.off(contentReady, this.promiseResolve);
            grid.off(onEmpty, this.promiseResolve);
            grid.notify(hierarchyPrint, {});
        };
    }
    isDetailRow(row$$1) {
        return row$$1 && row$$1.classList.contains('e-detailrow');
    }
    destroy() {
        const gridElement = this.parent.element;
        if (this.parent.isDestroyed || !gridElement || (!gridElement.querySelector('.' + gridHeader) &&
            !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        this.parent.off(click, this.clickHandler);
        this.parent.off(destroy, this.destroy);
        this.parent.off(keyPressed, this.keyPressHandler);
        this.parent.off(expandChildGrid, this.expand);
        this.parent.off(columnVisibilityChanged, this.refreshColSpan);
        this.parent.off(destroy, this.destroyChildGrids);
        this.parent.off(destroyChildGrid, this.destroyChildGrids);
    }
    getTDfromIndex(index, className) {
        const tr = this.parent.getDataRows()[index];
        if (tr && tr.querySelector(className)) {
            return tr.querySelector(className);
        }
        return null;
    }
    /**
     * Expands a detail row with the given target.
     *
     * @param  {Element} target - Defines the collapsed element to expand.
     * @returns {void}
     */
    expand(target) {
        if (!isNaN(target)) {
            target = this.getTDfromIndex(target, '.e-detailrowcollapse');
        }
        if (target && target.classList.contains('e-detailrowcollapse')) {
            this.toogleExpandcollapse(target);
        }
    }
    /**
     * Collapses a detail row with the given target.
     *
     * @param  {Element} target - Defines the expanded element to collapse.
     * @returns {void}
     */
    collapse(target) {
        if (!isNaN(target)) {
            target = this.getTDfromIndex(target, '.e-detailrowexpand');
        }
        if (target && target.classList.contains('e-detailrowexpand')) {
            this.toogleExpandcollapse(target);
        }
    }
    /**
     * Expands all the detail rows of the Grid.
     *
     * @returns {void}
     */
    expandAll() {
        this.expandCollapse(true);
        this.parent.trigger(actionComplete, { requestType: 'expandAllComplete', type: actionComplete, moduleObj: this });
    }
    /**
     * Collapses all the detail rows of the Grid.
     *
     * @returns {void}
     */
    collapseAll() {
        this.expandCollapse(false);
        this.parent.trigger(actionComplete, { requestType: 'collapseAllComplete', type: actionComplete, moduleObj: this });
    }
    expandCollapse(isExpand) {
        let td;
        const rows = this.parent.getDataRows();
        for (let i = 0, len = rows.length; i < len; i++) {
            td = rows[i].querySelector('.e-detailrowcollapse, .e-detailrowexpand');
            if (isExpand) {
                this.expand(td);
            }
            else {
                this.collapse(td);
            }
        }
    }
    keyPressHandler(e) {
        const gObj = this.parent;
        switch (e.action) {
            case 'ctrlDownArrow':
                this.expandAll();
                break;
            case 'ctrlUpArrow':
                this.collapseAll();
                break;
            case 'altUpArrow':
            case 'altDownArrow':
                // eslint-disable-next-line no-case-declarations
                const selected = gObj.allowSelection ? gObj.getSelectedRowIndexes() : [];
                if (selected.length) {
                    const dataRow = gObj.getDataRows()[selected[selected.length - 1]];
                    const td = dataRow.querySelector('.e-detailrowcollapse, .e-detailrowexpand');
                    if (e.action === 'altDownArrow') {
                        this.expand(td);
                    }
                    else {
                        this.collapse(td);
                    }
                }
                break;
            case 'enter':
                if (this.parent.isEdit) {
                    return;
                }
                // eslint-disable-next-line no-case-declarations
                const element = this.focus.getFocusedElement();
                if (!e.target.classList.contains('e-detailrowcollapse') &&
                    !e.target.classList.contains('e-detailrowexpand')) {
                    break;
                }
                this.toogleExpandcollapse(element);
                break;
        }
    }
    refreshColSpan() {
        const detailrows = this.parent.contentModule.getTable().querySelectorAll('tr.e-detailrow');
        const colSpan = this.parent.getVisibleColumns().length;
        for (let i = 0; i < detailrows.length; i++) {
            detailrows[i].querySelector('.e-detailcell').setAttribute('colspan', colSpan + '');
        }
    }
    destroyChildGrids() {
        const rows = this.parent.getRowsObject();
        for (let i = 0; i < rows.length; i++) {
            rows[i].childGrid = null;
        }
        for (let i = 0; i < this.childRefs.length; i++) {
            if (!this.childRefs[i].isDestroyed) {
                this.childRefs[i].destroy();
            }
        }
        this.childRefs = [];
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'detailRow';
    }
}

/**
 * The `Toolbar` module is used to handle ToolBar actions.
 *
 * @hidden
 */
class Toolbar$1 {
    constructor(parent, serviceLocator) {
        this.predefinedItems = {};
        this.items = ['Add', 'Edit', 'Update', 'Delete', 'Cancel', 'Print', 'Search',
            'ColumnChooser', 'PdfExport', 'ExcelExport', 'CsvExport', 'WordExport'];
        this.parent = parent;
        this.gridID = parent.element.id;
        this.serviceLocator = serviceLocator;
        this.addEventListener();
    }
    render() {
        this.l10n = this.serviceLocator.getService('localization');
        const preItems = ['Add', 'Edit', 'Update', 'Delete', 'Cancel', 'Print',
            'PdfExport', 'ExcelExport', 'WordExport', 'CsvExport'];
        const isAdaptive = this.parent.enableAdaptiveUI;
        const excludingItems = ['Edit', 'Delete', 'Update', 'Cancel'];
        for (const item of preItems) {
            const itemStr = item.toLowerCase();
            const localeName = itemStr[0].toUpperCase() + itemStr.slice(1);
            this.predefinedItems[item] = {
                id: this.gridID + '_' + itemStr, prefixIcon: 'e-' + itemStr,
                text: this.l10n.getConstant(localeName), tooltipText: this.l10n.getConstant(localeName)
            };
            if (isAdaptive) {
                this.predefinedItems[item].text = '';
                this.predefinedItems[item].visible = excludingItems.indexOf(item) === -1;
            }
        }
        this.predefinedItems.Search = {
            id: this.gridID + '_search',
            tooltipText: this.l10n.getConstant('Search'), align: 'Right', cssClass: 'e-search-wrapper',
            type: 'Input'
        };
        this.predefinedItems.ColumnChooser = {
            id: this.gridID + '_' + 'columnchooser', cssClass: 'e-cc e-ccdiv e-cc-toolbar', suffixIcon: 'e-' + 'columnchooser-btn',
            text: isAdaptive ? '' : this.l10n.getConstant('Columnchooser'),
            tooltipText: this.l10n.getConstant('Columnchooser'), align: 'Right'
        };
        if (this.parent.rowRenderingMode === 'Vertical') {
            if (this.parent.allowFiltering && this.parent.filterSettings.type !== 'FilterBar') {
                this.predefinedItems.responsiveFilter = {
                    id: this.gridID + '_' + 'responsivefilter', cssClass: 'e-gridresponsiveicons e-icons',
                    suffixIcon: 'e-' + 'resfilter-icon', tooltipText: this.l10n.getConstant('FilterButton')
                };
            }
            if (this.parent.allowSorting) {
                this.predefinedItems.responsiveSort = {
                    id: this.gridID + '_' + 'responsivesort', cssClass: 'e-gridresponsiveicons e-icons',
                    suffixIcon: 'e-' + 'ressort-icon', tooltipText: this.l10n.getConstant('Sort')
                };
            }
        }
        if (this.parent.enableAdaptiveUI && this.parent.toolbar.indexOf('Search') > -1) {
            this.predefinedItems.responsiveBack = {
                id: this.gridID + '_' + 'responsiveback', cssClass: 'e-gridresponsiveicons e-icons',
                suffixIcon: 'e-' + 'resback-icon', visible: false
            };
        }
        this.createToolbar();
    }
    /**
     * Gets the toolbar of the Grid.
     *
     * @returns {Element} returns the element
     * @hidden
     */
    getToolbar() {
        return this.toolbar.element;
    }
    /**
     * Destroys the ToolBar.
     *
     * @function destroy
     * @returns {void}
     */
    destroy() {
        if (this.toolbar && !this.toolbar.isDestroyed) {
            if (!this.toolbar.element) {
                this.parent.destroyTemplate(['toolbarTemplate']);
                if (this.parent.isReact) {
                    this.parent.renderTemplates();
                }
            }
            else {
                this.toolbar.off('render-react-toolbar-template', this.addReactToolbarPortals);
                this.toolbar.destroy();
            }
            this.unWireEvent();
            this.removeEventListener();
            if (this.element.parentNode) {
                remove(this.element);
            }
        }
    }
    bindSearchEvents() {
        this.searchElement = select('#' + this.gridID + '_searchbar', this.element);
        this.wireEvent();
        this.refreshToolbarItems();
        if (this.parent.searchSettings) {
            this.updateSearchBox();
        }
    }
    toolbarCreated(isNormal) {
        if (this.element.querySelector('.e-search-wrapper')) {
            if (!this.parent.enableAdaptiveUI || isNormal) {
                this.element.querySelector('.e-search-wrapper').innerHTML = '<div class="e-input-group e-search" role="search">\
                    <input id="' + this.gridID + '_searchbar" class="e-input" name="input" type="search" \
                    placeholder= "' + this.l10n.getConstant('Search') + '"/>\
                    <span id="' + this.gridID + '_searchbutton" class="e-input-group-icon e-search-icon e-icons" \
                    tabindex="-1" title="' + this.l10n.getConstant('Search') + '" aria-label= "search" role= "search"></span> \
                    </div>';
            }
            else {
                this.element.querySelector('.e-search-wrapper').innerHTML = '<span id="' + this.gridID
                    + '_searchbutton" class="e-input-group-icon e-search-icon e-icons" \
                    tabindex="-1" title="' + this.l10n.getConstant('Search') + '" aria-label= "search"></span> \
                    </div>';
            }
        }
        this.bindSearchEvents();
    }
    createToolbar() {
        const items = this.getItems();
        this.toolbar = new Toolbar({
            items: items,
            clicked: this.toolbarClickHandler.bind(this),
            enablePersistence: this.parent.enablePersistence,
            enableRtl: this.parent.enableRtl,
            created: this.toolbarCreated.bind(this),
            cssClass: this.parent.cssClass ? this.parent.cssClass : ''
        });
        this.toolbar.isReact = this.parent.isReact;
        this.toolbar.on('render-react-toolbar-template', this.addReactToolbarPortals, this);
        const isStringTemplate = 'isStringTemplate';
        this.toolbar[isStringTemplate] = true;
        const viewStr = 'viewContainerRef';
        const registerTemp = 'registeredTemplate';
        if (this.parent[viewStr]) {
            this.toolbar[registerTemp] = {};
            this.toolbar[viewStr] = this.parent[viewStr];
        }
        this.element = this.parent.createElement('div', { id: this.gridID + '_toolbarItems' });
        if (this.parent.enableAdaptiveUI) {
            this.element.classList.add('e-res-toolbar');
        }
        if (this.parent.toolbarTemplate) {
            if (typeof (this.parent.toolbarTemplate) === 'string') {
                this.toolbar.appendTo(this.parent.toolbarTemplate);
                this.element = this.toolbar.element;
            }
            else {
                const isReactCompiler = this.parent.isReact && typeof (this.parent.toolbarTemplate) !== 'string';
                const ID = this.parent.element.id + 'toolbarTemplate';
                if (isReactCompiler) {
                    templateCompiler(this.parent.toolbarTemplate)({}, this.parent, 'toolbarTemplate', ID, null, null, this.element);
                    this.parent.renderTemplates();
                }
                else {
                    appendChildren(this.element, templateCompiler(this.parent.toolbarTemplate)({}, this.parent, 'toolbarTemplate'));
                }
            }
        }
        else {
            this.toolbar.appendTo(this.element);
        }
        this.parent.element.insertBefore(this.element, this.parent.getHeaderContent());
    }
    addReactToolbarPortals(args) {
        if (this.parent.isReact && args) {
            this.parent.portals = this.parent.portals.concat(args);
            this.parent.renderTemplates();
        }
    }
    renderResponsiveSearch(isRender) {
        if (isRender) {
            this.toolbarCreated(true);
            this.refreshResponsiveToolbarItems(ResponsiveToolbarAction.isSearch);
            this.searchElement = select('#' + this.gridID + '_searchbar', this.element);
            const right = parentsUntil(this.searchElement, 'e-toolbar-right');
            right.classList.add('e-responsive-right');
            if (this.parent.searchSettings) {
                this.updateSearchBox();
            }
            this.searchBoxObj.searchFocus({ target: this.searchElement });
            this.searchElement.focus();
        }
        else {
            this.refreshResponsiveToolbarItems(ResponsiveToolbarAction.isInitial);
        }
    }
    refreshResponsiveToolbarItems(action) {
        if (action === ResponsiveToolbarAction.isInitial) {
            const id = this.parent.element.id;
            const items = [id + '_edit', id + '_delete'];
            const selectedRecords = this.parent.getSelectedRowIndexes();
            const excludingItems = [id + '_responsiveback', id + '_update', id + '_cancel'];
            for (const item of this.toolbar.items) {
                const toolbarEle = this.toolbar.element.querySelector('#' + item.id);
                if (toolbarEle) {
                    if (items.indexOf(item.id) > -1) {
                        if (selectedRecords.length) {
                            toolbarEle.parentElement.classList.remove('e-hidden');
                        }
                        else {
                            toolbarEle.parentElement.classList.add('e-hidden');
                        }
                    }
                    else {
                        if (excludingItems.indexOf(item.id) === -1) {
                            toolbarEle.parentElement.classList.remove('e-hidden');
                        }
                        else {
                            toolbarEle.parentElement.classList.add('e-hidden');
                        }
                    }
                }
            }
            if (this.searchElement) {
                const right = parentsUntil(this.searchElement, 'e-toolbar-right');
                right.classList.remove('e-responsive-right');
                this.toolbarCreated(false);
                this.unWireEvent();
                this.searchElement = undefined;
            }
        }
        if (action === ResponsiveToolbarAction.isSearch) {
            const items = [this.parent.element.id + '_responsiveback', this.parent.element.id + '_search'];
            for (const item of this.toolbar.items) {
                const toolbarEle = this.toolbar.element.querySelector('#' + item.id);
                if (toolbarEle) {
                    if (items.indexOf(item.id) > -1) {
                        toolbarEle.parentElement.classList.remove('e-hidden');
                    }
                    else {
                        toolbarEle.parentElement.classList.add('e-hidden');
                    }
                }
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    refreshToolbarItems(args) {
        const gObj = this.parent;
        let enableItems = [];
        let disableItems = [];
        const edit = gObj.editSettings;
        const hasData = gObj.currentViewData && gObj.currentViewData.length;
        if (edit.allowAdding) {
            enableItems.push(this.gridID + '_add');
        }
        else {
            disableItems.push(this.gridID + '_add');
        }
        if (edit.allowEditing && hasData) {
            enableItems.push(this.gridID + '_edit');
        }
        else {
            disableItems.push(this.gridID + '_edit');
        }
        if (edit.allowDeleting && hasData) {
            enableItems.push(this.gridID + '_delete');
        }
        else {
            disableItems.push(this.gridID + '_delete');
        }
        if (gObj.editSettings.mode === 'Batch') {
            if (gObj.element.getElementsByClassName('e-updatedtd').length && (edit.allowAdding || edit.allowEditing)) {
                enableItems.push(this.gridID + '_update');
                enableItems.push(this.gridID + '_cancel');
            }
            else {
                disableItems.push(this.gridID + '_update');
                disableItems.push(this.gridID + '_cancel');
            }
        }
        else {
            if (gObj.isEdit && (edit.allowAdding || edit.allowEditing)) {
                enableItems = [this.gridID + '_update', this.gridID + '_cancel'];
                disableItems = [this.gridID + '_add', this.gridID + '_edit', this.gridID + '_delete'];
            }
            else {
                disableItems.push(this.gridID + '_update');
                disableItems.push(this.gridID + '_cancel');
            }
        }
        this.enableItems(enableItems, true);
        this.enableItems(disableItems, false);
    }
    getItems() {
        const items = [];
        const toolbarItems = this.parent.toolbar || [];
        if (typeof (this.parent.toolbar) === 'string') {
            return [];
        }
        if (this.parent.rowRenderingMode === 'Vertical') {
            if (this.parent.allowFiltering && this.parent.filterSettings.type !== 'FilterBar') {
                items.push(this.getItemObject('responsiveFilter'));
            }
            if (this.parent.allowSorting) {
                items.push(this.getItemObject('responsiveSort'));
            }
        }
        for (const item of toolbarItems) {
            switch (typeof item) {
                case 'number':
                    items.push(this.getItemObject(this.items[item]));
                    break;
                case 'string':
                    items.push(this.getItemObject(item));
                    break;
                default:
                    items.push(this.getItem(item));
            }
        }
        if (this.parent.enableAdaptiveUI && this.parent.toolbar.indexOf('Search') > -1) {
            items.push(this.getItemObject('responsiveBack'));
        }
        return items;
    }
    getItem(itemObject) {
        const item = this.predefinedItems[itemObject.text];
        return item ? extend(item, item, itemObject) : itemObject;
    }
    getItemObject(itemName) {
        return this.predefinedItems[itemName] || { text: itemName, id: this.gridID + '_' + itemName };
    }
    /**
     * Enables or disables ToolBar items.
     *
     * @param {string[]} items - Defines the collection of itemID of ToolBar items.
     * @param {boolean} isEnable - Defines the items to be enabled or disabled.
     * @returns {void}
     * @hidden
     */
    enableItems(items, isEnable) {
        for (const item of items) {
            const element = select('#' + item, this.element);
            if (element) {
                this.toolbar.enableItems(element.parentElement, isEnable);
            }
        }
    }
    toolbarClickHandler(args) {
        const gObj = this.parent;
        const gID = this.gridID;
        extend(args, { cancel: false });
        const newArgs = args;
        const originalEvent = args.originalEvent;
        gObj.trigger(toolbarClick, newArgs, (toolbarargs) => {
            toolbarargs.originalEvent = toolbarargs.originalEvent ? toolbarargs.originalEvent : originalEvent;
            if (!toolbarargs.cancel) {
                switch (!isNullOrUndefined(toolbarargs.item) && toolbarargs.item.id) {
                    case gID + '_print':
                        gObj.print();
                        break;
                    case gID + '_edit':
                        gObj.startEdit();
                        break;
                    case gID + '_update':
                        gObj.endEdit();
                        break;
                    case gID + '_cancel':
                        gObj.closeEdit();
                        break;
                    case gID + '_add':
                        gObj.addRecord();
                        break;
                    case gID + '_delete':
                        gObj.deleteRecord();
                        break;
                    case gID + '_search':
                        if (toolbarargs.originalEvent.target.id === gID + '_searchbutton' && this.searchElement) {
                            this.search();
                        }
                        else if (gObj.enableAdaptiveUI && !this.searchElement
                            && (toolbarargs.originalEvent.target.classList.contains('e-search-wrapper')
                                || toolbarargs.originalEvent.target.id === gID + '_searchbutton')) {
                            this.renderResponsiveSearch(true);
                        }
                        break;
                    case gID + '_columnchooser':
                        /* eslint-disable */
                        const tarElement = this.parent.element.querySelector('.e-ccdiv');
                        let y = tarElement.getBoundingClientRect().top;
                        const x = tarElement.getBoundingClientRect().left;
                        const targetEle = toolbarargs.originalEvent.target;
                        /* eslint-enable */
                        y = tarElement.getBoundingClientRect().top + tarElement.offsetTop;
                        gObj.createColumnchooser(x, y, targetEle);
                        break;
                    case gID + '_responsivefilter':
                        gObj.showResponsiveCustomFilter();
                        break;
                    case gID + '_responsivesort':
                        gObj.showResponsiveCustomSort();
                        break;
                    case gID + '_responsiveback':
                        this.renderResponsiveSearch(false);
                        break;
                }
            }
        });
    }
    modelChanged(e) {
        if (e.module === 'edit') {
            this.refreshToolbarItems();
        }
    }
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName() || !this.parent.toolbar) {
            return;
        }
        if (this.element) {
            remove(this.element);
        }
        this.render();
    }
    keyUpHandler(e) {
        if (e.keyCode === 13) {
            this.search();
        }
    }
    search() {
        this.parent.search(this.searchElement.value);
    }
    updateSearchBox() {
        if (this.searchElement) {
            this.searchElement.value = this.parent.searchSettings.key;
        }
    }
    wireEvent() {
        if (this.searchElement) {
            this.searchBoxObj = new SearchBox(this.searchElement);
            EventHandler.add(this.searchElement, 'keyup', this.keyUpHandler, this);
            this.searchBoxObj.wireEvent();
        }
    }
    unWireEvent() {
        if (this.searchElement) {
            EventHandler.remove(this.searchElement, 'keyup', this.keyUpHandler);
            this.searchBoxObj.unWireEvent();
        }
    }
    reRenderToolbar() {
        if (this.element) {
            remove(this.element);
        }
        this.render();
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.evtHandlers = [{ event: setFullScreenDialog, handler: this.reRenderToolbar },
            { event: initialEnd, handler: this.render },
            { event: uiUpdate, handler: this.onPropertyChanged },
            { event: inBoundModelChanged, handler: this.updateSearchBox.bind(this) },
            { event: modelChanged, handler: this.refreshToolbarItems },
            { event: toolbarRefresh, handler: this.refreshToolbarItems },
            { event: inBoundModelChanged, handler: this.modelChanged },
            { event: dataBound, handler: this.refreshToolbarItems },
            { event: click, handler: this.removeResponsiveSearch },
            { event: rowModeChange, handler: this.reRenderToolbar },
            { event: destroy, handler: this.destroy }];
        addRemoveEventListener(this.parent, this.evtHandlers, true, this);
        this.rowSelectedFunction = this.rowSelected.bind(this);
        this.rowDeSelectedFunction = this.rowSelected.bind(this);
        this.parent.addEventListener(rowSelected, this.rowSelectedFunction);
        this.parent.addEventListener(rowDeselected, this.rowDeSelectedFunction);
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        addRemoveEventListener(this.parent, this.evtHandlers, false);
        this.parent.removeEventListener(rowSelected, this.rowSelectedFunction);
        this.parent.removeEventListener(rowDeselected, this.rowDeSelectedFunction);
    }
    removeResponsiveSearch(e) {
        const target = e.target;
        const isSearch = target.classList.contains('e-search-icon') || target.classList.contains('e-search-wrapper');
        if (this.parent.enableAdaptiveUI && !isSearch && this.searchElement
            && !parentsUntil(e.target, 'e-res-toolbar')) {
            this.renderResponsiveSearch(false);
        }
    }
    rowSelected() {
        if (this.parent.enableAdaptiveUI) {
            this.refreshResponsiveToolbarItems(ResponsiveToolbarAction.isInitial);
        }
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     */
    getModuleName() {
        return 'toolbar';
    }
}

/**
 * Footer module is used to render grid content
 *
 * @hidden
 */
class FooterRenderer extends ContentRender {
    constructor(gridModule, serviceLocator) {
        super(gridModule, serviceLocator);
        this.aggregates = {};
        this.parent = gridModule;
        this.locator = serviceLocator;
        this.modelGenerator = new SummaryModelGenerator(this.parent);
        this.addEventListener();
    }
    /**
     * The function is used to render grid footer div
     *
     * @returns {void}
     */
    renderPanel() {
        const div = this.parent.createElement('div', { className: gridFooter });
        const innerDiv = this.parent.createElement('div', { className: 'e-summarycontent' });
        let movableContent$$1 = innerDiv;
        if (this.parent.isFrozenGrid()) {
            const fDiv = this.parent.createElement('div', { className: 'e-frozenfootercontent e-frozen-left-footercontent' });
            const mDiv = this.parent.createElement('div', { className: 'e-movablefootercontent' });
            const frDiv = this.parent.createElement('div', { className: 'e-frozenfootercontent e-frozen-right-footercontent' });
            if (this.parent.getFrozenColumns() || this.parent.getFrozenLeftColumnsCount()) {
                innerDiv.appendChild(fDiv);
                this.frozenContent = fDiv;
            }
            innerDiv.appendChild(mDiv);
            this.movableContent = mDiv;
            movableContent$$1 = mDiv;
            if (this.parent.getFrozenRightColumnsCount()) {
                innerDiv.appendChild(frDiv);
                this.frozenRightContent = frDiv;
            }
        }
        if (Browser.isDevice) {
            movableContent$$1.style.overflowX = 'scroll';
        }
        div.appendChild(innerDiv);
        this.setPanel(div);
        if (this.parent.getPager() != null) {
            this.parent.element.insertBefore(div, this.parent.getPager());
        }
        else {
            this.parent.element.appendChild(div);
        }
    }
    /**
     * The function is used to render grid footer table
     *
     * @returns {void}
     */
    renderTable() {
        const frzCols = this.parent.getFrozenColumns() || this.parent.getFrozenLeftColumnsCount();
        const innerDiv = this.createContentTable('_footer_table');
        const table$$1 = innerDiv.querySelector('.' + table);
        const tFoot = this.parent.createElement('tfoot');
        table$$1.appendChild(tFoot);
        if (this.parent.isFrozenGrid()) {
            const freezeTable = table$$1.cloneNode(true);
            const frTable = table$$1.cloneNode(true);
            if (frzCols) {
                this.frozenContent.appendChild(freezeTable);
                this.freezeTable = freezeTable;
            }
            if (this.parent.getFrozenRightColumnsCount()) {
                remove(frTable.querySelector(colGroup));
                const hdr = this.parent.getHeaderContent().querySelector('.e-frozen-right-header');
                const frCol = (hdr.querySelector(colGroup).cloneNode(true));
                frTable.insertBefore(frCol, frTable.querySelector(tbody));
                this.frozenRightContent.appendChild(frTable);
                this.frTable = frTable;
            }
            this.movableContent.appendChild(table$$1);
            remove(table$$1.querySelector(colGroup));
            const colGroup$$1 = ((this.parent.getHeaderContent().querySelector('.' + movableHeader).querySelector(colGroup)).cloneNode(true));
            table$$1.insertBefore(colGroup$$1, table$$1.querySelector(tbody));
            this.setColGroup(colGroup$$1);
        }
        this.setTable(table$$1);
    }
    renderSummaryContent(e, table$$1, cStart, cEnd) {
        const input = this.parent.dataSource instanceof Array ? !this.parent.getDataModule().isRemote() &&
            this.parent.parentDetails ? this.getData() : this.parent.dataSource : this.parent.currentViewData;
        const summaries = this.modelGenerator.getData();
        const dummies = isNullOrUndefined(cStart) ? this.modelGenerator.getColumns() :
            this.modelGenerator.getColumns(cStart, cEnd);
        // eslint-disable-next-line max-len
        const rows = isNullOrUndefined(cStart) ? this.modelGenerator.generateRows(input, e || this.aggregates) :
            this.modelGenerator.generateRows(input, e || this.aggregates, cStart, cEnd);
        const fragment = document.createDocumentFragment();
        const rowrenderer = new RowRenderer(this.locator, null, this.parent);
        rowrenderer.element = this.parent.createElement('TR', { className: 'e-summaryrow', attrs: { role: 'row' } });
        for (let srow = 0, len = summaries.length; srow < len; srow++) {
            const row$$1 = rows[srow];
            if (!row$$1) {
                continue;
            }
            const tr = rowrenderer.render(row$$1, dummies);
            fragment.appendChild(tr);
        }
        table$$1.tFoot.appendChild(fragment);
        this.aggregates = !isNullOrUndefined(e) ? e : this.aggregates;
    }
    refresh(e) {
        const frzCols = this.parent.getFrozenColumns() || this.parent.getFrozenLeftColumnsCount();
        const movable = this.parent.getMovableColumnsCount();
        const right = this.parent.getFrozenRightColumnsCount();
        if (this.parent.isFrozenGrid()) {
            remove(this.getPanel());
            this.renderPanel();
            this.renderTable();
            if (frzCols) {
                this.freezeTable.tFoot.innerHTML = '';
                this.renderSummaryContent(e, this.freezeTable, 0, frzCols);
            }
        }
        this.getTable().tFoot.innerHTML = '';
        this.renderSummaryContent(e, this.getTable(), frzCols, right ? frzCols + movable : undefined);
        if (this.parent.getFrozenRightColumnsCount()) {
            this.frTable.tFoot.innerHTML = '';
            this.renderSummaryContent(e, this.frTable, frzCols + movable, frzCols + movable + right);
            const movableLastCell = [].slice.call(this.getTable().getElementsByClassName('e-lastsummarycell'));
            if (movableLastCell.length) {
                for (let i = 0; i < movableLastCell.length; i++) {
                    movableLastCell[i].style.borderRight = '0px';
                }
            }
        }
        // check freeze content have no row case
        if (this.parent.isFrozenGrid()) {
            const movableCnt = [].slice.call(this.parent.element.querySelector('.e-movablefootercontent')
                .getElementsByClassName('e-summaryrow'));
            let frozenCnt;
            if (frzCols) {
                frozenCnt = [].slice.call(this.parent.element.querySelector('.e-frozen-left-footercontent')
                    .getElementsByClassName('e-summaryrow'));
                this.refreshHeight(frozenCnt, movableCnt);
                const frozenDiv = this.frozenContent;
                if (!frozenDiv.offsetHeight) {
                    frozenDiv.style.height = this.getTable().offsetHeight + 'px';
                }
            }
            if (right) {
                const frCnt = [].slice.call(this.parent.element.querySelector('.e-frozen-right-footercontent')
                    .getElementsByClassName('e-summaryrow'));
                this.refreshHeight(frCnt, movableCnt);
                if (frozenCnt) {
                    this.refreshHeight(frCnt, frozenCnt);
                }
                const frDiv = this.frTable;
                if (!frDiv.offsetHeight) {
                    frDiv.style.height = this.getTable().offsetHeight + 'px';
                }
            }
            if (this.parent.allowResizing) {
                this.updateFooterTableWidth(this.getTable());
            }
        }
        if (isNullOrUndefined(e) && this.parent.isAutoFitColumns) {
            this.parent.autoFitColumns();
        }
        this.onScroll();
    }
    refreshHeight(frozenCnt, movableCnt) {
        for (let i = 0; i < frozenCnt.length; i++) {
            const frozenHeight$$1 = frozenCnt[i].getBoundingClientRect().height;
            const movableHeight = movableCnt[i].getBoundingClientRect().height;
            if (frozenHeight$$1 < movableHeight) {
                frozenCnt[i].classList.remove('e-hide');
                frozenCnt[i].style.height = movableHeight + 'px';
            }
            else if (frozenHeight$$1 > movableHeight) {
                movableCnt[i].classList.remove('e-hide');
                movableCnt[i].style.height = frozenHeight$$1 + 'px';
            }
        }
    }
    refreshCol() {
        // frozen table
        let mheaderCol;
        const fheaderCol = mheaderCol = this.parent.element.querySelector('.' + gridHeader).querySelector(colGroup).cloneNode(true);
        if (this.parent.getFrozenColumns()) {
            // eslint-disable-next-line max-len
            const isXaxis = this.parent.enableColumnVirtualization && this.parent.contentModule.isXaxis();
            if (isXaxis) {
                mheaderCol = this.parent.getMovableVirtualHeader().querySelector(colGroup).cloneNode(true);
            }
            else {
                mheaderCol = renderMovable(fheaderCol, this.parent.getFrozenColumns(), this.parent);
                this.freezeTable.replaceChild(fheaderCol, this.freezeTable.querySelector(colGroup));
            }
        }
        this.getTable().replaceChild(mheaderCol, this.getColGroup());
        this.setColGroup(mheaderCol);
    }
    onWidthChange(args) {
        this.getColFromIndex(args.index).style.width = formatUnit(args.width);
        if (this.parent.allowResizing && args.module === 'resize') {
            this.updateFooterTableWidth(this.getTable());
        }
    }
    onScroll(e = {
        left: this.parent.isFrozenGrid() ? this.parent.getContent().querySelector('.' + movableContent).scrollLeft :
            this.parent.getContent().firstChild.scrollLeft
    }) {
        this.getTable().parentElement.scrollLeft = e.left;
    }
    getColFromIndex(index) {
        const left = this.parent.getFrozenLeftColumnsCount() || this.parent.getFrozenColumns();
        const movable = this.parent.getMovableColumnsCount();
        const right = this.parent.getFrozenRightColumnsCount();
        const isDrag = this.parent.isRowDragable() && !(this.parent.getFrozenMode() === 'Right') ? 1 : 0;
        if (left && index < (left + isDrag)) {
            return this.freezeTable.querySelector(colGroup).children[index];
        }
        else if (right && (index >= (left + movable + isDrag))) {
            return this.frTable.querySelector(colGroup).children[index - (left ? (left + movable + isDrag) :
                (left + movable))];
        }
        return this.getColGroup().children[index - (left ? (left + isDrag) : left)];
    }
    columnVisibilityChanged() {
        this.refresh();
    }
    addEventListener() {
        this.evtHandlers = [{ event: colGroupRefresh, handler: this.refreshCol },
            { event: columnWidthChanged, handler: this.onWidthChange },
            { event: scroll, handler: this.onScroll },
            { event: columnVisibilityChanged, handler: this.columnVisibilityChanged },
            { event: refreshFooterRenderer, handler: this.refreshFooterRenderer }];
        addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    }
    removeEventListener() {
        addRemoveEventListener(this.parent, this.evtHandlers, false);
    }
    updateFooterTableWidth(tFoot) {
        const tHead = this.parent.getHeaderTable();
        if (tHead && tFoot) {
            tFoot.style.width = tHead.style.width;
        }
    }
    refreshFooterRenderer(editedData) {
        const aggregates = this.onAggregates(editedData);
        this.refresh(aggregates);
    }
    getIndexByKey(data, ds) {
        const key = this.parent.getPrimaryKeyFieldNames()[0];
        for (let i = 0; i < ds.length; i++) {
            if (ds[i][key] === data[key]) {
                return i;
            }
        }
        return -1;
    }
    getData() {
        return this.parent.getDataModule().dataManager.executeLocal(this.parent.getDataModule().generateQuery(true));
    }
    onAggregates(editedData) {
        editedData = editedData instanceof Array ? editedData : [];
        const field = this.parent.getPrimaryKeyFieldNames()[0];
        let dataSource = [];
        let isModified = false;
        let batchChanges = {};
        const gridData = 'dataSource';
        let isFiltered = false;
        if (!this.parent.renderModule.data.isRemote() && this.parent.allowFiltering && this.parent.filterSettings.columns.length) {
            isFiltered = true;
        }
        let currentViewData = this.parent.dataSource instanceof Array ?
            (isFiltered ? this.parent.getFilteredRecords() : this.parent.dataSource) : (this.parent.dataSource[gridData].json.length ?
            this.parent.dataSource[gridData].json : this.parent.getCurrentViewRecords());
        if (this.parent.parentDetails && !this.parent.getDataModule().isRemote()) {
            currentViewData = this.getData();
        }
        if (this.parent.editModule) {
            batchChanges = this.parent.editModule.getBatchChanges();
        }
        if (Object.keys(batchChanges).length) {
            for (let i = 0; i < currentViewData.length; i++) {
                isModified = false;
                // eslint-disable-next-line max-len
                if (batchChanges[changedRecords].length && this.getIndexByKey(currentViewData[i], batchChanges[changedRecords]) > -1) {
                    isModified = true;
                    // eslint-disable-next-line max-len
                    dataSource.push(batchChanges[changedRecords][this.getIndexByKey(currentViewData[i], batchChanges[changedRecords])]);
                }
                // eslint-disable-next-line max-len
                if (batchChanges[deletedRecords].length && this.getIndexByKey(currentViewData[i], batchChanges[deletedRecords]) > -1) {
                    isModified = true;
                }
                else if (!isModified) {
                    dataSource.push(currentViewData[i]);
                }
            }
            if (batchChanges[addedRecords].length) {
                for (let i = 0; i < batchChanges[addedRecords].length; i++) {
                    dataSource.push(batchChanges[addedRecords][i]);
                }
            }
        }
        else {
            if (editedData.length) {
                const data = iterateExtend(currentViewData);
                dataSource = data.map((item) => {
                    const idVal = DataUtil.getObject(field, item);
                    let value;
                    const hasVal = editedData.some((cItem) => {
                        value = cItem;
                        return idVal === DataUtil.getObject(field, cItem);
                    });
                    return hasVal ? value : item;
                });
            }
            else {
                dataSource = currentViewData;
            }
        }
        const eData = editedData;
        if ((eData.type && eData.type === 'cancel')) {
            dataSource = currentViewData;
        }
        const aggregate = {};
        let agrVal;
        const aggregateRows = this.parent.aggregates;
        for (let i = 0; i < aggregateRows.length; i++) {
            for (let j = 0; j < aggregateRows[i].columns.length; j++) {
                let data = [];
                const type = aggregateRows[i].columns[j].type.toString();
                data = dataSource;
                agrVal = calculateAggregate(type, data, aggregateRows[i].columns[j], this.parent);
                aggregate[aggregateRows[i].columns[j].field + ' - ' + type.toLowerCase()] = agrVal;
            }
        }
        const result = {
            result: dataSource,
            count: dataSource.length,
            aggregates: aggregate
        };
        return result;
    }
}

/**
 * SummaryCellRenderer class which responsible for building summary cell content.
 *
 * @hidden
 */
class SummaryCellRenderer extends CellRenderer {
    constructor() {
        super(...arguments);
        this.element = this.parent
            .createElement('TD', { className: 'e-summarycell', attrs: { role: 'gridcell', tabindex: '-1' } });
    }
    getValue(field, data, column) {
        const key = !isNullOrUndefined(column.type) ?
            column.field + ' - ' + (typeof column.type === 'string' ? column.type.toLowerCase() : '') : column.columnName;
        return data[column.columnName] ? data[column.columnName][key] : '';
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    evaluate(node, cell, data, attributes$$1) {
        const column = cell.column;
        this.parent.on(refreshAggregateCell, this.refreshWithAggregate(node, cell), this);
        if (!(column.footerTemplate || column.groupFooterTemplate || column.groupCaptionTemplate)) {
            if (this.parent.rowRenderingMode === 'Vertical') {
                node.style.display = 'none';
            }
            return true;
        }
        else {
            if (this.parent.rowRenderingMode === 'Vertical') {
                node.classList.add('e-lastsummarycell');
            }
        }
        const tempObj = column.getTemplate(cell.cellType);
        const tempID = '';
        const gColumn = this.parent.getColumnByField(data[column.columnName].field);
        if (!isNullOrUndefined(gColumn)) {
            data[column.columnName].headerText = gColumn.headerText;
            if (gColumn.isForeignColumn()) {
                const fData = gColumn.columnData.filter((e) => {
                    return e[gColumn.foreignKeyField] === data[column.columnName].key;
                })[0];
                if (fData) {
                    data[column.columnName].foreignKey = fData[gColumn.foreignKeyValue];
                }
            }
        }
        const isReactCompiler = this.parent.isReact && (column.footerTemplate ?
            typeof (column.footerTemplate) !== 'string' : column.groupFooterTemplate ? typeof (column.groupFooterTemplate) !== 'string'
            : column.groupCaptionTemplate ? typeof (column.groupCaptionTemplate) !== 'string' : false);
        if (isReactCompiler) {
            const prop = data[column.columnName];
            if (tempObj.property === 'groupCaptionTemplate' || tempObj.property === 'groupFooterTemplate') {
                const groupKey = 'groupKey';
                const key = 'key';
                prop[groupKey] = prop[key];
            }
            tempObj.fn(prop, this.parent, tempObj.property, tempID, null, null, node);
            this.parent.renderTemplates();
        }
        else {
            appendChildren(node, tempObj.fn(data[column.columnName], this.parent, tempObj.property, tempID));
        }
        return false;
    }
    refreshWithAggregate(node, cell) {
        const cellNode = cell;
        return (args) => {
            const cell = cellNode;
            const field = cell.column.columnName ? cell.column.columnName : null;
            const curCell = (!isNullOrUndefined(field) ? args.cells.filter((cell) => cell.column.columnName === field)[0] : null);
            if (node.parentElement && node.parentElement.getAttribute('data-uid') === args.dataUid && field &&
                field === curCell.column.columnName) {
                this.refreshTD(node, curCell, args.data);
            }
        };
    }
}

/**
 * Summary Action controller.
 */
class Aggregate {
    constructor(parent, locator) {
        this.parent = parent;
        this.locator = locator;
        this.addEventListener();
    }
    getModuleName() {
        return 'aggregate';
    }
    initiateRender() {
        const cellFac = this.locator.getService('cellRendererFactory');
        const instance = new SummaryCellRenderer(this.parent, this.locator);
        const type = [CellType.Summary, CellType.CaptionSummary, CellType.GroupSummary];
        for (let i = 0; i < type.length; i++) {
            cellFac.addCellRenderer(type[i], instance);
        }
        this.footerRenderer = new FooterRenderer(this.parent, this.locator);
        this.footerRenderer.renderPanel();
        this.footerRenderer.renderTable();
        const footerContent = this.footerRenderer.getPanel();
        if (this.parent.element.scrollHeight >= this.parent.getHeight(this.parent.height)
            && footerContent) {
            addClass([footerContent], ['e-footerpadding']);
        }
        this.locator.register('footerRenderer', this.footerRenderer);
        const fn = () => {
            this.prepareSummaryInfo();
            this.parent.off(dataReady, fn);
        };
        this.parent.on(dataReady, fn, this);
        this.parent.on(dataReady, this.footerRenderer.refresh, this.footerRenderer);
    }
    /**
     * @returns {void}
     * @hidden
     */
    prepareSummaryInfo() {
        summaryIterator(this.parent.aggregates, (column) => {
            const cFormat = getValue('customFormat', column);
            if (!isNullOrUndefined(cFormat)) {
                column.setPropertiesSilent({ format: cFormat });
            }
            if (typeof (column.format) === 'object') {
                const valueFormatter = new ValueFormatter();
                column.setFormatter(valueFormatter.getFormatFunction(extend({}, column.format)));
            }
            else if (typeof (column.format) === 'string') {
                const fmtr = this.locator.getService('valueFormatter');
                column.setFormatter(fmtr.getFormatFunction({ format: column.format }));
            }
            column.setPropertiesSilent({ columnName: column.columnName || column.field });
        });
    }
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName()) {
            return;
        }
        if (isNullOrUndefined(this.footerRenderer)) {
            this.initiateRender();
        }
        this.prepareSummaryInfo();
        this.footerRenderer.refresh();
        const cModel = new CaptionSummaryModelGenerator(this.parent);
        const gModel = new GroupSummaryModelGenerator(this.parent);
        if (gModel.getData().length !== 0 || !cModel.isEmpty()) {
            this.parent.notify(modelChanged, {});
        }
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(initialEnd, this.initiateRender, this);
        this.parent.on(uiUpdate, this.onPropertyChanged, this);
        this.parent.on(refreshAggregates, this.refresh, this);
        this.parent.on(destroy, this.destroy, this);
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.footerRenderer.removeEventListener();
        this.parent.off(initialEnd, this.initiateRender);
        this.parent.off(dataReady, this.footerRenderer.refresh);
        this.parent.off(uiUpdate, this.onPropertyChanged);
        this.parent.off(refreshAggregates, this.refresh);
        this.parent.off(destroy, this.destroy);
        remove(this.parent.element.querySelector('.' + gridFooter));
    }
    destroy() {
        this.removeEventListener();
    }
    refresh(data) {
        const editedData = data instanceof Array ? data : [data];
        this.parent.notify(refreshFooterRenderer, editedData);
        if (this.parent.groupSettings.columns.length > 0) {
            this.parent.notify(groupAggregates, editedData);
        }
    }
}
/**
 * @param {AggregateRowModel[]} aggregates - specifies the AggregateRowModel
 * @param {Function} callback - specifies the Function
 * @returns {void}
 * @private
 */
function summaryIterator(aggregates, callback) {
    for (let i = 0; i < aggregates.length; i++) {
        for (let j = 0; j < aggregates[i].columns.length; j++) {
            callback(aggregates[i].columns[j], aggregates[i]);
        }
    }
}

/**
 * InterSectionObserver - class watch whether it enters the viewport.
 *
 * @hidden
 */
class InterSectionObserver {
    constructor(element, options, movableEle) {
        this.fromWheel = false;
        this.touchMove = false;
        this.options = {};
        this.sentinelInfo = {
            'up': {
                check: (rect, info) => {
                    const top = rect.top - this.containerRect.top;
                    info.entered = top >= 0;
                    return top + (this.options.pageHeight / 2) >= 0;
                },
                axis: 'Y'
            },
            'down': {
                check: (rect, info) => {
                    const bottom = rect.bottom;
                    info.entered = rect.bottom <= this.containerRect.bottom;
                    return ((bottom - this.containerRect.top) - (this.options.pageHeight / 2)) <= this.options.pageHeight / 2;
                }, axis: 'Y'
            },
            'right': {
                check: (rect, info) => {
                    const right = rect.right;
                    if (this.movableEle) {
                        info.entered = right < this.movableContainerRect.right;
                        return right - this.movableContainerRect.width <= this.movableContainerRect.right;
                    }
                    info.entered = right < this.containerRect.right;
                    return right - this.containerRect.width <= this.containerRect.right;
                }, axis: 'X'
            },
            'left': {
                check: (rect, info) => {
                    const left = rect.left;
                    info.entered = left > 0;
                    if (this.movableEle) {
                        return left + this.movableContainerRect.width >= this.movableContainerRect.left;
                    }
                    return left + this.containerRect.width >= this.containerRect.left;
                }, axis: 'X'
            }
        };
        this.element = element;
        this.options = options;
        this.movableEle = movableEle;
    }
    observe(callback, onEnterCallback) {
        this.containerRect = this.options.container.getBoundingClientRect();
        EventHandler.add(this.options.container, 'wheel', () => this.fromWheel = true, this);
        EventHandler.add(this.options.container, 'scroll', this.virtualScrollHandler(callback, onEnterCallback), this);
        if (this.options.movableContainer) {
            this.movableContainerRect = this.options.movableContainer.getBoundingClientRect();
            EventHandler.add(this.options.scrollbar, 'wheel', () => this.fromWheel = true, this);
            EventHandler.add(this.options.scrollbar, 'scroll', this.virtualScrollHandler(callback, onEnterCallback), this);
        }
    }
    check(direction) {
        const info = this.sentinelInfo[direction];
        if (this.movableContainerRect && (direction === 'left' || direction === 'right')) {
            return info.check(this.movableEle.getBoundingClientRect(), info);
        }
        return info.check(this.element.getBoundingClientRect(), info);
    }
    virtualScrollHandler(callback, onEnterCallback) {
        const delay = Browser.info.name === 'chrome' ? 200 : 100;
        const debounced100 = debounce(callback, delay);
        const debounced50 = debounce(callback, 50);
        this.options.prevTop = this.options.prevLeft = 0;
        return (e) => {
            const top = this.options.movableContainer ? this.options.container.scrollTop : e.target.scrollTop;
            const left = this.options.movableContainer ? this.options.scrollbar.scrollLeft : e.target.scrollLeft;
            let direction = this.options.prevTop < top ? 'down' : 'up';
            direction = this.options.prevLeft === left ? direction : this.options.prevLeft < left ? 'right' : 'left';
            this.options.prevTop = top;
            this.options.prevLeft = left;
            const current = this.sentinelInfo[direction];
            if (this.options.axes.indexOf(current.axis) === -1) {
                return;
            }
            const check = this.check(direction);
            if (current.entered) {
                if (this.movableEle && (direction === 'right' || direction === 'left')) {
                    onEnterCallback(this.movableEle, current, direction, { top: top, left: left }, this.fromWheel, check);
                }
                else {
                    onEnterCallback(this.element, current, direction, { top: top, left: left }, this.fromWheel, check);
                }
            }
            if (check) {
                let fn = debounced100;
                //this.fromWheel ? this.options.debounceEvent ? debounced100 : callback : debounced100;
                if (current.axis === 'X') {
                    fn = debounced50;
                }
                fn({ direction: direction, sentinel: current, offset: { top: top, left: left },
                    focusElement: document.activeElement });
            }
            this.fromWheel = false;
        };
    }
    setPageHeight(value) {
        this.options.pageHeight = value;
    }
}

/**
 * Content module is used to render grid content
 */
class VirtualRowModelGenerator {
    constructor(parent) {
        this.cOffsets = {};
        this.cache = {};
        this.movableCache = {};
        this.frozenRightCache = {};
        this.rowCache = {};
        this.data = {};
        this.groups = {};
        this.currentInfo = {};
        this.parent = parent;
        this.model = this.parent.pageSettings;
        this.rowModelGenerator = this.parent.allowGrouping ? new GroupModelGenerator(this.parent) : new RowModelGenerator(this.parent);
    }
    generateRows(data, e) {
        const isFrozen = this.parent.isFrozenGrid();
        let isManualRefresh = false;
        const info = e.virtualInfo = e.virtualInfo || this.getData();
        const xAxis = info.sentinelInfo && info.sentinelInfo.axis === 'X';
        const page = !xAxis && info.loadNext && !info.loadSelf ? info.nextInfo.page : info.page;
        let result = [];
        let indexes = this.getBlockIndexes(page);
        const loadedBlocks = [];
        if (this.currentInfo.blockIndexes) {
            indexes = info.blockIndexes = e.virtualInfo.blockIndexes = this.includePrevPage ? this.currentInfo.blockIndexes.slice(1)
                : this.currentInfo.blockIndexes.slice(0, this.currentInfo.blockIndexes.length - 1);
            isManualRefresh = true;
        }
        if ((isFrozen && (this.parent.getFrozenMode() !== leftRight && !e.renderMovableContent)
            || this.parent.getFrozenMode() === leftRight && !e.renderMovableContent && !e.renderFrozenRightContent) || !isFrozen) {
            this.checkAndResetCache(e.requestType);
        }
        if (isGroupAdaptive(this.parent) && this.parent.vcRows.length) {
            const dataRows = this.parent.vcRows.filter((row$$1) => row$$1.isDataRow);
            if ((this.parent.isManualRefresh && dataRows.length === data['records'].length) || !this.parent.isManualRefresh) {
                return result = this.parent.vcRows;
            }
        }
        if (this.parent.enableColumnVirtualization) {
            for (let i = 0; i < info.blockIndexes.length; i++) {
                if (this.isBlockAvailable(info.blockIndexes[i])) {
                    this.cache[info.blockIndexes[i]] = this.rowModelGenerator.refreshRows(this.cache[info.blockIndexes[i]]);
                }
                if ((e.renderMovableContent && this.isMovableBlockAvailable(info.blockIndexes[i]))
                    || (e.renderFrozenRightContent && this.isFrozenRightBlockAvailable(info.blockIndexes[i]))) {
                    const cache = e.renderMovableContent
                        ? this.movableCache : this.frozenRightCache;
                    cache[info.blockIndexes[i]] = this.rowModelGenerator.refreshRows(cache[info.blockIndexes[i]]);
                }
            }
        }
        const values = info.blockIndexes;
        for (let i = 0; i < values.length; i++) {
            if (!this.isBlockAvailable(values[i])) {
                const startIdx = !isNullOrUndefined(this.startIndex) ? this.startIndex : this.getStartIndex(values[i], data);
                const rows = this.rowModelGenerator.generateRows(data, {
                    virtualInfo: info, startIndex: startIdx
                });
                if (isGroupAdaptive(this.parent) && !this.parent.vcRows.length) {
                    this.parent.vRows = rows;
                    this.parent.vcRows = rows;
                    this.parent.notify(refreshVirtualMaxPage, {});
                }
                let median;
                if (isGroupAdaptive(this.parent)) {
                    this.getGroupVirtualRecordsByIndex(rows);
                }
                else {
                    if (isManualRefresh) {
                        this.setBlockForManualRefresh(this.cache, indexes, rows);
                    }
                    else {
                        median = ~~Math.max(rows.length, this.model.pageSize) / 2;
                        if (!this.isBlockAvailable(indexes[0])) {
                            this.cache[indexes[0]] = rows.slice(0, median);
                        }
                        if (!this.isBlockAvailable(indexes[1])) {
                            this.cache[indexes[1]] = rows.slice(median);
                        }
                    }
                }
            }
            if (this.parent.groupSettings.columns.length && !xAxis && this.cache[values[i]]) {
                this.cache[values[i]] = this.updateGroupRow(this.cache[values[i]], values[i]);
            }
            if ((e.renderMovableContent && !this.isMovableBlockAvailable(values[i]))
                || (e.renderFrozenRightContent && !this.isFrozenRightBlockAvailable(values[i]))) {
                const cache = e.renderMovableContent
                    ? this.movableCache : this.frozenRightCache;
                const startIdx = !isNullOrUndefined(this.startIndex) ? this.startIndex : this.getStartIndex(values[i], data);
                const rows = this.rowModelGenerator.generateRows(data, {
                    virtualInfo: info, startIndex: startIdx
                });
                if (isManualRefresh) {
                    this.setBlockForManualRefresh(cache, indexes, rows);
                }
                else {
                    const median = ~~Math.max(rows.length, this.model.pageSize) / 2;
                    if ((e.renderFrozenRightContent && !this.isFrozenRightBlockAvailable(indexes[0]))
                        || (e.renderMovableContent && !this.isMovableBlockAvailable(indexes[0]))) {
                        cache[indexes[0]] = rows.slice(0, median);
                    }
                    if ((e.renderFrozenRightContent && !this.isFrozenRightBlockAvailable(indexes[1]))
                        || (e.renderMovableContent && !this.isMovableBlockAvailable(indexes[1]))) {
                        cache[indexes[1]] = rows.slice(median);
                    }
                }
            }
            if (!e.renderMovableContent && !e.renderFrozenRightContent && this.cache[values[i]]) {
                result.push(...this.cache[values[i]]);
            }
            else {
                const cache = e.renderMovableContent
                    ? this.movableCache : this.frozenRightCache;
                if (cache[values[i]]) {
                    result.push(...cache[values[i]]);
                }
            }
            if (this.isBlockAvailable(values[i])) {
                loadedBlocks.push(values[i]);
            }
        }
        info.blockIndexes = loadedBlocks;
        const grouping = 'records';
        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
            this.parent.currentViewData[grouping] = result.map((m) => m.data);
        }
        else if (isFrozen) {
            if ((e.renderMovableContent && (this.parent.getFrozenMode() === 'Left'
                || this.parent.getFrozenMode() === 'Right' || this.parent.getFrozenColumns())) || e.renderFrozenRightContent) {
                this.parent.currentViewData = result.map((m) => m.data);
            }
        }
        else {
            this.parent.currentViewData = result.map((m) => m.data);
        }
        return result;
    }
    setBlockForManualRefresh(cache, blocks, rows) {
        const size = this.model.pageSize / 2;
        if (this.includePrevPage) {
            cache[blocks[0] - 1] = rows.slice(0, size);
            cache[blocks[0]] = rows.slice(size, size * 2);
            cache[blocks[1]] = rows.slice(size * 2, size * 3);
            cache[blocks[2]] = rows.slice(size * 3, size * 4);
        }
        else {
            cache[blocks[0]] = rows.slice(0, size);
            cache[blocks[1]] = rows.slice(size, size * 2);
            cache[blocks[2]] = rows.slice(size * 2, size * 3);
            cache[blocks[2] + 1] = rows.slice(size * 3, size * 4);
        }
    }
    getBlockIndexes(page) {
        return [page + (page - 1), page * 2];
    }
    getPage(block) {
        return block % 2 === 0 ? block / 2 : (block + 1) / 2;
    }
    isBlockAvailable(value) {
        return value in this.cache;
    }
    isMovableBlockAvailable(value) {
        return value in this.movableCache;
    }
    isFrozenRightBlockAvailable(value) {
        return value in this.frozenRightCache;
    }
    getData() {
        return {
            page: this.model.currentPage,
            blockIndexes: this.getBlockIndexes(this.model.currentPage),
            direction: 'down',
            columnIndexes: this.parent.getColumnIndexesInView()
        };
    }
    getStartIndex(blk, data, full = true) {
        const page = this.getPage(blk);
        const even = blk % 2 === 0;
        const index = (page - 1) * this.model.pageSize;
        return full || !even ? index : index + ~~(this.model.pageSize / 2);
    }
    getColumnIndexes(content$$1 = this.parent.getHeaderContent().querySelector('.' + headerContent)) {
        if (this.parent.isFrozenGrid()) {
            content$$1 = content$$1.querySelector('.' + movableHeader);
        }
        const indexes = [];
        let sLeft = content$$1.scrollLeft | 0;
        const keys = Object.keys(this.cOffsets);
        const cWidth = content$$1.getBoundingClientRect().width;
        sLeft = Math.min(this.cOffsets[keys.length - 1] - cWidth, sLeft);
        const calWidth = Browser.isDevice ? 2 * cWidth : cWidth / 2;
        const left = sLeft + cWidth + (sLeft === 0 ? calWidth : 0);
        keys.some((offset) => {
            const iOffset = Number(offset);
            const offsetVal = this.cOffsets[offset];
            const border = sLeft - calWidth <= offsetVal && left + calWidth >= offsetVal;
            if (border) {
                indexes.push(iOffset);
            }
            return left + calWidth < offsetVal;
        });
        this.addFrozenIndex(indexes);
        return indexes;
    }
    addFrozenIndex(indexes) {
        if (this.parent.getFrozenColumns() && this.parent.enableColumnVirtualization && indexes[0] === 0) {
            for (let i = 0; i < this.parent.getFrozenColumns(); i++) {
                indexes.push(indexes[indexes.length - 1] + 1);
            }
        }
    }
    checkAndResetCache(action) {
        const actions = ['paging', 'refresh', 'sorting', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder',
            'save', 'delete'];
        if (this.parent.getFrozenColumns() && this.parent.frozenRows && this.parent.enableColumnVirtualization && action === 'reorder') {
            actions.splice(actions.indexOf(action), 1);
        }
        const clear = actions.some((value) => action === value);
        if (clear) {
            this.cache = {};
            this.data = {};
            this.groups = {};
            this.movableCache = {};
            this.frozenRightCache = {};
        }
        return clear;
    }
    refreshColOffsets() {
        let col = 0;
        this.cOffsets = {};
        const gLen = this.parent.groupSettings.columns.length;
        const cols = this.parent.columns;
        const cLen = cols.length;
        const isVisible = (column) => column.visible &&
            (!this.parent.groupSettings.showGroupedColumn ? this.parent.groupSettings.columns.indexOf(column.field) < 0 : column.visible);
        const c = this.parent.groupSettings.columns;
        for (let i = 0; i < c.length; i++) {
            this.cOffsets[i] = (this.cOffsets[i - 1] | 0) + 30;
        }
        // eslint-disable-next-line prefer-spread
        const blocks = Array.apply(null, Array(cLen)).map(() => col++);
        for (let j = 0; j < blocks.length; j++) {
            blocks[j] = blocks[j] + gLen;
            this.cOffsets[blocks[j]] = (this.cOffsets[blocks[j] - 1] | 0) + (isVisible(cols[j]) ? parseInt(cols[j].width, 10) : 0);
        }
    }
    updateGroupRow(current, block) {
        const currentFirst = current[0];
        let rows = [];
        const keys = Object.keys(this.cache);
        for (let i = 0; i < keys.length; i++) {
            if (Number(keys[i]) < block) {
                rows = [...rows, ...this.cache[keys[i]]];
            }
        }
        if ((currentFirst && currentFirst.isDataRow) || block % 2 === 0) {
            return current;
        }
        return this.iterateGroup(current, rows);
    }
    iterateGroup(current, rows) {
        const currentFirst = current[0];
        let offset = 0;
        if (currentFirst && currentFirst.isDataRow) {
            return current;
        }
        const isPresent = current.some((row$$1) => {
            return rows.some((oRow, index) => {
                const res = oRow && oRow.data.field !== undefined
                    && oRow.data.field === row$$1.data.field &&
                    oRow.data.key === row$$1.data.key;
                if (res) {
                    offset = index;
                }
                return res;
            });
        });
        if (isPresent) {
            current.shift();
            current = this.iterateGroup(current, rows.slice(offset));
        }
        return current;
    }
    getRows() {
        let rows = [];
        const keys = Object.keys(this.cache);
        for (let i = 0; i < keys.length; i++) {
            rows = [...rows, ...this.cache[keys[i]]];
        }
        return rows;
    }
    generateCells(foreignKeyData$$1) {
        const cells = [];
        const cols = this.parent.columnModel;
        for (let i = 0; i < cols.length; i++) {
            cells.push(this.rowModelGenerator.generateCell(cols[i], null, null, null, null, foreignKeyData$$1));
        }
        return cells;
    }
    getGroupVirtualRecordsByIndex(rows) {
        const blocks = this.parent.contentModule.getGroupedTotalBlocks();
        const blockSize = this.parent.contentModule.getBlockSize();
        for (let i = 1; i <= blocks; i++) {
            let count = 0;
            this.cache[i] = [];
            for (let j = ((i - 1) * blockSize); j < rows.length; j++) {
                if (count === blockSize) {
                    break;
                }
                this.cache[i].push(rows[j]);
                if (rows[j].isDataRow) {
                    count++;
                }
            }
        }
    }
}

/**
 * VirtualContentRenderer
 *
 * @hidden
 */
class VirtualContentRenderer extends ContentRender {
    constructor(parent, locator) {
        super(parent, locator);
        this.prevHeight = 0;
        /** @hidden */
        this.startIndex = 0;
        this.preStartIndex = 0;
        this.preventEvent = false;
        this.actions = ['filtering', 'searching', 'grouping', 'ungrouping'];
        /** @hidden */
        this.offsets = {};
        this.tmpOffsets = {};
        /** @hidden */
        this.virtualEle = new VirtualElementHandler();
        this.offsetKeys = [];
        this.isFocused = false;
        this.isSelection = false;
        this.isBottom = false;
        this.rndrCount = 0;
        this.empty = undefined;
        this.isCancel = false;
        this.requestTypes = ['beginEdit', 'cancel', 'delete', 'add', 'save'];
        this.isNormaledit = this.parent.editSettings.mode === 'Normal';
        /** @hidden */
        this.virtualData = {};
        this.emptyRowData = {};
        this.vfColIndex = [];
        this.frzIdx = 1;
        this.isContextMenuOpen = false;
        this.isSelectionScroll = false;
        this.validationCheck = false;
        this.locator = locator;
        this.eventListener('on');
        this.parent.on(columnVisibilityChanged, this.setVisible, this);
        this.vgenerator = this.generator;
    }
    renderTable() {
        this.header = this.locator.getService('rendererFactory').getRenderer(RenderType.Header);
        super.renderTable();
        this.virtualEle.table = this.getTable();
        this.virtualEle.content = this.content = this.getPanel().querySelector('.' + content);
        this.virtualEle.renderWrapper(this.parent.height);
        this.virtualEle.renderPlaceHolder();
        this.virtualEle.wrapper.style.position = 'absolute';
        const debounceEvent = (this.parent.dataSource instanceof DataManager && !this.parent.dataSource.dataSource.offline);
        const opt = {
            container: this.content, pageHeight: this.getBlockHeight() * 2, debounceEvent: debounceEvent,
            axes: this.parent.enableColumnVirtualization ? ['X', 'Y'] : ['Y']
        };
        this.observer = new InterSectionObserver(this.virtualEle.wrapper, opt);
    }
    renderEmpty(tbody$$1) {
        this.getTable().appendChild(tbody$$1);
        this.virtualEle.adjustTable(0, 0);
    }
    getReorderedFrozenRows(args) {
        const blockIndex = args.virtualInfo.blockIndexes;
        const colsIndex = args.virtualInfo.columnIndexes;
        const page = args.virtualInfo.page;
        args.virtualInfo.blockIndexes = [1, 2];
        args.virtualInfo.page = 1;
        if (!args.renderMovableContent) {
            args.virtualInfo.columnIndexes = [];
        }
        const recordslength = this.parent.getCurrentViewRecords().length;
        const firstRecords = this.parent.renderModule.data.dataManager.dataSource.json.slice(0, recordslength);
        const virtualRows = this.vgenerator.generateRows(firstRecords, args);
        args.virtualInfo.blockIndexes = blockIndex;
        args.virtualInfo.columnIndexes = colsIndex;
        args.virtualInfo.page = page;
        return virtualRows.splice(0, this.parent.frozenRows);
    }
    scrollListener(scrollArgs) {
        this.scrollAfterEdit();
        if (this.parent.enablePersistence) {
            this.parent.scrollPosition = scrollArgs.offset;
        }
        if (this.preventEvent || this.parent.isDestroyed) {
            this.preventEvent = false;
            return;
        }
        if (isNullOrUndefined(document.activeElement)) {
            this.isFocused = false;
        }
        else {
            this.isFocused = this.content === closest(document.activeElement, '.' + content) || this.content === document.activeElement;
        }
        const info = scrollArgs.sentinel;
        const viewInfo = this.currentInfo = this.getInfoFromView(scrollArgs.direction, info, scrollArgs.offset);
        if (isGroupAdaptive(this.parent)) {
            if (viewInfo.blockIndexes && this.prevInfo.blockIndexes.toString() === viewInfo.blockIndexes.toString()) {
                return;
            }
            else {
                viewInfo.event = 'refresh-virtual-block';
                if (!isNullOrUndefined(viewInfo.offsets)) {
                    viewInfo.offsets.top = this.content.scrollTop;
                }
                this.parent.pageSettings.currentPage = viewInfo.page;
                this.parent.notify(viewInfo.event, { requestType: 'virtualscroll', virtualInfo: viewInfo, focusElement: scrollArgs.focusElement });
                return;
            }
        }
        if (this.prevInfo && ((info.axis === 'Y' && this.prevInfo.blockIndexes.toString() === viewInfo.blockIndexes.toString())
            || (info.axis === 'X' && this.prevInfo.columnIndexes.toString() === viewInfo.columnIndexes.toString()))) {
            if (Browser.isIE) {
                this.parent.hideSpinner();
            }
            this.requestType = this.requestType === 'virtualscroll' ? this.empty : this.requestType;
            if (info.axis === 'Y') {
                this.restoreEdit();
            }
            return;
        }
        this.parent.setColumnIndexesInView(this.parent.enableColumnVirtualization ? viewInfo.columnIndexes : []);
        this.parent.pageSettings.currentPage = viewInfo.loadNext && !viewInfo.loadSelf ? viewInfo.nextInfo.page : viewInfo.page;
        this.requestType = 'virtualscroll';
        this.parent.notify(viewInfo.event, {
            requestType: 'virtualscroll', virtualInfo: viewInfo,
            focusElement: scrollArgs.focusElement
        });
    }
    block(blk) {
        return this.vgenerator.isBlockAvailable(blk);
    }
    getInfoFromView(direction, info, e) {
        let isBlockAdded = false;
        let tempBlocks = [];
        const infoType = { direction: direction, sentinelInfo: info, offsets: e,
            startIndex: this.preStartIndex, endIndex: this.preEndIndex };
        infoType.page = this.getPageFromTop(e.top, infoType);
        infoType.blockIndexes = tempBlocks = this.vgenerator.getBlockIndexes(infoType.page);
        infoType.loadSelf = !this.vgenerator.isBlockAvailable(tempBlocks[infoType.block]);
        const blocks = this.ensureBlocks(infoType);
        if (this.activeKey === 'upArrow' && infoType.blockIndexes.toString() !== blocks.toString()) {
            // To avoid dupilcate row index problem in key focus support
            const newBlock = blocks[blocks.length - 1];
            if (infoType.blockIndexes.indexOf(newBlock) === -1) {
                isBlockAdded = true;
            }
        }
        infoType.blockIndexes = blocks;
        infoType.loadNext = !blocks.filter((val) => tempBlocks.indexOf(val) === -1)
            .every(this.block.bind(this));
        infoType.event = (infoType.loadNext || infoType.loadSelf) ? modelChanged : refreshVirtualBlock;
        infoType.nextInfo = infoType.loadNext ? { page: Math.max(1, infoType.page + (direction === 'down' ? 1 : -1)) } : {};
        if (isBlockAdded) {
            infoType.blockIndexes = [infoType.blockIndexes[0] - 1, infoType.blockIndexes[0], infoType.blockIndexes[0] + 1];
        }
        if (this.activeKey === 'downArrow') {
            const firstBlock = Math.ceil(this.rowIndex / this.getBlockSize());
            if (firstBlock !== 1 && (infoType.blockIndexes[1] !== firstBlock || infoType.blockIndexes.length < 3)) {
                infoType.blockIndexes = [firstBlock - 1, firstBlock, firstBlock + 1];
            }
        }
        infoType.columnIndexes = info.axis === 'X' ? this.vgenerator.getColumnIndexes() : this.parent.getColumnIndexesInView();
        if (this.parent.enableColumnVirtualization && info.axis === 'X') {
            infoType.event = refreshVirtualBlock;
        }
        return infoType;
    }
    setKeyboardNavIndex() {
        this.blazorDataLoad = true;
        if (this.activeKey === 'downArrow' || this.activeKey === 'upArrow') {
            this.blzRowIndex = this.activeKey === 'downArrow' ? this.rowIndex + 1 : this.rowIndex - 1;
            document.activeElement.blur();
        }
    }
    ensureBlocks(info) {
        let index = info.blockIndexes[info.block];
        let mIdx;
        const old = index;
        const max = Math.max;
        let indexes = info.direction === 'down' ? [max(index, 1), ++index, ++index] : [max(index - 1, 1), index, index + 1];
        if (this.parent.enableColumnVirtualization && this.parent.isFrozenGrid()) {
            // To avoid frozen content white space issue
            if (info.sentinelInfo.axis === 'X' || (info.sentinelInfo.axis === 'Y' && (info.page === this.prevInfo.page))) {
                indexes = this.prevInfo.blockIndexes;
            }
        }
        indexes = indexes.filter((val, ind) => indexes.indexOf(val) === ind);
        if (this.prevInfo.blockIndexes.toString() === indexes.toString()) {
            return indexes;
        }
        if (info.loadSelf || (info.direction === 'down' && this.isEndBlock(old))) {
            indexes = this.vgenerator.getBlockIndexes(info.page);
        }
        indexes.some((val, ind) => {
            const result = val === (isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks());
            if (result) {
                mIdx = ind;
            }
            return result;
        });
        if (mIdx !== undefined) {
            indexes = indexes.slice(0, mIdx + 1);
            if (info.block === 0 && indexes.length === 1 && this.vgenerator.isBlockAvailable(indexes[0] - 1)) {
                indexes = [indexes[0] - 1, indexes[0]];
            }
        }
        return indexes;
    }
    // tslint:disable-next-line:max-func-body-length
    appendContent(target, newChild, e) {
        // currentInfo value will be used if there are multiple dom updates happened due to mousewheel
        const isFrozen = this.parent.isFrozenGrid();
        const frzCols = this.parent.getFrozenColumns() || this.parent.getFrozenLeftColumnsCount();
        const colVFtable = this.parent.enableColumnVirtualization && isFrozen;
        this.checkFirstBlockColIndexes(e);
        const info = e.virtualInfo.sentinelInfo && e.virtualInfo.sentinelInfo.axis === 'Y' && this.currentInfo.page &&
            this.currentInfo.page !== e.virtualInfo.page ? this.currentInfo : e.virtualInfo;
        this.prevInfo = this.prevInfo || e.virtualInfo;
        let cBlock = (info.columnIndexes[0]) - 1;
        if (colVFtable && info.columnIndexes[0] === frzCols) {
            cBlock = (info.columnIndexes[0] - frzCols) - 1;
        }
        const cOffset = this.getColumnOffset(cBlock);
        let width;
        const blocks = info.blockIndexes;
        if (this.parent.groupSettings.columns.length) {
            this.refreshOffsets();
        }
        if (this.parent.height === '100%') {
            this.parent.element.style.height = '100%';
        }
        const vHeight = this.parent.height.toString().indexOf('%') < 0 ? this.content.getBoundingClientRect().height :
            this.parent.element.getBoundingClientRect().height;
        if (!this.requestTypes.some((value) => value === this.requestType)) {
            const translate = this.getTranslateY(this.content.scrollTop, vHeight, info);
            this.virtualEle.adjustTable(colVFtable ? 0 : cOffset, translate);
            if (colVFtable) {
                this.virtualEle.adjustMovableTable(cOffset, 0);
            }
        }
        if (this.parent.enableColumnVirtualization) {
            this.header.virtualEle.adjustTable(colVFtable ? 0 : cOffset, 0);
            if (colVFtable) {
                this.header.virtualEle.adjustMovableTable(cOffset, 0);
            }
        }
        if (this.parent.enableColumnVirtualization) {
            const cIndex = info.columnIndexes;
            width = this.getColumnOffset(cIndex[cIndex.length - 1]) - this.getColumnOffset(cIndex[0] - 1) + '';
            if (colVFtable) {
                this.header.virtualEle.setMovableWrapperWidth(width);
            }
            else {
                this.header.virtualEle.setWrapperWidth(width);
            }
        }
        if (colVFtable) {
            this.virtualEle.setMovableWrapperWidth(width, Browser.isIE || Browser.info.name === 'edge');
        }
        else {
            this.virtualEle.setWrapperWidth(width, Browser.isIE || Browser.info.name === 'edge');
        }
        if (!isNullOrUndefined(target.parentNode)) {
            remove(target);
        }
        let tbody$$1;
        if (isFrozen) {
            if (e.renderFrozenRightContent) {
                tbody$$1 = this.parent.getContent().querySelector('.e-frozen-right-content').querySelector(tbody);
            }
            else if (!e.renderMovableContent) {
                tbody$$1 = this.parent.getFrozenVirtualContent().querySelector(tbody);
            }
            else if (e.renderMovableContent) {
                tbody$$1 = this.parent.getMovableVirtualContent().querySelector(tbody);
            }
        }
        else {
            tbody$$1 = this.parent.element.querySelector('.' + content).querySelector(tbody);
        }
        if (tbody$$1) {
            remove(tbody$$1);
            target = null;
        }
        const isReact = this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate);
        if (!isReact) {
            target = this.parent.createElement(tbody, { attrs: { role: 'rowgroup' } });
            target.appendChild(newChild);
        }
        else {
            target = newChild;
        }
        if (this.parent.frozenRows && e.requestType === 'virtualscroll' && this.parent.pageSettings.currentPage === 1) {
            for (let i = 0; i < this.parent.frozenRows; i++) {
                target.children[0].remove();
            }
        }
        if (isFrozen) {
            if (e.renderFrozenRightContent) {
                this.parent.getContent().querySelector('.e-frozen-right-content').querySelector('.' + table).appendChild(target);
                this.requestType = this.requestType === 'virtualscroll' ? this.empty : this.requestType;
            }
            else if (!e.renderMovableContent) {
                this.parent.getFrozenVirtualContent().querySelector('.' + table).appendChild(target);
            }
            else if (e.renderMovableContent) {
                this.parent.getMovableVirtualContent().querySelector('.' + table).appendChild(target);
                if (this.parent.getFrozenMode() !== leftRight) {
                    this.requestType = this.requestType === 'virtualscroll' ? this.empty : this.requestType;
                }
            }
            if (this.vfColIndex.length) {
                e.virtualInfo.columnIndexes = info.columnIndexes = extend([], this.vfColIndex);
                this.vfColIndex = e.renderMovableContent ? [] : this.vfColIndex;
            }
        }
        else {
            this.getTable().appendChild(target);
            this.requestType = this.requestType === 'virtualscroll' ? this.empty : this.requestType;
        }
        if (this.parent.groupSettings.columns.length) {
            if (!isGroupAdaptive(this.parent) && info.direction === 'up') {
                const blk = this.offsets[this.getTotalBlocks()] - this.prevHeight;
                this.preventEvent = true;
                const sTop = this.content.scrollTop;
                this.content.scrollTop = sTop + blk;
            }
            this.setVirtualHeight();
            this.observer.setPageHeight(this.getOffset(blocks[blocks.length - 1]) - this.getOffset(blocks[0] - 1));
        }
        this.prevInfo = info;
        if (this.isFocused && this.activeKey !== 'downArrow' && this.activeKey !== 'upArrow') {
            this.content.focus();
        }
        const lastPage = Math.ceil(this.getTotalBlocks() / 2);
        if (this.isBottom) {
            this.isBottom = false;
            this.parent.getContent().firstElementChild.scrollTop = this.offsets[this.offsetKeys.length - 1];
        }
        if ((this.parent.pageSettings.currentPage === lastPage) && blocks.length === 1) {
            this.isBottom = true;
            this.parent.getContent().firstElementChild.scrollTop = this.offsets[this.offsetKeys.length - 2];
        }
        if (this.parent.isFrozenGrid() && (this.parent.pageSettings.currentPage === lastPage - 1) && info.direction === "up") {
            this.parent.getContent().firstElementChild.scrollTop = this.offsets[this.offsetKeys.length - 3];
        }
        if (e.requestType === 'virtualscroll' && e.virtualInfo.sentinelInfo.axis === 'X') {
            this.parent.notify(autoCol, {});
        }
        this.focusCell(e);
        this.restoreEdit(e);
        this.restoreAdd(e);
        this.ensureSelectedRowPosition();
        this.validationScrollLeft(e, isFrozen);
        if (!this.initialRowTop) {
            const gridTop = this.parent.element.getBoundingClientRect().top;
            this.initialRowTop = this.parent.getRowByIndex(0).getBoundingClientRect().top - gridTop;
        }
        const tableName = e.tableName;
        const isLoaded = this.parent.getFrozenMode() === 'Left-Right' ? tableName === 'frozen-right' : tableName === 'movable';
        if (!isFrozen || isLoaded) {
            this.vgenerator.startIndex = null;
            this.vgenerator.currentInfo = {};
            this.vgenerator.includePrevPage = null;
        }
    }
    validationScrollLeft(e, isFrozen) {
        const left = this.parent.getFrozenColumns();
        const table$$1 = this.parent.getFrozenMode();
        const trigger = !isFrozen || e && (left || table$$1 === 'Left' || table$$1 === 'Right' ? e.renderMovableContent
            : e.renderFrozenRightContent);
        if (this.validationCheck && trigger) {
            if (this.validationCol) {
                const offset = this.vgenerator.cOffsets[(this.validationCol.index - this.parent.getVisibleFrozenColumns()) - 1];
                this.validationCol = null;
                if (this.parent.isFrozenGrid()) {
                    this.movableContent.scrollLeft = offset;
                }
                else {
                    this.content.scrollLeft = offset;
                }
            }
            else {
                this.validationCheck = false;
                this.parent.editModule.editFormValidate();
            }
        }
    }
    ensureSelectedRowPosition() {
        if (!this.isSelection && this.isSelectionScroll && !isNullOrUndefined(this.selectRowIndex)) {
            this.isSelectionScroll = false;
            const row$$1 = this.parent.getRowByIndex(this.selectRowIndex);
            if (row$$1 && !this.isRowInView(row$$1)) {
                this.rowSelected({ rowIndex: this.selectRowIndex, row: row$$1 }, true);
            }
        }
    }
    checkFirstBlockColIndexes(e) {
        if (this.parent.enableColumnVirtualization && this.parent.isFrozenGrid() && e.virtualInfo.columnIndexes[0] === 0) {
            const indexes = [];
            const frozenCols = this.parent.getFrozenColumns() || this.parent.getFrozenLeftColumnsCount();
            if (!e.renderMovableContent && e.virtualInfo.columnIndexes.length > frozenCols) {
                this.vfColIndex = e.virtualInfo.columnIndexes;
                for (let i = 0; i < frozenCols; i++) {
                    indexes.push(i);
                }
                e.virtualInfo.columnIndexes = indexes;
            }
            else if (e.renderMovableContent) {
                if (!this.vfColIndex.length) {
                    this.vfColIndex = extend([], e.virtualInfo.columnIndexes);
                }
                e.virtualInfo.columnIndexes = extend([], this.vfColIndex);
                e.virtualInfo.columnIndexes.splice(0, frozenCols);
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    focusCell(e) {
        if (this.activeKey !== 'upArrow' && this.activeKey !== 'downArrow') {
            return;
        }
        const row$$1 = this.parent.getRowByIndex(this.rowIndex);
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const cell = row$$1.cells[this.cellIndex];
        cell.focus({ preventScroll: true });
        this.parent.selectRow(parseInt(row$$1.getAttribute(ariaRowIndex), 10));
        this.activeKey = this.empty;
    }
    restoreEdit(e) {
        if (this.isNormaledit) {
            const left = this.parent.getFrozenColumns();
            const isFrozen = e && this.parent.isFrozenGrid();
            const table$$1 = this.parent.getFrozenMode();
            const trigger = e && (left || table$$1 === 'Left' || table$$1 === 'Right' ? e.renderMovableContent
                : e.renderFrozenRightContent);
            if ((!isFrozen || (isFrozen && trigger)) && this.parent.editSettings.allowEditing
                && this.parent.editModule && !isNullOrUndefined(this.editedRowIndex)) {
                let row$$1 = this.getRowByIndex(this.editedRowIndex);
                let content$$1 = this.content;
                const keys = Object.keys(this.virtualData);
                const isXaxis = e && e.virtualInfo && e.virtualInfo.sentinelInfo.axis === 'X';
                if (isFrozen && isXaxis) {
                    row$$1 = this.parent.getMovableRowByIndex(this.editedRowIndex);
                    content$$1 = this.movableContent;
                }
                if (keys.length && row$$1 && !content$$1.querySelector('.' + editedRow)) {
                    const top = row$$1.getBoundingClientRect().top;
                    if (isXaxis || (top < this.content.offsetHeight && top > this.parent.getRowHeight())) {
                        this.parent.isEdit = false;
                        this.parent.editModule.startEdit(row$$1);
                    }
                }
                if (row$$1 && this.content.querySelector('.' + editedRow) && !keys.length) {
                    const rowData = extend({}, this.getRowObjectByIndex(this.editedRowIndex));
                    this.virtualData = this.getVirtualEditedData(rowData);
                }
            }
            this.restoreAdd(e);
        }
    }
    getVirtualEditedData(rowData) {
        const editForms = [].slice.call(this.parent.element.getElementsByClassName('e-gridform'));
        const isFormDestroyed = this.parent.editModule && this.parent.editModule.formObj
            && this.parent.editModule.formObj.isDestroyed;
        if (!isFormDestroyed) {
            for (let i = 0; i < editForms.length; i++) {
                rowData = this.parent.editModule.getCurrentEditedData(editForms[i], rowData);
            }
        }
        return rowData;
    }
    restoreAdd(e) {
        const left = this.parent.getFrozenColumns();
        const isFrozen = e && this.parent.isFrozenGrid();
        const table$$1 = this.parent.getFrozenMode();
        const isXaxis = e && e.virtualInfo && e.virtualInfo.sentinelInfo && e.virtualInfo.sentinelInfo.axis === 'X';
        const startAdd = isXaxis && isFrozen ? !(this.parent.getMovableVirtualHeader().querySelector('.' + addedRow)
            || this.parent.getMovableVirtualContent().querySelector('.' + addedRow)) : !this.parent.element.querySelector('.' + addedRow);
        const trigger = e && (left || table$$1 === 'Left' || table$$1 === 'Right' ? e.renderMovableContent : e.renderFrozenRightContent);
        if ((!isFrozen || (isFrozen && trigger)) && this.isNormaledit && this.isAdd && startAdd) {
            const isTop = this.parent.editSettings.newRowPosition === 'Top' && this.content.scrollTop < this.parent.getRowHeight();
            const isBottom = this.parent.editSettings.newRowPosition === 'Bottom'
                && this.parent.pageSettings.currentPage === this.maxPage;
            if (isTop || isBottom) {
                this.parent.isEdit = false;
                this.parent.addRecord();
            }
        }
    }
    onDataReady(e) {
        if (!isNullOrUndefined(e.count)) {
            this.count = e.count;
            this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);
        }
        this.vgenerator.checkAndResetCache(e.requestType);
        if (['refresh', 'filtering', 'searching', 'grouping', 'ungrouping', 'reorder', undefined]
            .some((value) => { return e.requestType === value; })) {
            this.refreshOffsets();
        }
        this.setVirtualHeight();
        this.resetScrollPosition(e.requestType);
    }
    /**
     * @param {number} height - specifies the height
     * @returns {void}
     * @hidden
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setVirtualHeight(height) {
        const width = this.parent.enableColumnVirtualization ?
            this.getColumnOffset(this.parent.columns.length + this.parent.groupSettings.columns.length - 1) + 'px' : '100%';
        if (this.parent.isFrozenGrid()) {
            let virtualHeightTemp = (this.parent.pageSettings.currentPage === 1 && Object.keys(this.offsets).length <= 2) ?
                this.offsets[1] : this.offsets[this.getTotalBlocks() - 2];
            const scrollableElementHeight = this.content.clientHeight;
            virtualHeightTemp = virtualHeightTemp > scrollableElementHeight ? virtualHeightTemp : 0;
            // To overcome the white space issue in last page (instead of position absolute)
            this.virtualEle.setVirtualHeight(virtualHeightTemp, width);
        }
        else {
            const virtualHeight = (this.offsets[isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() :
                this.getTotalBlocks()]);
            this.virtualEle.setVirtualHeight(virtualHeight, width);
        }
        if (this.parent.enableColumnVirtualization) {
            this.header.virtualEle.setVirtualHeight(1, width);
            if (this.parent.isFrozenGrid()) {
                this.virtualEle.setMovableVirtualHeight(1, width);
                this.header.virtualEle.setMovableVirtualHeight(1, width);
            }
        }
    }
    getPageFromTop(sTop, info) {
        const total = (isGroupAdaptive(this.parent)) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
        let page = 0;
        this.offsetKeys.some((offset) => {
            let iOffset = Number(offset);
            const border = sTop <= this.offsets[offset] || (iOffset === total && sTop > this.offsets[offset]);
            if (border) {
                if (this.offsetKeys.length % 2 !== 0 && iOffset.toString() === this.offsetKeys[this.offsetKeys.length - 2]
                    && sTop <= this.offsets[this.offsetKeys.length - 1]) {
                    iOffset = iOffset + 1;
                }
                info.block = iOffset % 2 === 0 ? 1 : 0;
                page = Math.max(1, Math.min(this.vgenerator.getPage(iOffset), this.maxPage));
            }
            return border;
        });
        return page;
    }
    getTranslateY(sTop, cHeight, info, isOnenter) {
        if (info === undefined) {
            info = { page: this.getPageFromTop(sTop, {}) };
            info.blockIndexes = this.vgenerator.getBlockIndexes(info.page);
        }
        const block = (info.blockIndexes[0] || 1) - 1;
        const translate = this.getOffset(block);
        const endTranslate = this.getOffset(info.blockIndexes[info.blockIndexes.length - 1]);
        if (isOnenter) {
            info = this.prevInfo;
        }
        let result = translate > sTop ?
            this.getOffset(block - 1) : endTranslate < (sTop + cHeight) ? this.getOffset(block + 1) : translate;
        const blockHeight = this.offsets[info.blockIndexes[info.blockIndexes.length - 1]] -
            this.tmpOffsets[info.blockIndexes[0]];
        const totalBlocks = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
        if (result + blockHeight > this.offsets[totalBlocks]) {
            result -= (result + blockHeight) - this.offsets[totalBlocks];
        }
        return result;
    }
    getOffset(block) {
        return Math.min(this.offsets[block] | 0, this.offsets[this.maxBlock] | 0);
    }
    onEntered() {
        return (element, current, direction, e, isWheel, check) => {
            if (Browser.isIE && !isWheel && check && !this.preventEvent) {
                this.parent.showSpinner();
            }
            const colVFtable = this.parent.enableColumnVirtualization && this.parent.isFrozenGrid();
            const xAxis = current.axis === 'X';
            const top = this.prevInfo.offsets ? this.prevInfo.offsets.top : null;
            const height = this.content.getBoundingClientRect().height;
            let x = this.getColumnOffset(xAxis ? this.vgenerator.getColumnIndexes()[0] - 1 : this.prevInfo.columnIndexes[0] - 1);
            if (xAxis && !colVFtable) {
                const idx = Object.keys(this.vgenerator.cOffsets).length - this.prevInfo.columnIndexes.length;
                const maxLeft = this.vgenerator.cOffsets[idx - 1];
                x = x > maxLeft ? maxLeft : x; //TODO: This fix horizontal scrollbar jumping issue in column virtualization.
            }
            const y = this.getTranslateY(e.top, height, xAxis && top === e.top ? this.prevInfo : undefined, true);
            this.virtualEle.adjustTable(colVFtable ? 0 : x, Math.min(y, this.offsets[this.maxBlock]));
            if (colVFtable) {
                this.virtualEle.adjustMovableTable(x, 0);
            }
            if (this.parent.enableColumnVirtualization) {
                this.header.virtualEle.adjustTable(colVFtable ? 0 : x, 0);
                if (colVFtable) {
                    this.header.virtualEle.adjustMovableTable(x, 0);
                }
            }
        };
    }
    dataBound() {
        this.parent.notify(refreshVirtualFrozenHeight, {});
        if (this.isSelection && this.activeKey !== 'upArrow' && this.activeKey !== 'downArrow') {
            this.parent.selectRow(this.selectedRowIndex);
        }
        else {
            this.activeKey = this.empty;
        }
    }
    rowSelected(args, isSelection) {
        if ((this.isSelection || isSelection) && !this.isLastBlockRow(args.rowIndex)) {
            const transform = getTransformValues(this.content.firstElementChild);
            const gridTop = this.parent.element.getBoundingClientRect().top;
            const rowTop = args.row.getBoundingClientRect().top - gridTop;
            const height = this.content.getBoundingClientRect().height;
            const isBottom = height < rowTop;
            const remainHeight = isBottom ? rowTop - height : this.initialRowTop - rowTop;
            let translateY = isBottom ? transform.height - remainHeight : transform.height + remainHeight;
            this.virtualEle.adjustTable(transform.width, translateY);
            const lastRowTop = this.content.querySelector('tbody').lastElementChild.getBoundingClientRect().top - gridTop;
            if (lastRowTop < height) {
                translateY = translateY + (height - (args.row.getBoundingClientRect().top - gridTop));
                this.virtualEle.adjustTable(transform.width, translateY - (this.parent.getRowHeight() / 2));
            }
        }
        this.isSelection = false;
    }
    isLastBlockRow(index) {
        const scrollEle = this.parent.getContent().firstElementChild;
        const visibleRowCount = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight()) - 1;
        const startIdx = (this.maxPage * this.parent.pageSettings.pageSize) - visibleRowCount;
        return index >= startIdx;
    }
    refreshMaxPage() {
        if (this.parent.groupSettings.columns.length && this.parent.vcRows.length) {
            this.maxPage = Math.ceil(this.parent.vcRows.length / this.parent.pageSettings.pageSize);
        }
    }
    setVirtualPageQuery(args) {
        const row$$1 = this.parent.getContent().querySelector('.e-row');
        if (row$$1 && this.parent.isManualRefresh && this.currentInfo.blockIndexes && this.currentInfo.blockIndexes.length === 3) {
            this.vgenerator.startIndex = parseInt(row$$1.getAttribute('aria-rowindex'), 10);
            this.vgenerator.currentInfo = extend({}, this.currentInfo);
            this.vgenerator.currentInfo.blockIndexes = this.currentInfo.blockIndexes.slice();
            const includePrevPage = this.vgenerator.includePrevPage = this.currentInfo.blockIndexes[0] % 2 === 0;
            if (includePrevPage) {
                this.vgenerator.startIndex = this.vgenerator.startIndex - this.getBlockSize();
                this.vgenerator.currentInfo.blockIndexes.unshift(this.currentInfo.blockIndexes[0] - 1);
            }
            else {
                this.vgenerator.currentInfo.blockIndexes.push(this.currentInfo.blockIndexes[this.currentInfo.blockIndexes.length - 1] + 1);
            }
            const skip = (this.vgenerator.currentInfo.blockIndexes[0] - 1) * this.getBlockSize();
            const take = this.vgenerator.currentInfo.blockIndexes.length * this.getBlockSize();
            args.query.skip(skip);
            args.query.take(take);
            args.skipPage = true;
        }
    }
    eventListener(action) {
        this.parent[action](dataReady, this.onDataReady, this);
        this.parent.addEventListener(dataBound, this.dataBound.bind(this));
        this.parent.addEventListener(actionBegin, this.actionBegin.bind(this));
        this.parent.addEventListener(actionComplete, this.actionComplete.bind(this));
        this.parent.addEventListener(rowSelected, this.rowSelected.bind(this));
        this.parent[action](refreshVirtualBlock, this.refreshContentRows, this);
        this.parent[action](selectVirtualRow, this.selectVirtualRow, this);
        this.parent[action](virtaulCellFocus, this.virtualCellFocus, this);
        this.parent[action](virtualScrollEditActionBegin, this.editActionBegin, this);
        this.parent[action](virtualScrollAddActionBegin, this.addActionBegin, this);
        this.parent[action](virtualScrollEdit, this.restoreEdit, this);
        this.parent[action](virtualScrollEditSuccess, this.editSuccess, this);
        this.parent[action](refreshVirtualCache, this.refreshCache, this);
        this.parent[action](editReset, this.resetIsedit, this);
        this.parent[action](getVirtualData, this.getVirtualData, this);
        this.parent[action](virtualScrollEditCancel, this.editCancel, this);
        this.parent[action](refreshVirtualMaxPage, this.refreshMaxPage, this);
        this.parent[action](setVirtualPageQuery, this.setVirtualPageQuery, this);
        this.parent[action](selectRowOnContextOpen, this.selectRowOnContextOpen, this);
        this.parent[action](resetVirtualFocus, this.resetVirtualFocus, this);
        this.parent[action](refreshVirtualEditFormCells, this.refreshCells, this);
        this.parent[action](scrollToEdit, this.scrollToEdit, this);
        const event = this.actions;
        for (let i = 0; i < event.length; i++) {
            this.parent[action](`${event[i]}-begin`, this.onActionBegin, this);
        }
        const fn = () => {
            this.observer.observe((scrollArgs) => this.scrollListener(scrollArgs), this.onEntered());
            const gObj = this.parent;
            if (gObj.enablePersistence && gObj.scrollPosition) {
                this.content.scrollTop = gObj.scrollPosition.top;
                const scrollValues = { direction: 'down', sentinel: this.observer.sentinelInfo.down,
                    offset: gObj.scrollPosition, focusElement: gObj.element };
                this.scrollListener(scrollValues);
                if (gObj.enableColumnVirtualization) {
                    this.content.scrollLeft = gObj.scrollPosition.left;
                }
            }
            this.parent.off(contentReady, fn);
        };
        this.parent.on(contentReady, fn, this);
    }
    scrollToEdit(col) {
        const isFrozen = this.parent.isFrozenGrid();
        let allowScroll = true;
        this.validationCheck = true;
        if (this.isAdd && this.content.scrollTop > 0) {
            allowScroll = false;
            const keys = Object.keys(this.offsets);
            this.content.scrollTop = this.parent.editSettings.newRowPosition === 'Top' ? 0 : this.offsets[keys.length - 1];
        }
        const row$$1 = this.parent.getRowByIndex(this.editedRowIndex);
        if (!row$$1 && !isNullOrUndefined(this.editedRowIndex)) {
            if (!row$$1 || !this.isRowInView(row$$1)) {
                const rowIndex = this.parent.getRowHeight();
                const scrollTop = this.editedRowIndex * rowIndex;
                if (!isNullOrUndefined(scrollTop)) {
                    allowScroll = false;
                    this.content.scrollTop = scrollTop;
                }
            }
        }
        if (col && allowScroll) {
            let offset = this.vgenerator.cOffsets[(col.index - this.parent.getVisibleFrozenColumns()) - 1];
            if (!this.parent.enableColumnVirtualization) {
                const header = this.parent.getHeaderContent().querySelector('.e-headercelldiv[e-mappinguid="' + col.uid + '"]');
                offset = isFrozen ? header.parentElement.offsetLeft
                    - this.parent.getFrozenVirtualHeader().offsetWidth
                    : header.parentElement.offsetLeft;
            }
            if (isFrozen) {
                this.parent.getMovableVirtualContent().scrollLeft = this.parent.enableRtl ? -Math.abs(offset) : offset;
            }
            else {
                this.content.scrollLeft = this.parent.enableRtl ? -Math.abs(offset) : offset;
            }
        }
        if (col && !allowScroll) {
            this.validationCol = col;
        }
    }
    refreshCells(rowObj) {
        rowObj.cells = this.vgenerator.generateCells(rowObj.foreignKeyData);
    }
    resetVirtualFocus(e) {
        this.isCancel = e.isCancel;
    }
    /**
     * @param {Object} data - specifies the data
     * @param {Object} data.virtualData -specifies the data
     * @param {boolean} data.isAdd - specifies isAdd
     * @param {boolean} data.isCancel - specifies boolean in cancel
     * @param {boolean} data.isScroll - specifies boolean for scroll
     * @returns {void}
     * @hidden
     */
    getVirtualData(data) {
        if (this.isNormaledit) {
            const error = this.parent.element.querySelector('.e-griderror:not([style*="display: none"])');
            const keys = Object.keys(this.virtualData);
            data.isScroll = keys.length !== 0 && this.currentInfo.sentinelInfo && this.currentInfo.sentinelInfo.axis === 'X';
            if (error) {
                return;
            }
            this.virtualData = keys.length ? this.virtualData : data.virtualData;
            this.getVirtualEditedData(this.virtualData);
            data.virtualData = this.virtualData;
            data.isAdd = this.isAdd;
            data.isCancel = this.isCancel;
        }
    }
    selectRowOnContextOpen(args) {
        this.isContextMenuOpen = args.isOpen;
    }
    editCancel(args) {
        const dataIndex = getEditedDataIndex(this.parent, args.data);
        if (!isNullOrUndefined(dataIndex)) {
            args.data = this.parent.getCurrentViewRecords()[dataIndex];
        }
    }
    editSuccess(args) {
        if (this.isNormaledit) {
            if (!this.isAdd && args.data) {
                this.updateCurrentViewData(args.data);
            }
            this.isAdd = false;
        }
    }
    updateCurrentViewData(data) {
        const dataIndex = getEditedDataIndex(this.parent, data);
        if (!isNullOrUndefined(dataIndex)) {
            this.parent.getCurrentViewRecords()[dataIndex] = data;
        }
    }
    actionBegin(args) {
        if (args.requestType !== 'virtualscroll') {
            this.requestType = args.requestType;
        }
        if (!args.cancel) {
            this.parent.notify(refreshVirtualFrozenRows, args);
        }
    }
    virtualCellFocus(e) {
        // To decide the action (select or scroll), when using arrow keys for cell focus
        const ele = document.activeElement;
        if (ele.classList.contains(rowCell)
            && e && (e.action === 'upArrow' || e.action === 'downArrow')) {
            let rowIndex = parseInt(ele.parentElement.getAttribute(ariaRowIndex), 10);
            if (e && (e.action === 'downArrow' || e.action === 'upArrow')) {
                const scrollEle = this.parent.getContent().firstElementChild;
                if (e.action === 'downArrow') {
                    rowIndex += 1;
                }
                else {
                    rowIndex -= 1;
                }
                this.rowIndex = rowIndex;
                this.cellIndex = parseInt(ele.getAttribute(ariaColIndex), 10);
                const row$$1 = this.parent.getRowByIndex(rowIndex);
                const page = this.parent.pageSettings.currentPage;
                const visibleRowCount = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight()) - 1;
                let emptyRow = false;
                if (isNullOrUndefined(row$$1)) {
                    emptyRow = true;
                    if ((e.action === 'downArrow' && page === this.maxPage - 1) || (e.action === 'upArrow' && page === 1)) {
                        emptyRow = false;
                    }
                }
                if (emptyRow || (ensureLastRow(row$$1, this.parent) && e.action === 'downArrow')
                    || (ensureFirstRow(row$$1, this.parent.getRowHeight() * 2) && e.action === 'upArrow')) {
                    this.activeKey = e.action;
                    scrollEle.scrollTop = e.action === 'downArrow' ?
                        (rowIndex - visibleRowCount) * this.parent.getRowHeight() : rowIndex * this.parent.getRowHeight();
                }
                else {
                    this.activeKey = this.empty;
                }
                this.parent.selectRow(rowIndex);
            }
        }
    }
    editActionBegin(e) {
        this.editedRowIndex = e.index;
        const rowData = extend({}, this.getRowObjectByIndex(e.index));
        const keys = Object.keys(this.virtualData);
        e.data = keys.length ? this.virtualData : rowData;
        e.isScroll = keys.length !== 0 && this.currentInfo.sentinelInfo && this.currentInfo.sentinelInfo.axis === 'X';
    }
    refreshCache(args) {
        const block = Math.ceil((this.editedRowIndex + 1) / this.getBlockSize());
        const index = this.editedRowIndex - ((block - 1) * this.getBlockSize());
        this.vgenerator.cache[block][index].data = args.data;
        if (this.vgenerator.movableCache[block]) {
            this.vgenerator.movableCache[block][index].data = args.data;
        }
        if (this.vgenerator.frozenRightCache[block]) {
            this.vgenerator.frozenRightCache[block][index].data = args.data;
        }
    }
    actionComplete(args) {
        if (!this.parent.enableVirtualization) {
            return;
        }
        const editRequestTypes = ['delete', 'save', 'cancel'];
        const dataActionRequestTypes = ['sorting', 'filtering', 'grouping', 'refresh', 'searching', 'ungrouping', 'reorder'];
        if (editRequestTypes.some((value) => value === args.requestType)) {
            this.refreshOffsets();
            if (this.parent.isFrozenGrid()) {
                this.vgenerator.refreshColOffsets();
                this.parent.contentModule.virtualRenderer.virtualEle.setVirtualHeight();
            }
            else {
                this.refreshVirtualElement();
            }
        }
        if (this.isNormaledit && (dataActionRequestTypes.some((value) => value === args.requestType)
            || editRequestTypes.some((value) => value === args.requestType))) {
            this.isCancel = true;
            this.isAdd = false;
            this.editedRowIndex = this.empty;
            this.virtualData = {};
            if (this.parent.editModule) {
                this.parent.editModule.editModule.previousData = undefined;
            }
        }
        if (this.parent.enableColumnVirtualization && args.requestType === 'filterafteropen'
            && this.currentInfo.columnIndexes && this.currentInfo.columnIndexes[0] > 0) {
            this.parent.resetFilterDlgPosition(args.columnName);
        }
    }
    resetIsedit() {
        if (this.parent.enableVirtualization && this.isNormaledit) {
            if ((this.parent.editSettings.allowEditing && Object.keys(this.virtualData).length)
                || (this.parent.editSettings.allowAdding && this.isAdd)) {
                this.parent.isEdit = true;
            }
        }
    }
    scrollAfterEdit() {
        if (this.parent.editModule && this.parent.editSettings.allowEditing && this.isNormaledit) {
            if (this.parent.element.querySelector('.e-gridform')) {
                const editForm = this.parent.element.querySelector('.' + editedRow);
                const addForm = this.parent.element.querySelector('.' + addedRow);
                if (editForm || addForm) {
                    const rowData = editForm ? extend({}, this.getRowObjectByIndex(this.editedRowIndex))
                        : extend({}, this.emptyRowData);
                    const keys = Object.keys(this.virtualData);
                    this.virtualData = keys.length ? this.getVirtualEditedData(this.virtualData) : this.getVirtualEditedData(rowData);
                }
            }
        }
    }
    createEmptyRowdata() {
        this.parent.columnModel.filter((e) => {
            this.emptyRowData[e.field] = this.empty;
        });
    }
    addActionBegin(args) {
        if (this.isNormaledit) {
            if (!Object.keys(this.emptyRowData).length) {
                this.createEmptyRowdata();
            }
            this.isAdd = true;
            const page = this.parent.pageSettings.currentPage;
            if (!this.parent.frozenRows && this.content.scrollTop > 0 && this.parent.editSettings.newRowPosition === 'Top') {
                this.isAdd = true;
                this.onActionBegin();
                args.startEdit = false;
                this.content.scrollTop = 0;
            }
            if (page < this.maxPage - 1 && this.parent.editSettings.newRowPosition === 'Bottom') {
                this.isAdd = true;
                this.parent.setProperties({ pageSettings: { currentPage: this.maxPage - 1 } }, true);
                args.startEdit = false;
                this.content.scrollTop = this.offsets[this.offsetKeys.length];
            }
        }
    }
    /**
     * @param {number} index - specifies the index
     * @returns {Object} returns the object
     * @hidden
     */
    getRowObjectByIndex(index) {
        const data = this.getRowCollection(index, false, true);
        return data;
    }
    getBlockSize() {
        return this.parent.pageSettings.pageSize >> 1;
    }
    getBlockHeight() {
        return this.getBlockSize() * this.parent.getRowHeight();
    }
    isEndBlock(index) {
        const totalBlocks = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
        return index >= totalBlocks || index === totalBlocks - 1;
    }
    getGroupedTotalBlocks() {
        const rows = this.parent.vcRows;
        return Math.floor((rows.length / this.getBlockSize()) < 1 ? 1 : rows.length / this.getBlockSize());
    }
    getTotalBlocks() {
        return Math.ceil(this.count / this.getBlockSize());
    }
    getColumnOffset(block) {
        return this.vgenerator.cOffsets[block] | 0;
    }
    getModelGenerator() {
        return new VirtualRowModelGenerator(this.parent);
    }
    resetScrollPosition(action) {
        if (this.actions.some((value) => value === action)) {
            this.preventEvent = this.content.scrollTop !== 0;
            this.content.scrollTop = 0;
        }
        if (action !== 'virtualscroll') {
            this.isAdd = false;
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    onActionBegin(e) {
        //Update property silently..
        this.parent.setProperties({ pageSettings: { currentPage: 1 } }, true);
    }
    getRows() {
        return this.vgenerator.getRows();
    }
    getRowByIndex(index) {
        let row$$1;
        if (isGroupAdaptive(this.parent)) {
            row$$1 = this.parent.getDataRows()[index];
        }
        else if (this.prevInfo) {
            row$$1 = this.getRowCollection(index, false);
        }
        return row$$1;
    }
    getMovableVirtualRowByIndex(index) {
        return this.getRowCollection(index, true);
    }
    getFrozenRightVirtualRowByIndex(index) {
        return this.getRowCollection(index, false, false, true);
    }
    getRowCollection(index, isMovable, isRowObject, isFrozenRight) {
        const prev = this.prevInfo.blockIndexes;
        let startIdx = (prev[0] - 1) * this.getBlockSize();
        let rowCollection = isMovable ? this.parent.getMovableDataRows() : this.parent.getDataRows();
        rowCollection = isFrozenRight ? this.parent.getFrozenRightDataRows() : rowCollection;
        let collection = isRowObject ? this.parent.getCurrentViewRecords() : rowCollection;
        if (isRowObject && this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
            startIdx = parseInt(this.parent.getRows()[0].getAttribute(ariaRowIndex), 10);
            collection = collection.filter((m) => { return isNullOrUndefined(m.items); });
        }
        let selectedRow = collection[index - startIdx];
        if (this.parent.frozenRows && this.parent.pageSettings.currentPage > 1) {
            if (!isRowObject) {
                selectedRow = index <= this.parent.frozenRows ? rowCollection[index]
                    : rowCollection[(index - startIdx) + this.parent.frozenRows];
            }
            else {
                selectedRow = index <= this.parent.frozenRows ? this.parent.getRowsObject()[index].data : selectedRow;
            }
        }
        return selectedRow;
    }
    getVirtualRowIndex(index) {
        const prev = this.prevInfo.blockIndexes;
        const startIdx = (prev[0] - 1) * this.getBlockSize();
        return startIdx + index;
    }
    /**
     * @returns {void}
     * @hidden */
    refreshOffsets() {
        const gObj = this.parent;
        let row$$1 = 0;
        const bSize = this.getBlockSize();
        const total = isGroupAdaptive(this.parent) ? this.getGroupedTotalBlocks() : this.getTotalBlocks();
        this.prevHeight = this.offsets[total];
        this.maxBlock = total % 2 === 0 ? total - 2 : total - 1;
        this.offsets = {};
        //Row offset update
        // eslint-disable-next-line prefer-spread
        const blocks = Array.apply(null, Array(total)).map(() => ++row$$1);
        for (let i = 0; i < blocks.length; i++) {
            const tmp = (this.vgenerator.cache[blocks[i]] || []).length;
            const rem = !isGroupAdaptive(this.parent) ? this.count % bSize : (gObj.vcRows.length % bSize);
            const size = !isGroupAdaptive(this.parent) && blocks[i] in this.vgenerator.cache ?
                tmp * this.parent.getRowHeight() : rem && blocks[i] === total ? rem * this.parent.getRowHeight() :
                this.getBlockHeight();
            // let size: number = this.parent.groupSettings.columns.length && block in this.vgenerator.cache ?
            // tmp * getRowHeight() : this.getBlockHeight();
            this.offsets[blocks[i]] = (this.offsets[blocks[i] - 1] | 0) + size;
            this.tmpOffsets[blocks[i]] = this.offsets[blocks[i] - 1] | 0;
        }
        this.offsetKeys = Object.keys(this.offsets);
        if (isGroupAdaptive(this.parent)) {
            this.parent.vGroupOffsets = this.offsets;
        }
        //Column offset update
        if (this.parent.enableColumnVirtualization) {
            this.vgenerator.refreshColOffsets();
        }
    }
    refreshVirtualElement() {
        this.vgenerator.refreshColOffsets();
        this.setVirtualHeight();
    }
    setVisible(columns) {
        const gObj = this.parent;
        const frozenCols = this.parent.getFrozenColumns();
        let fcntColGrp;
        let mcntColGrp;
        if (frozenCols) {
            fcntColGrp = [].slice.call(this.parent.getFrozenVirtualContent().querySelectorAll('col'));
            mcntColGrp = [].slice.call(this.parent.getMovableVirtualContent().querySelectorAll('col'));
        }
        let rows = [];
        rows = this.getRows();
        let testRow;
        rows.some((r) => { if (r.isDataRow) {
            testRow = r;
        } return r.isDataRow; });
        let isRefresh = true;
        if (!gObj.groupSettings.columns.length && testRow) {
            isRefresh = false;
        }
        let tr = gObj.getDataRows();
        for (let c = 0, clen = columns.length; c < clen; c++) {
            const column = columns[c];
            let idx = gObj.getNormalizedColumnIndex(column.uid);
            const displayVal = column.visible === true ? '' : 'none';
            let colGrp;
            if (fcntColGrp && mcntColGrp) {
                if (idx >= frozenCols) {
                    colGrp = mcntColGrp;
                    tr = this.parent.getMovableRows();
                    idx = idx - frozenCols;
                }
                else {
                    colGrp = fcntColGrp;
                }
            }
            else {
                colGrp = this.getColGroup().children;
            }
            if (idx !== -1 && testRow && idx < testRow.cells.length) {
                setStyleAttribute(colGrp[idx], { 'display': displayVal });
            }
            if (!isRefresh) {
                let width;
                if (column.width) {
                    if (column.visible) {
                        width = this.virtualEle.wrapper.offsetWidth + parseInt(column.width.toString(), 10);
                    }
                    else {
                        width = this.virtualEle.wrapper.offsetWidth - parseInt(column.width.toString(), 10);
                    }
                }
                if (width > gObj.width) {
                    this.setDisplayNone(tr, idx, displayVal, rows);
                    if (this.parent.enableColumnVirtualization) {
                        this.virtualEle.setWrapperWidth(width + '');
                    }
                    this.refreshVirtualElement();
                }
                else {
                    isRefresh = true;
                }
            }
            if (!this.parent.invokedFromMedia && column.hideAtMedia) {
                this.parent.updateMediaColumns(column);
            }
            this.parent.invokedFromMedia = false;
        }
        if (isRefresh || frozenCols) {
            this.refreshContentRows({ requestType: 'refresh' });
        }
        else {
            this.parent.notify(partialRefresh, { rows: rows, args: { isFrozen: false, rows: rows } });
        }
    }
    selectVirtualRow(args) {
        args.isAvailable = args.selectedIndex < this.count;
        if (args.isAvailable && !this.isContextMenuOpen && this.activeKey !== 'upArrow'
            && this.activeKey !== 'downArrow' && !this.isSelection && !this.requestTypes.some((value) => value === this.requestType)
            && !this.parent.selectionModule.isInteracted) {
            const selectedRow = this.parent.getRowByIndex(args.selectedIndex);
            const rowHeight = this.parent.getRowHeight();
            if (!selectedRow || !this.isRowInView(selectedRow)) {
                this.isSelection = true;
                this.selectedRowIndex = args.selectedIndex;
                const scrollTop = (args.selectedIndex + 1) * rowHeight;
                if (!isNullOrUndefined(scrollTop)) {
                    const direction = this.content.scrollTop < scrollTop ? 'down' : 'up';
                    this.selectRowIndex = args.selectedIndex;
                    this.content.scrollTop = scrollTop;
                    this.isSelectionScroll = this.observer.check(direction);
                }
            }
        }
        if (this.parent.isFrozenGrid() && this.requestType) {
            if (this.parent.getTablesCount() === this.frzIdx) {
                this.requestType = this.empty;
                this.frzIdx = 1;
            }
            else {
                this.frzIdx++;
            }
        }
        else {
            this.requestType = this.empty;
        }
    }
    isRowInView(row$$1) {
        const top = row$$1.getBoundingClientRect().top;
        const bottom = row$$1.getBoundingClientRect().bottom;
        return (top >= this.content.getBoundingClientRect().top && bottom <= this.content.getBoundingClientRect().bottom);
    }
}
/**
 * @hidden
 */
class VirtualHeaderRenderer extends HeaderRender {
    constructor(parent, locator) {
        super(parent, locator);
        this.virtualEle = new VirtualElementHandler();
        this.isMovable = false;
        this.gen = new VirtualRowModelGenerator(this.parent);
        this.parent.on(columnVisibilityChanged, this.setVisible, this);
        this.parent.on(refreshVirtualBlock, (e) => e.virtualInfo.sentinelInfo.axis === 'X' ? this.refreshUI() : null, this);
    }
    renderTable() {
        this.gen.refreshColOffsets();
        this.parent.setColumnIndexesInView(this.gen.getColumnIndexes(this.getPanel().querySelector('.' + headerContent)));
        super.renderTable();
        this.virtualEle.table = this.getTable();
        this.virtualEle.content = this.getPanel().querySelector('.' + headerContent);
        this.virtualEle.content.style.position = 'relative';
        this.virtualEle.renderWrapper();
        this.virtualEle.renderPlaceHolder('absolute');
    }
    appendContent(table$$1) {
        if (!this.isMovable) {
            this.virtualEle.wrapper.appendChild(table$$1);
        }
        else {
            this.virtualEle.movableWrapper.appendChild(table$$1);
            this.isMovable = false;
        }
    }
    refreshUI() {
        this.isMovable = this.parent.isFrozenGrid();
        this.setFrozenTable(this.parent.getMovableVirtualContent());
        this.gen.refreshColOffsets();
        this.parent.setColumnIndexesInView(this.gen.getColumnIndexes(this.getPanel().querySelector('.' + headerContent)));
        super.refreshUI();
        this.setFrozenTable(this.parent.getFrozenVirtualContent());
    }
    setVisible(columns) {
        const gObj = this.parent;
        let displayVal;
        let idx;
        let needFullRefresh;
        const frozenCols = this.parent.getFrozenColumns();
        let fhdrColGrp;
        let mhdrColGrp;
        if (frozenCols) {
            fhdrColGrp = [].slice.call(this.parent.getFrozenVirtualHeader().querySelectorAll('col'));
            mhdrColGrp = [].slice.call(this.parent.getMovableVirtualHeader().querySelectorAll('col'));
        }
        for (let c = 0, clen = columns.length; c < clen; c++) {
            const column = columns[c];
            idx = gObj.getNormalizedColumnIndex(column.uid);
            displayVal = column.visible ? '' : 'none';
            let colGrp;
            if (fhdrColGrp && mhdrColGrp) {
                if (idx >= frozenCols) {
                    colGrp = mhdrColGrp;
                    idx = idx - frozenCols;
                }
                else {
                    colGrp = fhdrColGrp;
                }
            }
            else {
                colGrp = this.getColGroup().children;
            }
            setStyleAttribute(colGrp[idx], { 'display': displayVal });
            if (gObj.enableColumnVirtualization && !gObj.groupSettings.columns.length) {
                let tablewidth;
                if (column.visible) {
                    tablewidth = this.virtualEle.wrapper.offsetWidth + parseInt(column.width.toString(), 10);
                }
                else {
                    tablewidth = this.virtualEle.wrapper.offsetWidth - parseInt(column.width.toString(), 10);
                }
                if (tablewidth > gObj.width) {
                    this.setDisplayNone(column, displayVal);
                    this.virtualEle.setWrapperWidth(tablewidth + '');
                    this.gen.refreshColOffsets();
                }
                else {
                    needFullRefresh = true;
                }
            }
            else {
                needFullRefresh = true;
            }
            if (needFullRefresh && !frozenCols) {
                this.refreshUI();
            }
        }
        if (frozenCols) {
            this.parent.notify(columnPositionChanged, {});
        }
    }
    setFrozenTable(content$$1) {
        if (this.parent.isFrozenGrid() && this.parent.enableColumnVirtualization
            && this.parent.contentModule.isXaxis()) {
            this.parent.contentModule
                .setTable(content$$1.querySelector('.' + table));
        }
    }
    setDisplayNone(col, displayVal) {
        const frozenCols = this.parent.isFrozenGrid();
        let table$$1 = this.getTable();
        if (frozenCols && col.getFreezeTableName() === 'movable') {
            table$$1 = this.parent.getMovableVirtualHeader().querySelector('.' + table);
        }
        for (const ele of [].slice.apply(table$$1.querySelectorAll('th.e-headercell'))) {
            if (ele.querySelector('[e-mappinguid]') &&
                ele.querySelector('[e-mappinguid]').getAttribute('e-mappinguid') === col.uid) {
                setStyleAttribute(ele, { 'display': displayVal });
                if (displayVal === '') {
                    removeClass([ele], 'e-hide');
                }
                break;
            }
        }
    }
}
/**
 * @hidden
 */
class VirtualElementHandler {
    renderWrapper(height) {
        this.wrapper = createElement('div', { className: 'e-virtualtable', styles: `min-height:${formatUnit(height)}` });
        this.wrapper.appendChild(this.table);
        this.content.appendChild(this.wrapper);
    }
    renderPlaceHolder(position = 'relative') {
        this.placeholder = createElement('div', { className: 'e-virtualtrack', styles: `position:${position}` });
        this.content.appendChild(this.placeholder);
    }
    renderFrozenWrapper(height) {
        this.wrapper = createElement('div', { className: 'e-virtualtable', styles: `min-height:${formatUnit(height)}; display: flex` });
        this.content.appendChild(this.wrapper);
    }
    renderFrozenPlaceHolder() {
        this.placeholder = createElement('div', { className: 'e-virtualtrack' });
        this.content.appendChild(this.placeholder);
    }
    renderMovableWrapper(height) {
        this.movableWrapper = createElement('div', { className: 'e-virtualtable', styles: `min-height:${formatUnit(height)}` });
        this.movableContent.appendChild(this.movableWrapper);
    }
    renderMovablePlaceHolder() {
        this.movablePlaceholder = createElement('div', { className: 'e-virtualtrack' });
        this.movableContent.appendChild(this.movablePlaceholder);
    }
    adjustTable(xValue, yValue) {
        this.wrapper.style.transform = `translate(${xValue}px, ${yValue}px)`;
    }
    adjustMovableTable(xValue, yValue) {
        this.movableWrapper.style.transform = `translate(${xValue}px, ${yValue}px)`;
    }
    setMovableWrapperWidth(width, full) {
        this.movableWrapper.style.width = width ? `${width}px` : full ? '100%' : '';
    }
    setMovableVirtualHeight(height, width) {
        this.movablePlaceholder.style.height = `${height}px`;
        this.movablePlaceholder.style.width = width;
    }
    setWrapperWidth(width, full) {
        this.wrapper.style.width = width ? `${width}px` : full ? '100%' : '';
    }
    setVirtualHeight(height, width) {
        this.placeholder.style.height = `${height}px`;
        this.placeholder.style.width = width;
    }
    setFreezeWrapperWidth(wrapper, width, full) {
        wrapper.style.width = width ? `${width}px` : full ? '100%' : '';
    }
}

/**
 * Virtual Scrolling class
 */
class VirtualScroll {
    constructor(parent, locator) {
        this.parent = parent;
        this.locator = locator;
        this.addEventListener();
    }
    getModuleName() {
        return 'virtualscroll';
    }
    instantiateRenderer() {
        this.parent.log(['limitation', 'virtual_height'], 'virtualization');
        const renderer = this.locator.getService('rendererFactory');
        if (!this.parent.isFrozenGrid()) {
            if (this.parent.enableColumnVirtualization) {
                renderer.addRenderer(RenderType.Header, new VirtualHeaderRenderer(this.parent, this.locator));
            }
            renderer.addRenderer(RenderType.Content, new VirtualContentRenderer(this.parent, this.locator));
        }
        this.ensurePageSize();
    }
    ensurePageSize() {
        const rowHeight = this.parent.getRowHeight();
        const vHeight = this.parent.height.toString().indexOf('%') < 0 ? this.parent.height :
            this.parent.element.getBoundingClientRect().height;
        this.blockSize = ~~(vHeight / rowHeight);
        const height = this.blockSize * 2;
        const size = this.parent.pageSettings.pageSize;
        this.parent.setProperties({ pageSettings: { pageSize: size < height ? height : size } }, true);
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(initialLoad, this.instantiateRenderer, this);
        this.parent.on(columnWidthChanged, this.refreshVirtualElement, this);
        this.parent.on(createVirtualValidationForm, this.createVirtualValidationForm, this);
        this.parent.on(validateVirtualForm, this.virtualEditFormValidation, this);
        this.parent.on(destroy, this.destroy, this);
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(initialLoad, this.instantiateRenderer);
        this.parent.off(columnWidthChanged, this.refreshVirtualElement);
        this.parent.off(createVirtualValidationForm, this.createVirtualValidationForm);
        this.parent.off(validateVirtualForm, this.virtualEditFormValidation);
        this.parent.off(destroy, this.destroy);
    }
    getCurrentEditedData(prevData) {
        const data = {
            virtualData: extend({}, {}, prevData, true), isAdd: false, isScroll: false, endEdit: true
        };
        this.parent.notify(getVirtualData, data);
        return data.virtualData;
    }
    createVirtualValidationForm(e) {
        const gObj = this.parent;
        if (gObj.enableVirtualization && gObj.editSettings.mode === 'Normal') {
            const cols = gObj.columns;
            const rowRenderer = new RowRenderer(this.locator, null, this.parent);
            const rowObj = extend({}, {}, gObj.getRowObjectFromUID(e.uid), true);
            gObj.notify(refreshVirtualEditFormCells, rowObj);
            const args = e.argsCreator(this.getCurrentEditedData(e.prevData), {}, false);
            args.isCustomFormValidation = true;
            args.row = rowRenderer.render(rowObj, cols);
            e.renderer.update(args);
            const rules = {};
            for (let i = 0; i < cols.length; i++) {
                if (!cols[i].visible) {
                    continue;
                }
                if (cols[i].validationRules) {
                    setValidationRuels(cols[i], 0, rules, {}, {}, cols.length, true);
                }
            }
            args.form.classList.add('e-virtual-validation');
            gObj.editModule.virtualFormObj = gObj.editModule.createFormObj(args.form, rules);
        }
    }
    virtualEditFormValidation(args) {
        const gObj = this.parent;
        const error = gObj.element.querySelector('.e-griderror:not([style*="display: none"])');
        if (gObj.editModule.virtualFormObj) {
            if (error && error.style.display !== 'none') {
                const errorDomRect = error.getBoundingClientRect();
                const forms = gObj.element.querySelectorAll('.e-gridform');
                let form = forms[0];
                let contentLeft = gObj.getContent().getBoundingClientRect().left;
                if (forms.length > 1) {
                    form = gObj.getFrozenMode() !== 'Right' ? forms[1] : forms[0];
                    contentLeft = gObj.getMovableVirtualContent().getBoundingClientRect().left;
                }
                if (errorDomRect.left < contentLeft || errorDomRect.right > gObj.element.offsetWidth) {
                    const tooltip = form.querySelector('.e-tooltip-wrap:not([style*="display: none"])');
                    this.scrollToEdit(tooltip, { editIdx: args.editIdx, addIdx: args.addIdx }, true);
                }
            }
            else if (gObj.editModule.virtualFormObj && (!error || error.style.display === 'none')) {
                const existingErrors = gObj.editModule.virtualFormObj.element.querySelectorAll('.e-tooltip-wrap:not([style*="display: none"])');
                for (let i = 0; i < existingErrors.length; i++) {
                    remove(existingErrors[i]);
                }
                this.setEditedDataToValidationForm(gObj.editModule.virtualFormObj.element, this.getCurrentEditedData(args.prevData));
                args.isValid = gObj.editModule.virtualFormObj.validate();
                if (!args.isValid) {
                    const tooltip = gObj.editModule.virtualFormObj.element.querySelector('.e-tooltip-wrap:not([style*="display: none"])');
                    this.scrollToEdit(tooltip, { editIdx: args.editIdx, addIdx: args.addIdx });
                }
            }
        }
    }
    scrollToEdit(tooltip, args, isRenderer) {
        const gObj = this.parent;
        if (tooltip) {
            const cols = gObj.columnModel;
            const field = setComplexFieldID(tooltip.id).split('_')[0];
            const col = gObj.getColumnByField(field);
            const scrollTop = this.parent.getContent().firstElementChild.scrollTop;
            const row = gObj.getRowByIndex(args.editIdx);
            if (isRenderer || !col || (!isNullOrUndefined(args.addIdx) && scrollTop > 0) || (!isNullOrUndefined(args.editIdx) && !row)) {
                let validationCol;
                for (let i = 0; i < cols.length && !col; i++) {
                    if (cols[i].field === field) {
                        validationCol = cols[i];
                        break;
                    }
                }
                if (isRenderer) {
                    validationCol = col;
                }
                this.parent.notify(scrollToEdit, validationCol);
            }
        }
    }
    setEditedDataToValidationForm(form, editedData) {
        const inputs = [].slice.call(form.getElementsByClassName('e-field'));
        for (let i = 0, len = inputs.length; i < len; i++) {
            const col = getColumnModelByUid(this.parent, inputs[i].getAttribute('e-mappinguid'));
            let value = getValue(col.field, editedData);
            value = isNullOrUndefined(value) ? '' : value;
            inputs[i].value = value;
        }
    }
    refreshVirtualElement(args) {
        if (this.parent.enableColumnVirtualization && args.module === 'resize') {
            const renderer = this.locator.getService('rendererFactory');
            renderer.getRenderer(RenderType.Content).refreshVirtualElement();
        }
    }
    destroy() {
        this.removeEventListener();
    }
}

/**
 * Edit render module is used to render grid edit row.
 *
 * @hidden
 */
class InlineEditRender {
    /**
     * Constructor for render module
     *
     * @param {IGrid} parent - returns the IGrid
     */
    constructor(parent) {
        this.parent = parent;
    }
    addNew(elements, args) {
        this.isEdit = false;
        let tbody$$1;
        const mTbody = getMovableTbody(this.parent);
        const frTbody = getFrozenRightTbody(this.parent);
        const isFrozenGrid = this.parent.isFrozenGrid();
        const isVirtualFrozen = isFrozenGrid && this.parent.enableColumnVirtualization && args.isScroll;
        if (this.parent.frozenRows && this.parent.editSettings.newRowPosition === 'Top') {
            tbody$$1 = isVirtualFrozen ? this.parent.getMovableHeaderTbody() : this.parent.getHeaderTable().querySelector(tbody);
        }
        else {
            tbody$$1 = isVirtualFrozen ? this.parent.getMovableContentTbody() : this.parent.getContentTable().querySelector(tbody);
        }
        args.row = this.parent.createElement('tr', { className: 'e-row e-addedrow', attrs: { role: 'row' } });
        if (tbody$$1.querySelector('.e-emptyrow')) {
            const emptyRow = tbody$$1.querySelector('.e-emptyrow');
            emptyRow.parentNode.removeChild(emptyRow);
            if (isFrozenGrid && !isVirtualFrozen) {
                const moveTbody = this.parent.getContent().querySelector('.' + movableContent).querySelector(tbody);
                (moveTbody.firstElementChild).parentNode.removeChild(moveTbody.firstElementChild);
                if (this.parent.getFrozenMode() === leftRight) {
                    const frTbody = this.parent.getContent().querySelector('.e-frozen-right-content').querySelector(tbody);
                    (frTbody.firstElementChild).parentNode.removeChild(frTbody.firstElementChild);
                }
            }
        }
        if (this.parent.editSettings.newRowPosition === 'Top') {
            tbody$$1.insertBefore(args.row, tbody$$1.firstChild);
        }
        else {
            tbody$$1.appendChild(args.row);
        }
        args.row.appendChild(this.getEditElement(elements, false, undefined, args, true));
        this.parent.editModule.checkLastRow(args.row, args);
        if (isFrozenGrid && !isVirtualFrozen) {
            const mEle = this.renderMovableform(args.row, args);
            if (this.parent.editSettings.newRowPosition === 'Top') {
                mTbody.insertBefore(mEle, mTbody.firstChild);
            }
            else {
                mTbody.appendChild(mEle);
            }
            args.row.querySelector('.e-normaledit').setAttribute('colspan', this.parent.getVisibleFrozenColumns() + '');
            mEle.setAttribute('colspan', '' + (this.parent.getVisibleColumns().length - this.parent.getVisibleFrozenColumns()));
            if (frTbody) {
                const frEle = this.renderFrozenRightForm(args.row, args);
                if (this.parent.editSettings.newRowPosition === 'Top') {
                    frTbody.insertBefore(frEle, frTbody.firstChild);
                }
                else {
                    frTbody.appendChild(frEle);
                }
                const colSpan = this.parent.getVisibleFrozenColumns() - this.parent.getFrozenRightColumnsCount();
                args.row.querySelector('.e-normaledit').setAttribute('colspan', colSpan + '');
                frEle.querySelector('.e-normaledit').setAttribute('colspan', '' + this.parent.getFrozenRightColumnsCount());
            }
            if (this.parent.height === 'auto') {
                this.parent.notify(frozenHeight, {});
            }
        }
    }
    renderFrozenRightForm(ele, args) {
        const frEle = ele.cloneNode(true);
        const form = args.frozenRightForm = frEle.querySelector('form');
        if (this.parent.editSettings.template) {
            form.innerHTML = '';
            this.appendChildren(form, args.rowData, false);
            return frEle;
        }
        this.renderRightFrozen(ele, frEle);
        frEle.querySelector(colGroup).innerHTML = this.parent.getHeaderContent()
            .querySelector('.e-frozen-right-header').querySelector(colGroup).innerHTML;
        return frEle;
    }
    renderMovableform(ele, args) {
        const mEle = ele.cloneNode(true);
        const form = args.movableForm = mEle.querySelector('form');
        if (this.parent.editSettings.template) {
            form.innerHTML = '';
            this.appendChildren(form, args.rowData, false);
            return mEle;
        }
        this.renderMovable(ele, mEle);
        mEle.querySelector(colGroup).innerHTML = this.parent.getHeaderContent()
            .querySelector('.' + movableHeader).querySelector(colGroup).innerHTML;
        return mEle;
    }
    updateFreezeEdit(row$$1, td) {
        td = td.concat([].slice.call(this.getFreezeRow(row$$1).querySelectorAll('td.e-rowcell')));
        if (this.parent.getFrozenMode() === leftRight) {
            td = td.concat([].slice.call(this.getFreezeRightRow(row$$1).querySelectorAll('td.e-rowcell')));
        }
        return td;
    }
    getFreezeRightRow(row$$1) {
        const idx = parseInt(row$$1.getAttribute(ariaRowIndex), 10);
        const fCont = this.parent.getFrozenLeftContentTbody();
        const fHdr = this.parent.getFrozenHeaderTbody();
        const frHdr = this.parent.getFrozenRightHeaderTbody();
        const frCont = this.parent.getFrozenRightContentTbody();
        if (fCont.contains(row$$1) || fHdr.contains(row$$1)) {
            return this.parent.getFrozenRightRowByIndex(idx);
        }
        else if (frCont.contains(row$$1) || frHdr.contains(row$$1)) {
            return this.parent.getRowByIndex(idx);
        }
        return row$$1;
    }
    getFreezeRow(row$$1) {
        if (this.parent.isFrozenGrid()) {
            const idx = parseInt(row$$1.getAttribute(ariaRowIndex), 10);
            const fCont = this.parent.getFrozenLeftContentTbody();
            const mCont = this.parent.getMovableContentTbody();
            const fHdr = this.parent.getFrozenHeaderTbody();
            const mHdr = this.parent.getMovableHeaderTbody();
            if (fCont.contains(row$$1) || fHdr.contains(row$$1)) {
                return this.parent.getMovableRowByIndex(idx);
            }
            else if (mCont.contains(row$$1) || mHdr.contains(row$$1)) {
                return this.parent.getRowByIndex(idx);
            }
        }
        return row$$1;
    }
    update(elements, args) {
        this.isEdit = true;
        const isCustomFormValidation = args.isCustomFormValidation;
        const isScroll = args.isScroll;
        if (!isScroll && (closest(args.row, '.' + movableContent) || closest(args.row, '.' + movableHeader))) {
            args.row = this.getFreezeRow(args.row);
        }
        if (closest(args.row, '.e-frozen-right-content') || closest(args.row, '.e-frozen-right-header')) {
            args.row = this.getFreezeRightRow(args.row);
        }
        const isVirtualFrozen = this.parent.isFrozenGrid() && this.parent.enableColumnVirtualization && isScroll;
        let tdElement = [].slice.call(args.row.querySelectorAll('td.e-rowcell'));
        args.row.innerHTML = '';
        if (!isVirtualFrozen && !isCustomFormValidation) {
            tdElement = this.updateFreezeEdit(args.row, tdElement);
        }
        args.row.appendChild(this.getEditElement(elements, true, tdElement, args, true));
        args.row.classList.add(editedRow);
        this.parent.editModule.checkLastRow(args.row, args);
        if (!isVirtualFrozen && !isCustomFormValidation) {
            this.refreshFreezeEdit(args.row, args);
        }
    }
    refreshFreezeEdit(row$$1, args) {
        const td = row$$1.firstChild;
        if (this.parent.getVisibleFrozenColumns() && this.parent.editSettings.template) {
            td.querySelector(colGroup).innerHTML = this.parent.getHeaderContent().querySelector('.' + frozenHeader).
                querySelector(colGroup).innerHTML;
        }
        let fCls;
        let cont;
        const idx = parseInt(row$$1.getAttribute(ariaRowIndex), 10);
        if (this.parent.isFrozenGrid()) {
            if (idx < this.parent.frozenRows) {
                cont = this.parent.getHeaderContent();
                fCls = '.' + frozenHeader;
            }
            else {
                cont = this.parent.getContent();
                fCls = '.' + frozenContent;
            }
            const mTd = td.cloneNode(true);
            const frTd = td.cloneNode(true);
            const form = args.movableForm = mTd.querySelector('form');
            if (this.parent.editSettings.template) {
                this.refreshEditForm(form, args.rowData);
            }
            let fRows;
            let frRows;
            if (cont.querySelector(fCls).contains(row$$1)) {
                fRows = this.parent.getMovableRowByIndex(idx);
                this.updateFrozenCont(fRows, td, mTd);
                if (this.parent.getFrozenMode() === leftRight) {
                    args.frozenRightForm = frTd.querySelector('form');
                    this.refreshEditForm(args.frozenRightForm, args.rowData);
                    frRows = this.parent.getFrozenRightRowByIndex(idx);
                    this.updateFrozenRightCont(frRows, td, frTd);
                }
            }
            else {
                fRows = this.parent.getRowByIndex(idx);
                this.updateFrozenCont(fRows, mTd, td);
                if (this.parent.getFrozenMode() === leftRight) {
                    args.frozenRightForm = frTd.querySelector('form');
                    this.refreshEditForm(args.frozenRightForm, args.rowData);
                    frRows = this.parent.getFrozenRightRowByIndex(idx);
                    this.updateFrozenRightCont(frRows, frTd, td);
                }
            }
            fRows.appendChild(mTd);
            fRows.classList.add(editedRow);
            if (this.parent.getFrozenMode() === leftRight) {
                frRows.appendChild(frTd);
                frRows.classList.add(editedRow);
                alignFrozenEditForm(args.frozenRightForm.querySelector('td:not(.e-hide)'), args.form.querySelector('td:not(.e-hide)'));
            }
            alignFrozenEditForm(args.movableForm.querySelector('td:not(.e-hide)'), args.form.querySelector('td:not(.e-hide)'));
        }
    }
    refreshEditForm(form, data) {
        if (this.parent.editSettings.template) {
            form.innerHTML = '';
            this.appendChildren(form, data, false);
        }
    }
    updateFrozenRightCont(row$$1, ele, frEle) {
        row$$1.innerHTML = '';
        this.renderRightFrozen(ele, frEle);
        frEle.querySelector(colGroup).innerHTML = this.parent.getHeaderContent()
            .querySelector('.e-frozen-right-header').querySelector(colGroup).innerHTML;
        ele.setAttribute('colspan', this.parent.getVisibleFrozenColumns() - this.parent.getFrozenRightColumnsCount() + '');
        frEle.setAttribute('colspan', this.parent.getFrozenRightColumnsCount() + '');
    }
    updateFrozenCont(row$$1, ele, mEle) {
        row$$1.innerHTML = '';
        this.renderMovable(ele, mEle);
        mEle.querySelector(colGroup).innerHTML = this.parent.getHeaderContent()
            .querySelector('.' + movableHeader).querySelector(colGroup).innerHTML;
        ele.setAttribute('colspan', this.parent.getVisibleFrozenColumns() + '');
        mEle.setAttribute('colspan', this.parent.getCurrentVisibleColumns(this.parent.enableColumnVirtualization).length - this.parent.getVisibleFrozenColumns() + '');
    }
    renderRightFrozen(ele, frEle) {
        frEle.querySelector('tr').innerHTML = '';
        const cols = this.parent.getColumns();
        let k = 0;
        for (let i = 0; i < cols.length; i++, k++) {
            if (cols[i].getFreezeTableName() === frozenRight) {
                const index = k - this.parent.getMovableColumnsCount();
                frEle.querySelector('tr').appendChild(ele.querySelector('tr').removeChild(ele.querySelector('tr').children[index]));
                k--;
            }
        }
    }
    renderMovable(ele, mEle) {
        mEle.querySelector('tr').innerHTML = '';
        const cols = this.parent.getColumns();
        let k = this.parent.isRowDragable() ? 1 : 0;
        for (let i = 0; i < cols.length; i++, k++) {
            if (cols[i].getFreezeTableName() === 'movable') {
                mEle.querySelector('tr').appendChild(ele.querySelector('tr').removeChild(ele.querySelector('tr').children[k]));
                k--;
            }
        }
    }
    // eslint-disable-next-line max-len
    getEditElement(elements, isEdit, tdElement, args, isFrozen) {
        const gObj = this.parent;
        let gLen = 0;
        const isDetail = !isNullOrUndefined(gObj.detailTemplate) || !isNullOrUndefined(gObj.childGrid) ? 1 : 0;
        if (gObj.allowGrouping) {
            gLen = gObj.groupSettings.columns.length;
        }
        const td = this.parent.createElement('td', {
            className: 'e-editcell e-normaledit',
            attrs: {
                colspan: (gObj.getCurrentVisibleColumns(this.parent.enableColumnVirtualization).length - gObj.getVisibleFrozenColumns()
                    + this.parent.getIndentCount()).toString()
            }
        });
        const form = args.form =
            this.parent.createElement('form', { id: gObj.element.id + 'EditForm', className: 'e-gridform' });
        if (this.parent.editSettings.template) {
            this.appendChildren(form, args.rowData, isFrozen);
            td.appendChild(form);
            return td;
        }
        const table$$1 = this.parent.createElement('table', { className: 'e-table e-inline-edit', attrs: { cellspacing: '0.25', role: 'grid' } });
        table$$1.appendChild(gObj.getContentTable().querySelector(colGroup).cloneNode(true));
        const tbody$$1 = this.parent.createElement(tbody, { attrs: { role: 'rowgroup' } });
        const tr = this.parent.createElement('tr', { attrs: { role: 'row' } });
        let i = 0;
        if (isDetail) {
            tr.insertBefore(this.parent.createElement('td', { className: 'e-detailrowcollapse' }), tr.firstChild);
        }
        if (gObj.isRowDragable()) {
            tr.appendChild(this.parent.createElement('td', { className: 'e-dragindentcell' }));
        }
        while (i < gLen) {
            tr.appendChild(this.parent.createElement('td', { className: 'e-indentcell' }));
            i++;
        }
        let m = 0;
        i = 0;
        const isVirtualFrozen = gObj.isFrozenGrid() && gObj.enableColumnVirtualization && args.isScroll;
        const cols = args.isCustomFormValidation ? this.parent.columnModel : gObj.getColumns();
        while ((isEdit && m < tdElement.length && i < cols.length) || i < cols.length) {
            const span = isEdit ? tdElement[m].getAttribute('colspan') : null;
            const col = cols[i];
            if ((isVirtualFrozen && col.getFreezeTableName() !== 'movable')
                || (args.isCustomFormValidation && (col.commands || col.commandsTemplate || !col.field))) {
                i++;
                continue;
            }
            const td = this.parent.createElement('td', {
                className: rowCell, attrs: { style: 'text-align:' + (col.textAlign ? col.textAlign : ''), 'colspan': span ? span : '' }
            });
            if (col.visible) {
                td.appendChild(elements[col.uid]);
                if (this.parent.rowRenderingMode === 'Vertical') {
                    setStyleAndAttributes(td, { 'data-cell': col.headerText });
                    if (i === 0) {
                        td.classList.add('e-responsive-editcell');
                    }
                }
                if (col.editType === 'booleanedit') {
                    td.classList.add('e-boolcell');
                }
                else if (col.commands || col.commandsTemplate) {
                    addClass([td], 'e-unboundcell');
                }
            }
            else {
                td.classList.add('e-hide');
            }
            tr.appendChild(td);
            i = span ? i + parseInt(span, 10) : i + 1;
            m++;
        }
        tbody$$1.appendChild(tr);
        table$$1.appendChild(tbody$$1);
        form.appendChild(table$$1);
        td.appendChild(form);
        return td;
    }
    removeEventListener() {
        //To destroy the renderer
    }
    appendChildren(form, data, isFrozen) {
        const dummyData = extend({}, data, { isAdd: !this.isEdit, isFrozen: isFrozen }, true);
        const editTemplateID = this.parent.element.id + 'editSettingsTemplate';
        if (this.parent.isReact && typeof (this.parent.editSettings.template) !== 'string') {
            this.parent.getEditTemplate()(dummyData, this.parent, 'editSettingsTemplate', editTemplateID, null, null, form);
            this.parent.renderTemplates();
        }
        else {
            appendChildren(form, this.parent.getEditTemplate()(dummyData, this.parent, 'editSettingsTemplate', editTemplateID));
        }
        // eslint-disable-next-line
        
    }
}

/**
 * Edit render module is used to render grid edit row.
 *
 * @hidden
 */
class BatchEditRender {
    /**
     * Constructor for render module
     *
     * @param {IGrid} parent - specifies the IGrid
     */
    constructor(parent) {
        this.parent = parent;
    }
    update(elements, args) {
        if (this.parent.isReact && args.columnObject && args.columnObject.template) {
            const parentRow = args.cell.parentElement;
            const newTd = args.cell.cloneNode(true);
            parentRow.insertBefore(newTd, args.cell);
            newTd.focus();
            args.cell.remove();
            args.cell = newTd;
        }
        args.cell.innerHTML = '';
        args.cell.appendChild(this.getEditElement(elements, args));
        args.cell.classList.remove('e-ellipsistooltip');
        args.cell.classList.add('e-editedbatchcell');
        classList(args.row, [editedRow, 'e-batchrow'], []);
    }
    getEditElement(elements, args) {
        const gObj = this.parent;
        const form = this.parent
            .createElement('form', { id: gObj.element.id + 'EditForm', className: 'e-gridform' });
        form.appendChild(elements[args.columnObject.uid]);
        if (args.columnObject.editType === 'booleanedit') {
            args.cell.classList.add('e-boolcell');
        }
        if (!args.columnObject.editType) {
            args.cell.classList.add('e-inputbox');
        }
        return form;
    }
    removeEventListener() {
        //To destroy the renderer
    }
}

/**
 * Edit render module is used to render grid edit row.
 *
 * @hidden
 */
class DialogEditRender {
    /**
     * Constructor for render module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {ServiceLocator} serviceLocator - specifies the serviceLocator
     */
    constructor(parent, serviceLocator) {
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(dialogDestroy, this.destroy, this);
        this.parent.on(destroy, this.destroy, this);
    }
    setLocaleObj() {
        this.l10n = this.serviceLocator.getService('localization');
    }
    addNew(elements, args) {
        this.isEdit = false;
        this.createDialog(elements, args);
    }
    update(elements, args) {
        this.isEdit = true;
        this.createDialog(elements, args);
    }
    createDialogHeader(args) {
        const gObj = this.parent;
        let header;
        if (this.parent.enableAdaptiveUI) {
            const responsiveDlgRenderer = new ResponsiveDialogRenderer(this.parent, this.serviceLocator);
            responsiveDlgRenderer.action = this.isEdit ? ResponsiveDialogAction.isEdit : ResponsiveDialogAction.isAdd;
            return responsiveDlgRenderer.renderResponsiveHeader(undefined, args);
        }
        else {
            if (gObj.editSettings.headerTemplate) {
                header = this.getDialogEditTemplateElement('HeaderTemplate', args);
            }
            else if (this.isEdit) {
                header = this.l10n.getConstant('EditFormTitle') + args.primaryKeyValue[0];
            }
            else {
                header = this.l10n.getConstant('AddFormTitle');
            }
        }
        return header;
    }
    createDialog(elements, args) {
        const gObj = this.parent;
        this.dialog = this.parent.createElement('div', { id: gObj.element.id + '_dialogEdit_wrapper', styles: 'width: auto' });
        if (gObj.enableAdaptiveUI) {
            this.dialog.classList.add('e-responsive-dialog');
        }
        this.dialog.setAttribute('aria-label', 'Dialog edit');
        gObj.element.appendChild(this.dialog);
        this.setLocaleObj();
        // let position: PositionDataModel = this.parent.element.getBoundingClientRect().height < 400 ?
        //     { X: 'center', Y: 'top' } : { X: 'center', Y: 'center' };
        this.dialogObj = new Dialog(extend({
            header: this.createDialogHeader(args), isModal: true, visible: true,
            cssClass: this.parent.cssClass ? 'e-edit-dialog' + ' ' + this.parent.cssClass : 'e-edit-dialog',
            content: this.getEditElement(elements, args),
            showCloseIcon: true,
            allowDragging: true,
            // position: position,
            close: this.dialogClose.bind(this),
            created: this.dialogCreated.bind(this),
            closeOnEscape: true, width: gObj.editSettings.template ? 'auto' : '330px',
            target: args.target ? args.target : document.body, animationSettings: { effect: 'None' },
            footerTemplate: gObj.editSettings.footerTemplate ? this.getDialogEditTemplateElement('FooterTemplate', args) : null,
            buttons: [{
                    click: this.btnClick.bind(this),
                    buttonModel: { content: this.l10n.getConstant('SaveButton'),
                        cssClass: this.parent.cssClass ? 'e-primary' + ' ' + this.parent.cssClass : 'e-primary',
                        isPrimary: true }
                },
                { click: this.btnClick.bind(this),
                    buttonModel: {
                        cssClass: this.parent.cssClass ? 'e-flat' + ' ' + this.parent.cssClass : 'e-flat',
                        content: this.l10n.getConstant('CancelButton')
                    } }]
        }, gObj.editSettings.dialog ? (gObj.editSettings.dialog.params || {}) : {}));
        args.dialog = this.dialogObj;
        const isStringTemplate = 'isStringTemplate';
        this.dialogObj[isStringTemplate] = true;
        this.renderResponsiveDialog();
        this.dialogObj.appendTo(this.dialog);
        applyBiggerTheme(this.parent.element, this.dialogObj.element.parentElement);
        if (gObj.enableAdaptiveUI) {
            this.dialogObj.show(true);
        }
    }
    dialogCreated() {
        addBiggerDialog(this.parent);
    }
    renderResponsiveDialog() {
        if (this.parent.enableAdaptiveUI) {
            if (this.parent.adaptiveDlgTarget) {
                this.dialogObj.target = this.parent.adaptiveDlgTarget;
            }
            this.dialogObj.buttons = [{}];
            this.dialogObj.showCloseIcon = true;
            this.dialogObj.visible = false;
            this.dialogObj.width = '100%';
            this.dialogObj.open = () => {
                this.dialogObj.element.style.maxHeight = '100%';
            };
        }
    }
    btnClick(e) {
        if (this.l10n.getConstant('CancelButton').toLowerCase() === e.target.innerText.trim().toLowerCase()) {
            this.dialogClose();
        }
        else {
            this.parent.endEdit();
        }
    }
    dialogClose() {
        this.parent.closeEdit();
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    destroy(args) {
        const dialogEditTemplates = ['template', 'headerTemplate', 'footerTemplate'];
        for (let i = 0; i < dialogEditTemplates.length; i++) {
            if (this.parent.editSettings[dialogEditTemplates[i]]) {
                const templateName = dialogEditTemplates[i].charAt(0).toUpperCase() + dialogEditTemplates[i].slice(1);
                const editTemplateID = this.parent.element.id + 'editSettings' + templateName;
                updateBlazorTemplate(editTemplateID, templateName, this.parent.editSettings);
            }
        }
        this.parent.notify(destroyForm, {});
        this.parent.isEdit = false;
        this.parent.notify(toolbarRefresh, {});
        if (this.dialog && !this.dialogObj.isDestroyed) {
            this.dialogObj.destroy();
            remove(this.dialog);
        }
    }
    getDialogEditTemplateElement(dialogTemp, args) {
        const tempDiv = this.parent.createElement('div', { className: 'e-dialog' + dialogTemp });
        const dummyData = extend({}, args.rowData, { isAdd: !this.isEdit }, true);
        const templateID = this.parent.element.id + 'editSettings' + dialogTemp;
        appendChildren(tempDiv, (dialogTemp === 'HeaderTemplate' ? this.parent.getEditHeaderTemplate() :
            this.parent.getEditFooterTemplate())(dummyData, this.parent, 'editSettings' + dialogTemp, templateID));
        updateBlazorTemplate(templateID, dialogTemp, this.parent.editSettings);
        return tempDiv;
    }
    getEditElement(elements, args) {
        const gObj = this.parent;
        const div = this.parent.createElement('div', { className: this.isEdit ? editedRow : 'e-insertedrow' });
        const form = args.form =
            this.parent.createElement('form', { id: gObj.element.id + 'EditForm', className: 'e-gridform' });
        if (this.parent.editSettings.template) {
            const editTemplateID = this.parent.element.id + 'editSettingsTemplate';
            const dummyData = extend({}, args.rowData, { isAdd: !this.isEdit }, true);
            const isReactCompiler = this.parent.isReact && typeof (this.parent.editSettings.template) !== 'string';
            if (isReactCompiler) {
                this.parent.getEditTemplate()(dummyData, this.parent, 'editSettingsTemplate', editTemplateID, null, null, form);
                this.parent.renderTemplates();
            }
            else {
                appendChildren(form, this.parent.getEditTemplate()(dummyData, this.parent, 'editSettingsTemplate', editTemplateID));
            }
            const setRules = () => {
                const columns = this.parent.getColumns();
                for (let i = 0; i < columns.length; i++) {
                    if (columns[i].validationRules) {
                        this.parent.editModule.formObj.rules[columns[i].field] =
                            columns[i].validationRules;
                    }
                }
            };
            updateBlazorTemplate(editTemplateID, 'Template', this.parent.editSettings, true, setRules);
            div.appendChild(form);
            return div;
        }
        const table$$1 = this.parent.createElement('table', { className: table, attrs: { cellspacing: '6px', role: 'grid' } });
        const tbody$$1 = this.parent.createElement(tbody, { attrs: { role: 'rowgroup' } });
        const cols = gObj.getColumns();
        for (let i = 0; i < cols.length; i++) {
            if (this.parent.editModule.checkColumnIsGrouped(cols[i]) || cols[i].commands || cols[i].commandsTemplate ||
                cols[i].type === 'checkbox') {
                continue;
            }
            const tr = this.parent.createElement('tr', { attrs: { role: 'row' } });
            const dataCell = this.parent.createElement('td', {
                className: rowCell, attrs: {
                    style: 'text-align:' + (this.parent.enableRtl ? 'right' : 'left') + ';width:190px'
                }
            });
            elements[cols[i].uid].classList.remove('e-input');
            dataCell.appendChild(elements[cols[i].uid]);
            tr.appendChild(dataCell);
            tbody$$1.appendChild(tr);
        }
        table$$1.appendChild(tbody$$1);
        form.appendChild(table$$1);
        div.appendChild(form);
        return div;
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(dialogDestroy, this.destroy);
        this.parent.off(destroy, this.destroy);
    }
}

/**
 * Edit render module is used to render grid edit row.
 *
 * @hidden
 */
class EditRender {
    /**
     * Constructor for render module
     *
     * @param {IGrid} parent -specifies the IGrid
     * @param {ServiceLocator} serviceLocator - specifies the serviceLocator
     */
    constructor(parent, serviceLocator) {
        //Internal variables
        this.editType = {
            'Inline': InlineEditRender,
            'Normal': InlineEditRender, 'Batch': BatchEditRender, 'Dialog': DialogEditRender
        };
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.renderer = new this.editType[this.parent.editSettings.mode](parent, serviceLocator);
        this.focus = serviceLocator.getService('focus');
    }
    addNew(args) {
        this.renderer.addNew(this.getEditElements(args), args);
        this.convertWidget(args);
    }
    update(args) {
        this.renderer.update(this.getEditElements(args), args);
        const isCustomFormValidation = args.isCustomFormValidation;
        if (!isCustomFormValidation) {
            this.parent.notify(beforeStartEdit, args);
            this.convertWidget(args);
        }
    }
    convertWidget(args) {
        const gObj = this.parent;
        let isFocused;
        let cell;
        let value;
        let fForm;
        let frForm;
        const frzCols = gObj.isFrozenGrid();
        const index = gObj.getFrozenMode() === 'Right' && gObj.editSettings.mode === 'Normal' ? 1 : 0;
        const form = gObj.editSettings.mode === 'Dialog' ?
            select('#' + gObj.element.id + '_dialogEdit_wrapper .e-gridform', document) :
            gObj.element.getElementsByClassName('e-gridform')[index];
        const isVirtualFrozen = frzCols && this.parent.enableColumnVirtualization && args.isScroll;
        if (frzCols && gObj.editSettings.mode === 'Normal') {
            const rowIndex = parseInt(args.row.getAttribute(ariaRowIndex), 10);
            if (gObj.frozenRows && ((args.requestType === 'add' && gObj.editSettings.newRowPosition === 'Top')
                || rowIndex < gObj.frozenRows)) {
                fForm = gObj.element.querySelector('.' + movableHeader).querySelector('.e-gridform');
                if (this.parent.getFrozenMode() === leftRight) {
                    frForm = args.frozenRightForm;
                }
            }
            else {
                fForm = gObj.element.querySelector('.' + movableContent).querySelector('.e-gridform');
                if (this.parent.getFrozenMode() === leftRight) {
                    frForm = args.frozenRightForm;
                }
            }
        }
        const cols = gObj.editSettings.mode !== 'Batch' ? gObj.getColumns() : [gObj.getColumnByField(args.columnName)];
        for (const col of cols) {
            if (isVirtualFrozen && col.getFreezeTableName() !== 'movable') {
                continue;
            }
            if (this.parent.editSettings.template && !isNullOrUndefined(col.field)) {
                const cellArgs = extend({}, args);
                cellArgs.element = form.querySelector('[name=' + getComplexFieldID(col.field) + ']');
                if (isNullOrUndefined(cellArgs.element) && frzCols) {
                    cellArgs.element = fForm.querySelector('[name=' + getComplexFieldID(col.field) + ']');
                }
                if (typeof col.edit.write === 'string') {
                    getObject(col.edit.write, window)(cellArgs);
                }
                else {
                    col.edit.write(cellArgs);
                }
                continue;
            }
            if (this.parent.editModule.checkColumnIsGrouped(col) || col.commands) {
                continue;
            }
            // eslint-disable-next-line
            value = (col.valueAccessor(col.field, args.rowData, col));
            if (col.getFreezeTableName() === 'movable' && gObj.editSettings.mode === 'Normal') {
                cell = fForm.querySelector('[e-mappinguid=' + col.uid + ']');
            }
            else if (frForm && col.getFreezeTableName() === frozenRight && gObj.editSettings.mode === 'Normal') {
                cell = frForm.querySelector('[e-mappinguid=' + col.uid + ']');
            }
            else {
                cell = form.querySelector('[e-mappinguid=' + col.uid + ']');
            }
            let temp = col.edit.write;
            if (!isNullOrUndefined(cell)) {
                if (typeof temp === 'string') {
                    temp = getObject(temp, window);
                    temp({
                        rowData: args.rowData, element: cell, column: col, requestType: args.requestType, row: args.row,
                        foreignKeyData: col.isForeignColumn() && getObject(col.field, args.foreignKeyData)
                    });
                }
                else {
                    col.edit.write({
                        rowData: args.rowData, element: cell, column: col, requestType: args.requestType, row: args.row,
                        foreignKeyData: col.isForeignColumn() && getObject(col.field, args.foreignKeyData)
                    });
                }
                if (!isFocused && !cell.getAttribute('disabled') && !parentsUntil(cell, 'e-checkbox-disabled')) {
                    this.focusElement(cell, args.type);
                    isFocused = true;
                }
            }
        }
        if (frzCols && !this.parent.allowTextWrap && ((args.requestType === 'add') || args.requestType === 'beginEdit')
            && this.parent.editSettings.mode !== 'Dialog' && !isNullOrUndefined(form) && !isNullOrUndefined(fForm)) {
            const mTdElement = (fForm.querySelector('tr').children[0]);
            const fTdElement = (form.querySelector('tr').children[0]);
            if (fTdElement.offsetHeight > mTdElement.offsetHeight) {
                mTdElement.style.height = fTdElement.offsetHeight + 'px';
                if (frForm) {
                    const frTdElement = fForm.querySelector('tr').children[0];
                    frTdElement.style.height = fTdElement.offsetHeight + 'px';
                }
            }
            else {
                fTdElement.style.height = mTdElement.offsetHeight + 'px';
                if (frForm) {
                    const frTdElement = fForm.querySelector('tr').children[0];
                    frTdElement.style.height = mTdElement.offsetHeight + 'px';
                }
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    focusElement(elem, type) {
        const chkBox = this.parent.element.querySelector('.e-edit-checkselect');
        if (!isNullOrUndefined(chkBox)) {
            chkBox.nextElementSibling.classList.add('e-focus');
        }
        if (this.parent.editSettings.mode === 'Batch') {
            this.focus.onClick({ target: closest(elem, 'td') }, true);
        }
        else {
            const isFocus = this.parent.enableVirtualization && this.parent.editSettings.mode === 'Normal' ? false : true;
            if (isFocus || (this.parent.enableVirtualization && this.parent.editSettings.newRowPosition === 'Bottom'
                && parentsUntil(elem, addedRow))) {
                elem.focus();
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                elem.focus({ preventScroll: true });
            }
        }
        if (elem.classList.contains('e-defaultcell')) {
            elem.setSelectionRange(elem.value.length, elem.value.length);
        }
    }
    getEditElements(args) {
        const gObj = this.parent;
        const elements = {};
        let cols = gObj.editSettings.mode !== 'Batch' ? gObj.getColumns() : [gObj.getColumnByField(args.columnName)];
        if (args.isCustomFormValidation) {
            cols = this.parent.columnModel;
        }
        if (this.parent.editSettings.template) {
            return {};
        }
        const isVirtualFrozen = gObj.isFrozenGrid() && gObj.enableColumnVirtualization && args.isScroll;
        for (let i = 0, len = cols.length; i < len; i++) {
            const col = cols[i];
            if (this.parent.editModule.checkColumnIsGrouped(col) || (isVirtualFrozen && cols[i].getFreezeTableName() !== 'movable')
                || (args.isCustomFormValidation && (col.commands || col.commandsTemplate || !col.field))) {
                continue;
            }
            if (col.commands || col.commandsTemplate) {
                const cellRendererFact = this.serviceLocator.getService('cellRendererFactory');
                const model = new RowModelGenerator(this.parent);
                const cellRenderer = cellRendererFact.getCellRenderer(CellType.CommandColumn);
                const cells = model.generateRows(args.rowData)[0].cells;
                const cell = cells.filter((cell) => cell.rowID);
                const td = cellRenderer.render(cell[i], args.rowData, { 'index': args.row ? args.row.getAttribute(ariaRowIndex) : 0 }, this.parent.enableVirtualization);
                const div = td.firstElementChild;
                div.setAttribute('textAlign', td.getAttribute('textAlign'));
                elements[col.uid] = div;
                continue;
            }
            const value = (col.valueAccessor(col.field, args.rowData, col));
            const tArgs = { column: col, value: value, type: args.requestType, data: args.rowData };
            let temp = col.edit.create;
            let input;
            if (col.editTemplate) {
                input = this.parent.createElement('span', { attrs: { 'e-mappinguid': col.uid } });
                const tempID = this.parent.element.id + col.uid + 'editTemplate';
                const tempData = extendObjWithFn({}, args.rowData, { column: col });
                const isReactCompiler = this.parent.isReact && typeof (col.editTemplate) !== 'string';
                if (isReactCompiler) {
                    col.getEditTemplate()(extend({ 'index': args.rowIndex }, tempData), this.parent, 'editTemplate', tempID, null, null, input);
                    this.parent.renderTemplates();
                }
                else {
                    const template = col.getEditTemplate()(extend({ 'index': args.rowIndex }, tempData), this.parent, 'editTemplate', tempID);
                    appendChildren(input, template);
                }
            }
            else {
                if (typeof temp === 'string') {
                    temp = getObject(temp, window);
                    input = temp(tArgs);
                }
                else {
                    input = col.edit.create(tArgs);
                }
                if (typeof input === 'string') {
                    const div = this.parent.createElement('div');
                    div.innerHTML = input;
                    input = div.firstChild;
                }
                const isInput = input.tagName !== 'input' && input.querySelectorAll('input').length;
                const complexFieldName = getComplexFieldID(col.field);
                attributes(isInput ? input.querySelector('input') : input, {
                    name: complexFieldName, 'e-mappinguid': col.uid,
                    id: gObj.element.id + complexFieldName
                });
                classList(input, ['e-input', 'e-field'], []);
                if (col.textAlign === 'Right') {
                    input.classList.add('e-ralign');
                }
                if ((col.isPrimaryKey || col.isIdentity) && args.requestType === 'beginEdit' ||
                    (col.isIdentity && args.requestType === 'add')) { // already disabled in cell plugins
                    input.setAttribute('disabled', '');
                }
            }
            elements[col.uid] = input;
        }
        return elements;
    }
    destroy() {
        this.renderer.removeEventListener();
    }
}

/**
 * `DropDownEditCell` is used to handle dropdown cell type editing.
 *
 * @hidden
 */
class EditCellBase {
    constructor(parent) {
        this.parent = parent;
    }
    create(args) {
        return createEditElement(this.parent, args.column, 'e-field', { type: 'text' });
    }
    read(element) {
        return element.ej2_instances[0].value;
    }
    destroy() {
        if (this.obj && !this.obj.isDestroyed) {
            if (this.removeEventHandler) {
                this.removeEventHandler();
            }
            this.obj.destroy();
        }
    }
}

/**
 * `BooleanEditCell` is used to handle boolean cell type editing.
 *
 * @hidden
 */
class BooleanEditCell extends EditCellBase {
    constructor() {
        super(...arguments);
        this.activeClasses = ['e-selectionbackground', 'e-active'];
    }
    create(args) {
        const col = args.column;
        let classNames = 'e-field e-boolcell';
        if (col.type === 'checkbox') {
            classNames = 'e-field e-boolcell e-edit-checkselect';
        }
        this.removeEventHandler = this.removeEventListener;
        return createEditElement(this.parent, args.column, classNames, { type: 'checkbox', value: args.value });
    }
    read(element) {
        return element.checked;
    }
    write(args) {
        let selectChkBox;
        let chkState;
        if (!isNullOrUndefined(args.row)) {
            selectChkBox = args.row.querySelector('.e-edit-checkselect');
        }
        if (getObject(args.column.field, args.rowData)) {
            chkState = JSON.parse(getObject(args.column.field, args.rowData).toString().toLowerCase());
        }
        if (!isNullOrUndefined(selectChkBox) && args.column.type === 'checkbox') {
            this.editType = this.parent.editSettings.mode;
            this.editRow = args.row;
            if (args.requestType !== 'add') {
                const row$$1 = this.parent.getRowObjectFromUID(args.row.getAttribute('data-uid'));
                chkState = row$$1 ? row$$1.isSelected : false;
            }
            addRemoveActiveClasses([].slice.call(args.row.getElementsByClassName(rowCell)), chkState, ...this.activeClasses);
        }
        this.obj = new CheckBox(extend({
            label: this.parent.editSettings.mode !== 'Dialog' ? ' ' : args.column.headerText,
            checked: chkState,
            disabled: !isEditable(args.column, args.requestType, args.element), enableRtl: this.parent.enableRtl,
            cssClass: this.parent.cssClass ? this.parent.cssClass : ''
        }, args.column.edit.params));
        this.addEventListener();
        this.obj.appendTo(args.element);
    }
    addEventListener() {
        this.cbChange = this.checkBoxChange.bind(this);
        this.obj.addEventListener(change, this.cbChange);
    }
    removeEventListener() {
        if (this.obj.isDestroyed) {
            return;
        }
        this.obj.removeEventListener(change, this.cbChange);
    }
    checkBoxChange(args) {
        if (this.editRow && this.editType !== 'Dialog') {
            let add = false;
            if (!args.checked) {
                this.editRow.removeAttribute('aria-selected');
            }
            else {
                add = true;
                this.editRow.setAttribute('aria-selected', add.toString());
            }
            addRemoveActiveClasses([].slice.call(this.editRow.getElementsByClassName(rowCell)), add, ...this.activeClasses);
        }
    }
}

/**
 * `DropDownEditCell` is used to handle dropdown cell type editing.
 *
 * @hidden
 */
class DropDownEditCell extends EditCellBase {
    constructor(parent) {
        //constructor
        super();
        this.parent = parent;
        this.flag = false;
        this.removeEventHandler = this.removeEventListener;
    }
    write(args) {
        const isInline = this.parent.editSettings.mode !== 'Dialog';
        this.column = args.column;
        const pred = new Predicate(args.column.field, 'notequal', null, true, false);
        const params = {};
        if (args.column.edit.params) {
            const keys = Object.keys(args.column.edit.params);
            for (let i = 0; i < keys.length; i++) {
                params[keys[i]] = keys[i] === 'query' ? args.column.edit.params[keys[i]].clone() : args.column.edit.params[keys[i]];
            }
        }
        this.obj = new DropDownList(extend({
            dataSource: this.parent.dataSource instanceof DataManager ?
                this.parent.dataSource : new DataManager(this.parent.dataSource),
            query: new Query().where(pred).select(args.column.field), enabled: isEditable(args.column, args.requestType, args.element),
            fields: { value: args.column.field },
            value: getObject(args.column.field, args.rowData),
            enableRtl: this.parent.enableRtl,
            placeholder: isInline ? '' : args.column.headerText, popupHeight: '200px',
            floatLabelType: isInline ? 'Never' : 'Always',
            sortOrder: 'Ascending',
            cssClass: this.parent.cssClass ? this.parent.cssClass : null
        }, params));
        if (this.parent.enableVirtualization) {
            this.obj.dataSource = args.column.isForeignColumn() ? [args.foreignKeyData[0]] : [args.rowData];
        }
        this.addEventListener();
        this.obj.query.params = this.parent.query.params;
        this.obj.appendTo(args.element);
        /* tslint:disable-next-line:no-any */
        args.element.setAttribute('name', getComplexFieldID(args.column.field));
    }
    addEventListener() {
        this.ddCreated = this.dropdownCreated.bind(this);
        this.ddOpen = this.dropDownOpen.bind(this);
        this.ddBeforeOpen = this.dropdownBeforeOpen.bind(this);
        this.ddComplete = this.ddActionComplete.bind(this);
        this.obj.addEventListener(create, this.ddCreated);
        this.obj.addEventListener(open, this.ddOpen);
        this.obj.addEventListener(beforeOpen, this.ddBeforeOpen);
        this.obj.addEventListener(actionComplete, this.ddComplete);
    }
    removeEventListener() {
        if (this.obj.isDestroyed) {
            return;
        }
        this.obj.removeEventListener(create, this.ddCreated);
        this.obj.removeEventListener(open, this.ddOpen);
        this.obj.removeEventListener(beforeOpen, this.ddBeforeOpen);
        this.obj.removeEventListener(actionComplete, this.ddComplete);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    dropdownCreated(e) {
        this.flag = true;
    }
    dropdownBeforeOpen() {
        if (this.parent.enableVirtualization) {
            this.obj.dataSource = !this.column.isForeignColumn() ? (this.parent.dataSource instanceof DataManager ?
                this.parent.dataSource : new DataManager(this.parent.dataSource))
                : this.column.dataSource instanceof DataManager ?
                    this.column.dataSource : new DataManager(this.column.dataSource);
        }
    }
    ddActionComplete(e) {
        e.result = DataUtil.distinct(e.result, this.obj.fields.value, true);
        if (this.flag && this.column.dataSource && !(this.column.edit.params &&
            this.column.edit.params.ddEditedData)) {
            if ('result' in this.column.dataSource) {
                this.column.dataSource.result = e.result;
            }
            else if (this.column.dataSource instanceof DataManager) {
                this.column.dataSource.dataSource.json = e.result;
            }
        }
        this.flag = false;
    }
    dropDownOpen(args) {
        const dlgElement = parentsUntil(this.obj.element, 'e-dialog');
        if (this.parent.editSettings.mode === 'Dialog' && !isNullOrUndefined(dlgElement)) {
            const dlgObj = select('#' + dlgElement.id, document).ej2_instances[0];
            args.popup.element.style.zIndex = (dlgObj.zIndex + 1).toString();
        }
    }
}

/**
 * `NumericEditCell` is used to handle numeric cell type editing.
 *
 * @hidden
 */
class NumericEditCell {
    constructor(parent) {
        this.parent = parent;
    }
    keyEventHandler(args) {
        if (args.keyCode === 13 || args.keyCode === 9) {
            const evt = document.createEvent('HTMLEvents');
            evt.initEvent('change', false, true);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.dispatchEvent(evt);
        }
    }
    create(args) {
        this.instances = new Internationalization(this.parent.locale);
        return createEditElement(this.parent, args.column, 'e-field', {});
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    read(element) {
        return this.obj.value;
    }
    write(args) {
        const col = args.column;
        const isInline = this.parent.editSettings.mode !== 'Dialog';
        this.obj = new NumericTextBox(extend({
            value: parseFloat(getObject(args.column.field, args.rowData)),
            enableRtl: this.parent.enableRtl,
            placeholder: isInline ? '' : args.column.headerText,
            enabled: isEditable(args.column, args.requestType, args.element),
            floatLabelType: this.parent.editSettings.mode !== 'Dialog' ? 'Never' : 'Always',
            locale: this.parent.locale,
            cssClass: this.parent.cssClass ? this.parent.cssClass : null
        }, col.edit.params));
        args.element.setAttribute('name', getComplexFieldID(args.column.field));
        this.obj.appendTo(args.element);
        this.obj.element.addEventListener('keydown', this.keyEventHandler);
    }
    destroy() {
        if (this.obj && !this.obj.isDestroyed) {
            this.obj.element.removeEventListener('keydown', this.keyEventHandler);
            this.obj.destroy();
        }
    }
}

/**
 * `DefaultEditCell` is used to handle default cell type editing.
 *
 * @hidden
 */
class DefaultEditCell extends EditCellBase {
    create(args) {
        const attr = {
            type: 'text', value: !isNullOrUndefined(args.value) ? args.value : '', style: 'text-align:' + args.column.textAlign
        };
        return createEditElement(this.parent, args.column, 'e-field e-input e-defaultcell', attr);
    }
    read(element) {
        return element.value;
    }
    write(args) {
        const col = args.column;
        const isInline = this.parent.editSettings.mode !== 'Dialog';
        this.obj = new TextBox(extend({
            element: args.element, floatLabelType: this.parent.editSettings.mode !== 'Dialog' ? 'Never' : 'Always',
            enableRtl: this.parent.enableRtl, enabled: isEditable(args.column, args.requestType, args.element),
            placeholder: isInline ? '' : args.column.headerText,
            cssClass: this.parent.cssClass ? this.parent.cssClass : ''
        }, col.edit.params));
        this.obj.appendTo(args.element);
    }
}

/**
 * `NormalEdit` module is used to handle normal('inline, dialog, external') editing actions.
 *
 * @hidden
 */
class NormalEdit {
    constructor(parent, serviceLocator, renderer) {
        this.args = {};
        this.currentVirtualData = {};
        this.parent = parent;
        this.renderer = renderer;
        this.serviceLocator = serviceLocator;
        this.addEventListener();
    }
    clickHandler(e) {
        const target = e.target;
        const gObj = this.parent;
        if ((((parentsUntil(target, gridContent) &&
            parentsUntil(parentsUntil(target, gridContent), 'e-grid').id === gObj.element.id)) || (gObj.frozenRows
            && parentsUntil(target, headerContent))) && !parentsUntil(target, 'e-unboundcelldiv')) {
            this.rowIndex = parentsUntil(target, rowCell)
                ? parseInt(target.parentElement.getAttribute(ariaRowIndex), 10) : -1;
            if (gObj.isEdit) {
                gObj.editModule.endEdit();
            }
        }
    }
    dblClickHandler(e) {
        if (parentsUntil(e.target, rowCell) && this.parent.editSettings.allowEditOnDblClick) {
            this.parent.editModule.startEdit(parentsUntil(e.target, row));
        }
    }
    /**
     * The function used to trigger editComplete
     *
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    editComplete(e) {
        this.parent.isEdit = false;
        const action = 'action';
        switch (e.requestType) {
            case 'save':
                if (!(this.parent.isCheckBoxSelection || this.parent.selectionSettings.type === 'Multiple')
                    || (!this.parent.isPersistSelection)) {
                    if (e[action] !== 'edit') {
                        this.parent.selectRow(0);
                    }
                }
                this.parent.trigger(actionComplete, extend(e, {
                    requestType: 'save',
                    type: actionComplete
                }));
                break;
            case 'delete':
                this.parent.trigger(actionComplete, extend(e, {
                    requestType: 'delete',
                    type: actionComplete
                }));
                if (!this.parent.isCheckBoxSelection) {
                    this.parent.selectRow(this.editRowIndex);
                }
                break;
        }
    }
    getEditArgs(editedData, rowObj, isScroll) {
        const primaryKeys = this.parent.getPrimaryKeyFieldNames();
        const primaryKeyValues = [];
        for (let i = 0; i < primaryKeys.length; i++) {
            primaryKeyValues.push(getObject(primaryKeys[i], editedData));
        }
        const args = {
            primaryKey: primaryKeys, primaryKeyValue: primaryKeyValues, requestType: 'beginEdit',
            rowData: editedData, rowIndex: this.rowIndex, type: 'edit', cancel: false,
            foreignKeyData: rowObj && rowObj.foreignKeyData, target: undefined, isScroll: isScroll
        };
        return args;
    }
    startEdit(tr) {
        const gObj = this.parent;
        this.rowIndex = this.editRowIndex = parseInt(tr.getAttribute(ariaRowIndex), 10);
        if (gObj.enableVirtualization || gObj.enableInfiniteScrolling) {
            const selector = '.e-row[aria-rowindex="' + this.rowIndex + '"]';
            const virtualRow = this.parent.element.querySelector(selector);
            if (!virtualRow) {
                return;
            }
        }
        const e = { data: undefined, index: this.rowIndex, isScroll: false };
        this.parent.notify(virtualScrollEditActionBegin, e);
        if (isGroupAdaptive(gObj)) {
            const rObj = gObj.getRowObjectFromUID(tr.getAttribute('data-uid'));
            this.previousData = rObj.data;
        }
        else if (!this.previousData && (this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)) {
            this.previousData = e.data;
        }
        else if (!this.parent.enableVirtualization) {
            this.previousData = extend({}, {}, gObj.getCurrentViewRecords()[this.rowIndex], true);
        }
        const editedData = extend({}, {}, e.data || this.previousData, true);
        this.uid = tr.getAttribute('data-uid');
        const rowObj = gObj.getRowObjectFromUID(this.uid);
        const args = this.getEditArgs(editedData, rowObj, e.isScroll);
        args.row = tr;
        if (!args.isScroll) {
            this.parent.notify(createVirtualValidationForm, { uid: this.uid, prevData: this.previousData, argsCreator: this.getEditArgs.bind(this), renderer: this.renderer });
            gObj.trigger(beginEdit, args, (begineditargs) => {
                begineditargs.type = 'actionBegin';
                gObj.trigger(actionBegin, begineditargs, (editargs) => {
                    if (!editargs.cancel) {
                        this.inlineEditHandler(editargs, tr);
                    }
                });
            });
        }
        else {
            this.inlineEditHandler(args, tr);
        }
    }
    inlineEditHandler(editargs, tr) {
        const gObj = this.parent;
        gObj.isEdit = true;
        editargs.row = editargs.row ? editargs.row : tr;
        if (gObj.editSettings.mode !== 'Dialog') {
            gObj.clearSelection();
        }
        if (gObj.editSettings.mode === 'Dialog' && gObj.selectionModule) {
            gObj.selectionModule.preventFocus = true;
            editargs.row.classList.add('e-dlgeditrow');
        }
        this.renderer.update(editargs);
        this.uid = tr.getAttribute('data-uid');
        gObj.editModule.applyFormValidation();
        editargs.type = 'actionComplete';
        gObj.trigger(actionComplete, editargs);
        this.args = editargs;
        if (this.parent.allowTextWrap) {
            this.parent.notify(freezeRender, { case: 'textwrap' });
        }
    }
    updateRow(index, data) {
        const gObj = this.parent;
        this.editRowIndex = index;
        const args = {
            requestType: 'save', action: 'edit', type: actionBegin, data: data, cancel: false,
            previousData: gObj.getCurrentViewRecords()[index],
            row: gObj.getRowByIndex(index)
        };
        gObj.showSpinner();
        if (gObj.enableInfiniteScrolling) {
            this.uid = args.row.getAttribute('data-uid');
            const index = parseInt(args.row.getAttribute('aria-rowindex'));
            this.parent.notify(refreshInfiniteEditrowindex, { index: index });
        }
        gObj.notify(updateData, args);
        if (args.promise) {
            args.promise.then(() => gObj.refresh()).catch((e) => this.edFail(e));
        }
        else {
            if (!gObj.enableInfiniteScrolling) {
                gObj.refresh();
            }
        }
    }
    editFormValidate() {
        const gObj = this.parent;
        const isValid = gObj.editModule.editFormValidate();
        const validationArgs = {
            prevData: this.previousData, isValid: true, editIdx: this.editRowIndex, addIdx: this.addedRowIndex
        };
        gObj.notify(validateVirtualForm, validationArgs);
        return (isValid && validationArgs.isValid);
    }
    endEdit() {
        const gObj = this.parent;
        if (!this.parent.isEdit || !this.editFormValidate()) {
            return;
        }
        let editedData = extend({}, {}, this.previousData, true);
        const args = extend(this.args, {
            requestType: 'save', type: actionBegin, data: editedData, cancel: false,
            previousData: this.previousData, selectedRow: gObj.selectedRowIndex, foreignKeyData: {}
        });
        const index = gObj.getFrozenMode() === 'Right' ? 1 : 0;
        const isDlg = gObj.editSettings.mode === 'Dialog';
        const dlgWrapper = select('#' + gObj.element.id + '_dialogEdit_wrapper', document);
        const dlgForm = isDlg ? dlgWrapper.querySelector('.e-gridform') : gObj.element.getElementsByClassName('e-gridform')[index];
        const data = {
            virtualData: extend({}, {}, this.previousData, true), isAdd: false, isScroll: false, endEdit: true
        };
        this.parent.notify(getVirtualData, data);
        if ((this.parent.enableVirtualization || this.parent.enableInfiniteScrolling)
            && this.parent.editSettings.mode === 'Normal' && Object.keys(data.virtualData).length) {
            if (this.parent.isEdit) {
                this.currentVirtualData = editedData = args.data = data.virtualData;
            }
        }
        else {
            editedData = gObj.editModule.getCurrentEditedData(dlgForm, editedData);
        }
        if (gObj.isFrozenGrid() && gObj.editSettings.mode === 'Normal') {
            const mhdrFrm = gObj.getMovableVirtualHeader().querySelector('.e-gridform');
            const mCntFrm = gObj.getMovableVirtualContent().querySelector('.e-gridform');
            const mvblEle = [mhdrFrm || mCntFrm];
            let frHdrFrm;
            let frCntFrm;
            let frEle = [];
            if (gObj.getFrozenMode() === leftRight) {
                frHdrFrm = gObj.getFrozenRightHeader().querySelector('.e-gridform');
                frCntFrm = gObj.getFrozenRightContent().querySelector('.e-gridform');
                frEle = [frHdrFrm || frCntFrm];
            }
            gridActionHandler(this.parent, (tableName, elements) => {
                for (const ele of elements) {
                    if (ele) {
                        editedData = gObj.editModule.getCurrentEditedData(ele, editedData);
                    }
                }
            }, [[], mvblEle, frEle]);
        }
        let eleLength = [].slice.call(gObj.element.getElementsByClassName(editedRow)).length;
        if (!data.isAdd && Object.keys(this.currentVirtualData).length && !eleLength) {
            eleLength = 1;
        }
        if (isDlg ? dlgWrapper.getElementsByClassName(editedRow).length : eleLength) {
            args.action = 'edit';
            gObj.trigger(actionBegin, args, (endEditArgs) => {
                if (endEditArgs.cancel) {
                    return;
                }
                gObj.showSpinner();
                gObj.notify(updateData, endEditArgs);
            });
        }
        else {
            args.action = 'add';
            args.selectedRow = 0;
            args.index = this.addedRowIndex;
            gObj.notify(virtualScrollEditSuccess, {});
            gObj.notify(modelChanged, args);
            this.addedRowIndex = null;
            if (args.cancel) {
                return;
            }
        }
    }
    destroyElements() {
        const gObj = this.parent;
        gObj.editModule.destroyWidgets();
        gObj.editModule.destroyForm();
        this.parent.notify(dialogDestroy, {});
    }
    editHandler(args) {
        if (args.promise) {
            args.promise.then((e) => this.edSucc(e, args)).catch((e) => this.edFail(e));
        }
        else {
            this.editSuccess(args.data, args);
        }
    }
    edSucc(e, args) {
        this.editSuccess(e, args);
    }
    edFail(e) {
        this.editFailure(e);
    }
    updateCurrentViewData(data) {
        if (!this.parent.enableVirtualization && !this.parent.enableInfiniteScrolling) {
            this.parent.getCurrentViewRecords()[this.editRowIndex] = data;
        }
    }
    requestSuccess(args) {
        if (this.parent.editModule.formObj && !this.parent.editModule.formObj.isDestroyed) {
            this.destroyElements();
            this.stopEditStatus();
            if (this.parent.editSettings.mode === 'Dialog' && args.action !== 'add' &&
                this.parent.selectionModule) {
                this.parent.element.querySelector('.e-dlgeditrow').classList.remove('e-dlgeditrow');
            }
        }
    }
    editSuccess(e, args) {
        if (!isNullOrUndefined(e) && !(e instanceof Array)) {
            const rowData = 'rowData';
            args.data = extend({}, extend({}, args[rowData], args.data), e);
        }
        this.requestSuccess(args);
        this.parent.trigger(beforeDataBound, args);
        args.type = actionComplete;
        this.parent.isEdit = false;
        this.refreshRow(args.data);
        this.parent.notify(virtualScrollEditSuccess, args);
        this.parent.editModule.checkLastRow(args.row);
        this.parent.editModule.isLastRow = false;
        this.updateCurrentViewData(args.data);
        this.blazorTemplate();
        this.editRowIndex = null;
        this.parent.trigger(actionComplete, args);
        if (!(this.parent.isCheckBoxSelection || this.parent.selectionSettings.type === 'Multiple')
            || (!this.parent.isPersistSelection) && !this.parent.selectionSettings.checkboxOnly) {
            if (this.parent.editSettings.mode !== 'Dialog') {
                this.parent.selectRow(this.rowIndex > -1 ? this.rowIndex : this.editRowIndex);
            }
        }
        this.parent.hideSpinner();
    }
    closeForm() {
        if (!this.cloneRow && this.parent.isEdit) {
            this.stopEditStatus();
        }
        if (this.cloneRow) {
            this.cloneRow.remove();
            this.cloneRow = null;
            this.originalRow.classList.remove('e-hiddenrow');
        }
        if (this.parent.isFrozenGrid() && this.cloneFrozen) {
            this.cloneFrozen.remove();
            this.frozen.classList.remove('e-hiddenrow');
        }
    }
    blazorTemplate() {
        const cols = this.parent.getColumns();
        if (this.parent.editSettings.template && this.parent.editSettings.mode === 'Normal') {
            updateBlazorTemplate(this.parent.element.id + 'editSettingsTemplate', 'Template', this.parent.editSettings);
        }
        for (let i = 0; i < cols.length; i++) {
            const col = cols[i];
            if (col.template) {
                updateBlazorTemplate(this.parent.element.id + col.uid, 'Template', col, false);
            }
            if (col.editTemplate) {
                updateBlazorTemplate(this.parent.element.id + col.uid + 'editTemplate', 'EditTemplate', col);
            }
        }
    }
    editFailure(e) {
        this.parent.trigger(actionFailure, ({ error: e }));
        this.parent.hideSpinner();
        this.parent.log('actionfailure', { error: e });
    }
    needRefresh() {
        let refresh = true;
        const editedRow$$1 = this.parent.element.querySelector('.e-gridform');
        if ((this.parent.enableVirtualization || this.parent.infiniteScrollSettings.enableCache)
            && this.parent.editSettings.mode === 'Normal' && !editedRow$$1) {
            refresh = false;
        }
        return refresh;
    }
    refreshRow(data) {
        const frzCols = this.parent.isFrozenGrid();
        const row$$1 = new RowRenderer(this.serviceLocator, null, this.parent);
        let rowObj = this.parent.getRowObjectFromUID(this.uid);
        if (rowObj) {
            rowObj.changes = data;
            this.parent.notify(refreshVirtualCache, { data: data });
            refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes);
            if (this.needRefresh()) {
                row$$1.refresh(rowObj, this.parent.getColumns(), true);
            }
            const tr = [].slice.call(this.parent.element.querySelectorAll('[aria-rowindex="' + rowObj.index + '"]'));
            if (frzCols && tr.length) {
                for (let i = 0; i < tr.length; i++) {
                    const rowUid = tr[i].getAttribute('data-uid');
                    if (rowUid !== this.uid) {
                        rowObj = this.parent.getRowObjectFromUID(rowUid);
                        rowObj.changes = data;
                        row$$1.refresh(rowObj, this.parent.getColumns(), true);
                        this.parent.editModule.checkLastRow(tr[i]);
                    }
                }
            }
        }
    }
    closeEdit() {
        if (!this.parent.isEdit) {
            return;
        }
        const gObj = this.parent;
        const args = extend(this.args, {
            requestType: 'cancel', type: actionBegin, cancel: false, data: this.previousData, selectedRow: gObj.selectedRowIndex
        });
        gObj.notify(virtualScrollEditCancel, args);
        this.blazorTemplate();
        gObj.trigger(actionBegin, args, (closeEditArgs) => {
            if (closeEditArgs.cancel) {
                return;
            }
            if (this.parent.editSettings.mode === 'Dialog') {
                this.parent.notify(dialogDestroy, {});
            }
            gObj.isEdit = false;
            this.stopEditStatus();
            closeEditArgs.type = actionComplete;
            if (gObj.editSettings.mode !== 'Dialog') {
                this.refreshRow(closeEditArgs.data);
            }
            const isLazyLoad = gObj.groupSettings.enableLazyLoading && gObj.groupSettings.columns.length
                && !gObj.getContentTable().querySelector('tr.e-emptyrow');
            if (!gObj.getContentTable().querySelector('tr.e-emptyrow') &&
                !gObj.getContentTable().querySelector('tr.e-row') && !isLazyLoad) {
                gObj.renderModule.emptyRow();
            }
            if (gObj.editSettings.mode !== 'Dialog') {
                gObj.selectRow(this.rowIndex);
            }
            gObj.trigger(actionComplete, closeEditArgs);
        });
    }
    addRecord(data, index) {
        const gObj = this.parent;
        this.addedRowIndex = index = !isNullOrUndefined(index) ? index : 0;
        if (data) {
            gObj.notify(modelChanged, {
                requestType: 'save', type: actionBegin, data: data, selectedRow: 0, action: 'add', index: index
            });
            return;
        }
        if (gObj.isEdit) {
            return;
        }
        this.previousData = {};
        this.uid = '';
        const cols = gObj.getColumns();
        const rowData = { virtualData: {}, isScroll: false };
        this.parent.notify(getVirtualData, rowData);
        for (let i = 0; i < cols.length; i++) {
            if (rowData.isScroll && cols[i].getFreezeTableName() !== 'movable') {
                continue;
            }
            if (cols[i].field) {
                DataUtil.setValue(cols[i].field, cols[i].defaultValue, this.previousData);
            }
        }
        const args = {
            cancel: false, foreignKeyData: {},
            requestType: 'add', data: this.previousData, type: actionBegin, index: index,
            rowData: this.previousData, target: undefined, isScroll: rowData.isScroll
        };
        if ((this.parent.enableVirtualization || this.parent.infiniteScrollSettings.enableCache)
            && Object.keys(rowData.virtualData).length) {
            args.data = args.rowData = rowData.virtualData;
        }
        if (!args.isScroll) {
            this.parent.notify(createVirtualValidationForm, { uid: this.uid, prevData: this.previousData, argsCreator: this.getEditArgs.bind(this), renderer: this.renderer });
            gObj.trigger(actionBegin, args, (addArgs) => {
                if (addArgs.cancel) {
                    return;
                }
                this.inlineAddHandler(addArgs);
            });
        }
        else {
            this.inlineAddHandler(args);
        }
    }
    inlineAddHandler(addArgs) {
        const gObj = this.parent;
        gObj.isEdit = true;
        if (gObj.editSettings.mode !== 'Dialog') {
            gObj.clearSelection();
        }
        this.renderer.addNew(addArgs);
        gObj.editModule.applyFormValidation();
        addArgs.type = actionComplete;
        addArgs.row = gObj.element.querySelector('.' + addedRow);
        gObj.trigger(actionComplete, addArgs);
        this.args = addArgs;
    }
    deleteRecord(fieldname, data) {
        this.editRowIndex = this.parent.selectedRowIndex;
        if (data) {
            data = (data instanceof Array) ? data : [data];
            const gObj = this.parent;
            const dataLen = Object.keys(data).length;
            fieldname = fieldname || this.parent.getPrimaryKeyFieldNames()[0];
            for (let i = 0; i < dataLen; i++) {
                let tmpRecord;
                const contained = gObj.currentViewData.some((record) => {
                    tmpRecord = record;
                    return data[i] === getObject(fieldname, record) || data[i] === record;
                });
                data[i] = contained ? tmpRecord : data[i][fieldname] ? data[i] : { [fieldname]: data[i] };
            }
        }
        const args = {
            requestType: 'delete', type: actionBegin, foreignKeyData: {},
            data: data ? data : this.parent.getSelectedRecords(), tr: this.parent.getSelectedRows(), cancel: false
        };
        if (!isNullOrUndefined(this.parent.commandDelIndex)) {
            args.data[0] =
                this.parent.getRowObjectFromUID(this.parent.getRowByIndex(this.parent.commandDelIndex).getAttribute('data-uid')).data;
        }
        if (this.parent.enableVirtualization && args.data.length > 1) {
            const uid = this.parent.getSelectedRows()[0].getAttribute('data-uid');
            args.data = [this.parent.getRowObjectFromUID(uid).data];
        }
        this.parent.notify(modelChanged, args);
    }
    stopEditStatus() {
        const gObj = this.parent;
        const addElements = [].slice.call(gObj.element.getElementsByClassName(addedRow));
        const editElements = [].slice.call(gObj.element.getElementsByClassName(editedRow));
        for (let i = 0; i < addElements.length; i++) {
            remove(addElements[i]);
        }
        for (let i = 0; i < editElements.length; i++) {
            editElements[i].classList.remove(editedRow);
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.evtHandlers = [{ event: crudAction, handler: this.editHandler },
            { event: doubleTap, handler: this.dblClickHandler },
            { event: click, handler: this.clickHandler },
            { event: recordAdded, handler: this.requestSuccess },
            { event: dblclick, handler: this.dblClickHandler },
            { event: deleteComplete, handler: this.editComplete },
            { event: saveComplete, handler: this.editComplete },
            { event: rowModeChange, handler: this.closeEdit },
            { event: closeInline, handler: this.closeForm }];
        addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        addRemoveEventListener(this.parent, this.evtHandlers, false);
    }
    /**
     * @returns {void}
     * @hidden
     */
    destroy() {
        this.removeEventListener();
        this.renderer.destroy();
    }
}

/**
 * `InlineEdit` module is used to handle inline editing actions.
 *
 * @hidden
 */
class InlineEdit extends NormalEdit {
    constructor(parent, serviceLocator, renderer) {
        super(parent, serviceLocator);
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.renderer = renderer;
    }
    closeEdit() {
        super.closeEdit();
    }
    addRecord(data, index) {
        super.addRecord(data, index);
    }
    endEdit() {
        super.endEdit();
    }
    updateRow(index, data) {
        super.updateRow(index, data);
    }
    deleteRecord(fieldname, data) {
        super.deleteRecord(fieldname, data);
    }
    startEdit(tr) {
        super.startEdit(tr);
    }
}

/**
 * `BatchEdit` module is used to handle batch editing actions.
 *
 * @hidden
 */
class BatchEdit {
    constructor(parent, serviceLocator, renderer) {
        this.cellDetails = {};
        this.originalCell = {};
        this.cloneCell = {};
        this.editNext = false;
        this.preventSaveCell = false;
        this.initialRender = true;
        this.validationColObj = [];
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.renderer = renderer;
        this.focus = serviceLocator.getService('focus');
        this.addEventListener();
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.evtHandlers = [{ event: click, handler: this.clickHandler },
            { event: dblclick, handler: this.dblClickHandler },
            { event: beforeCellFocused, handler: this.onBeforeCellFocused },
            { event: cellFocused, handler: this.onCellFocused },
            { event: doubleTap, handler: this.dblClickHandler },
            { event: keyPressed, handler: this.keyDownHandler },
            { event: editNextValCell, handler: this.editNextValCell },
            { event: closeBatch, handler: this.closeForm },
            { event: destroy, handler: this.destroy }];
        addRemoveEventListener(this.parent, this.evtHandlers, true, this);
        this.dataBoundFunction = this.dataBound.bind(this);
        this.batchCancelFunction = this.batchCancel.bind(this);
        this.parent.addEventListener(dataBound, this.dataBoundFunction);
        this.parent.addEventListener(batchCancel, this.batchCancelFunction);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        addRemoveEventListener(this.parent, this.evtHandlers, false);
        this.parent.removeEventListener(dataBound, this.dataBoundFunction);
        this.parent.removeEventListener(batchCancel, this.batchCancelFunction);
    }
    batchCancel() {
        this.parent.focusModule.restoreFocus();
    }
    dataBound() {
        this.parent.notify(toolbarRefresh, {});
    }
    /**
     * @returns {void}
     * @hidden
     */
    destroy() {
        this.removeEventListener();
    }
    clickHandler(e) {
        if (!parentsUntil(e.target, this.parent.element.id + '_add', true)) {
            if (this.parent.isEdit && closest(this.form, 'td') !== closest(e.target, 'td')) {
                this.saveCell();
                this.editNextValCell();
            }
            if (parentsUntil(e.target, rowCell) && !this.parent.isEdit) {
                this.setCellIdx(e.target);
            }
        }
    }
    dblClickHandler(e) {
        const target = parentsUntil(e.target, rowCell);
        const tr = parentsUntil(e.target, row);
        const rowIndex = tr && parseInt(tr.getAttribute(ariaRowIndex), 10);
        const colIndex = target && parseInt(target.getAttribute(ariaColIndex), 10);
        if (!isNullOrUndefined(target) && !isNullOrUndefined(rowIndex) && !isNaN(colIndex)
            && !target.parentElement.classList.contains(editedRow)) {
            this.editCell(rowIndex, this.parent.getColumns()[colIndex].field, this.isAddRow(rowIndex));
        }
    }
    onBeforeCellFocused(e) {
        if (this.parent.isEdit && this.validateFormObj() &&
            (e.byClick || (['tab', 'shiftTab', 'enter', 'shiftEnter'].indexOf(e.keyArgs.action) > -1))) {
            e.cancel = true;
            if (e.byClick) {
                e.clickArgs.preventDefault();
            }
            else {
                e.keyArgs.preventDefault();
            }
        }
    }
    onCellFocused(e) {
        const frzCols = this.parent.getFrozenLeftCount();
        const frzRightCols = this.parent.getFrozenRightColumnsCount();
        const mCont = this.parent.getContent().querySelector('.' + movableContent);
        const mHdr = this.parent.getHeaderContent().querySelector('.' + movableHeader);
        const clear = (!e.container.isContent || !e.container.isDataCell) && !(this.parent.frozenRows && e.container.isHeader);
        if (!e.byKey || clear) {
            if (this.parent.isEdit && clear) {
                this.saveCell();
            }
            return;
        }
        let [rowIndex, cellIndex] = e.container.indexes;
        if (frzCols && (mCont.contains(e.element) || (this.parent.frozenRows && mHdr.contains(e.element)))) {
            cellIndex += frzCols;
        }
        if (frzRightCols) {
            const frHdr = this.parent.getHeaderContent().querySelector('.e-frozen-right-header');
            const frCont = this.parent.getContent().querySelector('.e-frozen-right-content');
            if (frCont.contains(e.element) || (this.parent.frozenRows && frHdr.contains(e.element))) {
                cellIndex += (frzCols + this.parent.getMovableColumnsCount());
            }
        }
        if (this.parent.frozenRows && e.container.isContent) {
            rowIndex += this.parent.frozenRows;
        }
        let isEdit = this.parent.isEdit;
        if (!this.parent.element.getElementsByClassName('e-popup-open').length) {
            isEdit = isEdit && !this.validateFormObj();
            switch (e.keyArgs.action) {
                case 'tab':
                case 'shiftTab':
                    // eslint-disable-next-line no-case-declarations
                    const col = this.parent.getColumns()[e.indexes[1]];
                    if (col && !this.parent.isEdit) {
                        this.editCell(e.indexes[0], col.field);
                    }
                    if (isEdit || this.parent.isLastCellPrimaryKey) {
                        this.editCellFromIndex(rowIndex, cellIndex);
                    }
                    break;
                case 'enter':
                case 'shiftEnter':
                    e.keyArgs.preventDefault();
                    // eslint-disable-next-line no-case-declarations
                    const args = { cancel: false, keyArgs: e.keyArgs };
                    this.parent.notify('beforeFocusCellEdit', args);
                    if (!args.cancel && isEdit) {
                        this.editCell(rowIndex, this.cellDetails.column.field);
                    }
                    break;
                case 'f2':
                    this.editCellFromIndex(rowIndex, cellIndex);
                    this.focus.focus();
                    break;
            }
        }
    }
    isAddRow(index) {
        return this.parent.getDataRows()[index].classList.contains('e-insertedrow');
    }
    editCellFromIndex(rowIdx, cellIdx) {
        this.cellDetails.rowIndex = rowIdx;
        this.cellDetails.cellIndex = cellIdx;
        this.editCell(rowIdx, this.parent.getColumns()[cellIdx].field, this.isAddRow(rowIdx));
    }
    closeEdit() {
        const gObj = this.parent;
        const rows = this.parent.getRowsObject();
        const argument = { cancel: false, batchChanges: this.getBatchChanges() };
        gObj.notify(beforeBatchCancel, argument);
        if (argument.cancel) {
            return;
        }
        if (gObj.isEdit) {
            this.saveCell(true);
        }
        this.isAdded = false;
        gObj.clearSelection();
        const allRows = getGridRowObjects(this.parent);
        for (let i = 0; i < rows.length; i++) {
            let isInsert = false;
            const isDirty = rows[i].isDirty;
            gridActionHandler(this.parent, (tableName, rows) => {
                isInsert = this.removeBatchElementChanges(rows[i], isDirty);
                if (isInsert) {
                    rows.splice(i, 1);
                }
            }, allRows);
            if (isInsert) {
                i--;
            }
        }
        if (!gObj.getContentTable().querySelector('tr.e-row')) {
            gObj.renderModule.renderEmptyRow();
        }
        let args = {
            requestType: 'batchCancel', rows: this.parent.getRowsObject()
        };
        gObj.notify(batchCancel, {
            rows: this.parent.getRowsObject().length ? this.parent.getRowsObject() :
                [new Row({ isDataRow: true, cells: [new Cell({ isDataCell: true, visible: true })] })]
        });
        gObj.selectRow(this.cellDetails.rowIndex);
        this.refreshRowIdx();
        gObj.notify(toolbarRefresh, {});
        this.parent.notify(tooltipDestroy, {});
        args = { requestType: 'batchCancel', rows: this.parent.getRowsObject() };
        gObj.trigger(batchCancel, args);
    }
    removeBatchElementChanges(row$$1, isDirty) {
        const gObj = this.parent;
        const rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);
        let isInstertedRemoved = false;
        if (isDirty) {
            row$$1.isDirty = isDirty;
            const tr = gObj.getRowElementByUID(row$$1.uid);
            if (tr) {
                if (tr.classList.contains('e-insertedrow')) {
                    remove(tr);
                    isInstertedRemoved = true;
                }
                else {
                    refreshForeignData(row$$1, this.parent.getForeignKeyColumns(), row$$1.data);
                    delete row$$1.changes;
                    delete row$$1.edit;
                    row$$1.isDirty = false;
                    classList(tr, [], ['e-hiddenrow', 'e-updatedtd']);
                    rowRenderer.refresh(row$$1, gObj.getColumns(), false);
                }
                if (this.parent.aggregates.length > 0) {
                    const type = 'type';
                    const editType = [];
                    editType[type] = 'cancel';
                    this.parent.notify(refreshFooterRenderer, editType);
                    if (this.parent.groupSettings.columns.length > 0) {
                        this.parent.notify(groupAggregates, editType);
                    }
                }
            }
        }
        return isInstertedRemoved;
    }
    removeHideAndSelection(tr) {
        if (tr.classList.contains('e-hiddenrow')) {
            tr.removeAttribute('aria-selected');
            const tdElements = [].slice.call(tr.getElementsByClassName('e-selectionbackground'));
            for (let i = 0; i < tdElements.length; i++) {
                removeClass([tdElements[i]], ['e-selectionbackground', 'e-active']);
            }
        }
        classList(tr, [], ['e-hiddenrow', 'e-updatedtd']);
    }
    deleteRecord(fieldname, data) {
        this.saveCell();
        if (this.validateFormObj()) {
            this.saveCell(true);
        }
        this.isAdded = false;
        this.bulkDelete(fieldname, data);
        if (this.parent.aggregates.length > 0) {
            this.parent.notify(refreshFooterRenderer, {});
            if (this.parent.groupSettings.columns.length > 0) {
                this.parent.notify(groupAggregates, {});
            }
        }
    }
    addRecord(data) {
        this.bulkAddRow(data);
    }
    endEdit() {
        if (this.parent.isEdit && this.validateFormObj()) {
            return;
        }
        this.batchSave();
    }
    closeForm() {
        for (let i = 0; i < Object.keys(this.originalCell).length; i++) {
            for (let j = 0; j < Object.keys(this.cloneCell).length; j++) {
                if (Object.keys(this.originalCell)[i] === Object.keys(this.cloneCell)[j]) {
                    this.cloneCell[Object.keys(this.cloneCell)[j]].replaceWith(this.originalCell[Object.keys(this.originalCell)[i]]);
                    if (this.originalCell[Object.keys(this.originalCell)[i]].classList.contains('e-selectionbackground')) {
                        this.originalCell[Object.keys(this.originalCell)[i]]
                            .classList.remove('e-selectionbackground', 'e-cellselectionbackground', 'e-active');
                    }
                }
            }
        }
        this.cloneCell = {};
        this.originalCell = {};
    }
    validateFormObj() {
        return this.parent.editModule.formObj && !this.parent.editModule.formObj.validate();
    }
    batchSave() {
        const gObj = this.parent;
        const deletedRecords$$1 = 'deletedRecords';
        if (gObj.isCheckBoxSelection) {
            const checkAllBox = gObj.element.querySelector('.e-checkselectall').parentElement;
            if (checkAllBox.classList.contains('e-checkbox-disabled') &&
                gObj.pageSettings.totalRecordsCount > gObj.currentViewData.length) {
                removeClass([checkAllBox], ['e-checkbox-disabled']);
            }
        }
        this.saveCell();
        if (gObj.isEdit || this.editNextValCell() || gObj.isEdit) {
            return;
        }
        const changes = this.getBatchChanges();
        if (this.parent.selectionSettings.type === 'Multiple' && changes[deletedRecords$$1].length &&
            this.parent.selectionSettings.persistSelection) {
            changes[deletedRecords$$1] = this.removeSelectedData;
            this.removeSelectedData = [];
        }
        const original = {
            changedRecords: this.parent.getRowsObject()
                .filter((row$$1) => row$$1.isDirty && ['add', 'delete'].indexOf(row$$1.edit) === -1)
                .map((row$$1) => row$$1.data)
        };
        const args = { batchChanges: changes, cancel: false };
        gObj.trigger(beforeBatchSave, args, (beforeBatchSaveArgs) => {
            if (beforeBatchSaveArgs.cancel) {
                return;
            }
            gObj.showSpinner();
            gObj.notify(bulkSave, { changes: changes, original: original });
        });
    }
    getBatchChanges() {
        const changes = {
            addedRecords: [],
            deletedRecords: [],
            changedRecords: []
        };
        const rows = this.parent.getRowsObject();
        for (const row$$1 of rows) {
            if (row$$1.isDirty) {
                switch (row$$1.edit) {
                    case 'add':
                        changes.addedRecords.push(row$$1.changes);
                        break;
                    case 'delete':
                        changes.deletedRecords.push(row$$1.data);
                        break;
                    default:
                        changes.changedRecords.push(row$$1.changes);
                }
            }
        }
        return changes;
    }
    /**
     * @param {string} uid - specifes the uid
     * @returns {void}
     * @hidden
     */
    removeRowObjectFromUID(uid) {
        const rows = this.parent.getRowsObject();
        let i = 0;
        for (let len = rows.length; i < len; i++) {
            if (rows[i].uid === uid) {
                break;
            }
        }
        gridActionHandler(this.parent, (tableName, rows) => {
            rows.splice(i, 1);
        }, getGridRowObjects(this.parent));
    }
    /**
     * @param {Row<Column>} row - specifies the row object
     * @param {freezeTable} newTableName - specifies the table name
     * @returns {void}
     * @hidden
     */
    addRowObject(row$$1, newTableName) {
        const gObj = this.parent;
        const isTop = gObj.editSettings.newRowPosition === 'Top';
        gridActionHandler(this.parent, (tableName, rows) => {
            const rowClone = row$$1.clone();
            if (gObj.isFrozenGrid()) {
                if (newTableName === tableName) {
                    if (isTop) {
                        rows.unshift(rowClone);
                    }
                    else {
                        rows.push(rowClone);
                    }
                }
            }
            else {
                if (isTop) {
                    rows.unshift(rowClone);
                }
                else {
                    rows.push(rowClone);
                }
            }
        }, getGridRowObjects(this.parent), true);
    }
    // tslint:disable-next-line:max-func-body-length
    bulkDelete(fieldname, data) {
        this.removeSelectedData = [];
        const gObj = this.parent;
        let index = gObj.selectedRowIndex;
        let selectedRows = gObj.getSelectedRows();
        const args = {
            primaryKey: this.parent.getPrimaryKeyFieldNames(),
            rowIndex: index,
            rowData: data ? data : gObj.getSelectedRecords()[0],
            cancel: false
        };
        if (data) {
            args.row = gObj.editModule.deleteRowUid ? gObj.getRowElementByUID(gObj.editModule.deleteRowUid)
                : gObj.getRows()[gObj.getCurrentViewRecords().indexOf(data)];
        }
        else {
            args.row = data ? gObj.getRows()[index] : selectedRows[0];
        }
        if (!args.row) {
            return;
        }
        // tslint:disable-next-line:max-func-body-length
        gObj.trigger(beforeBatchDelete, args, (beforeBatchDeleteArgs) => {
            if (beforeBatchDeleteArgs.cancel) {
                return;
            }
            this.removeSelectedData = gObj.getSelectedRecords();
            gObj.clearSelection();
            beforeBatchDeleteArgs.row = beforeBatchDeleteArgs.row ?
                beforeBatchDeleteArgs.row : data ? gObj.getRows()[index] : selectedRows[0];
            if (this.parent.isFrozenGrid()) {
                if (data) {
                    index = parseInt(beforeBatchDeleteArgs.row.getAttribute(ariaRowIndex), 10);
                    selectedRows = [];
                    selectedRows.push(gObj.getRowByIndex(index));
                    selectedRows.push(gObj.getMovableRowByIndex(index));
                    if (gObj.getFrozenMode() === leftRight) {
                        selectedRows.push(gObj.getFrozenRightRowByIndex(index));
                    }
                }
                for (let i = 0; i < selectedRows.length; i++) {
                    const uid = selectedRows[i].getAttribute('data-uid');
                    if (selectedRows[i].classList.contains('e-insertedrow')) {
                        this.removeRowObjectFromUID(uid);
                        remove(selectedRows[i]);
                    }
                    else {
                        const rowObj = gObj.getRowObjectFromUID(uid);
                        rowObj.isDirty = true;
                        rowObj.edit = 'delete';
                        classList(selectedRows[i], ['e-hiddenrow', 'e-updatedtd'], []);
                        if (gObj.frozenRows && index < gObj.frozenRows && gObj.getMovableDataRows().length >= gObj.frozenRows) {
                            gObj.getMovableHeaderTbody().appendChild(gObj.getMovableRowByIndex(gObj.frozenRows - 1));
                            gObj.getFrozenHeaderTbody().appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));
                            if (gObj.getFrozenMode() === leftRight) {
                                gObj.getFrozenRightHeaderTbody().appendChild(gObj.getFrozenRightRowByIndex(gObj.frozenRows - 1));
                            }
                        }
                        if (gObj.frozenRows && index < gObj.frozenRows && gObj.getDataRows().length >= gObj.frozenRows) {
                            gObj.getHeaderTable().querySelector(tbody).appendChild(gObj.getRowByIndex(gObj.frozenRows - 1));
                        }
                    }
                    delete selectedRows[i];
                }
            }
            else if (!this.parent.isFrozenGrid() && (selectedRows.length === 1 || data)) {
                let uid = beforeBatchDeleteArgs.row.getAttribute('data-uid');
                uid = data && this.parent.editModule.deleteRowUid ? uid = this.parent.editModule.deleteRowUid : uid;
                if (beforeBatchDeleteArgs.row.classList.contains('e-insertedrow')) {
                    this.removeRowObjectFromUID(uid);
                    remove(beforeBatchDeleteArgs.row);
                }
                else {
                    const rowObj = gObj.getRowObjectFromUID(uid);
                    rowObj.isDirty = true;
                    rowObj.edit = 'delete';
                    classList(beforeBatchDeleteArgs.row, ['e-hiddenrow', 'e-updatedtd'], []);
                }
                delete beforeBatchDeleteArgs.row;
            }
            else {
                for (let i = 0; i < selectedRows.length; i++) {
                    const uniqueid = selectedRows[i].getAttribute('data-uid');
                    if (selectedRows[i].classList.contains('e-insertedrow')) {
                        this.removeRowObjectFromUID(uniqueid);
                        remove(selectedRows[i]);
                    }
                    else {
                        classList(selectedRows[i], ['e-hiddenrow', 'e-updatedtd'], []);
                        const selectedRow = gObj.getRowObjectFromUID(uniqueid);
                        selectedRow.isDirty = true;
                        selectedRow.edit = 'delete';
                        delete selectedRows[i];
                    }
                }
            }
            this.refreshRowIdx();
            if (data) {
                gObj.editModule.deleteRowUid = undefined;
                if (gObj.getSelectedRows().length) {
                    index = parseInt(gObj.getSelectedRows()[0].getAttribute(ariaRowIndex), 10);
                }
            }
            if (!gObj.isCheckBoxSelection) {
                gObj.selectRow(index);
            }
            gObj.trigger(batchDelete, beforeBatchDeleteArgs);
            gObj.notify(batchDelete, { rows: this.parent.getRowsObject() });
            gObj.notify(toolbarRefresh, {});
        });
    }
    refreshRowIdx() {
        const gObj = this.parent;
        const rows = gObj.getAllDataRows(true);
        const dataRows = getGridRowElements(this.parent);
        const dataObjects = getGridRowObjects(this.parent);
        for (let i = 0, j = 0, len = rows.length; i < len; i++) {
            if (rows[i].classList.contains(row) && !rows[i].classList.contains('e-hiddenrow')) {
                gridActionHandler(this.parent, (tableName, rowElements, rowObjects) => {
                    rowElements[i].setAttribute(ariaRowIndex, j.toString());
                    rowObjects[i].index = j;
                }, dataRows, null, dataObjects);
                j++;
            }
            else {
                gridActionHandler(this.parent, (tableName, rowElements, rowObjects) => {
                    rowElements[i].removeAttribute(ariaRowIndex);
                    rowObjects[i].index = -1;
                }, dataRows, null, dataObjects);
            }
        }
    }
    getIndexFromData(data) {
        return inArray(data, this.parent.getCurrentViewRecords());
    }
    bulkAddRow(data) {
        const gObj = this.parent;
        if (!gObj.editSettings.allowAdding) {
            return;
        }
        if (gObj.isEdit) {
            this.saveCell();
            this.parent.notify(editNextValCell, {});
        }
        if (gObj.isEdit) {
            return;
        }
        if (this.initialRender) {
            const visibleColumns = gObj.getVisibleColumns();
            for (let i = 0; i < visibleColumns.length; i++) {
                if (visibleColumns[i].validationRules &&
                    visibleColumns[i].validationRules['required']) {
                    const obj = { field: (visibleColumns[i]['field']).slice(), cellIdx: i };
                    this.validationColObj.push(obj);
                }
            }
            this.initialRender = false;
        }
        this.parent.element.classList.add('e-editing');
        const defaultData = data ? data : this.getDefaultData();
        const args = {
            defaultData: defaultData,
            primaryKey: gObj.getPrimaryKeyFieldNames(),
            cancel: false
        };
        gObj.trigger(beforeBatchAdd, args, (beforeBatchAddArgs) => {
            if (beforeBatchAddArgs.cancel) {
                return;
            }
            this.isAdded = true;
            gObj.clearSelection();
            if (gObj.isFrozenGrid()) {
                let movableCnt = this.parent.getMovableColumnsCount();
                let leftCnt = this.parent.getFrozenLeftCount();
                let rightCnt = this.parent.getFrozenRightColumnsCount();
                let tbody$$1 = gObj.getContentTable().querySelector(tbody);
                let totCount = movableCnt + leftCnt + rightCnt;
                let tableTanName;
                const selectedRowAdd = [];
                const selectedRowAddCells = [];
                let col;
                let index;
                let tr;
                let mTr;
                let frTr;
                for (let i = 0; i < totCount;) {
                    const row$$1 = new RowRenderer(this.serviceLocator, null, this.parent);
                    const model = new RowModelGenerator(this.parent);
                    const modelData = model.generateRows([beforeBatchAddArgs.defaultData]);
                    if (leftCnt > 0) {
                        leftCnt = 0;
                        tableTanName = 'frozen-left';
                        totCount = leftCnt + rightCnt + movableCnt;
                    }
                    else if (movableCnt > 0) {
                        movableCnt = 0;
                        tableTanName = 'movable';
                        totCount = leftCnt + rightCnt + movableCnt;
                    }
                    else {
                        rightCnt = 0;
                        tableTanName = 'frozen-right';
                        totCount = leftCnt + rightCnt + movableCnt;
                    }
                    for (let i = 0; i < modelData.length; i++) {
                        modelData[i].cells = splitFrozenRowObjectCells(this.parent, modelData[i].cells, tableTanName);
                    }
                    if (tableTanName === 'frozen-left') {
                        tr = row$$1.render(modelData[0], gObj.getColumns());
                        tr.classList.add('e-insertedrow');
                    }
                    else if (tableTanName === 'movable') {
                        mTr = row$$1.render(modelData[0], gObj.getColumns());
                        mTr.classList.add('e-insertedrow');
                    }
                    else {
                        frTr = row$$1.render(modelData[0], gObj.getColumns());
                        frTr.classList.add('e-insertedrow');
                    }
                    for (let i = 0; i < this.parent.groupSettings.columns.length; i++) {
                        tr.insertBefore(this.parent.createElement('td', { className: 'e-indentcell' }), tr.firstChild);
                        modelData[0].cells.unshift(new Cell({ cellType: CellType.Indent }));
                    }
                    if (tbody$$1.querySelector('.e-emptyrow')) {
                        const emptyRow = tbody$$1.querySelector('.e-emptyrow');
                        emptyRow.parentNode.removeChild(emptyRow);
                        this.removeFrozenTbody();
                    }
                    if (tableTanName === 'frozen-left') {
                        if (gObj.frozenRows && gObj.editSettings.newRowPosition === 'Top') {
                            tbody$$1 = gObj.getHeaderTable().querySelector(tbody);
                        }
                        else {
                            tbody$$1 = gObj.getContentTable().querySelector(tbody);
                        }
                        if (this.parent.editSettings.newRowPosition === 'Top') {
                            tbody$$1.insertBefore(tr, tbody$$1.firstChild);
                            addClass([].slice.call(tr.getElementsByClassName(rowCell)), ['e-updatedtd']);
                        }
                        else {
                            tbody$$1.appendChild(tr);
                            addClass([].slice.call(tr.getElementsByClassName(rowCell)), ['e-updatedtd']);
                        }
                    }
                    if (tableTanName === 'movable' || tableTanName === 'frozen-right') {
                        this.renderFrozenAddRow(mTr, frTr, tableTanName);
                    }
                    modelData[0].isDirty = true;
                    modelData[0].changes = extend({}, {}, modelData[0].data, true);
                    modelData[0].edit = 'add';
                    this.addRowObject(modelData[0], tableTanName);
                }
                this.refreshRowIdx();
                this.focus.forgetPrevious();
                gObj.notify(batchAdd, { rows: this.parent.getRowsObject(), args: { isFrozen: this.parent.isFrozenGrid() } });
                const changes = this.getBatchChanges();
                const btmIdx = this.getBottomIndex();
                if (this.parent.editSettings.newRowPosition === 'Top') {
                    gObj.selectRow(0);
                }
                else {
                    gObj.selectRow(btmIdx);
                }
                if (!data) {
                    index = this.findNextEditableCell(0, true);
                    col = gObj.getColumns()[index];
                    if (this.parent.editSettings.newRowPosition === 'Top') {
                        this.editCell(0, col.field, true);
                    }
                    else {
                        this.editCell(btmIdx, col.field, true);
                    }
                }
                if (this.parent.aggregates.length > 0 && (data || changes[addedRecords].length)) {
                    this.parent.notify(refreshFooterRenderer, {});
                }
                if (tr) {
                    alignFrozenEditForm(mTr.querySelector('td:not(.e-hide)'), tr.querySelector('td:not(.e-hide)'));
                    selectedRowAdd.push(tr);
                    selectedRowAddCells.push(tr.cells);
                }
                selectedRowAdd.push(mTr);
                selectedRowAddCells.push(mTr.cells);
                if (frTr) {
                    selectedRowAdd.push(frTr);
                    selectedRowAddCells.push(frTr.cells);
                }
                const args1 = {
                    defaultData: beforeBatchAddArgs.defaultData, row: selectedRowAdd,
                    columnObject: col, columnIndex: index, primaryKey: beforeBatchAddArgs.primaryKey, cell: selectedRowAddCells
                };
                gObj.trigger(batchAdd, args1);
            }
            else {
                const row$$1 = new RowRenderer(this.serviceLocator, null, this.parent);
                const model = new RowModelGenerator(this.parent);
                const modelData = model.generateRows([beforeBatchAddArgs.defaultData]);
                const tr = row$$1.render(modelData[0], gObj.getColumns());
                let col;
                let index;
                for (let i = 0; i < this.parent.groupSettings.columns.length; i++) {
                    tr.insertBefore(this.parent.createElement('td', { className: 'e-indentcell' }), tr.firstChild);
                    modelData[0].cells.unshift(new Cell({ cellType: CellType.Indent }));
                }
                let tbody$$1 = gObj.getContentTable().querySelector(tbody);
                tr.classList.add('e-insertedrow');
                if (tbody$$1.querySelector('.e-emptyrow')) {
                    const emptyRow = tbody$$1.querySelector('.e-emptyrow');
                    emptyRow.parentNode.removeChild(emptyRow);
                    this.removeFrozenTbody();
                }
                if (gObj.frozenRows && gObj.editSettings.newRowPosition === 'Top') {
                    tbody$$1 = gObj.getHeaderTable().querySelector(tbody);
                }
                else {
                    tbody$$1 = gObj.getContentTable().querySelector(tbody);
                }
                if (this.parent.editSettings.newRowPosition === 'Top') {
                    tbody$$1.insertBefore(tr, tbody$$1.firstChild);
                }
                else {
                    tbody$$1.appendChild(tr);
                }
                addClass([].slice.call(tr.getElementsByClassName(rowCell)), ['e-updatedtd']);
                modelData[0].isDirty = true;
                modelData[0].changes = extend({}, {}, modelData[0].data, true);
                modelData[0].edit = 'add';
                this.addRowObject(modelData[0]);
                this.refreshRowIdx();
                this.focus.forgetPrevious();
                gObj.notify(batchAdd, { rows: this.parent.getRowsObject(), args: { isFrozen: this.parent.isFrozenGrid() } });
                const changes = this.getBatchChanges();
                const btmIdx = this.getBottomIndex();
                if (this.parent.editSettings.newRowPosition === 'Top') {
                    gObj.selectRow(0);
                }
                else {
                    gObj.selectRow(btmIdx);
                }
                if (!data) {
                    index = this.findNextEditableCell(0, true);
                    col = gObj.getColumns()[index];
                    if (this.parent.editSettings.newRowPosition === 'Top') {
                        this.editCell(0, col.field, true);
                    }
                    else {
                        this.editCell(btmIdx, col.field, true);
                    }
                }
                if (this.parent.aggregates.length > 0 && (data || changes[addedRecords].length)) {
                    this.parent.notify(refreshFooterRenderer, {});
                }
                const args1 = {
                    defaultData: beforeBatchAddArgs.defaultData, row: tr,
                    columnObject: col, columnIndex: index, primaryKey: beforeBatchAddArgs.primaryKey, cell: tr.cells[index]
                };
                gObj.trigger(batchAdd, args1);
            }
        });
    }
    renderFrozenAddRow(mTr, frTr, tableName$$1) {
        const gObj = this.parent;
        let mTbody;
        let frTbody;
        if (tableName$$1 === 'movable') {
            if (gObj.frozenRows && gObj.editSettings.newRowPosition === 'Top') {
                mTbody = this.parent.getMovableHeaderTbody();
            }
            else {
                mTbody = this.parent.getContent().querySelector('.e-movablecontent').querySelector(tbody);
            }
            if (gObj.editSettings.newRowPosition === 'Top') {
                mTbody.insertBefore(mTr, mTbody.firstChild);
            }
            else {
                mTbody.appendChild(mTr);
            }
            addClass([].slice.call(mTr.getElementsByClassName(rowCell)), ['e-updatedtd']);
        }
        if (tableName$$1 === 'frozen-right') {
            if (gObj.frozenRows && gObj.editSettings.newRowPosition === 'Top') {
                frTbody = this.parent.getFrozenRightHeaderTbody();
            }
            else {
                frTbody = this.parent.getContent().querySelector('.e-frozen-right-content').querySelector(tbody);
            }
            if (gObj.editSettings.newRowPosition === 'Top') {
                frTbody.insertBefore(frTr, frTbody.firstChild);
            }
            else {
                frTbody.appendChild(frTr);
            }
            addClass([].slice.call(frTr.getElementsByClassName(rowCell)), ['e-updatedtd']);
            alignFrozenEditForm(frTr.querySelector('td:not(.e-hide)'), mTr.querySelector('td:not(.e-hide)'));
        }
        if (gObj.height === 'auto') {
            gObj.notify(frozenHeight, {});
        }
    }
    removeFrozenTbody() {
        const gObj = this.parent;
        if (gObj.isFrozenGrid()) {
            const moveTbody = gObj.getContent().querySelector('.' + movableContent).querySelector(tbody);
            (moveTbody.firstElementChild).parentNode.removeChild(moveTbody.firstElementChild);
            if (gObj.getFrozenMode() === leftRight) {
                const frTbody = gObj.getContent().querySelector('.e-frozen-right-content').querySelector(tbody);
                (frTbody.firstElementChild).parentNode.removeChild(frTbody.firstElementChild);
            }
        }
    }
    renderMovable(ele, rightEle) {
        const mEle = ele.cloneNode(true);
        const movable = this.parent.getMovableColumnsCount();
        const left = this.parent.getFrozenLeftCount();
        const right = this.parent.getFrozenRightColumnsCount();
        sliceElements(ele, 0, left);
        sliceElements(mEle, left, right ? mEle.children.length - right : mEle.children.length);
        sliceElements(rightEle, left + movable, rightEle.children.length);
        return mEle;
    }
    findNextEditableCell(columnIndex, isAdd, isValOnly) {
        const cols = this.parent.getColumns();
        const endIndex = cols.length;
        let validation;
        for (let i = columnIndex; i < endIndex; i++) {
            validation = isValOnly ? isNullOrUndefined(cols[i].validationRules) : false;
            if (!isAdd && this.checkNPCell(cols[i])) {
                return i;
            }
            else if (isAdd && !cols[i].template && cols[i].visible && cols[i].allowEditing &&
                !(cols[i].isIdentity && cols[i].isPrimaryKey) && !validation) {
                return i;
            }
        }
        return -1;
    }
    checkNPCell(col) {
        return !col.template && col.visible && !col.isPrimaryKey && !col.isIdentity && col.allowEditing;
    }
    getDefaultData() {
        const gObj = this.parent;
        const data = {};
        const dValues = { 'number': 0, 'string': null, 'boolean': false, 'date': null, 'datetime': null };
        for (const col of (gObj.columnModel)) {
            if (col.field) {
                setValue(col.field, Object.keys(col).indexOf('defaultValue') >= 0 ? col.defaultValue : dValues[col.type], data);
            }
        }
        return data;
    }
    setCellIdx(target) {
        let gLen = 0;
        if (this.parent.allowGrouping) {
            gLen = this.parent.groupSettings.columns.length;
        }
        this.cellDetails.cellIndex = target.cellIndex - gLen;
        this.cellDetails.rowIndex = parseInt(target.getAttribute('index'), 10);
    }
    editCell(index, field, isAdd) {
        const gObj = this.parent;
        const col = gObj.getColumnByField(field);
        this.index = index;
        this.field = field;
        this.isAdd = isAdd;
        const checkEdit = gObj.isEdit && !(this.cellDetails.column.field === field
            && (this.cellDetails.rowIndex === index && this.parent.getDataRows().length - 1 !== index));
        if (gObj.editSettings.allowEditing) {
            if (!checkEdit && col.allowEditing) {
                this.editCellExtend(index, field, isAdd);
            }
            else if (checkEdit) {
                this.editNext = true;
                this.saveCell();
            }
        }
    }
    editCellExtend(index, field, isAdd) {
        const gObj = this.parent;
        const col = gObj.getColumnByField(field);
        const keys = gObj.getPrimaryKeyFieldNames();
        if (gObj.isEdit) {
            return;
        }
        let row$$1;
        let mRowData;
        let rowData = extend({}, {}, this.getDataByIndex(index), true);
        if (col.getFreezeTableName() === 'movable' || col.getFreezeTableName() === frozenRight) {
            row$$1 = col.getFreezeTableName() === 'movable' ? gObj.getMovableDataRows()[index] : gObj.getFrozenRightDataRows()[index];
            mRowData = this.parent.getRowObjectFromUID(row$$1.getAttribute('data-uid'));
            rowData = mRowData.changes ? extend({}, {}, mRowData.changes, true) : rowData;
        }
        else {
            row$$1 = gObj.getDataRows()[index];
            rowData = extend({}, {}, this.getDataByIndex(index), true);
        }
        if ((keys[0] === col.field && !row$$1.classList.contains('e-insertedrow')) || col.columns ||
            (col.isPrimaryKey && col.isIdentity)) {
            this.parent.isLastCellPrimaryKey = true;
            return;
        }
        this.parent.isLastCellPrimaryKey = false;
        this.parent.element.classList.add('e-editing');
        const rowObj = gObj.getRowObjectFromUID(row$$1.getAttribute('data-uid'));
        const cells = [].slice.apply(row$$1.cells);
        const args = {
            columnName: col.field, isForeignKey: !isNullOrUndefined(col.foreignKeyValue),
            primaryKey: keys, rowData: rowData,
            validationRules: extend({}, col.validationRules ? col.validationRules : {}),
            value: getObject(col.field, rowData),
            type: !isAdd ? 'edit' : 'add', cancel: false,
            foreignKeyData: rowObj && rowObj.foreignKeyData
        };
        args.cell = cells[this.getColIndex(cells, this.getCellIdx(col.uid))];
        args.row = row$$1;
        args.columnObject = col;
        if (!args.cell) {
            return;
        }
        gObj.trigger(cellEdit, args, (cellEditArgs) => {
            if (cellEditArgs.cancel) {
                return;
            }
            cellEditArgs.cell = cellEditArgs.cell ? cellEditArgs.cell : cells[this.getColIndex(cells, this.getCellIdx(col.uid))];
            cellEditArgs.row = cellEditArgs.row ? cellEditArgs.row : row$$1;
            cellEditArgs.columnObject = cellEditArgs.columnObject ? cellEditArgs.columnObject : col;
            cellEditArgs.columnObject.index = isNullOrUndefined(cellEditArgs.columnObject.index) ? 0 : cellEditArgs.columnObject.index;
            this.cellDetails = {
                rowData: rowData, column: col, value: cellEditArgs.value, isForeignKey: cellEditArgs.isForeignKey, rowIndex: index,
                cellIndex: parseInt(cellEditArgs.cell.getAttribute(ariaColIndex), 10),
                foreignKeyData: cellEditArgs.foreignKeyData
            };
            if (cellEditArgs.cell.classList.contains('e-updatedtd')) {
                this.isColored = true;
                cellEditArgs.cell.classList.remove('e-updatedtd');
            }
            gObj.isEdit = true;
            gObj.clearSelection();
            if (!gObj.isCheckBoxSelection || !gObj.isPersistSelection) {
                gObj.selectRow(this.cellDetails.rowIndex, true);
            }
            this.renderer.update(cellEditArgs);
            this.parent.notify(batchEditFormRendered, cellEditArgs);
            this.form = select('#' + gObj.element.id + 'EditForm', gObj.element);
            gObj.editModule.applyFormValidation([col]);
            this.parent.element.querySelector('.e-gridpopup').style.display = 'none';
        });
    }
    updateCell(rowIndex, field, value) {
        const gObj = this.parent;
        const col = gObj.getColumnByField(field);
        const index = gObj.getColumnIndexByField(field);
        if (col && !col.isPrimaryKey && col.allowEditing) {
            const td = getCellByColAndRowIndex(this.parent, col, rowIndex, index);
            const rowObj = col.getFreezeTableName() === 'movable' ? this.parent.getMovableRowsObject()[rowIndex] :
                col.getFreezeTableName() === frozenRight ? gObj.getFrozenRightRowsObject()[rowIndex]
                    : gObj.getRowObjectFromUID(td.parentElement.getAttribute('data-uid'));
            this.refreshTD(td, col, rowObj, value);
            this.parent.trigger(queryCellInfo, {
                cell: this.newReactTd || td, column: col, data: rowObj.changes
            });
        }
    }
    setChanges(rowObj, field, value) {
        let currentRowObj;
        if (!this.parent.isFrozenGrid()) {
            if (!rowObj.changes) {
                rowObj.changes = extend({}, {}, rowObj.data, true);
            }
            if (!isNullOrUndefined(field)) {
                DataUtil.setValue(field, value, rowObj.changes);
            }
            if (rowObj.data[field] !== value) {
                const type = this.parent.getColumnByField(field).type;
                if ((type === 'date' || type === 'datetime')) {
                    if (new Date(rowObj.data[field]).toString() !== new Date(value).toString()) {
                        rowObj.isDirty = true;
                    }
                }
                else {
                    rowObj.isDirty = true;
                }
            }
        }
        else {
            const rowEle = this.parent.getRowElementByUID(rowObj.uid);
            const rowIndex = parseInt(rowEle.getAttribute(ariaRowIndex), 10);
            currentRowObj = this.parent.getRowsObject()[rowIndex];
            if (!currentRowObj.changes) {
                currentRowObj.changes = extend({}, {}, rowObj.data, true);
            }
            if (!isNullOrUndefined(field)) {
                setValue(field, value, currentRowObj.changes);
            }
            const movableRowObject = this.parent.getMovableRowsObject()[rowIndex];
            movableRowObject.changes = extend({}, {}, currentRowObj.changes, true);
            if (rowObj.data[field] !== value) {
                movableRowObject.isDirty = true;
                currentRowObj.isDirty = true;
            }
            if (this.parent.getFrozenMode() === leftRight) {
                const frRowObject = this.parent.getFrozenRightRowsObject()[rowIndex];
                frRowObject.changes = extend({}, {}, currentRowObj.changes, true);
                if (rowObj.data[field] !== value) {
                    frRowObject.isDirty = true;
                }
            }
        }
    }
    updateRow(index, data) {
        const keys = Object.keys(data);
        for (const col of keys) {
            this.updateCell(index, col, data[col]);
        }
    }
    getCellIdx(uid) {
        let cIdx = this.parent.getColumnIndexByUid(uid) + this.parent.groupSettings.columns.length;
        if (!isNullOrUndefined(this.parent.detailTemplate) || !isNullOrUndefined(this.parent.childGrid)) {
            cIdx++;
        }
        if (this.parent.isRowDragable()) {
            cIdx++;
        }
        return cIdx;
    }
    refreshTD(td, column, rowObj, value) {
        const cell = new CellRenderer(this.parent, this.serviceLocator);
        let rowcell;
        value = column.type === 'number' && !isNullOrUndefined(value) ? parseFloat(value) : value;
        this.setChanges(rowObj, column.field, value);
        let frzCols = this.parent.getFrozenColumns() || this.parent.getFrozenLeftColumnsCount()
            || this.parent.getFrozenRightColumnsCount();
        frzCols = frzCols && this.parent.isRowDragable() ? frzCols + 1 : frzCols;
        refreshForeignData(rowObj, this.parent.getForeignKeyColumns(), rowObj.changes);
        if (frzCols && column.getFreezeTableName() === 'movable' && this.parent.getColumns().length === rowObj.cells.length) {
            rowcell = rowObj.cells.slice(frzCols, rowObj.cells.length);
        }
        else {
            rowcell = rowObj.cells;
        }
        let parentElement;
        let cellIndex;
        if (this.parent.isReact) {
            parentElement = td.parentElement;
            cellIndex = td.cellIndex;
        }
        let index = 0;
        if (frzCols) {
            index = column.getFreezeTableName() === 'movable' && this.parent.getFrozenMode() !== 'Right'
                ? frzCols : column.getFreezeTableName() === frozenRight
                ? this.parent.getFrozenLeftColumnsCount() + this.parent.getMovableColumnsCount() : index;
        }
        cell.refreshTD(td, rowcell[this.getCellIdx(column.uid) - index], rowObj.changes, { 'index': this.getCellIdx(column.uid) });
        if (this.parent.isReact) {
            this.newReactTd = parentElement.cells[cellIndex];
            parentElement.cells[cellIndex].classList.add('e-updatedtd');
        }
        else {
            td.classList.add('e-updatedtd');
        }
        td.classList.add('e-updatedtd');
        this.parent.notify(toolbarRefresh, {});
    }
    getColIndex(cells, index) {
        let cIdx = 0;
        if (this.parent.allowGrouping && this.parent.groupSettings.columns) {
            cIdx = this.parent.groupSettings.columns.length;
        }
        if (!isNullOrUndefined(this.parent.detailTemplate) || !isNullOrUndefined(this.parent.childGrid)) {
            cIdx++;
        }
        if (this.parent.isRowDragable()) {
            cIdx++;
        }
        for (let m = 0; m < cells.length; m++) {
            const colIndex = parseInt(cells[m].getAttribute(ariaColIndex), 10);
            if (colIndex === index - cIdx) {
                return m;
            }
        }
        return -1;
    }
    editNextValCell() {
        const gObj = this.parent;
        const insertedRows = gObj.element.querySelectorAll('.e-insertedrow');
        const isSingleInsert = insertedRows.length === 1 ? true : (gObj.getFrozenColumns() > 0 ||
            gObj.getFrozenRightColumnsCount() > 0 || gObj.getFrozenLeftColumnsCount() > 0) && (insertedRows.length === 2 ||
            insertedRows.length === 3) ? true : false;
        if (isSingleInsert && this.isAdded && !gObj.isEdit) {
            const btmIdx = this.getBottomIndex();
            for (let i = this.cellDetails.cellIndex; i < gObj.getColumns().length; i++) {
                if (gObj.isEdit) {
                    return;
                }
                const index = this.findNextEditableCell(this.cellDetails.cellIndex + 1, true, true);
                const col = gObj.getColumns()[index];
                if (col) {
                    if (this.parent.editSettings.newRowPosition === 'Bottom') {
                        this.editCell(btmIdx, col.field, true);
                    }
                    else {
                        const args = { index: 0, column: col };
                        this.parent.notify(nextCellIndex, args);
                        this.editCell(args.index, col.field, true);
                    }
                    this.saveCell();
                }
            }
            if (!gObj.isEdit) {
                this.isAdded = false;
            }
        }
        else if (!isSingleInsert && this.isAdded && !gObj.isEdit && !gObj.isFrozenGrid()) {
            let editRowIdx = 0;
            if (gObj.editSettings.newRowPosition === 'Bottom') {
                const changes = this.getBatchChanges();
                editRowIdx = gObj.getCurrentViewRecords().length - changes[deletedRecords].length;
            }
            for (let i = 0; i < insertedRows.length; i++, editRowIdx++) {
                if (!gObj.isEdit) {
                    for (let j = 0; j < this.validationColObj.length; j++) {
                        if (gObj.isEdit) {
                            break;
                        }
                        else if (insertedRows[i].querySelectorAll('td')[this.validationColObj[j].cellIdx].innerText === '') {
                            this.editCell(editRowIdx, this.validationColObj[j].field);
                            if (this.validateFormObj()) {
                                this.saveCell();
                            }
                        }
                    }
                }
                else {
                    break;
                }
            }
            if (!gObj.isEdit) {
                this.isAdded = false;
            }
        }
        else if (!isSingleInsert && this.isAdded && !gObj.isEdit && gObj.isFrozenGrid()) {
            let fLeftInsertedRow = gObj.getFrozenLeftContentTbody() ? gObj.getFrozenLeftContentTbody()
                .querySelectorAll('.e-insertedrow') : undefined;
            let fRightInsertedRow = gObj.getFrozenRightContentTbody() ? gObj.getFrozenRightContentTbody()
                .querySelectorAll('.e-insertedrow') : undefined;
            let mInsertedRow = gObj.getMovableContentTbody().querySelectorAll('.e-insertedrow');
            let editRowIdx = 0;
            const fLeftCount = gObj.getVisibleFrozenLeftCount() ? gObj.getVisibleFrozenLeftCount() :
                gObj.getFrozenColumns();
            const fRightCount = gObj.getVisibleFrozenRightCount();
            const mColumnCount = gObj.getVisibleMovableCount();
            if (gObj.editSettings.newRowPosition === 'Bottom') {
                const changes = this.getBatchChanges();
                editRowIdx = gObj.getCurrentViewRecords().length - changes[deletedRecords].length;
            }
            else if (gObj.editSettings.newRowPosition === 'Top' && gObj.frozenRows) {
                fLeftInsertedRow = gObj.getFrozenHeaderTbody() ? gObj.getFrozenHeaderTbody()
                    .querySelectorAll('.e-insertedrow') : undefined;
                fRightInsertedRow = gObj.getFrozenRightHeader() ? gObj.getFrozenRightHeader()
                    .querySelectorAll('.e-insertedrow') : undefined;
                mInsertedRow = gObj.getMovableHeaderTbody().querySelectorAll('.e-insertedrow');
            }
            for (let i = 0; i < mInsertedRow.length; i++, editRowIdx++) {
                if (!gObj.isEdit) {
                    for (let j = 0; j < this.validationColObj.length; j++) {
                        if (gObj.isEdit) {
                            break;
                        }
                        else if (fLeftCount && this.validationColObj[j].cellIdx < fLeftCount) {
                            if (fLeftInsertedRow[i].querySelectorAll('td')[this.validationColObj[j].cellIdx].innerText === '') {
                                this.editCell(editRowIdx, this.validationColObj[j].field);
                                if (gObj.editModule.formObj.validate()) {
                                    this.saveCell();
                                }
                            }
                        }
                        else if (fRightCount && mColumnCount <= this.validationColObj[j].cellIdx) {
                            if (fRightInsertedRow[i].querySelectorAll('td')[this.validationColObj[j].cellIdx - (mColumnCount + fLeftCount)].innerText === '') {
                                this.editCell(editRowIdx, this.validationColObj[j].field);
                                if (gObj.editModule.formObj.validate()) {
                                    this.saveCell();
                                }
                            }
                        }
                        else if (mInsertedRow[i].querySelectorAll('td')[this.validationColObj[j].cellIdx - fLeftCount].innerText === '') {
                            this.editCell(editRowIdx, this.validationColObj[j].field);
                            if (gObj.editModule.formObj.validate()) {
                                this.saveCell();
                            }
                        }
                    }
                }
                else {
                    break;
                }
            }
            if (!gObj.isEdit) {
                this.isAdded = false;
            }
        }
    }
    escapeCellEdit() {
        const args = this.generateCellArgs();
        args.value = args.previousValue;
        if (args.value || !this.cellDetails.column.validationRules) {
            this.successCallBack(args, args.cell.parentElement, args.column, true)(args);
        }
    }
    generateCellArgs() {
        const gObj = this.parent;
        this.parent.element.classList.remove('e-editing');
        const column = this.cellDetails.column;
        const obj = {};
        obj[column.field] = getObject(column.field, this.cellDetails.rowData);
        let editedData = gObj.editModule.getCurrentEditedData(this.form, obj);
        const cloneEditedData = extend({}, editedData);
        editedData = extend({}, editedData, this.cellDetails.rowData);
        const value = getObject(column.field, cloneEditedData);
        if (!isNullOrUndefined(column.field) && !isUndefined(value)) {
            setValue(column.field, value, editedData);
        }
        const args = {
            columnName: column.field,
            value: getObject(column.field, editedData),
            rowData: this.cellDetails.rowData,
            column: column,
            previousValue: this.cellDetails.value,
            isForeignKey: this.cellDetails.isForeignKey,
            cancel: false
        };
        args.cell = this.form.parentElement;
        args.columnObject = column;
        return args;
    }
    saveCell(isForceSave) {
        if (this.preventSaveCell || !this.form) {
            return;
        }
        const gObj = this.parent;
        if (!isForceSave && (!gObj.isEdit || this.validateFormObj())) {
            return;
        }
        this.preventSaveCell = true;
        const args = this.generateCellArgs();
        const tr = args.cell.parentElement;
        const col = args.column;
        if (!isForceSave) {
            gObj.trigger(cellSave, args, this.successCallBack(args, tr, col));
            gObj.notify(batchForm, { formObj: this.form });
        }
        else {
            this.successCallBack(args, tr, col)(args);
        }
    }
    successCallBack(cellSaveArgs, tr, column, isEscapeCellEdit) {
        return (cellSaveArgs) => {
            const gObj = this.parent;
            cellSaveArgs.cell = cellSaveArgs.cell ? cellSaveArgs.cell : this.form.parentElement;
            cellSaveArgs.columnObject = cellSaveArgs.columnObject ? cellSaveArgs.columnObject : column;
            cellSaveArgs.columnObject.index = isNullOrUndefined(cellSaveArgs.columnObject.index) ? 0 : cellSaveArgs.columnObject.index;
            if (cellSaveArgs.cancel) {
                this.preventSaveCell = false;
                if (this.editNext) {
                    this.editNext = false;
                    if (this.cellDetails.rowIndex === this.index && this.cellDetails.column.field === this.field) {
                        return;
                    }
                    this.editCellExtend(this.index, this.field, this.isAdd);
                }
                return;
            }
            gObj.editModule.destroyWidgets([column]);
            gObj.isEdit = false;
            gObj.editModule.destroyForm();
            this.parent.notify(tooltipDestroy, {});
            let rowObj = parentsUntil(cellSaveArgs.cell, movableContent)
                || parentsUntil(cellSaveArgs.cell, movableHeader) ? gObj.getRowObjectFromUID(tr.getAttribute('data-uid'), true)
                : gObj.getRowObjectFromUID(tr.getAttribute('data-uid'));
            if (gObj.getFrozenMode() === leftRight && (parentsUntil(cellSaveArgs.cell, 'e-frozen-right-header')
                || parentsUntil(cellSaveArgs.cell, 'e-frozen-right-content'))) {
                rowObj = gObj.getRowObjectFromUID(tr.getAttribute('data-uid'), false, true);
            }
            this.refreshTD(cellSaveArgs.cell, column, rowObj, cellSaveArgs.value);
            if (this.parent.isReact) {
                cellSaveArgs.cell = this.newReactTd;
            }
            removeClass([tr], [editedRow, 'e-batchrow']);
            removeClass([cellSaveArgs.cell], ['e-editedbatchcell', 'e-boolcell']);
            if (!isNullOrUndefined(cellSaveArgs.value) && cellSaveArgs.value.toString() ===
                (!isNullOrUndefined(this.cellDetails.value) ? this.cellDetails.value : '').toString() && !this.isColored
                || (isNullOrUndefined(cellSaveArgs.value) && isNullOrUndefined(rowObj.data[column.field]) &&
                    isNullOrUndefined(this.cellDetails.value) && !cellSaveArgs.cell.parentElement.classList.contains('e-insertedrow'))) {
                cellSaveArgs.cell.classList.remove('e-updatedtd');
            }
            if (isNullOrUndefined(isEscapeCellEdit)) {
                gObj.trigger(cellSaved, cellSaveArgs);
            }
            gObj.notify(toolbarRefresh, {});
            this.isColored = false;
            if (this.parent.aggregates.length > 0) {
                this.parent.notify(refreshFooterRenderer, {});
                if (this.parent.groupSettings.columns.length > 0 && !this.isAddRow(this.cellDetails.rowIndex)) {
                    this.parent.notify(groupAggregates, {});
                }
            }
            this.preventSaveCell = false;
            if (this.editNext) {
                this.editNext = false;
                if (this.cellDetails.rowIndex === this.index && this.cellDetails.column.field === this.field) {
                    return;
                }
                const col = gObj.getColumnByField(this.field);
                if (col && col.allowEditing) {
                    this.editCellExtend(this.index, this.field, this.isAdd);
                }
            }
            if (isEscapeCellEdit) {
                gObj.notify(restoreFocus, {});
            }
        };
    }
    getDataByIndex(index) {
        const row$$1 = this.parent.getRowObjectFromUID(this.parent.getDataRows()[index].getAttribute('data-uid'));
        return row$$1.changes ? row$$1.changes : row$$1.data;
    }
    keyDownHandler(e) {
        if ((e.action === 'tab' || e.action === 'shiftTab') && this.parent.isEdit) {
            const gObj = this.parent;
            const btmIdx = this.getBottomIndex();
            const rowcell = parentsUntil(e.target, rowCell);
            if (rowcell) {
                const cell = rowcell.querySelector('.e-field');
                if (cell) {
                    const visibleColumns = this.parent.getVisibleColumns();
                    const columnIndex = e.action === 'tab' ? visibleColumns.length - 1 : 0;
                    if (visibleColumns[columnIndex].field === cell.getAttribute('id').slice(this.parent.element.id.length)) {
                        if (this.cellDetails.rowIndex === btmIdx && e.action === 'tab') {
                            if (gObj.editSettings.newRowPosition === 'Top') {
                                gObj.editSettings.newRowPosition = 'Bottom';
                                this.addRecord();
                                gObj.editSettings.newRowPosition = 'Top';
                            }
                            else {
                                this.addRecord();
                            }
                        }
                        else {
                            this.saveCell();
                        }
                    }
                }
            }
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    addCancelWhilePaging() {
        if (this.validateFormObj()) {
            this.parent.notify(destroyForm, {});
            this.parent.isEdit = false;
            this.isColored = false;
        }
    }
    getBottomIndex() {
        const changes = this.getBatchChanges();
        return this.parent.getCurrentViewRecords().length + changes[addedRecords].length -
            changes[deletedRecords].length - 1;
    }
}

/**
 * `DialogEdit` module is used to handle dialog editing actions.
 *
 * @hidden
 */
class DialogEdit extends NormalEdit {
    constructor(parent, serviceLocator, renderer) {
        //constructor
        super(parent, serviceLocator);
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.renderer = renderer;
    }
    closeEdit() {
        //closeEdit
        super.closeEdit();
    }
    addRecord(data, index) {
        //addRecord
        super.addRecord(data, index);
    }
    endEdit() {
        //endEdit
        super.endEdit();
    }
    updateRow(index, data) {
        super.updateRow(index, data);
    }
    deleteRecord(fieldname, data) {
        //deleteRecord
        super.deleteRecord(fieldname, data);
    }
    startEdit(tr) {
        super.startEdit(tr);
    }
}

/**
 * `DatePickerEditCell` is used to handle datepicker cell type editing.
 *
 * @hidden
 */
class DatePickerEditCell extends EditCellBase {
    write(args) {
        if (args.column.editType === 'datepickeredit') {
            this.obj = new DatePicker(extend(dateanddatetimerender(args, this.parent.editSettings.mode, this.parent.enableRtl, this.parent.cssClass), args.column.edit.params));
        }
        else if (args.column.editType === 'datetimepickeredit') {
            this.obj = new DateTimePicker(extend(dateanddatetimerender(args, this.parent.editSettings.mode, this.parent.enableRtl, this.parent.cssClass), args.column.edit.params));
        }
        this.obj.appendTo(args.element);
    }
}
// eslint-disable-next-line
function dateanddatetimerender(args, mode, rtl, css) {
    const isInline = mode !== 'Dialog';
    const format = getCustomDateFormat(args.column.format, args.column.type);
    let value = getObject(args.column.field, args.rowData);
    value = value ? new Date(value) : null;
    return {
        floatLabelType: isInline ? 'Never' : 'Always',
        value: value,
        format: format,
        placeholder: isInline ?
            '' : args.column.headerText, enableRtl: rtl,
        enabled: isEditable(args.column, args.requestType, args.element),
        cssClass: css ? css : null
    };
}

/**
 * `TemplateEditCell` is used to handle template cell.
 *
 * @hidden
 */
class TemplateEditCell {
    constructor(parent) {
        this.parent = parent;
    }
    read(element, value) {
        return value;
    }
    write() {
        //
    }
    destroy() {
        //
    }
}

/**
 * The `Edit` module is used to handle editing actions.
 */
class Edit {
    /**
     * Constructor for the Grid editing module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {ServiceLocator} serviceLocator - specifies the servicelocator
     * @hidden
     */
    constructor(parent, serviceLocator) {
        this.editType = { 'Inline': InlineEdit, 'Normal': InlineEdit, 'Batch': BatchEdit, 'Dialog': DialogEdit };
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.l10n = this.serviceLocator.getService('localization');
        this.addEventListener();
        this.updateEditObj();
        this.createAlertDlg();
        this.createConfirmDlg();
    }
    updateColTypeObj() {
        const cols = this.parent.columnModel;
        for (let i = 0; i < cols.length; i++) {
            if (this.parent.editSettings.template || cols[i].editTemplate) {
                const templteCell = 'templateedit';
                cols[i].edit = extend(new Edit.editCellType[templteCell](this.parent), cols[i].edit || {});
            }
            else {
                cols[i].edit = extend(new Edit.editCellType[cols[i].editType && Edit.editCellType[cols[i].editType] ?
                    cols[i].editType : 'defaultedit'](this.parent, this.serviceLocator), cols[i].edit || {});
            }
        }
        this.parent.log('primary_column_missing');
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'edit';
    }
    /**
     * @param {NotifyArgs} e - specifies the notifyargs
     * @returns {void}
     * @hidden
     */
    onPropertyChanged(e) {
        if (e.module !== this.getModuleName()) {
            return;
        }
        const gObj = this.parent;
        for (const prop of Object.keys(e.properties)) {
            switch (prop) {
                case 'allowAdding':
                case 'allowDeleting':
                case 'allowEditing':
                    if (gObj.editSettings.allowAdding || gObj.editSettings.allowEditing || gObj.editSettings.allowDeleting) {
                        this.initialEnd();
                    }
                    break;
                case 'mode':
                    this.updateEditObj();
                    gObj.isEdit = false;
                    gObj.refresh();
                    break;
            }
        }
    }
    updateEditObj() {
        if (this.editModule) {
            this.editModule.destroy();
        }
        this.renderer = new EditRender(this.parent, this.serviceLocator);
        this.editModule = new this.editType[this.parent.editSettings.mode](this.parent, this.serviceLocator, this.renderer);
    }
    initialEnd() {
        this.updateColTypeObj();
    }
    /**
     * Edits any bound record in the Grid by TR element.
     *
     * @param {HTMLTableRowElement} tr - Defines the table row to be edited.
     * @returns {void}
     */
    startEdit(tr) {
        const gObj = this.parent;
        if (!gObj.editSettings.allowEditing || gObj.isEdit || gObj.editSettings.mode === 'Batch') {
            return;
        }
        this.parent.element.classList.add('e-editing');
        if (!gObj.getSelectedRows().length) {
            if (!tr) {
                this.showDialog('EditOperationAlert', this.alertDObj);
                return;
            }
        }
        else if (!tr) {
            tr = gObj.getSelectedRows()[0];
        }
        this.isLastRow = tr.rowIndex === this.parent.getContent().querySelector('tr:last-child').rowIndex;
        if (tr.style.display === 'none') {
            return;
        }
        this.editModule.startEdit(tr);
        this.refreshToolbar();
        gObj.element.querySelector('.e-gridpopup').style.display = 'none';
        this.parent.notify('start-edit', {});
    }
    /**
     * @param {Element} tr - specifies the tr element
     * @param {object} args - specifies the object
     * @param {Element} args.row -specfifes the row
     * @param {string} args.requestType - specifies the request type
     * @returns {void}
     * @hidden
     */
    checkLastRow(tr, args) {
        const checkLastRow = this.isLastRow;
        if (this.parent.height !== 'auto' && this.parent.editSettings.newRowPosition === 'Bottom' && args && args.requestType === 'add' &&
            this.parent.getContent().firstElementChild.offsetHeight > this.parent.getContentTable().scrollHeight) {
            addClass([].slice.call(tr.getElementsByClassName(rowCell)), 'e-lastrowadded');
        }
        else if (checkLastRow && tr && tr.classList) {
            addClass([].slice.call(tr.getElementsByClassName(rowCell)), 'e-lastrowcell');
        }
    }
    /**
     * Cancels edited state.
     *
     * @returns {void}
     */
    closeEdit() {
        if (this.parent.editSettings.mode === 'Batch' && this.parent.editSettings.showConfirmDialog
            && this.parent.element.getElementsByClassName('e-updatedtd').length) {
            this.showDialog('CancelEdit', this.dialogObj);
            return;
        }
        this.parent.element.classList.remove('e-editing');
        this.editModule.closeEdit();
        this.refreshToolbar();
        this.parent.notify(closeEdit, {});
    }
    refreshToolbar() {
        this.parent.notify(toolbarRefresh, {});
    }
    /**
     * To adds a new row at the top with the given data. When data is not passed, it will add empty rows.
     * > `editSettings.allowEditing` should be true.
     *
     * @param {Object} data - Defines the new add record data.
     * @param {number} index - Defines the row index to be added
     * @returns {void}
     */
    addRecord(data, index) {
        if (!this.parent.editSettings.allowAdding) {
            return;
        }
        const args = { startEdit: true };
        if (!data) {
            this.parent.notify(virtualScrollAddActionBegin, args);
        }
        if (args.startEdit) {
            this.parent.element.classList.add('e-editing');
            this.editModule.addRecord(data, index);
            this.refreshToolbar();
            this.parent.notify('start-add', {});
        }
    }
    /**
     * Deletes a record with the given options. If fieldname and data are not given, the Grid will delete the selected record.
     * > `editSettings.allowDeleting` should be true.
     *
     * @param {string} fieldname - Defines the primary key field name of the column.
     * @param {Object} data - Defines the JSON data record to be deleted.
     * @returns {void}
     */
    deleteRecord(fieldname, data) {
        const gObj = this.parent;
        if (!gObj.editSettings.allowDeleting) {
            return;
        }
        if (!data) {
            if (!gObj.getSelectedRecords().length && isNullOrUndefined(gObj.commandDelIndex)) {
                this.showDialog('DeleteOperationAlert', this.alertDObj);
                return;
            }
        }
        if (gObj.editSettings.showDeleteConfirmDialog) {
            this.showDialog('ConfirmDelete', this.dialogObj);
            return;
        }
        this.editModule.deleteRecord(fieldname, data);
    }
    /**
     * Deletes a visible row by TR element.
     *
     * @param {HTMLTableRowElement} tr - Defines the table row element.
     * @returns {void}
     */
    deleteRow(tr) {
        this.deleteRowUid = tr.getAttribute('data-uid');
        const rowObj = this.parent.getRowObjectFromUID(this.deleteRowUid);
        if (!isNullOrUndefined(rowObj)) {
            this.deleteRecord(null, rowObj.data);
        }
    }
    /**
     * If Grid is in editable state, you can save a record by invoking endEdit.
     *
     * @returns {void}
     */
    endEdit() {
        if (this.parent.editSettings.mode === 'Batch' && this.parent.editSettings.showConfirmDialog &&
            (isNullOrUndefined(this.formObj) || this.formObj.validate())) {
            this.parent.editModule.saveCell();
            this.parent.notify(editNextValCell, {});
            if (isNullOrUndefined(this.formObj) || this.formObj.validate()) {
                this.showDialog('BatchSaveConfirm', this.dialogObj);
                return;
            }
        }
        this.endEditing();
    }
    /**
     * To update the specified cell by given value without changing into edited state.
     *
     * @param {number} rowIndex Defines the row index.
     * @param {string} field Defines the column field.
     * @param {string | number | boolean | Date} value - Defines the value to be changed.
     * @returns {void}
     */
    updateCell(rowIndex, field, value) {
        this.editModule.updateCell(rowIndex, field, value);
    }
    /**
     * To update the specified row by given values without changing into edited state.
     *
     * @param {number} index Defines the row index.
     * @param {Object} data Defines the data object to be updated.
     * @returns {void}
     */
    updateRow(index, data) {
        this.editModule.updateRow(index, data);
    }
    /**
     * Resets added, edited, and deleted records in the batch mode.
     *
     * @returns {void}
     */
    batchCancel() {
        this.closeEdit();
    }
    /**
     * Bulk saves added, edited, and deleted records in the batch mode.
     *
     * @returns {void}
     */
    batchSave() {
        this.endEdit();
    }
    /**
     * Changes a particular cell into edited state based on the row index and field name provided in the `batch` mode.
     *
     * @param {number} index - Defines row index to edit a particular cell.
     * @param {string} field - Defines the field name of the column to perform batch edit.
     * @returns {void}
     */
    editCell(index, field) {
        this.editModule.editCell(index, field);
    }
    /**
     * Checks the status of validation at the time of editing. If validation is passed, it returns true.
     *
     * @returns {boolean} returns whether the form is validated
     */
    editFormValidate() {
        const form1 = this.formObj ? this.formObj.validate() : true;
        const form2 = this.mFormObj ? this.mFormObj.validate() : true;
        const form3 = this.frFormObj ? this.frFormObj.validate() : true;
        return form1 && form2 && form3;
    }
    /**
     * Gets the added, edited,and deleted data before bulk save to the DataSource in batch mode.
     *
     * @returns {Object} returns the Object
     */
    getBatchChanges() {
        return this.editModule.getBatchChanges ? this.editModule.getBatchChanges() : {};
    }
    /**
     * Gets the current value of the edited component.
     *
     * @returns {Object} returns the Object
     */
    getCurrentEditCellData() {
        const obj = this.getCurrentEditedData(this.formObj.element, {});
        return obj[Object.keys(obj)[0]];
    }
    /**
     * Saves the cell that is currently edited. It does not save the value to the DataSource.
     *
     * @returns {void}
     */
    saveCell() {
        this.editModule.saveCell();
    }
    endEditing() {
        this.parent.element.classList.remove('e-editing');
        this.editModule.endEdit();
        this.refreshToolbar();
    }
    showDialog(content$$1, obj) {
        obj.content = '<div>' + this.l10n.getConstant(content$$1) + '</div>';
        obj.dataBind();
        obj.show();
    }
    getValueFromType(col, value) {
        let val = value;
        switch (col.type) {
            case 'number':
                val = !isNaN(parseFloat(value)) ? parseFloat(value) : null;
                break;
            case 'boolean':
                if (col.editType !== 'booleanedit') {
                    val = value === this.l10n.getConstant('True') || value === true ? true : false;
                }
                break;
            case 'date':
            case 'datetime':
                if (col.editType !== 'datepickeredit' && col.editType !== 'datetimepickeredit'
                    && value && value.length) {
                    val = new Date(value);
                }
                else if (value === '') {
                    val = null;
                }
                break;
        }
        return val;
    }
    destroyToolTip() {
        const elements = [].slice.call(this.parent.element.getElementsByClassName('e-griderror'));
        for (const elem of elements) {
            remove(elem);
        }
        this.parent.getContent().firstElementChild.style.position = 'relative';
    }
    createConfirmDlg() {
        this.dialogObj = this.dlgWidget([
            {
                click: this.dlgOk.bind(this),
                buttonModel: { content: this.l10n.getConstant('OKButton'),
                    cssClass: this.parent.cssClass ? 'e-primary' + ' ' + this.parent.cssClass : 'e-primary',
                    isPrimary: true }
            },
            {
                click: this.dlgCancel.bind(this),
                buttonModel: { cssClass: this.parent.cssClass ? 'e-flat' + ' ' + this.parent.cssClass : 'e-flat',
                    content: this.l10n.getConstant('CancelButton') }
            }
        ], 'EditConfirm');
    }
    createAlertDlg() {
        this.alertDObj = this.dlgWidget([
            {
                click: this.alertClick.bind(this),
                buttonModel: { content: this.l10n.getConstant('OKButton'),
                    cssClass: this.parent.cssClass ? 'e-flat' + ' ' + this.parent.cssClass : 'e-flat',
                    isPrimary: true }
            }
        ], 'EditAlert');
    }
    alertClick() {
        this.alertDObj.hide();
    }
    dlgWidget(btnOptions, name) {
        const div = this.parent.createElement('div', { id: this.parent.element.id + name });
        this.parent.element.appendChild(div);
        const options = {
            showCloseIcon: false,
            isModal: true,
            visible: false,
            closeOnEscape: true,
            target: this.parent.element,
            width: '320px',
            animationSettings: { effect: 'None' },
            cssClass: this.parent.cssClass ? this.parent.cssClass : ''
        };
        options.buttons = btnOptions;
        const obj = new Dialog(options);
        const isStringTemplate = 'isStringTemplate';
        obj[isStringTemplate] = true;
        obj.appendTo(div);
        return obj;
    }
    dlgCancel() {
        this.parent.focusModule.clearIndicator();
        this.parent.focusModule.restoreFocus();
        this.dialogObj.hide();
    }
    dlgOk() {
        switch (this.dialogObj.element.querySelector('.e-dlg-content').firstElementChild.innerText) {
            case this.l10n.getConstant('ConfirmDelete'):
                this.editModule.deleteRecord();
                break;
            case this.l10n.getConstant('CancelEdit'):
                this.editModule.closeEdit();
                break;
            case this.l10n.getConstant('BatchSaveConfirm'):
                this.endEditing();
                break;
            case this.l10n.getConstant('BatchSaveLostChanges'):
                if (this.parent.editSettings.mode === 'Batch') {
                    this.editModule.addCancelWhilePaging();
                }
                this.executeAction();
                break;
        }
        this.dlgCancel();
    }
    destroyEditComponents() {
        if (this.parent.isEdit) {
            this.destroyWidgets();
            this.destroyForm();
        }
        this.destroy();
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.eventDetails = [{ event: inBoundModelChanged, handler: this.onPropertyChanged },
            { event: initialEnd, handler: this.initialEnd },
            { event: keyPressed, handler: this.keyPressHandler },
            { event: autoCol, handler: this.updateColTypeObj },
            { event: tooltipDestroy, handler: this.destroyToolTip },
            { event: preventBatch, handler: this.preventBatch },
            { event: destroyForm, handler: this.destroyForm },
            { event: destroy, handler: this.destroyEditComponents }];
        addRemoveEventListener(this.parent, this.eventDetails, true, this);
        this.actionBeginFunction = this.onActionBegin.bind(this);
        this.actionCompleteFunction = this.actionComplete.bind(this);
        this.parent.addEventListener(actionBegin, this.actionBeginFunction);
        this.parent.addEventListener(actionComplete, this.actionCompleteFunction);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        addRemoveEventListener(this.parent, this.eventDetails, false);
        this.parent.removeEventListener(actionComplete, this.actionCompleteFunction);
        this.parent.removeEventListener(actionBegin, this.actionBeginFunction);
    }
    actionComplete(e) {
        const actions = ['add', 'beginEdit', 'save', 'delete', 'cancel'];
        if (actions.indexOf(e.requestType) < 0) {
            this.parent.isEdit = false;
        }
        if (e.requestType === 'batchsave') {
            this.parent.focusModule.restoreFocus();
        }
        this.refreshToolbar();
    }
    /**
     * @param {Element} form - specifies the element
     * @param {Object} editedData - specifies the edited data
     * @returns {Object} returns the object
     * @hidden
     */
    getCurrentEditedData(form, editedData) {
        const gObj = this.parent;
        if (gObj.editSettings.template) {
            const elements = [].slice.call(form.elements);
            for (let k = 0; k < elements.length; k++) {
                if (((elements[k].hasAttribute('name') && (elements[k].className !== 'e-multi-hidden')) ||
                    elements[k].classList.contains('e-multiselect')) && !(elements[k].type === 'hidden' &&
                    (parentsUntil(elements[k], 'e-switch-wrapper') || parentsUntil(elements[k], 'e-checkbox-wrapper')))) {
                    const field = (elements[k].hasAttribute('name')) ? setComplexFieldID(elements[k].getAttribute('name')) :
                        setComplexFieldID(elements[k].getAttribute('id'));
                    const column = gObj.getColumnByField(field) || { field: field, type: elements[k].getAttribute('type') };
                    let value;
                    if (column.type === 'checkbox' || column.type === 'boolean') {
                        value = elements[k].checked;
                    }
                    else if (elements[k].value) {
                        value = elements[k].value;
                        if (elements[k].ej2_instances &&
                            elements[k].ej2_instances.length &&
                            !isNullOrUndefined(elements[k].ej2_instances[0].value)) {
                            elements[k].blur();
                            value = elements[k].ej2_instances[0].value;
                        }
                    }
                    else if (elements[k].ej2_instances) {
                        value = elements[k].ej2_instances[0].value;
                    }
                    if (column.edit && typeof column.edit.read === 'string') {
                        value = getValue(column.edit.read, window)(elements[k], value);
                    }
                    else if (column.edit && column.edit.read) {
                        value = column.edit.read(elements[k], value);
                    }
                    value = gObj.editModule.getValueFromType(column, value);
                    if (elements[k].type === 'radio') {
                        if (elements[k].checked) {
                            DataUtil.setValue(column.field, value, editedData);
                        }
                    }
                    else {
                        DataUtil.setValue(column.field, value, editedData);
                    }
                }
            }
            return editedData;
        }
        const col = gObj.columnModel.filter((col) => col.editTemplate);
        for (let j = 0; j < col.length; j++) {
            if (form[getComplexFieldID(col[j].field)]) {
                let inputElements = [].slice.call(form[getComplexFieldID(col[j].field)]);
                inputElements = inputElements.length ? inputElements : [form[getComplexFieldID(col[j].field)]];
                let temp = inputElements.filter((e) => !isNullOrUndefined((e.ej2_instances)));
                if (temp.length === 0) {
                    temp = inputElements.filter((e) => e.hasAttribute('name'));
                }
                for (let k = 0; k < temp.length; k++) {
                    const value = this.getValue(col[j], temp[k], editedData);
                    DataUtil.setValue(col[j].field, value, editedData);
                }
            }
        }
        const inputs = [].slice.call(form.getElementsByClassName('e-field'));
        for (let i = 0, len = inputs.length; i < len; i++) {
            const col = gObj.getColumnByUid(inputs[i].getAttribute('e-mappinguid'));
            if (col && col.field) {
                const value = this.getValue(col, inputs[i], editedData);
                DataUtil.setValue(col.field, value, editedData);
            }
        }
        return editedData;
    }
    getValue(col, input, editedData) {
        let value = input.ej2_instances ?
            input.ej2_instances[0].value : input.value;
        const gObj = this.parent;
        let temp = col.edit.read;
        if (col.type === 'checkbox' || col.type === 'boolean') {
            value = input.checked;
        }
        if (typeof temp === 'string') {
            temp = getValue(temp, window);
            value = gObj.editModule.getValueFromType(col, (temp)(input, value));
        }
        else {
            value = gObj.editModule.getValueFromType(col, col.edit.read(input, value));
        }
        if (isNullOrUndefined(editedData[col.field]) && value === '') {
            value = editedData[col.field];
        }
        return value;
    }
    /**
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    onActionBegin(e) {
        if (e.requestType === 'columnstate' && this.parent.isEdit
            && this.parent.editSettings.mode !== 'Batch') {
            this.closeEdit();
        }
        else {
            const editRow = this.parent.element.querySelector('.' + editedRow);
            const addRow = this.parent.element.querySelector('.' + addedRow);
            if (editRow && this.parent.frozenRows && e.requestType === 'virtualscroll'
                && parseInt(parentsUntil(editRow, row).getAttribute(ariaRowIndex), 10) < this.parent.frozenRows) {
                return;
            }
            const restrictedRequestTypes = ['filterafteropen', 'filterbeforeopen', 'filterchoicerequest', 'save', 'infiniteScroll', 'virtualscroll'];
            const isRestrict = restrictedRequestTypes.indexOf(e.requestType) === -1;
            const isDestroyVirtualForm = this.parent.enableVirtualization && this.formObj
                && !this.formObj.isDestroyed && (editRow || addRow || e.requestType === 'cancel') && isRestrict;
            if ((!this.parent.enableVirtualization && this.parent.editSettings.mode !== 'Batch' && this.formObj && !this.formObj.isDestroyed
                && isRestrict && !e.cancel) || isDestroyVirtualForm) {
                this.destroyWidgets();
                this.destroyForm();
            }
        }
    }
    /**
     * @param {Column[]} cols - specfies the column
     * @returns {void}
     * @hidden
     */
    destroyWidgets(cols) {
        const gObj = this.parent;
        if (gObj.editSettings.template) {
            this.parent.destroyTemplate(['editSettingsTemplate']);
            if (this.parent.isReact) {
                this.parent.renderTemplates();
            }
        }
        cols = cols ? cols : this.parent.getCurrentVisibleColumns(this.parent.enableColumnVirtualization);
        if (cols.some((column) => !isNullOrUndefined(column.editTemplate))) {
            this.parent.destroyTemplate(['editTemplate']);
            if (this.parent.isReact) {
                this.parent.renderTemplates();
            }
        }
        for (const col of cols) {
            let temp = col.edit.destroy;
            if (col.edit.destroy) {
                if (typeof temp === 'string') {
                    temp = getValue(temp, window);
                    temp();
                }
                else {
                    col.edit.destroy();
                }
            }
        }
        const elements = [].slice.call(this.formObj.element.elements);
        for (let i = 0; i < elements.length; i++) {
            if (elements[i].hasAttribute('name')) {
                if (elements[i].ej2_instances &&
                    elements[i].ej2_instances.length &&
                    !elements[i].ej2_instances[0].isDestroyed) {
                    elements[i].ej2_instances[0].destroy();
                }
            }
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    destroyForm() {
        this.destroyToolTip();
        const formObjects = [this.formObj, this.mFormObj, this.frFormObj, this.virtualFormObj];
        for (let i = 0; i < formObjects.length; i++) {
            if (formObjects[i] && formObjects[i].element && !formObjects[i].isDestroyed) {
                formObjects[i].destroy();
            }
        }
        this.destroyToolTip();
    }
    /**
     * To destroy the editing.
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        const gridElement = this.parent.element;
        if (!gridElement) {
            return;
        }
        const hasGridChild = gridElement.querySelector('.' + gridHeader) &&
            gridElement.querySelector('.' + gridContent) ? true : false;
        if (hasGridChild) {
            this.destroyForm();
        }
        this.removeEventListener();
        let elem = this.dialogObj.element;
        if (elem.childElementCount > 0) {
            this.dialogObj.destroy();
            remove(elem);
        }
        elem = this.alertDObj.element;
        if (elem.childElementCount > 0) {
            this.alertDObj.destroy();
            remove(elem);
        }
        if (!hasGridChild) {
            return;
        }
        if (this.editModule) {
            this.editModule.destroy();
        }
    }
    keyPressHandler(e) {
        switch (e.action) {
            case 'insert':
                this.addRecord();
                break;
            case 'delete':
                if ((e.target.tagName !== 'INPUT' || e.target.classList.contains('e-checkselect'))
                    && !document.querySelector('.e-popup-open')) {
                    this.deleteRecord();
                }
                break;
            case 'f2':
                this.startEdit();
                break;
            case 'enter':
                if (!parentsUntil(e.target, 'e-unboundcelldiv') && this.parent.editSettings.mode !== 'Batch' &&
                    (parentsUntil(e.target, gridContent) || (this.parent.frozenRows
                        && parentsUntil(e.target, headerContent)))
                    && !document.getElementsByClassName('e-popup-open').length) {
                    e.preventDefault();
                    this.endEdit();
                }
                break;
            case 'escape':
                if (this.parent.isEdit) {
                    if (this.parent.editSettings.mode === 'Batch') {
                        this.editModule.escapeCellEdit();
                    }
                    else {
                        this.closeEdit();
                    }
                }
                break;
        }
    }
    preventBatch(args) {
        this.preventObj = args;
        this.showDialog('BatchSaveLostChanges', this.dialogObj);
    }
    executeAction() {
        this.preventObj.handler.call(this.preventObj.instance, this.preventObj.arg1, this.preventObj.arg2, this.preventObj.arg3, this.preventObj.arg4, this.preventObj.arg5, this.preventObj.arg6, this.preventObj.arg7, this.preventObj.arg8);
    }
    /**
     * @param {Column[]} cols - specifies the column
     * @returns {void}
     * @hidden
     */
    applyFormValidation(cols) {
        const gObj = this.parent;
        const frzCols = gObj.isFrozenGrid();
        const isInline = this.parent.editSettings.mode === 'Normal';
        const idx = this.parent.getFrozenMode() === 'Right' && isInline ? 1 : 0;
        const form = this.parent.editSettings.mode !== 'Dialog' ?
            gObj.element.getElementsByClassName('e-gridform')[idx] :
            select('#' + gObj.element.id + '_dialogEdit_wrapper .e-gridform', document);
        const index = this.parent.getFrozenMode() === 'Right' && isInline ? 0 : 1;
        const mForm = gObj.element.getElementsByClassName('e-gridform')[index];
        let rules = {};
        const mRules = {};
        const frRules = {};
        cols = cols ? cols : gObj.getColumns();
        for (let i = 0; i < cols.length; i++) {
            if (!cols[i].visible && (gObj.editSettings.mode !== 'Dialog' || (gObj.groupSettings.columns.indexOf(cols[i].field) === -1
                && gObj.editSettings.mode === 'Dialog'))) {
                continue;
            }
            if (cols[i].validationRules) {
                setValidationRuels(cols[i], index, rules, mRules, frRules, cols.length);
            }
        }
        if (frzCols && this.parent.editSettings.mode !== 'Dialog') {
            this.parent.editModule.mFormObj = this.createFormObj(mForm, mRules);
            if (this.parent.getFrozenMode() === leftRight) {
                const frForm = gObj.element.getElementsByClassName('e-gridform')[2];
                this.parent.editModule.frFormObj = this.createFormObj(frForm, frRules);
            }
        }
        else {
            rules = extend(rules, mRules, frRules);
        }
        this.parent.editModule.formObj = this.createFormObj(form, rules);
    }
    /**
     * @param {HTMLFormElement} form - Defined Form element
     * @param {Object} rules - Defines form rules
     * @returns {FormValidator} Returns formvalidator instance
     * @hidden
     */
    createFormObj(form, rules) {
        return new FormValidator(form, {
            rules: rules,
            locale: this.parent.locale,
            validationComplete: (args) => {
                this.validationComplete(args);
            },
            customPlacement: (inputElement, error) => {
                const uid = inputElement.getAttribute('e-mappinguid');
                const args = {
                    column: this.parent.getColumnByUid(uid),
                    error: error,
                    inputElement: inputElement,
                    value: inputElement.value
                };
                this.valErrorPlacement(inputElement, error);
                this.parent.notify(valCustomPlacement, args);
            }
        });
    }
    valErrorPlacement(inputElement, error) {
        if (this.parent.isEdit) {
            const id = error.getAttribute('for');
            const elem = this.getElemTable(inputElement).querySelector('#' + id + '_Error');
            if (!elem) {
                this.createTooltip(inputElement, error, id, '');
            }
            else {
                elem.querySelector('.e-tip-content').innerHTML = error.outerHTML;
            }
        }
    }
    getElemTable(inputElement) {
        let isFHdr;
        const gObj = this.parent;
        let table$$1;
        if (gObj.editSettings.mode !== 'Dialog') {
            isFHdr = (gObj.frozenRows && gObj.frozenRows
                > (parseInt(closest(inputElement, '.' + row).getAttribute(ariaRowIndex), 10) || 0));
            const field = inputElement.name;
            let col;
            if (field) {
                col = getColumnModelByFieldName(this.parent, setComplexFieldID(field));
            }
            if (col && gObj.isFrozenGrid()) {
                if (col.getFreezeTableName() === 'frozen-left') {
                    table$$1 = isFHdr ? gObj.getFrozenVirtualHeader().querySelector('table')
                        : gObj.getFrozenVirtualContent().querySelector('table');
                }
                else if (col.getFreezeTableName() === 'frozen-right') {
                    table$$1 = isFHdr ? gObj.getFrozenRightHeader().querySelector('table')
                        : gObj.getFrozenRightContent().querySelector('table');
                }
                else if (col.getFreezeTableName() === 'movable') {
                    table$$1 = isFHdr ? gObj.getMovableVirtualHeader().querySelector('table')
                        : gObj.getMovableVirtualContent().querySelector('table');
                }
            }
            else {
                table$$1 = isFHdr ? gObj.getHeaderTable() : gObj.getContentTable();
            }
        }
        else {
            table$$1 = select('#' + gObj.element.id + '_dialogEdit_wrapper', document);
        }
        return table$$1;
    }
    resetElemPosition(elem, args) {
        const td = parentsUntil(args.element, rowCell);
        if (td) {
            const tdRight = td.getBoundingClientRect().right;
            const elemRight = elem.getBoundingClientRect().right;
            if (elemRight > tdRight) {
                const offSet = elemRight - tdRight;
                elem.style.left = (elem.offsetLeft - offSet) + 'px';
            }
        }
    }
    validationComplete(args) {
        if (this.parent.isEdit) {
            const elem = this.getElemTable(args.element).querySelector('#' + args.inputName + '_Error');
            if (elem) {
                if (args.status === 'failure') {
                    elem.style.display = '';
                    this.resetElemPosition(elem, args);
                }
                else {
                    elem.style.display = 'none';
                }
            }
        }
    }
    createTooltip(element, error, name, display) {
        const column = this.parent.getColumnByField(name);
        let formObj = this.parent.getFrozenMode() === leftRight && this.parent.editSettings.mode === 'Normal'
            && column.getFreezeTableName() === frozenRight ? this.frFormObj.element : this.formObj.element;
        const customForm = parentsUntil(element, 'e-virtual-validation');
        if (customForm) {
            formObj = this.virtualFormObj.element;
        }
        let gcontent = this.parent.getContent().firstElementChild;
        const frzCols = this.parent.getFrozenColumns() || this.parent.getFrozenLeftColumnsCount()
            || this.parent.getFrozenRightColumnsCount();
        if (frzCols) {
            gcontent = this.parent.getMovableVirtualContent();
        }
        const isScroll = gcontent.scrollHeight > gcontent.clientHeight || gcontent.scrollWidth > gcontent.clientWidth;
        const isInline = this.parent.editSettings.mode !== 'Dialog';
        const td = closest(element, '.' + rowCell);
        const row$$1 = closest(element, '.' + row);
        const fCont = this.parent.getContent().querySelector('.' + frozenContent);
        let isFHdr;
        let isFHdrLastRow = false;
        let validationForBottomRowPos;
        let isBatchModeLastRow = false;
        const viewPortRowCount = Math.round(this.parent.getContent().clientHeight / this.parent.getRowHeight()) - 1;
        const rows = !fCont ? [].slice.call(this.parent.getContent().getElementsByClassName(row))
            : [].slice.call(this.parent.getFrozenVirtualContent().getElementsByClassName(row));
        if (this.parent.editSettings.mode === 'Batch') {
            if (viewPortRowCount > 1 && rows.length >= viewPortRowCount
                && rows[rows.length - 1].getAttribute(ariaRowIndex) === row$$1.getAttribute(ariaRowIndex)) {
                isBatchModeLastRow = true;
            }
        }
        if (isInline) {
            if (this.parent.frozenRows) {
                const fHeraderRows = frzCols ? this.parent.getFrozenVirtualHeader().querySelector(tbody).children
                    : this.parent.getHeaderTable().querySelector(tbody).children;
                isFHdr = fHeraderRows.length > (parseInt(row$$1.getAttribute(ariaRowIndex), 10) || 0);
                isFHdrLastRow = isFHdr && parseInt(row$$1.getAttribute(ariaRowIndex), 10) === fHeraderRows.length - 1;
            }
            if (isFHdrLastRow || (viewPortRowCount > 1 && rows.length >= viewPortRowCount
                && ((this.parent.editSettings.newRowPosition === 'Bottom' && (this.editModule.args
                    && this.editModule.args.requestType === 'add')) || (td.classList.contains('e-lastrowcell')
                    && !row$$1.classList.contains(addedRow)))) || isBatchModeLastRow) {
                validationForBottomRowPos = true;
            }
        }
        const table$$1 = isInline ?
            (isFHdr ? this.parent.getHeaderTable() : this.parent.getContentTable()) :
            select('#' + this.parent.element.id + '_dialogEdit_wrapper .e-dlg-content', document);
        const client = table$$1.getBoundingClientRect();
        const left = isInline ?
            this.parent.element.getBoundingClientRect().left : client.left;
        const input = closest(element, 'td');
        const inputClient = input ? input.getBoundingClientRect() : element.parentElement.getBoundingClientRect();
        const div = this.parent.createElement('div', {
            className: 'e-tooltip-wrap e-lib e-control e-popup e-griderror',
            id: name + '_Error',
            styles: 'display:' + display + ';top:' +
                ((isFHdr ? inputClient.top + inputClient.height : inputClient.bottom - client.top
                    - (frzCols ? fCont.scrollTop : 0)) + table$$1.scrollTop + 9) + 'px;left:' +
                (inputClient.left - left + table$$1.scrollLeft + inputClient.width / 2) + 'px;' +
                'max-width:' + inputClient.width + 'px;text-align:center;'
        });
        if (isInline && client.left < left) {
            div.style.left = parseInt(div.style.left, 10) - client.left + left + 'px';
        }
        const content$$1 = this.parent.createElement('div', { className: 'e-tip-content' });
        content$$1.appendChild(error);
        let arrow;
        if (validationForBottomRowPos) {
            arrow = this.parent.createElement('div', { className: 'e-arrow-tip e-tip-bottom' });
            arrow.appendChild(this.parent.createElement('div', { className: 'e-arrow-tip-outer e-tip-bottom' }));
            arrow.appendChild(this.parent.createElement('div', { className: 'e-arrow-tip-inner e-tip-bottom' }));
        }
        else {
            arrow = this.parent.createElement('div', { className: 'e-arrow-tip e-tip-top' });
            arrow.appendChild(this.parent.createElement('div', { className: 'e-arrow-tip-outer e-tip-top' }));
            arrow.appendChild(this.parent.createElement('div', { className: 'e-arrow-tip-inner e-tip-top' }));
        }
        div.appendChild(content$$1);
        div.appendChild(arrow);
        if (!customForm && (frzCols || this.parent.frozenRows) && this.parent.editSettings.mode !== 'Dialog') {
            const getEditCell = this.parent.editSettings.mode === 'Normal' ?
                closest(element, '.e-editcell') : closest(element, '.' + table);
            getEditCell.style.position = 'relative';
            div.style.position = 'absolute';
            if (this.parent.editSettings.mode === 'Batch' ||
                (closest(element, '.' + frozenContent) || closest(element, '.' + frozenHeader))
                || (this.parent.frozenRows && !frzCols)) {
                formObj.appendChild(div);
            }
            else {
                this.mFormObj.element.appendChild(div);
            }
        }
        else {
            if (customForm) {
                this.virtualFormObj.element.appendChild(div);
            }
            else {
                this.formObj.element.appendChild(div);
            }
        }
        if (!validationForBottomRowPos && isInline && gcontent.getBoundingClientRect().bottom < inputClient.bottom + inputClient.height) {
            gcontent.scrollTop = gcontent.scrollTop + div.offsetHeight + arrow.scrollHeight;
        }
        const lineHeight = parseInt(document.defaultView.getComputedStyle(div, null).getPropertyValue('font-size'), 10);
        if (div.getBoundingClientRect().width < inputClient.width &&
            div.querySelector('label').getBoundingClientRect().height / (lineHeight * 1.2) >= 2) {
            div.style.width = div.style.maxWidth;
        }
        if ((frzCols || this.parent.frozenRows) && this.parent.editSettings.mode !== 'Dialog') {
            div.style.left = input.offsetLeft + (input.offsetWidth / 2 - div.offsetWidth / 2) + 'px';
        }
        else {
            div.style.left = (parseInt(div.style.left, 10) - div.offsetWidth / 2) + 'px';
        }
        if (isInline && !isScroll && !this.parent.allowPaging || frzCols || this.parent.frozenRows) {
            gcontent.style.position = 'static';
            const pos = calculateRelativeBasedPosition(input, div);
            div.style.top = pos.top + inputClient.height + 9 + 'px';
        }
        if (validationForBottomRowPos) {
            if (isScroll && !frzCols && this.parent.height !== 'auto' && !this.parent.frozenRows
                && !this.parent.enableVirtualization) {
                const scrollWidth = gcontent.scrollWidth > gcontent.offsetWidth ? getScrollBarWidth() : 0;
                div.style.bottom = (this.parent.height - gcontent.querySelector('table').offsetHeight
                    - scrollWidth) + inputClient.height + 9 + 'px';
            }
            else {
                div.style.bottom = inputClient.height + 9 + 'px';
            }
            if (rows.length < viewPortRowCount && this.parent.editSettings.newRowPosition === 'Bottom' && (this.editModule.args
                && this.editModule.args.requestType === 'add')) {
                const rowsCount = this.parent.frozenRows ? this.parent.frozenRows + (rows.length - 1) : rows.length - 1;
                const rowsHeight = rowsCount * this.parent.getRowHeight();
                const position = this.parent.getContent().clientHeight - rowsHeight;
                div.style.bottom = position + 9 + 'px';
            }
            div.style.top = null;
        }
    }
    /**
     * @param {Column} col - specfies the column
     * @returns {boolean} returns the whether column is grouped
     * @hidden
     */
    checkColumnIsGrouped(col) {
        return !col.visible && !(this.parent.groupSettings.columns.indexOf(col.field) > -1);
    }
    /**
     * @param {object} editors -specfies the editors
     * @returns {void}
     * @hidden
     */
    static AddEditors(editors) {
        Edit.editCellType = extend(Edit.editCellType, editors);
    }
}
Edit.editCellType = {
    'dropdownedit': DropDownEditCell, 'numericedit': NumericEditCell,
    'datepickeredit': DatePickerEditCell, 'datetimepickeredit': DatePickerEditCell,
    'booleanedit': BooleanEditCell, 'defaultedit': DefaultEditCell,
    'templateedit': TemplateEditCell
};

/**
 * The `ColumnChooser` module is used to show or hide columns dynamically.
 */
class ColumnChooser {
    /**
     * Constructor for the Grid ColumnChooser module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {ServiceLocator} serviceLocator - specifies the serviceLocator
     * @hidden
     */
    constructor(parent, serviceLocator) {
        this.showColumn = [];
        this.hideColumn = [];
        this.changedColumns = [];
        this.unchangedColumns = [];
        this.isDlgOpen = false;
        this.initialOpenDlg = true;
        this.stateChangeColumns = [];
        this.changedStateColumns = [];
        this.isInitialOpen = false;
        this.isCustomizeOpenCC = false;
        this.searchOperator = 'startswith';
        this.prevShowedCols = [];
        this.hideDialogFunction = this.hideDialog.bind(this);
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.addEventListener();
        this.cBoxTrue = createCheckBox(this.parent.createElement, true, { checked: true, label: ' ' });
        this.cBoxFalse = createCheckBox(this.parent.createElement, true, { checked: false, label: ' ' });
        this.cBoxTrue.insertBefore(this.parent.createElement('input', {
            className: 'e-chk-hidden e-cc e-cc-chbox', attrs: { type: 'checkbox' }
        }), this.cBoxTrue.firstChild);
        this.cBoxFalse.insertBefore(this.parent.createElement('input', {
            className: 'e-chk-hidden e-cc e-cc-chbox', attrs: { 'type': 'checkbox' }
        }), this.cBoxFalse.firstChild);
        this.cBoxFalse.querySelector('.e-frame').classList.add('e-uncheck');
        if (this.parent.enableRtl) {
            addClass([this.cBoxTrue, this.cBoxFalse], ['e-rtl']);
        }
    }
    destroy() {
        const gridElement = this.parent.element;
        if (!gridElement || (!gridElement.querySelector('.' + gridHeader) && !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        this.removeEventListener();
        this.unWireEvents();
        if (!isNullOrUndefined(this.dlgObj) && this.dlgObj.element && !this.dlgObj.isDestroyed) {
            this.dlgObj.destroy();
        }
    }
    rtlUpdate() {
        if (this.parent.enableRtl) {
            addClass([].slice.call(this.innerDiv.getElementsByClassName('e-checkbox-wrapper')), ['e-rtl']);
        }
        else {
            removeClass([].slice.call(this.innerDiv.getElementsByClassName('e-checkbox-wrapper')), ['e-rtl']);
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        EventHandler.add(document, 'click', this.clickHandler, this);
        this.parent.on(uiUpdate, this.enableAfterRenderEle, this);
        this.parent.on(initialEnd, this.render, this);
        this.parent.addEventListener(dataBound, this.hideDialogFunction);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(rtlUpdated, this.rtlUpdate, this);
        this.parent.on(keyPressed, this.keyUpHandler, this);
        this.parent.on(resetColumns, this.onResetColumns, this);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        EventHandler.remove(document, 'click', this.clickHandler);
        this.parent.off(initialEnd, this.render);
        this.parent.off(destroy, this.destroy);
        this.parent.off(uiUpdate, this.enableAfterRenderEle);
        this.parent.off(rtlUpdated, this.rtlUpdate);
        this.parent.on(keyPressed, this.keyUpHandler, this);
        this.parent.off(resetColumns, this.onResetColumns);
        this.parent.removeEventListener(dataBound, this.hideDialogFunction);
    }
    render() {
        this.l10n = this.serviceLocator.getService('localization');
        this.renderDlgContent();
        this.getShowHideService = this.serviceLocator.getService('showHideService');
    }
    clickHandler(e) {
        const targetElement = e.target;
        if (!this.isCustomizeOpenCC) {
            if (!isNullOrUndefined(closest(targetElement, '.e-cc')) || !isNullOrUndefined(closest(targetElement, '.e-cc-toolbar'))) {
                if (targetElement.classList.contains('e-columnchooser-btn') || targetElement.classList.contains('e-cc-toolbar')) {
                    if ((this.initialOpenDlg && this.dlgObj.visible) || !this.isDlgOpen) {
                        this.isDlgOpen = true;
                        return;
                    }
                }
                else if (targetElement.classList.contains('e-cc-cancel')) {
                    targetElement.parentElement.querySelector('.e-ccsearch').value = '';
                    this.columnChooserSearch('');
                    this.removeCancelIcon();
                    this.refreshCheckboxButton();
                }
            }
            else {
                if (!isNullOrUndefined(this.dlgObj) && this.dlgObj.visible && !targetElement.classList.contains('e-toolbar-items')) {
                    this.dlgObj.hide();
                    this.clearActions();
                    this.refreshCheckboxState();
                    // this.unWireEvents();
                    this.isDlgOpen = false;
                }
            }
            if (this.parent.detailTemplate || this.parent.childGrid) {
                this.targetdlg = e.target;
            }
        }
        if (this.isCustomizeOpenCC && e.target.classList.contains('e-cc-cancel')) {
            this.refreshCheckboxState();
        }
        this.rtlUpdate();
    }
    hideDialog() {
        if (!isNullOrUndefined(this.dlgObj) && this.dlgObj.visible) {
            this.dlgObj.hide();
            // this.unWireEvents();
            this.isDlgOpen = false;
        }
    }
    /**
     * To render columnChooser when showColumnChooser enabled.
     *
     * @param {number} x - specifies the position x
     * @param {number} y - specifies the position y
     * @param {Element} target - specifies the target
     * @returns {void}
     * @hidden
     */
    renderColumnChooser(x, y, target) {
        if (!this.dlgObj.visible && (this.parent.detailTemplate || this.parent.childGrid)) {
            this.hideOpenedDialog();
        }
        if (!this.dlgObj.visible) {
            const args = this.beforeOpenColumnChooserEvent();
            if (args.cancel) {
                return;
            }
            if (target) {
                this.targetdlg = target;
            }
            this.refreshCheckboxState();
            this.dlgObj.dataBind();
            this.dlgObj.element.style.maxHeight = '430px';
            const elementVisible = this.dlgObj.element.style.display;
            this.dlgObj.element.style.display = 'block';
            let isSticky = this.parent.getHeaderContent().classList.contains('e-sticky');
            const toolbarItem = closest(target, '.e-toolbar-item');
            let newpos;
            if (isSticky) {
                newpos = toolbarItem.getBoundingClientRect();
                this.dlgObj.element.classList.add('e-sticky');
            }
            else {
                this.dlgObj.element.classList.remove('e-sticky');
                newpos = calculateRelativeBasedPosition(toolbarItem, this.dlgObj.element);
            }
            this.dlgObj.element.style.display = elementVisible;
            this.dlgObj.element.style.top = newpos.top + closest(target, '.e-cc-toolbar').getBoundingClientRect().height + 'px';
            const dlgWidth = 250;
            if (!isNullOrUndefined(closest(target, '.e-bigger'))) {
                this.dlgObj.width = 258;
            }
            if (Browser.isDevice) {
                this.dlgObj.target = document.body;
                this.dlgObj.position = { X: 'center', Y: 'center' };
                this.dlgObj.refreshPosition();
                this.dlgObj.open = this.mOpenDlg.bind(this);
            }
            else {
                if (this.parent.enableRtl) {
                    this.dlgObj.element.style.left = target.offsetLeft + 'px';
                }
                else {
                    this.dlgObj.element.style.left = ((newpos.left - dlgWidth) + closest(target, '.e-cc-toolbar').clientWidth) + 2 + 'px';
                }
            }
            this.removeCancelIcon();
            this.dlgObj.show();
            this.parent.notify(columnChooserOpened, { dialog: this.dlgObj });
        }
        else {
            // this.unWireEvents();
            this.hideDialog();
            this.addcancelIcon();
            this.clearActions();
            this.refreshCheckboxState();
        }
        this.rtlUpdate();
    }
    /**
     * Column chooser can be displayed on screen by given position(X and Y axis).
     *
     * @param  {number} X - Defines the X axis.
     * @param  {number} Y - Defines the Y axis.
     * @return {void}
     */
    openColumnChooser(X, Y) {
        this.isCustomizeOpenCC = true;
        if (this.dlgObj.visible) {
            this.hideDialog();
            return;
        }
        const args = this.beforeOpenColumnChooserEvent();
        if (args.cancel) {
            return;
        }
        if (!this.isInitialOpen) {
            this.dlgObj.content = this.renderChooserList();
            this.updateIntermediateBtn();
        }
        else {
            this.refreshCheckboxState();
        }
        this.dlgObj.dataBind();
        this.dlgObj.position = { X: 'center', Y: 'center' };
        if (isNullOrUndefined(X)) {
            this.dlgObj.position = { X: 'center', Y: 'center' };
            this.dlgObj.refreshPosition();
        }
        else {
            this.dlgObj.element.style.top = '';
            this.dlgObj.element.style.left = '';
            this.dlgObj.element.style.top = Y + 'px';
            this.dlgObj.element.style.left = X + 'px';
        }
        this.dlgObj.beforeOpen = this.customDialogOpen.bind(this);
        this.dlgObj.show();
        this.isInitialOpen = true;
        this.dlgObj.beforeClose = this.customDialogClose.bind(this);
    }
    enableAfterRenderEle(e) {
        if (e.module === this.getModuleName() && e.enable) {
            this.render();
        }
    }
    keyUpHandler(e) {
        if (e.action === 'escape') {
            this.hideDialog();
        }
    }
    customDialogOpen() {
        const searchElement = this.dlgObj.content.querySelector('input.e-ccsearch');
        EventHandler.add(searchElement, 'keyup', this.columnChooserManualSearch, this);
    }
    customDialogClose() {
        const searchElement = this.dlgObj.content.querySelector('input.e-ccsearch');
        EventHandler.remove(searchElement, 'keyup', this.columnChooserManualSearch);
    }
    getColumns() {
        const columns = this.parent.getColumns().filter((column) => (column.type !== 'checkbox'
            && column.showInColumnChooser === true) || (column.type === 'checkbox' && column.field !== undefined));
        return columns;
    }
    renderDlgContent() {
        this.dlgDiv = this.parent.createElement('div', { className: 'e-ccdlg e-cc', id: this.parent.element.id + '_ccdlg' });
        this.dlgDiv.setAttribute('aria-label', this.l10n.getConstant('ColumnChooserDialogARIA'));
        this.parent.element.appendChild(this.dlgDiv);
        this.dlgObj = new Dialog({
            header: this.l10n.getConstant('ChooseColumns'),
            showCloseIcon: false,
            closeOnEscape: false,
            locale: this.parent.locale,
            visible: false,
            enableRtl: this.parent.enableRtl,
            target: document.getElementById(this.parent.element.id),
            buttons: [{
                    click: this.confirmDlgBtnClick.bind(this),
                    buttonModel: {
                        content: this.l10n.getConstant('OKButton'), isPrimary: true,
                        cssClass: this.parent.cssClass ? 'e-cc e-cc_okbtn' + ' ' + this.parent.cssClass : 'e-cc e-cc_okbtn'
                    }
                },
                {
                    click: this.clearBtnClick.bind(this),
                    buttonModel: { cssClass: this.parent.cssClass ?
                            'e-flat e-cc e-cc-cnbtn' + ' ' + this.parent.cssClass : 'e-flat e-cc e-cc-cnbtn',
                        content: this.l10n.getConstant('CancelButton') }
                }],
            content: this.renderChooserList(),
            width: 250,
            cssClass: this.parent.cssClass ? 'e-cc' + ' ' + this.parent.cssClass : 'e-cc',
            animationSettings: { effect: 'None' }
        });
        const isStringTemplate = 'isStringTemplate';
        this.dlgObj[isStringTemplate] = true;
        this.dlgObj.appendTo(this.dlgDiv);
        this.wireEvents();
    }
    renderChooserList() {
        this.mainDiv = this.parent.createElement('div', { className: 'e-main-div e-cc' });
        const searchDiv = this.parent.createElement('div', { className: 'e-cc-searchdiv e-cc e-input-group' });
        const ccsearchele = this.parent.createElement('input', {
            className: 'e-ccsearch e-cc e-input',
            attrs: { placeholder: this.l10n.getConstant('Search') }
        });
        const ccsearchicon = this.parent.createElement('span', {
            className: 'e-ccsearch-icon e-icons e-cc e-input-group-icon',
            attrs: { title: this.l10n.getConstant('Search') }
        });
        const conDiv = this.parent.createElement('div', { className: 'e-cc-contentdiv' });
        this.innerDiv = this.parent.createElement('div', { className: 'e-innerdiv e-cc' });
        searchDiv.appendChild(ccsearchele);
        searchDiv.appendChild(ccsearchicon);
        this.searchBoxObj = new SearchBox(ccsearchele);
        const innerDivContent = this.refreshCheckboxList(this.parent.getColumns());
        this.innerDiv.appendChild(innerDivContent);
        conDiv.appendChild(this.innerDiv);
        this.mainDiv.appendChild(searchDiv);
        this.mainDiv.appendChild(conDiv);
        return this.mainDiv;
    }
    confirmDlgBtnClick(args) {
        this.stateChangeColumns = [];
        this.changedStateColumns = [];
        this.changedColumns = (this.changedColumns.length > 0) ? this.changedColumns : this.unchangedColumns;
        this.changedColumnState(this.changedColumns);
        const uncheckedLength = this.ulElement.querySelector('.e-uncheck') &&
            this.ulElement.querySelectorAll('.e-uncheck:not(.e-selectall)').length;
        if (!isNullOrUndefined(args)) {
            if (uncheckedLength < this.parent.getColumns().length) {
                if (this.hideColumn.length) {
                    this.columnStateChange(this.hideColumn, false);
                }
                if (this.showColumn.length) {
                    this.columnStateChange(this.showColumn, true);
                }
                this.getShowHideService.setVisible(this.stateChangeColumns, this.changedStateColumns);
                this.clearActions();
                this.parent.notify(tooltipDestroy, { module: 'edit' });
                if (this.parent.getCurrentViewRecords().length === 0) {
                    const emptyRowCell = this.parent.element.querySelector('.e-emptyrow').querySelector('td');
                    emptyRowCell.setAttribute('colSpan', this.parent.getVisibleColumns().length.toString());
                }
            }
        }
    }
    onResetColumns(e) {
        if (e.requestType === 'columnstate') {
            this.resetColumnState();
            return;
        }
    }
    resetColumnState() {
        this.showColumn = [];
        this.hideColumn = [];
        this.hideDialog();
    }
    changedColumnState(changedColumns) {
        for (let index = 0; index < changedColumns.length; index++) {
            const colUid = changedColumns[index];
            const currentCol = this.parent.getColumnByUid(colUid);
            this.changedStateColumns.push(currentCol);
        }
    }
    columnStateChange(stateColumns, state) {
        for (let index = 0; index < stateColumns.length; index++) {
            const colUid = stateColumns[index];
            const currentCol = this.parent.getColumnByUid(colUid);
            if (currentCol.type !== 'checkbox') {
                currentCol.visible = state;
            }
            this.stateChangeColumns.push(currentCol);
        }
    }
    clearActions() {
        this.resetColumnState();
        this.addcancelIcon();
    }
    clearBtnClick() {
        this.clearActions();
        this.parent.notify(columnChooserCancelBtnClick, { dialog: this.dlgObj });
    }
    checkstatecolumn(isChecked, coluid, selectAll$$1 = false) {
        if (isChecked) {
            if (this.hideColumn.indexOf(coluid) !== -1) {
                this.hideColumn.splice(this.hideColumn.indexOf(coluid), 1);
            }
            if (this.showColumn.indexOf(coluid) === -1) {
                this.showColumn.push(coluid);
            }
        }
        else {
            if (this.showColumn.indexOf(coluid) !== -1) {
                this.showColumn.splice(this.showColumn.indexOf(coluid), 1);
            }
            if (this.hideColumn.indexOf(coluid) === -1) {
                this.hideColumn.push(coluid);
            }
        }
        if (selectAll$$1) {
            if (!isChecked) {
                this.changedColumns.push(coluid);
            }
            else {
                this.unchangedColumns.push(coluid);
            }
        }
        else if (this.changedColumns.indexOf(coluid) !== -1) {
            this.changedColumns.splice(this.changedColumns.indexOf(coluid), 1);
        }
        else {
            this.changedColumns.push(coluid);
        }
    }
    columnChooserSearch(searchVal) {
        let clearSearch = false;
        let fltrCol;
        let okButton;
        const buttonEle = this.dlgDiv.querySelector('.e-footer-content');
        const selectedCbox = this.ulElement.querySelector('.e-check') &&
            this.ulElement.querySelectorAll('.e-check:not(.e-selectall)').length;
        this.isInitialOpen = true;
        if (buttonEle) {
            okButton = buttonEle.querySelector('.e-btn').ej2_instances[0];
        }
        if (searchVal === '') {
            this.removeCancelIcon();
            fltrCol = this.getColumns();
            clearSearch = true;
        }
        else {
            fltrCol = new DataManager(this.getColumns()).executeLocal(new Query()
                .where('headerText', this.searchOperator, searchVal, true, this.parent.columnChooserSettings.ignoreAccent));
        }
        if (fltrCol.length) {
            this.innerDiv.innerHTML = ' ';
            this.innerDiv.classList.remove('e-ccnmdiv');
            this.innerDiv.appendChild(this.refreshCheckboxList(fltrCol));
            if (!clearSearch) {
                this.addcancelIcon();
                this.refreshCheckboxButton();
            }
            else {
                if (okButton && selectedCbox) {
                    okButton.disabled = false;
                }
            }
        }
        else {
            const nMatchele = this.parent.createElement('span', { className: 'e-cc e-nmatch' });
            nMatchele.innerHTML = this.l10n.getConstant('Matchs');
            this.innerDiv.innerHTML = ' ';
            this.innerDiv.appendChild(nMatchele);
            this.innerDiv.classList.add('e-ccnmdiv');
            if (okButton) {
                okButton.disabled = true;
            }
        }
        this.flag = true;
        this.stopTimer();
    }
    wireEvents() {
        EventHandler.add(this.dlgObj.element, 'click', this.checkBoxClickHandler, this);
        EventHandler.add(this.searchBoxObj.searchBox, 'keyup', this.columnChooserManualSearch, this);
        this.searchBoxObj.wireEvent();
    }
    unWireEvents() {
        if (this.parent.isDestroyed) {
            return;
        }
        if (this.dlgObj.element) {
            EventHandler.remove(this.dlgObj.element, 'click', this.checkBoxClickHandler);
        }
        EventHandler.remove(this.searchBoxObj.searchBox, 'keyup', this.columnChooserManualSearch);
        this.searchBoxObj.unWireEvent();
    }
    checkBoxClickHandler(e) {
        let checkstate;
        const elem = parentsUntil(e.target, 'e-checkbox-wrapper');
        if (elem) {
            const selectAll$$1 = elem.querySelector('.e-selectall');
            if (selectAll$$1) {
                this.updateSelectAll(!elem.querySelector('.e-check'));
            }
            else {
                toogleCheckbox(elem.parentElement);
            }
            elem.querySelector('.e-chk-hidden').focus();
            if (elem.querySelector('.e-check')) {
                checkstate = true;
            }
            else if (elem.querySelector('.e-uncheck')) {
                checkstate = false;
            }
            else {
                return;
            }
            this.updateIntermediateBtn();
            const columnUid = parentsUntil(elem, 'e-ccheck').getAttribute('uid');
            const column = this.parent.getColumns();
            if (columnUid === 'grid-selectAll') {
                this.changedColumns = [];
                this.unchangedColumns = [];
                for (let i = 0; i < column.length; i++) {
                    if (column[i].showInColumnChooser) {
                        this.checkstatecolumn(checkstate, column[i].uid, true);
                    }
                }
            }
            else {
                this.checkstatecolumn(checkstate, columnUid);
            }
            this.refreshCheckboxButton();
        }
    }
    updateIntermediateBtn() {
        const cnt = this.ulElement.children.length - 1;
        let className = [];
        const elem = this.ulElement.children[0].querySelector('.e-frame');
        const selected = this.ulElement.querySelectorAll('.e-check:not(.e-selectall)').length;
        const btn = this.dlgObj.btnObj[0];
        btn.disabled = false;
        if (cnt === selected) {
            className = ['e-check'];
        }
        else if (selected) {
            className = ['e-stop'];
        }
        else {
            className = ['e-uncheck'];
            btn.disabled = true;
        }
        btn.dataBind();
        removeClass([elem], ['e-check', 'e-stop', 'e-uncheck']);
        addClass([elem], className);
    }
    updateSelectAll(checked) {
        const cBoxes = [].slice.call(this.ulElement.getElementsByClassName('e-frame'));
        for (const cBox of cBoxes) {
            removeAddCboxClasses(cBox, checked);
        }
    }
    refreshCheckboxButton() {
        const visibleCols = this.parent.getVisibleColumns();
        for (let i = 0; i < visibleCols.length; i++) {
            const columnUID = visibleCols[i].uid;
            if (this.prevShowedCols.indexOf(columnUID) === -1) {
                this.prevShowedCols.push(columnUID);
            }
        }
        for (let i = 0; i < this.hideColumn.length; i++) {
            const index = this.prevShowedCols.indexOf(this.hideColumn[i]);
            if (index !== -1) {
                this.prevShowedCols.splice(index, 1);
            }
        }
        const selected = this.showColumn.length !== 0 ? 1 : this.prevShowedCols.length;
        const btn = this.dlgDiv.querySelector('.e-footer-content').querySelector('.e-btn').ej2_instances[0];
        btn.disabled = false;
        const srchShowCols = [];
        const searchData = [].slice.call(this.parent.element.getElementsByClassName('e-cc-chbox'));
        for (let i = 0, itemsLen = searchData.length; i < itemsLen; i++) {
            const element = searchData[i];
            const columnUID = parentsUntil(element, 'e-ccheck').getAttribute('uid');
            srchShowCols.push(columnUID);
        }
        const hideCols = this.showColumn.filter((column) => srchShowCols.indexOf(column) !== -1);
        if (selected === 0 && hideCols.length === 0) {
            btn.disabled = true;
        }
        btn.dataBind();
    }
    refreshCheckboxList(gdCol) {
        this.ulElement = this.parent.createElement('ul', { className: 'e-ccul-ele e-cc' });
        const selectAllValue = this.l10n.getConstant('SelectAll');
        const cclist = this.parent.createElement('li', { className: 'e-cclist e-cc e-cc-selectall' });
        const selectAll$$1 = this.createCheckBox(selectAllValue, false, 'grid-selectAll');
        if (gdCol.length) {
            selectAll$$1.querySelector('.e-checkbox-wrapper').firstElementChild.classList.add('e-selectall');
            selectAll$$1.querySelector('.e-frame').classList.add('e-selectall');
            this.checkState(selectAll$$1.querySelector('.e-icons'), true);
            cclist.appendChild(selectAll$$1);
            this.ulElement.appendChild(cclist);
        }
        for (let i = 0; i < gdCol.length; i++) {
            const columns = gdCol[i];
            this.renderCheckbox(columns);
        }
        return this.ulElement;
    }
    refreshCheckboxState() {
        this.dlgObj.element.querySelector('.e-cc.e-input').value = '';
        this.columnChooserSearch('');
        const gridObject = this.parent;
        const currentCheckBoxColls = this.dlgObj.element.querySelectorAll('.e-cc-chbox:not(.e-selectall)');
        for (let i = 0, itemLen = currentCheckBoxColls.length; i < itemLen; i++) {
            const element = currentCheckBoxColls[i];
            let columnUID;
            if (this.parent.childGrid || this.parent.detailTemplate) {
                columnUID = parentsUntil(this.dlgObj.element.querySelectorAll('.e-cc-chbox:not(.e-selectall)')[i], 'e-ccheck').getAttribute('uid');
            }
            else {
                columnUID = parentsUntil(element, 'e-ccheck').getAttribute('uid');
            }
            const column = gridObject.getColumnByUid(columnUID);
            const uncheck = [].slice.call(element.parentElement.getElementsByClassName('e-uncheck'));
            if (column.visible && !uncheck.length) {
                element.checked = true;
                this.checkState(element.parentElement.querySelector('.e-icons'), true);
            }
            else {
                element.checked = false;
                this.checkState(element.parentElement.querySelector('.e-icons'), false);
            }
        }
    }
    checkState(element, state) {
        if (state) {
            classList(element, ['e-check'], ['e-uncheck']);
        }
        else {
            classList(element, ['e-uncheck'], ['e-check']);
        }
    }
    createCheckBox(label, checked, uid) {
        const cbox = checked ? this.cBoxTrue.cloneNode(true) : this.cBoxFalse.cloneNode(true);
        cbox.querySelector('.e-label').innerHTML = label;
        return createCboxWithWrap(uid, cbox, 'e-ccheck');
    }
    renderCheckbox(column) {
        let cclist;
        let hideColState;
        let showColState;
        if (column.showInColumnChooser) {
            cclist = this.parent.createElement('li', { className: 'e-cclist e-cc', styles: 'list-style:None', id: 'e-ccli_' + column.uid });
            hideColState = this.hideColumn.indexOf(column.uid) === -1 ? false : true;
            showColState = this.showColumn.indexOf(column.uid) === -1 ? false : true;
            const cccheckboxlist = this.createCheckBox(column.headerText, (column.visible && !hideColState) || showColState, column.uid);
            cclist.appendChild(cccheckboxlist);
            this.ulElement.appendChild(cclist);
        }
        if (this.isInitialOpen) {
            this.updateIntermediateBtn();
        }
    }
    columnChooserManualSearch(e) {
        this.addcancelIcon();
        this.searchValue = e.target.value;
        this.stopTimer();
        this.startTimer(e);
    }
    startTimer(e) {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const proxy = this;
        const interval = !proxy.flag && e.keyCode !== 13 ? 500 : 0;
        this.timer = window.setInterval(() => { proxy.columnChooserSearch(proxy.searchValue); }, interval);
    }
    stopTimer() {
        window.clearInterval(this.timer);
    }
    addcancelIcon() {
        this.dlgDiv.querySelector('.e-cc.e-ccsearch-icon').classList.add('e-cc-cancel');
    }
    removeCancelIcon() {
        this.dlgDiv.querySelector('.e-cc.e-ccsearch-icon').classList.remove('e-cc-cancel');
    }
    mOpenDlg() {
        if (Browser.isDevice) {
            this.dlgObj.element.querySelector('.e-cc-searchdiv').classList.remove('e-input-focus');
            this.dlgObj.element.querySelectorAll('.e-cc-chbox')[0].focus();
        }
    }
    // internally use
    getModuleName() {
        return 'columnChooser';
    }
    hideOpenedDialog() {
        const openCC = [].slice.call(document.getElementsByClassName('e-ccdlg')).filter((dlgEle) => dlgEle.classList.contains('e-popup-open'));
        for (let i = 0, dlgLen = openCC.length; i < dlgLen; i++) {
            if (openCC[i].classList.contains('e-dialog') || this.parent.element.id + '_ccdlg' !== openCC[i].id) {
                openCC[i].ej2_instances[0].hide();
            }
        }
    }
    beforeOpenColumnChooserEvent() {
        const args1 = {
            requestType: 'beforeOpenColumnChooser', element: this.parent.element,
            columns: this.getColumns(), cancel: false,
            searchOperator: this.parent.columnChooserSettings.operator
        };
        this.parent.trigger(beforeOpenColumnChooser, args1);
        this.searchOperator = args1.searchOperator;
        return args1;
    }
}

/**
 * @hidden
 * `ExportHelper` for `PdfExport` & `ExcelExport`
 */
class ExportHelper {
    constructor(parent, foreignKeyData) {
        this.hideColumnInclude = false;
        this.foreignKeyData = {};
        this.parent = parent;
        if (!parent.parentDetails && foreignKeyData) {
            this.foreignKeyData = foreignKeyData;
        }
    }
    static getQuery(parent, data) {
        const query = data.generateQuery(true).requiresCount();
        if (data.isRemote()) {
            if (parent.groupSettings.enableLazyLoading && parent.groupSettings.columns.length) {
                query.lazyLoad = [];
            }
            else {
                query.take(parent.pageSettings.totalRecordsCount);
            }
        }
        return query;
    }
    getFData(value, column) {
        const foreignKeyData = getForeignData(column, {}, value, this.foreignKeyData[column.field])[0];
        return foreignKeyData;
    }
    getGridRowModel(columns, dataSource, gObj, startIndex = 0) {
        const rows = [];
        const length = dataSource.length;
        if (length) {
            for (let i = 0; i < length; i++, startIndex++) {
                const options = { isExpand: false };
                options.data = dataSource[i];
                options.index = startIndex;
                if (gObj.childGrid) {
                    if (gObj.hierarchyPrintMode === 'All') {
                        options.isExpand = true;
                    }
                    else if (gObj.hierarchyPrintMode === 'Expanded' &&
                        this.parent.expandedRows && this.parent.expandedRows[startIndex]) {
                        options.isExpand = gObj.expandedRows[startIndex].isExpand;
                    }
                }
                const row = new Row(options);
                row.cells = this.generateCells(columns, gObj);
                rows.push(row);
            }
            this.processColumns(rows);
        }
        return rows;
    }
    generateCells(columns, gObj) {
        const cells = [];
        if (gObj.childGridLevel) {
            const len = gObj.childGridLevel;
            for (let i = 0; len > i; i++) {
                cells.push(this.generateCell({}, CellType.Indent));
            }
        }
        for (const col of columns) {
            cells.push(this.generateCell(col, CellType.Data));
        }
        return cells;
    }
    getColumnData(gridObj) {
        const columnPromise = [];
        let promise;
        const fColumns = gridObj.getForeignKeyColumns();
        if (fColumns.length) {
            for (let i = 0; i < fColumns.length; i++) {
                const colData = ('result' in fColumns[i].dataSource) ?
                    new DataManager(fColumns[i].dataSource.result) :
                    fColumns[i].dataSource;
                columnPromise.push(colData.executeQuery(new Query()));
            }
            promise = Promise.all(columnPromise).then((e) => {
                for (let j = 0; j < fColumns.length; j++) {
                    this.foreignKeyData[fColumns[j].field] = e[j].result;
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            });
        }
        return promise;
    }
    getHeaders(columns, isHideColumnInclude) {
        if (isHideColumnInclude) {
            this.hideColumnInclude = true;
        }
        else {
            this.hideColumnInclude = false;
        }
        this.colDepth = measureColumnDepth(columns);
        let rows = [];
        for (let i = 0; i < this.colDepth; i++) {
            rows[i] = new Row({});
            rows[i].cells = [];
        }
        rows = this.processColumns(rows);
        rows = this.processHeaderCells(rows, columns);
        return { rows, columns: this.generateActualColumns(columns) };
    }
    getConvertedWidth(input) {
        const value = parseFloat(input);
        return (input.indexOf('%') !== -1) ? (this.parent.element.getBoundingClientRect().width * value / 100) : value;
    }
    generateActualColumns(columns, actualColumns = []) {
        for (const column of columns) {
            if (column.commands) {
                continue;
            }
            if (!column.columns) {
                if (column.visible || this.hideColumnInclude) {
                    actualColumns.push(column);
                }
            }
            else {
                if (column.visible || this.hideColumnInclude) {
                    const colSpan = this.getCellCount(column, 0);
                    if (colSpan !== 0) {
                        this.generateActualColumns(column.columns, actualColumns);
                    }
                }
            }
        }
        return actualColumns;
    }
    processHeaderCells(rows, cols) {
        const columns = cols;
        for (let i = 0; i < columns.length; i++) {
            if (!columns[i].commands) {
                rows = this.appendGridCells(columns[i], rows, 0);
            }
        }
        return rows;
    }
    appendGridCells(cols, gridRows, index) {
        if (!cols.columns && (cols.visible !== false || this.hideColumnInclude) && !cols.commands) {
            gridRows[index].cells.push(this.generateCell(cols, CellType.Header, this.colDepth - index, index));
        }
        else if (cols.columns) {
            const colSpan = this.getCellCount(cols, 0);
            if (colSpan) {
                gridRows[index].cells.push(new Cell({
                    cellType: CellType.StackedHeader, column: cols, colSpan: colSpan
                }));
            }
            let isIgnoreFirstCell;
            for (let i = 0, len = cols.columns.length; i < len; i++) {
                if (cols.columns[i].visible && !isIgnoreFirstCell) {
                    isIgnoreFirstCell = true;
                }
                gridRows = this.appendGridCells(cols.columns[i], gridRows, index + 1);
            }
        }
        return gridRows;
    }
    generateCell(gridColumn, cellType, rowSpan, rowIndex) {
        const option = {
            'visible': gridColumn.visible,
            'isDataCell': cellType === CellType.Data,
            'column': gridColumn,
            'cellType': cellType,
            'rowSpan': rowSpan,
            'index': rowIndex
        };
        if (!option.rowSpan || option.rowSpan < 2) {
            delete option.rowSpan;
        }
        return new Cell(option);
    }
    processColumns(rows) {
        //TODO: generate dummy column for group, detail, stacked row here; ensureColumns here
        const gridObj = this.parent;
        let columnIndexes = [];
        if (gridObj.enableColumnVirtualization) {
            columnIndexes = gridObj.getColumnIndexesInView();
        }
        for (let i = 0, len = rows.length; i < len; i++) {
            if (gridObj.allowGrouping) {
                for (let j = 0, len = gridObj.groupSettings.columns.length - 1; j < len; j++) {
                    if (gridObj.enableColumnVirtualization && columnIndexes.indexOf(j) === -1) {
                        continue;
                    }
                    rows[i].cells.splice(0, 0, this.generateCell({}, CellType.HeaderIndent));
                }
            }
        }
        return rows;
    }
    getCellCount(column, count) {
        if (column.columns) {
            for (let i = 0; i < column.columns.length; i++) {
                count = this.getCellCount(column.columns[i], count);
            }
        }
        else {
            if (column.visible || this.hideColumnInclude) {
                count++;
            }
        }
        return count;
    }
    checkAndExport(gridPool, globalResolve) {
        const bool = Object.keys(gridPool).some((key) => {
            return !gridPool[key];
        });
        if (!bool) {
            globalResolve();
        }
    }
    failureHandler(gridPool, childGridObj, resolve) {
        return () => {
            gridPool[childGridObj.id] = true;
            this.checkAndExport(gridPool, resolve);
        };
    }
    createChildGrid(gObj, row, exportType, gridPool) {
        const childGridObj = new Grid(this.parent.detailRowModule.getGridModel(gObj, row, exportType));
        gObj.isPrinting = false;
        const parent = 'parentDetails';
        childGridObj[parent] = {
            parentID: gObj.element.id,
            parentPrimaryKeys: gObj.getPrimaryKeyFieldNames(),
            parentKeyField: gObj.childGrid.queryString,
            parentKeyFieldValue: getValue(childGridObj.queryString, row.data),
            parentRowData: row.data
        };
        const exportId = getUid('child-grid');
        const element = createElement('div', {
            id: exportId, styles: 'display: none'
        });
        document.body.appendChild(element);
        childGridObj.id = exportId;
        gridPool[exportId] = false;
        childGridObj.isExportGrid = true;
        return { childGrid: childGridObj, element };
    }
    getGridExportColumns(columns) {
        const actualGridColumns = [];
        for (let i = 0, gridColumns = columns; i < gridColumns.length; i++) {
            if (gridColumns[i].type !== 'checkbox') {
                actualGridColumns.push(gridColumns[i]);
            }
        }
        return actualGridColumns;
    }
    /**
     * Gets the foreignkey data.
     *
     * @returns {ForeignKeyFormat} returns the foreignkey data
     * @hidden
     */
    getForeignKeyData() {
        return this.foreignKeyData;
    }
}
/**
 * @hidden
 * `ExportValueFormatter` for `PdfExport` & `ExcelExport`
 */
class ExportValueFormatter {
    constructor(culture) {
        this.valueFormatter = new ValueFormatter(culture);
        this.internationalization = new Internationalization(culture);
    }
    returnFormattedValue(args, customFormat) {
        if (!isNullOrUndefined(args.value) && args.value) {
            return this.valueFormatter.getFormatFunction(customFormat)(args.value);
        }
        else {
            return '';
        }
    }
    /**
     * Used to format the exporting cell value
     *
     * @param  {ExportHelperArgs} args - Specifies cell details.
     * @returns {string} returns formated value
     * @hidden
     */
    formatCellValue(args) {
        if (args.isForeignKey) {
            args.value = getValue(args.column.foreignKeyValue, getForeignData(args.column, {}, args.value)[0]);
        }
        if (args.column.type === 'number' && args.column.format !== undefined && args.column.format !== '') {
            return args.value || args.value === 0 ?
                this.internationalization.getNumberFormat({ format: args.column.format })(args.value) : '';
        }
        else if (args.column.type === 'boolean' && args.value !== '') {
            return args.value ? 'true' : 'false';
            /* tslint:disable-next-line:max-line-length */
        }
        else if ((args.column.type === 'date' || args.column.type === 'datetime' || args.column.type === 'time') && args.column.format !== undefined) {
            if (typeof args.value === 'string') {
                args.value = new Date(args.value);
            }
            if (typeof args.column.format === 'string') {
                let format;
                const cFormat = args.column.format;
                if (args.column.type === 'date') {
                    format = { type: 'date', skeleton: cFormat };
                }
                else if (args.column.type === 'time') {
                    format = { type: 'time', skeleton: cFormat };
                }
                else {
                    format = { type: 'dateTime', skeleton: cFormat };
                }
                return this.returnFormattedValue(args, format);
            }
            else {
                if (args.column.format instanceof Object && args.column.format.type === undefined) {
                    return (args.value.toString());
                }
                else {
                    let customFormat;
                    if (args.column.type === 'date') {
                        customFormat = {
                            type: args.column.format.type,
                            format: args.column.format.format, skeleton: args.column.format.skeleton
                        };
                    }
                    else if (args.column.type === 'time') {
                        customFormat = { type: 'time', format: args.column.format.format, skeleton: args.column.format.skeleton };
                    }
                    else {
                        customFormat = { type: 'dateTime', format: args.column.format.format, skeleton: args.column.format.skeleton };
                    }
                    return this.returnFormattedValue(args, customFormat);
                }
            }
        }
        else {
            if ((!isNullOrUndefined(args.column.type) && !isNullOrUndefined(args.value)) || !isNullOrUndefined(args.value)) {
                return (args.value).toString();
            }
            else {
                return '';
            }
        }
    }
}

/**
 * @hidden
 * `ExcelExport` module is used to handle the Excel export action.
 */
class ExcelExport {
    /**
     * Constructor for the Grid Excel Export module.
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {ServiceLocator} locator - specifies the ServiceLocator
     * @hidden
     */
    constructor(parent, locator) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.book = {};
        this.workSheet = [];
        this.rows = [];
        this.columns = [];
        this.styles = [];
        this.rowLength = 1;
        this.expType = 'AppendToSheet';
        this.includeHiddenColumn = false;
        this.isCsvExport = false;
        this.isElementIdChanged = false;
        this.gridPool = {};
        this.sheet = {};
        this.parent = parent;
        this.helper = new ExportHelper(parent);
        this.locator = locator;
        this.l10n = this.locator.getService('localization');
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     */
    getModuleName() {
        return 'ExcelExport';
    }
    init(gObj) {
        if (gObj.element !== null && gObj.element.id === '') {
            gObj.element.id = new Date().toISOString();
            this.isElementIdChanged = true;
        }
        this.parent = gObj;
        if (this.parent.isDestroyed) {
            return;
        }
        this.isExporting = undefined;
        this.book = {};
        this.workSheet = [];
        this.rows = [];
        this.columns = [];
        this.styles = [];
        this.rowLength = 1;
        this.footer = undefined;
        this.expType = 'AppendToSheet';
        this.includeHiddenColumn = false;
        this.exportValueFormatter = new ExportValueFormatter(gObj.locale);
        gObj.id = getUid('main-grid');
        this.gridPool[gObj.id] = false;
    }
    /**
     * Export Grid to Excel file.
     *
     * @param {IGrid} grid - Defines the grid.
     * @param  {exportProperties} exportProperties - Defines the export properties of the Grid.
     * @param  {isMultipleExport} isMultipleExport - Defines is multiple Grid's are exported.
     * @param  {Workbook} workbook - Defined the Workbook if multiple Grid is exported.
     * @param  {boolean} isCsv - true if export to CSV.
     * @param {boolean} isBlob - true if isBlob is enabled.
     * @returns {Promise<any>} - Returns the map for export.
     */
    // eslint-disable-next-line
    Map(grid, exportProperties, isMultipleExport, workbook, isCsv, isBlob) {
        const gObj = grid;
        const cancel = 'cancel';
        const isBlb = 'isBlob';
        const csv = 'isCsv';
        const workbk = 'workbook';
        const isMultiEx = 'isMultipleExport';
        this.gridPool = {};
        if (grid.childGrid && !(!isNullOrUndefined(exportProperties) && exportProperties.hierarchyExportMode === 'None')) {
            grid.expandedRows = getPrintGridModel(grid).expandedRows;
        }
        const args = {
            requestType: 'beforeExcelExport', gridObject: gObj, cancel: false,
            isMultipleExport: isMultipleExport, workbook: workbook, isCsv: isCsv, isBlob: isBlob
        };
        gObj.trigger(beforeExcelExport, args);
        if (args[cancel]) {
            return new Promise((resolve) => {
                return resolve();
            });
        }
        this.parent.log('exporting_begin', this.getModuleName());
        this.data = new Data(gObj);
        this.isExporting = true;
        this.isBlob = args[isBlb];
        if (args[csv]) {
            this.isCsvExport = args[csv];
        }
        else {
            this.isCsvExport = false;
        }
        if (isExportColumns(exportProperties)) {
            updateColumnTypeForExportColumns(exportProperties, gObj);
        }
        return this.processRecords(gObj, exportProperties, args[isMultiEx], args[workbk]);
    }
    exportingSuccess(resolve) {
        this.isExporting = false;
        this.parent.trigger(excelExportComplete, this.isBlob ? { promise: this.blobPromise } : {});
        this.parent.log('exporting_complete', this.getModuleName());
        resolve(this.book);
        this.sheet.images = [];
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    processRecords(gObj, exportProperties, isMultipleExport, workbook) {
        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) &&
            exportProperties.dataSource instanceof DataManager) {
            const query = exportProperties.query ? exportProperties.query : new Query();
            if (isNullOrUndefined(query.isCountRequired) || gObj.aggregates) {
                query.isCountRequired = true;
            }
            return new Promise((resolve) => {
                const dataManager = exportProperties.dataSource.executeQuery(query);
                dataManager.then((r) => {
                    this.init(gObj);
                    this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, r).then(() => {
                        this.exportingSuccess(resolve);
                    });
                });
            });
        }
        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {
            return new Promise((resolve) => {
                this.init(gObj);
                this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, this.parent.getCurrentViewRecords());
                this.exportingSuccess(resolve);
            });
        }
        else {
            const allPromise = [];
            allPromise.push(this.data.getData({}, ExportHelper.getQuery(gObj, this.data)));
            allPromise.push(this.helper.getColumnData(gObj));
            return new Promise((resolve, reject) => {
                Promise.all(allPromise).then((e) => {
                    this.init(gObj);
                    this.processInnerRecords(gObj, exportProperties, isMultipleExport, workbook, e[0]).then(() => {
                        this.exportingSuccess(resolve);
                    });
                }).catch((e) => {
                    reject(this.book);
                    this.parent.trigger(actionFailure, e);
                });
            });
        }
    }
    processInnerRecords(gObj, exportProperties, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    isMultipleExport, workbook, r) {
        this.groupedColLength = gObj.groupSettings.columns.length;
        let blankRows = 5;
        let separator;
        let rows = [];
        const colDepth = measureColumnDepth(gObj.columns);
        const isExportPropertiesPresent = !isNullOrUndefined(exportProperties);
        if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.multipleExport)) {
            this.expType = (!isNullOrUndefined(exportProperties.multipleExport.type) ? exportProperties.multipleExport.type : 'AppendToSheet');
            if (!isNullOrUndefined(exportProperties.multipleExport.blankRows)) {
                blankRows = exportProperties.multipleExport.blankRows;
            }
        }
        if (isNullOrUndefined(workbook)) {
            this.workSheet = [];
            this.rows = [];
            this.columns = [];
            this.styles = [];
        }
        else if (this.expType === 'NewSheet') {
            this.workSheet = workbook.worksheets;
            this.rows = [];
            this.columns = [];
            this.styles = workbook.styles;
        }
        else {
            this.workSheet = [];
            this.rows = workbook.worksheets[0].rows;
            this.columns = workbook.worksheets[0].columns;
            this.styles = workbook.styles;
            this.rowLength = (this.rows[this.rows.length - 1].index + blankRows);
            this.rowLength++;
        }
        if (isExportPropertiesPresent) {
            if (!isNullOrUndefined(isMultipleExport)) {
                if (!isNullOrUndefined(exportProperties.header) && (isMultipleExport || this.expType === 'NewSheet')) {
                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));
                }
                if (!isNullOrUndefined(exportProperties.footer)) {
                    if (this.expType === 'AppendToSheet') {
                        if (!isMultipleExport) {
                            this.footer = JSON.parse(JSON.stringify(exportProperties.footer));
                        }
                    }
                    else {
                        this.footer = JSON.parse(JSON.stringify(exportProperties.footer));
                    }
                }
            }
            else {
                if (!isNullOrUndefined(exportProperties.header)) {
                    this.processExcelHeader(JSON.parse(JSON.stringify(exportProperties.header)));
                }
                if (!isNullOrUndefined(exportProperties.footer)) {
                    this.footer = JSON.parse(JSON.stringify(exportProperties.footer));
                }
            }
        }
        this.includeHiddenColumn = (isExportPropertiesPresent ? exportProperties.includeHiddenColumn : false);
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        return new Promise((resolve, reject) => {
            gObj.childGridLevel = 0;
            rows = this.processGridExport(gObj, exportProperties, r);
            this.globalResolve = resolve;
            this.gridPool[gObj.id] = true;
            this.helper.checkAndExport(this.gridPool, this.globalResolve);
        }).then(() => {
            const organisedRows = [];
            this.organiseRows(rows, rows[0].index, organisedRows);
            this.rows = this.rows.concat(organisedRows);
            //footer template add
            if (!isNullOrUndefined(this.footer)) {
                if ((this.expType === 'AppendToSheet' && !isMultipleExport) || (this.expType === 'NewSheet')) {
                    this.processExcelFooter(this.footer);
                }
            }
            if (this.columns.length > 0) {
                this.sheet.columns = this.columns;
            }
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            this.sheet.rows = this.rows;
            this.sheet.enableRtl = this.parent.enableRtl;
            if (this.parent.allowFiltering && gObj.getVisibleColumns().length && isExportPropertiesPresent &&
                exportProperties.enableFilter) {
                const headerRowLen = exportProperties.header ? exportProperties.header.headerRows ||
                    exportProperties.header.rows.length : 0;
                const autoFilters = {
                    row: colDepth + headerRowLen, column: this.groupedColLength ? this.groupedColLength + 1 :
                        this.sheet.columns[0].index, lastRow: this.sheet.rows.length, lastColumn: this.sheet.columns.length
                };
                this.sheet.autoFilters = autoFilters;
            }
            this.workSheet.push(this.sheet);
            this.book.worksheets = this.workSheet;
            this.book.styles = this.styles;
            gObj.notify('finalPageSetup', this.book);
            if (!isMultipleExport) {
                if (this.isCsvExport) {
                    if (isExportPropertiesPresent && !isNullOrUndefined(exportProperties.separator)
                        && exportProperties.separator !== ',') {
                        separator = exportProperties.separator;
                    }
                    const book = new Workbook(this.book, 'csv', gObj.locale, gObj.currencyCode, separator);
                    if (!this.isBlob) {
                        if (isExportPropertiesPresent && exportProperties.fileName) {
                            book.save(exportProperties.fileName);
                        }
                        else {
                            book.save('Export.csv');
                        }
                    }
                    else {
                        this.blobPromise = book.saveAsBlob('text/csv');
                    }
                }
                else {
                    const book = new Workbook(this.book, 'xlsx', gObj.locale, gObj.currencyCode);
                    if (!this.isBlob) {
                        if (isExportPropertiesPresent && exportProperties.fileName) {
                            book.save(exportProperties.fileName);
                        }
                        else {
                            book.save('Export.xlsx');
                        }
                    }
                    else {
                        this.blobPromise = book.saveAsBlob('application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
                    }
                }
                if (this.isElementIdChanged) {
                    gObj.element.id = '';
                }
                delete gObj.expandedRows;
            }
            return workbook;
        });
    }
    organiseRows(rows, initialIndex, organisedRows) {
        if (!rows.length) {
            return initialIndex;
        }
        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            const childRows = row.childRows;
            if (childRows) {
                row.index = initialIndex++;
                delete row.childRows;
                organisedRows.push(row);
                initialIndex = this.organiseRows(childRows, initialIndex, organisedRows);
            }
            else {
                row.index = initialIndex++;
                organisedRows.push(row);
            }
        }
        return initialIndex;
    }
    processGridExport(gObj, exportProperties, r) {
        let excelRows = [];
        const isFrozen = this.parent.isFrozenGrid() && !this.parent.getFrozenColumns();
        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.theme)) {
            this.theme = exportProperties.theme;
        }
        if (gObj.childGrid && !isNullOrUndefined(exportProperties)) {
            gObj.hierarchyPrintMode = exportProperties.hierarchyExportMode || 'Expanded';
        }
        const helper = new ExportHelper(gObj, this.helper.getForeignKeyData());
        const gColumns = isExportColumns(exportProperties) ?
            prepareColumns(exportProperties.columns, gObj.enableColumnVirtualization) :
            helper.getGridExportColumns(isFrozen ? gObj.getColumns() : gObj.columns);
        const headerRow = helper.getHeaders(gColumns, this.includeHiddenColumn);
        const groupIndent = gObj.groupSettings.columns.length ? gObj.groupSettings.columns.length - 1 : 0;
        excelRows = this.processHeaderContent(gObj, headerRow, groupIndent, excelRows);
        // eslint-disable-next-line max-len
        if (!isNullOrUndefined(exportProperties) && !isNullOrUndefined(exportProperties.dataSource) && !(exportProperties.dataSource instanceof DataManager)) {
            // eslint-disable-next-line max-len
            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, exportProperties.dataSource, excelRows, helper);
        }
        else if (!isNullOrUndefined(exportProperties) && exportProperties.exportType === 'CurrentPage') {
            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, gObj.currentViewData, excelRows, helper);
        }
        else {
            excelRows = this.processRecordContent(gObj, r, headerRow, exportProperties, undefined, excelRows, helper);
        }
        gObj.notify(exportDataBound, { excelRows: excelRows, type: 'excel' });
        return excelRows;
    }
    processRecordContent(gObj, returnType, headerRow, exportProperties, currentViewRecords, excelRow, helper) {
        let record;
        if (!isNullOrUndefined(currentViewRecords) && currentViewRecords.length) {
            record = currentViewRecords;
        }
        else {
            record = returnType.result;
        }
        if (!isNullOrUndefined(record.level)) {
            this.processGroupedRows(gObj, record, headerRow, record.level, 0, exportProperties, excelRow, helper);
        }
        else {
            this.processRecordRows(gObj, record, headerRow, 0, 0, exportProperties, excelRow, helper);
        }
        if (!isNullOrUndefined(returnType.aggregates)) {
            if (!isNullOrUndefined(currentViewRecords)) {
                this.processAggregates(gObj, returnType.result, excelRow, currentViewRecords);
            }
            else {
                const result = returnType.result.GroupGuid ?
                    returnType.result.records : returnType.result;
                this.processAggregates(gObj, result, excelRow);
            }
        }
        return excelRow;
    }
    processGroupedRows(
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    gObj, dataSource, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {
        for (const item of dataSource) {
            const cells = [];
            const index = 1;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const cell = {};
            cell.index = (index + level) - 1;
            const col = gObj.getColumnByField(item.field);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const args = {
                value: item.key,
                column: col,
                style: undefined,
                isForeignKey: col.isForeignColumn()
            };
            let value = gObj.getColumnByField(item.field).headerText +
                ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : item.key) + ' - ';
            if (item.count > 1) {
                value += item.count + ' items';
            }
            else {
                value += item.count + ' item';
            }
            const cArgs = { captionText: value, type: this.isCsvExport ? 'CSV' : 'Excel', data: item };
            this.parent.trigger(exportGroupCaption, cArgs);
            cell.value = cArgs.captionText;
            cell.style = this.getCaptionThemeStyle(this.theme);
            if (!isNullOrUndefined(cArgs.style)) {
                cell.style = this.mergeOptions(cell.style, cArgs.style);
            }
            const captionModelGen = new CaptionSummaryModelGenerator(gObj);
            const groupCaptionSummaryRows = captionModelGen.generateRows(item);
            this.fillAggregates(gObj, groupCaptionSummaryRows, (dataSource.level + dataSource.childLevels) - 1, excelRows, this.rowLength);
            cells.push(cell);
            if (excelRows[excelRows.length - 1].cells.length > 0) {
                let lIndex = dataSource.level + dataSource.childLevels + groupCaptionSummaryRows[0].cells.length;
                let hIndex = 0;
                for (const tCell of excelRows[excelRows.length - 1].cells) {
                    if (tCell.index < lIndex) {
                        lIndex = tCell.index;
                    }
                    if (tCell.index > hIndex) {
                        hIndex = tCell.index;
                    }
                    if (cells[cells.length - 1].index !== tCell.index) {
                        cells.push(tCell);
                    }
                }
                if ((lIndex - cell.index) > 1) {
                    cell.colSpan = lIndex - cell.index;
                }
                while (hIndex < (headerRow.columns.length + level + dataSource.childLevels)) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    const sCell = {};
                    sCell.index = (hIndex + 1);
                    sCell.style = this.getCaptionThemeStyle(this.theme);
                    cells.push(sCell);
                    hIndex++;
                }
            }
            else {
                let span = 0;
                //Calculation for column span when group caption dont have aggregates
                for (const col of headerRow.columns) {
                    if (col.visible) {
                        span++;
                    }
                }
                cell.colSpan = (dataSource.childLevels + span);
            }
            excelRows[excelRows.length - 1].cells = cells;
            this.rowLength++;
            if (this.groupedColLength < 8 && level > 1) {
                const grouping = { outlineLevel: level - 1, isCollapsed: true };
                excelRows[excelRows.length - 1].grouping = grouping;
            }
            if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {
                this.processGroupedRows(gObj, item.items, headerRow, item.items.level, startIndex, excelExportProperties, excelRows, helper);
                this.processAggregates(gObj, item, excelRows, undefined, (level - 1) + dataSource.childLevels, true);
            }
            else {
                startIndex = this.processRecordRows(gObj, item.items, headerRow, (level - 1), startIndex, excelExportProperties, excelRows, helper);
                this.processAggregates(gObj, item, excelRows, undefined, (level - 1), true);
            }
        }
    }
    processRecordRows(gObj, record, headerRow, level, startIndex, excelExportProperties, excelRows, helper) {
        let index = 1;
        let cells = [];
        const columns = headerRow.columns;
        const rows = helper.getGridRowModel(columns, record, gObj, startIndex);
        for (const row of rows) {
            cells = [];
            startIndex++;
            index = 1;
            let templateRowHeight;
            for (let c = 0, len = row.cells.length; c < len; c++) {
                const gCell = row.cells[c];
                if (gCell.cellType !== CellType.Data) {
                    continue;
                }
                const column = gCell.column;
                const field = column.field;
                const cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';
                let value = !isNullOrUndefined(cellValue) ? cellValue : '';
                let fkData;
                if (column.isForeignColumn && column.isForeignColumn()) {
                    fkData = helper.getFData(value, column);
                    value = getValue(column.foreignKeyValue, fkData);
                }
                if (!isNullOrUndefined(value)) {
                    let cell = {};
                    const idx = index + level + gObj.childGridLevel;
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    let excelCellArgs = {
                        data: row.data, column: column, foreignKeyData: fkData,
                        value: value, style: undefined, colSpan: 1, cell: cell
                    };
                    gObj.trigger(excelQueryCellInfo, excelCellArgs);
                    if (!isNullOrUndefined(excelCellArgs.image) && !isNullOrUndefined(excelCellArgs.image.base64)) {
                        templateRowHeight = this.setImage(excelCellArgs, idx);
                        if (excelCellArgs.image.height && excelCellArgs.value !== '') {
                            templateRowHeight += 30;
                        }
                    }
                    if (!isNullOrUndefined(excelCellArgs.hyperLink)) {
                        excelCellArgs.cell.hyperlink = { target: excelCellArgs.hyperLink.target };
                        excelCellArgs.value = excelCellArgs.hyperLink.displayText || excelCellArgs.value;
                    }
                    cell = excelCellArgs.cell;
                    cell.index = idx;
                    cell.value = excelCellArgs.value;
                    if (excelCellArgs.data === '' && gObj.childGridLevel && index === 1) {
                        const style = {};
                        style.hAlign = 'left';
                        excelCellArgs = { style: style };
                        cell.colSpan = gObj.getVisibleColumns().length;
                        cell.value = this.l10n.getConstant('EmptyRecord');
                    }
                    if (excelCellArgs.colSpan > 1) {
                        cell.colSpan = excelCellArgs.colSpan;
                    }
                    if (!isNullOrUndefined(excelCellArgs.style)) {
                        const styleIndex = this.getColumnStyle(gObj, index + level);
                        cell.style = this.mergeOptions(this.styles[styleIndex], excelCellArgs.style);
                    }
                    else {
                        cell.style = { name: gObj.element.id + 'column' + (index + level) };
                    }
                    cells.push(cell);
                }
                index++;
            }
            const excelRow = { index: this.rowLength++, cells: cells };
            if (!isNullOrUndefined(templateRowHeight)) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                excelRow.height = templateRowHeight;
            }
            if (this.groupedColLength && this.groupedColLength < 8 && (level + 1) > 0) {
                excelRow.grouping = { outlineLevel: (level + 1), isCollapsed: true };
                excelRows.push(excelRow);
            }
            else {
                excelRows.push(excelRow);
            }
            if (row.isExpand && !isNullOrUndefined(gObj.childGrid)) {
                gObj.isPrinting = true;
                const exportType = (!isNullOrUndefined(excelExportProperties) && excelExportProperties.exportType) ?
                    excelExportProperties.exportType : 'AllPages';
                const returnVal = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);
                const childGridObj = returnVal.childGrid;
                const element = returnVal.element;
                childGridObj.actionFailure =
                    helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);
                childGridObj.childGridLevel = gObj.childGridLevel + 1;
                const args = { childGrid: childGridObj, row, exportProperties: excelExportProperties };
                this.parent.trigger(exportDetailDataBound, args);
                childGridObj.beforeDataBound = this.childGridCell(excelRow, childGridObj, excelExportProperties, row);
                childGridObj.appendTo(element);
            }
            gObj.notify(exportRowDataBound, { rowObj: row, type: 'excel', excelRows: excelRows });
        }
        return startIndex;
    }
    setImage(args, idx) {
        if (isNullOrUndefined(this.sheet.images)) {
            this.sheet.images = [];
        }
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const excelImage = {
            image: args.image.base64, row: this.rowLength, column: idx,
            lastRow: this.rowLength, lastColumn: idx
        };
        if (args.image.width && args.image.height) {
            excelImage.width = args.image.width;
            excelImage.height = args.image.height;
        }
        this.sheet.images.push(excelImage);
        this.columns[idx - 1].width = args.image.width || this.columns[idx - 1].width;
        return args.image.height || 50;
    }
    childGridCell(excelRow, childGridObj, excelExportProps, gRow) {
        return (result) => {
            childGridObj.beforeDataBound = null;
            result.cancel = true;
            if (result.result.length === 0) {
                result.result = [''];
            }
            excelRow.childRows = this.processGridExport(childGridObj, excelExportProps, result);
            const intent = this.parent.groupSettings.columns.length;
            const rows = excelRow.childRows;
            for (let i = 0; i < rows.length; i++) {
                rows[i].grouping = { outlineLevel: intent + childGridObj.childGridLevel,
                    isCollapsed: !gRow.isExpand, isHidden: !gRow.isExpand };
            }
            childGridObj.destroy();
            detach(childGridObj.element);
            this.gridPool[childGridObj.id] = true;
            this.helper.checkAndExport(this.gridPool, this.globalResolve);
            return excelRow;
        };
    }
    processAggregates(gObj, rec, excelRows, currentViewRecords, indent, byGroup) {
        const summaryModel = new SummaryModelGenerator(gObj);
        let columns = summaryModel.getColumns();
        columns = columns.filter((col) => { return isNullOrUndefined(col.commands) && col.type !== 'checkbox'; });
        if (gObj.aggregates.length && this.parent !== gObj) {
            gObj.aggregateModule.prepareSummaryInfo();
        }
        let data = undefined;
        if (!isNullOrUndefined(currentViewRecords)) {
            data = currentViewRecords;
        }
        else {
            data = rec;
        }
        if (indent === undefined) {
            indent = 0;
        }
        if (gObj.groupSettings.columns.length > 0 && byGroup) {
            const groupSummaryModel = new GroupSummaryModelGenerator(gObj);
            const groupSummaryRows = groupSummaryModel.generateRows(data, { level: data.level });
            if (groupSummaryRows.length > 0) {
                excelRows = this.fillAggregates(gObj, groupSummaryRows, indent, excelRows);
            }
        }
        else {
            indent = gObj.groupSettings.columns.length > 0 && !byGroup ? gObj.groupSettings.columns.length : indent;
            const sRows = summaryModel.generateRows(data, rec.aggregates, null, null, columns);
            if (sRows.length > 0 && !byGroup) {
                indent = gObj.groupSettings.columns.length ? indent - 1 : indent;
                excelRows = this.fillAggregates(gObj, sRows, indent, excelRows);
            }
        }
        return excelRows;
    }
    fillAggregates(gObj, rows, indent, excelRows, customIndex) {
        for (const row of rows) {
            const cells = [];
            let isEmpty = true;
            let index = 0;
            for (const cell of row.cells) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const eCell = {};
                if (cell.cellType === CellType.DetailFooterIntent) {
                    continue;
                }
                if ((cell.visible || this.includeHiddenColumn)) {
                    index++;
                    if (cell.isDataCell) {
                        isEmpty = false;
                        const footerTemplate = !isNullOrUndefined(cell.column.footerTemplate);
                        const groupFooterTemplate = !isNullOrUndefined(cell.column.groupFooterTemplate);
                        const groupCaptionTemplate = !isNullOrUndefined(cell.column.groupCaptionTemplate);
                        eCell.index = index + indent + gObj.childGridLevel;
                        if (footerTemplate) {
                            eCell.value = this.getAggreateValue(CellType.Summary, cell.column.footerTemplate, cell, row);
                        }
                        else if (groupFooterTemplate) {
                            eCell.value = this.getAggreateValue(CellType.GroupSummary, cell.column.groupFooterTemplate, cell, row);
                        }
                        else if (groupCaptionTemplate) {
                            eCell.value = this.getAggreateValue(CellType.CaptionSummary, cell.column.groupCaptionTemplate, cell, row);
                        }
                        else {
                            for (const key of Object.keys(row.data[cell.column.field])) {
                                if (key === cell.column.type) {
                                    if (!isNullOrUndefined(row.data[cell.column.field].Sum)) {
                                        eCell.value = row.data[cell.column.field][`${cell.column.field} - sum`];
                                    }
                                    else if (!isNullOrUndefined(row.data[cell.column.field].Average)) {
                                        eCell.value = row.data[cell.column.field][`${cell.column.field} - average`];
                                    }
                                    else if (!isNullOrUndefined(row.data[cell.column.field].Max)) {
                                        eCell.value = row.data[cell.column.field][`${cell.column.field} - max`];
                                    }
                                    else if (!isNullOrUndefined(row.data[cell.column.field].Min)) {
                                        eCell.value = row.data[cell.column.field][`${cell.column.field} - min`];
                                    }
                                    else if (!isNullOrUndefined(row.data[cell.column.field].Count)) {
                                        eCell.value = row.data[cell.column.field][`${cell.column.field} - count`];
                                    }
                                    else if (!isNullOrUndefined(row.data[cell.column.field].TrueCount)) {
                                        eCell.value = row.data[cell.column.field][`${cell.column.field} - truecount`];
                                    }
                                    else if (!isNullOrUndefined(row.data[cell.column.field].FalseCount)) {
                                        eCell.value = row.data[cell.column.field][`${cell.column.field} - falsecount`];
                                    }
                                    else if (!isNullOrUndefined(row.data[cell.column.field].Custom)) {
                                        eCell.value = row.data[cell.column.field].Custom;
                                    }
                                }
                            }
                        }
                        eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };
                        this.aggregateStyle(cell.column, eCell.style, cell.column.field);
                        const gridCellStyle = cell.attributes.style;
                        if (gridCellStyle.textAlign) {
                            eCell.style.hAlign = gridCellStyle.textAlign.toLowerCase();
                        }
                        const args = {
                            row: row,
                            type: footerTemplate ? 'Footer' : groupFooterTemplate ? 'GroupFooter' : 'GroupCaption',
                            style: eCell
                        };
                        this.parent.trigger(excelAggregateQueryCellInfo, args);
                        cells.push(eCell);
                    }
                    else {
                        if (customIndex === undefined) {
                            eCell.index = index + indent + gObj.childGridLevel;
                            eCell.style = this.getCaptionThemeStyle(this.theme); //{ name: gObj.element.id + 'column' + index };
                            cells.push(eCell);
                        }
                    }
                }
            }
            if (!isNullOrUndefined(customIndex)) {
                excelRows.push({ index: customIndex, cells: cells });
            }
            else {
                let row = {};
                if (this.groupedColLength < 8 && this.groupedColLength > 0) {
                    const dummyOutlineLevel = 'outlineLevel';
                    const dummyGrouping = 'grouping';
                    const level = excelRows[excelRows.length - 1][dummyGrouping][dummyOutlineLevel];
                    const grouping = { outlineLevel: level, isCollapsed: true };
                    row = { index: this.rowLength++, cells: cells, grouping };
                }
                else {
                    row = { index: this.rowLength++, cells: cells };
                }
                if (!isEmpty) {
                    excelRows.push(row);
                }
            }
        }
        return excelRows;
    }
    aggregateStyle(col, style, field) {
        const column = this.parent.getColumnByField(field);
        if (typeof col.format === 'object') {
            const format = col.format;
            style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;
            if (!isNullOrUndefined(format.type)) {
                style.type = format.type.toLowerCase();
            }
        }
        else {
            style.numberFormat = col.format;
        }
        if (!isNullOrUndefined(column) && isNullOrUndefined(style.type)) {
            style.type = column.type.toLowerCase();
        }
    }
    getAggreateValue(cellType, template, cell, row) {
        const templateFn = {};
        templateFn[getEnumValue(CellType, cell.cellType)] = compile(template);
        let txt;
        const data = row.data[cell.column.field ? cell.column.field : cell.column.columnName];
        if (this.parent.isReact || this.parent.isVue) {
            txt = (templateFn[getEnumValue(CellType, cell.cellType)](data, this.parent));
            if (this.parent.isReact) {
                this.parent.renderTemplates();
            }
        }
        else {
            txt = (templateFn[getEnumValue(CellType, cell.cellType)](data));
        }
        return txt[0].textContent;
    }
    mergeOptions(JSON1, JSON2) {
        const result = {};
        let attrname = Object.keys(JSON1);
        for (let index = 0; index < attrname.length; index++) {
            if (attrname[index] !== 'name') {
                result[attrname[index]] = JSON1[attrname[index]];
            }
        }
        attrname = Object.keys(JSON2);
        for (let index = 0; index < attrname.length; index++) {
            if (attrname[index] !== 'name') {
                result[attrname[index]] = JSON2[attrname[index]];
            }
        }
        return result;
    }
    getColumnStyle(gObj, columnIndex) {
        let index = 0;
        for (const style of this.styles) {
            if (style.name === gObj.element.id + 'column' + columnIndex) {
                return index;
            }
            index++;
        }
        return undefined;
    }
    processHeaderContent(gObj, headerRow, indent, excelRows) {
        const rowIndex = 1;
        const gridRows = headerRow.rows;
        // Column collection with respect to the records in the grid
        const gridColumns = headerRow.columns;
        const spannedCells = [];
        if (indent > 0) {
            let index = 0;
            while (index !== indent) {
                this.columns.push({ index: index + 1, width: 30 });
                index++;
            }
        }
        for (let col = 0; col < gridColumns.length; col++) {
            this.parseStyles(gObj, gridColumns[col], this.getRecordThemeStyle(this.theme), indent + col + 1);
        }
        let templateRowHeight;
        for (let row = 0; row < gridRows.length; row++) {
            let currentCellIndex = 1 + indent;
            const cells = [];
            for (let column = 0; column < gridRows[row].cells.length; column++) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                let style = {};
                const cell = {};
                const gridCell = gridRows[row].cells[column];
                if (gridCell.cellType === CellType.HeaderIndent || gridCell.cellType === CellType.DetailHeader) {
                    continue;
                }
                let result = { contains: true, index: 1 };
                while (result.contains) {
                    result = this.getIndex(spannedCells, rowIndex, currentCellIndex);
                    currentCellIndex = result.index;
                    if (!result.contains) {
                        cell.index = result.index + gObj.childGridLevel;
                        break;
                    }
                }
                if (!isNullOrUndefined(gridCell.rowSpan) && gridCell.rowSpan !== 1) {
                    cell.rowSpan = gridCell.rowSpan;
                    for (let i = rowIndex; i < gridCell.rowSpan + rowIndex; i++) {
                        const spannedCell = { rowIndex: 0, columnIndex: 0 };
                        spannedCell.rowIndex = i;
                        spannedCell.columnIndex = currentCellIndex;
                        spannedCells.push(spannedCell);
                    }
                }
                if (!isNullOrUndefined(gridCell.colSpan) && gridCell.colSpan !== 1) {
                    cell.colSpan = gridCell.colSpan;
                    currentCellIndex = currentCellIndex + cell.colSpan - 1;
                }
                cell.value = gridCell.column.headerText;
                style = this.getHeaderThemeStyle(this.theme);
                if (!isNullOrUndefined(gridCell.column.textAlign)) {
                    style.hAlign = gridCell.column.textAlign.toLowerCase();
                }
                if (!isNullOrUndefined(gridCell.column.headerTextAlign)) {
                    style.hAlign = gridCell.column.headerTextAlign.toLowerCase();
                }
                const excelHeaderCellArgs = { cell: cell, gridCell: gridCell, style: style };
                gObj.trigger(excelHeaderQueryCellInfo, excelHeaderCellArgs);
                if (!isNullOrUndefined(excelHeaderCellArgs.image) && !isNullOrUndefined(excelHeaderCellArgs.image.base64)) {
                    templateRowHeight = this.setImage(excelHeaderCellArgs, currentCellIndex);
                }
                if (!isNullOrUndefined(excelHeaderCellArgs.hyperLink)) {
                    excelHeaderCellArgs.cell.hyperlink = { target: excelHeaderCellArgs.hyperLink.target };
                    cell.value = excelHeaderCellArgs.hyperLink.displayText || cell.value;
                }
                cell.style = excelHeaderCellArgs.style;
                cells.push(cell);
                currentCellIndex++;
            }
            const excelRow = { index: this.rowLength++, cells: cells };
            if (!isNullOrUndefined(templateRowHeight)) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                excelRow.height = templateRowHeight;
            }
            excelRows.push(excelRow);
        }
        return excelRows;
    }
    getHeaderThemeStyle(theme) {
        let style = {};
        style.fontSize = 12;
        style.borders = { color: '#E0E0E0' };
        style.bold = true;
        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.header)) {
            style = this.updateThemeStyle(theme.header, style);
        }
        return style;
    }
    updateThemeStyle(themestyle, style) {
        return extend(style, themestyle);
    }
    getCaptionThemeStyle(theme) {
        let style = {};
        style.fontSize = 13;
        style.backColor = '#F6F6F6';
        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.caption)) {
            style = this.updateThemeStyle(theme.caption, style);
        }
        return style;
    }
    getRecordThemeStyle(theme) {
        let style = {};
        style.fontSize = 13;
        style.borders = { color: '#E0E0E0' };
        if (!isNullOrUndefined(theme) && !isNullOrUndefined(theme.record)) {
            style = this.updateThemeStyle(theme.record, style);
        }
        return style;
    }
    processExcelHeader(header) {
        if (!isNullOrUndefined(header.rows) && (this.expType === 'NewSheet' || this.rowLength === 1)) {
            let noRows;
            if (header.headerRows === undefined) {
                this.rowLength = header.rows.length;
            }
            else {
                this.rowLength = header.headerRows;
            }
            if (this.rowLength < header.rows.length) {
                noRows = this.rowLength;
            }
            else {
                noRows = header.rows.length;
            }
            this.rowLength++;
            for (let row = 0; row < noRows; row++) {
                const json = header.rows[row];
                //Row index
                if (!(json.index !== null && !isNullOrUndefined(json.index))) {
                    json.index = (row + 1);
                }
                this.updatedCellIndex(json);
            }
        }
    }
    updatedCellIndex(json) {
        const cellsLength = json.cells.length;
        for (let cellId = 0; cellId < cellsLength; cellId++) {
            const jsonCell = json.cells[cellId];
            //cell index
            if (!(jsonCell.index !== null && !isNullOrUndefined(jsonCell.index))) {
                jsonCell.index = (cellId + 1);
            }
        }
        this.rows.push(json);
    }
    processExcelFooter(footer) {
        if (!isNullOrUndefined(footer.rows)) {
            let noRows;
            if (footer.footerRows === undefined) {
                this.rowLength += footer.rows.length;
            }
            else {
                if (footer.footerRows > footer.rows.length) {
                    this.rowLength += (footer.footerRows - footer.rows.length);
                    noRows = footer.rows.length;
                }
                else {
                    noRows = footer.footerRows;
                }
            }
            for (let row = 0; row < noRows; row++) {
                const json = footer.rows[row];
                //Row index
                if (json.index === null || json.index === undefined) {
                    json.index = this.rowLength++;
                }
                else {
                    json.index += this.rowLength;
                }
                this.updatedCellIndex(json);
            }
        }
    }
    getIndex(spannedCells, rowIndex, columnIndex) {
        for (const spannedCell of spannedCells) {
            if ((spannedCell.rowIndex === rowIndex) && (spannedCell.columnIndex === columnIndex)) {
                columnIndex = columnIndex + 1;
                return { contains: true, index: columnIndex };
            }
        }
        return { contains: false, index: columnIndex };
    }
    parseStyles(gObj, col, style, index) {
        if (!isNullOrUndefined(col.format)) {
            if (typeof col.format === 'object') {
                const format = col.format;
                style.numberFormat = !isNullOrUndefined(format.format) ? format.format : format.skeleton;
                if (!isNullOrUndefined(format.type)) {
                    style.type = format.type.toLowerCase();
                }
            }
            else {
                style.numberFormat = col.format;
                style.type = col.type;
            }
        }
        if (!isNullOrUndefined(col.textAlign)) {
            style.hAlign = col.textAlign.toLowerCase();
        }
        if (Object.keys(style).length > 0) {
            style.name = gObj.element.id + 'column' + index;
            this.styles.push(style);
        }
        if (!isNullOrUndefined(col.width) && col.width !== 'auto') {
            this.columns.push({ index: index + gObj.childGridLevel, width: typeof col.width === 'number' ?
                    col.width : this.helper.getConvertedWidth(col.width) });
        }
    }
    destroy() {
        //destroy for exporting
    }
}

/**
 * `PDF Export` module is used to handle the exportToPDF action.
 *
 * @hidden
 */
class PdfExport {
    /**
     * Constructor for the Grid PDF Export module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @hidden
     */
    constructor(parent) {
        this.hideColumnInclude = false;
        this.currentViewData = false;
        this.customDataSource = false;
        this.isGrouping = false;
        this.headerOnPages = [];
        this.drawPosition = { xPosition: 0, yPosition: 0 };
        this.parent = parent;
        this.helper = new ExportHelper(parent);
        this.gridPool = {};
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     */
    getModuleName() {
        return 'PdfExport';
    }
    init(parent) {
        this.exportValueFormatter = new ExportValueFormatter(parent.locale);
        this.pdfDocument = undefined;
        this.hideColumnInclude = false;
        this.currentViewData = false;
        this.parent = parent;
        this.isGrouping = false;
        this.isExporting = true;
        parent.id = getUid('main-grid');
        this.gridPool[parent.id] = false;
        this.pdfPageSettings = new PdfPageSettings();
    }
    exportWithData(parent, pdfDoc, resolve, returnType, pdfExportProperties, isMultipleExport, reject) {
        this.init(parent);
        if (!isNullOrUndefined(pdfDoc)) {
            this.pdfDocument = pdfDoc;
        }
        else {
            this.pdfDocument = new PdfDocument();
        }
        this.processExport(parent, returnType, pdfExportProperties, isMultipleExport).then(() => {
            this.isExporting = false;
            parent.trigger(pdfExportComplete, this.isBlob ? { promise: this.blobPromise } : {});
            this.parent.log('exporting_complete', this.getModuleName());
            resolve(this.pdfDocument);
        }).catch((e) => {
            reject(this.pdfDocument);
            this.parent.trigger(actionFailure, e);
        });
    }
    /**
     * Used to map the input data
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {PdfExportProperties} pdfExportProperties - specifies the PdfExportProperties
     * @param {boolean} isMultipleExport - specifies the isMultipleExport
     * @param {Object} pdfDoc - specifies the pdfDoc
     * @param {boolean} isBlob - speciies whether it is Blob or not
     * @returns {void}
     */
    Map(parent, pdfExportProperties, isMultipleExport, pdfDoc, isBlob) {
        this.data = new Data(this.parent);
        this.isBlob = isBlob;
        this.gridPool = {};
        let query = new Query();
        if (parent.childGrid && !(!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.hierarchyExportMode === 'None')) {
            parent.expandedRows = getPrintGridModel(parent).expandedRows;
        }
        const args = {
            requestType: 'beforePdfExport', cancel: false,
            headerPageNumbers: [], gridDrawPosition: { xPosition: 0, yPosition: 0 }, generateQuery: false
        };
        const gridObject = 'gridObject';
        args[gridObject] = parent;
        const can = 'cancel';
        const generateQuery$$1 = 'generateQuery';
        const header = 'headerPageNumbers';
        const drawPos = 'gridDrawPosition';
        parent.trigger(beforePdfExport, args);
        if (args[can] === true) {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            return new Promise((resolve, reject) => {
                return resolve();
            });
        }
        if (isExportColumns(pdfExportProperties)) {
            updateColumnTypeForExportColumns(pdfExportProperties, parent);
        }
        if (args[generateQuery$$1]) {
            query = ExportHelper.getQuery(parent, this.data);
        }
        this.headerOnPages = args[header];
        this.drawPosition = args[drawPos];
        this.parent.log('exporting_begin', this.getModuleName());
        if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.dataSource)
            && pdfExportProperties.dataSource instanceof DataManager) {
            return new Promise((resolve, reject) => {
                pdfExportProperties.dataSource.executeQuery(query).then((returnType) => {
                    this.exportWithData(parent, pdfDoc, resolve, returnType, pdfExportProperties, isMultipleExport, reject);
                });
            });
        }
        else if (!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.exportType === 'CurrentPage') {
            return new Promise((resolve, reject) => {
                this.exportWithData(parent, pdfDoc, resolve, this.parent.getCurrentViewRecords(), pdfExportProperties, isMultipleExport, reject);
            });
        }
        else {
            const allPromise = [];
            allPromise.push(this.data.getData({}, ExportHelper.getQuery(parent, this.data)));
            allPromise.push(this.helper.getColumnData(parent));
            return new Promise((resolve, reject) => {
                Promise.all(allPromise).then((e) => {
                    this.init(parent);
                    if (!isNullOrUndefined(pdfDoc)) {
                        this.pdfDocument = pdfDoc;
                    }
                    else {
                        this.pdfDocument = new PdfDocument();
                    }
                    this.processExport(parent, e[0], pdfExportProperties, isMultipleExport).then(() => {
                        this.isExporting = false;
                        parent.trigger(pdfExportComplete, this.isBlob ? { promise: this.blobPromise } : {});
                        this.parent.log('exporting_complete', this.getModuleName());
                        resolve(this.pdfDocument);
                    }).catch((e) => {
                        reject(this.pdfDocument);
                        this.parent.trigger(actionFailure, e);
                    });
                });
            });
        }
    }
    processExport(gObj, returnType, pdfExportProperties, isMultipleExport) {
        const section = this.pdfDocument.sections.add();
        let pdfGrid;
        this.processSectionExportProperties(section, pdfExportProperties);
        const pdfPage = section.pages.add();
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        return new Promise((resolve, reject) => {
            pdfGrid = this.processGridExport(gObj, returnType, pdfExportProperties);
            this.globalResolve = resolve;
            this.gridPool[gObj.id] = true;
            this.helper.checkAndExport(this.gridPool, this.globalResolve);
        }).then(() => {
            // draw the grid
            const xPosition = 'xPosition';
            const yPosition = 'yPosition';
            pdfGrid.draw(pdfPage, this.drawPosition[xPosition], this.drawPosition[yPosition]);
            this.drawHeader(pdfExportProperties);
            if (!isMultipleExport) {
                // save the PDF
                if (!this.isBlob) {
                    if (!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.fileName) {
                        this.pdfDocument.save(pdfExportProperties.fileName);
                    }
                    else {
                        this.pdfDocument.save('Export.pdf');
                    }
                }
                else {
                    this.blobPromise = this.pdfDocument.save();
                }
                this.pdfDocument.destroy();
                delete gObj.expandedRows;
            }
            return this.pdfDocument;
        });
    }
    processSectionExportProperties(section, pdfExportProperties) {
        if (!isNullOrUndefined(pdfExportProperties) && (!isNullOrUndefined(pdfExportProperties.pageOrientation)
            || !isNullOrUndefined(pdfExportProperties.pageSize))) {
            this.pdfPageSettings.orientation = (pdfExportProperties.pageOrientation === 'Landscape') ?
                PdfPageOrientation.Landscape : PdfPageOrientation.Portrait;
            this.pdfPageSettings.size = this.getPageSize(pdfExportProperties.pageSize);
            section.setPageSettings(this.pdfPageSettings);
        }
        return section;
    }
    processGridExport(gObj, returnType, pdfExportProperties) {
        let allowHorizontalOverflow = true;
        const isFrozen = this.parent.isFrozenGrid() && !this.parent.getFrozenColumns();
        if (!isNullOrUndefined(pdfExportProperties)) {
            this.gridTheme = pdfExportProperties.theme;
            allowHorizontalOverflow = isNullOrUndefined(pdfExportProperties.allowHorizontalOverflow) ?
                true : pdfExportProperties.allowHorizontalOverflow;
        }
        const helper = new ExportHelper(gObj, this.helper.getForeignKeyData());
        const dataSource = this.processExportProperties(pdfExportProperties, returnType.result);
        let columns = isExportColumns(pdfExportProperties) ?
            prepareColumns(pdfExportProperties.columns, gObj.enableColumnVirtualization) :
            helper.getGridExportColumns(isFrozen ? gObj.getColumns() : gObj.columns);
        columns = columns.filter((columns) => { return isNullOrUndefined(columns.commands); });
        let isGrouping = false;
        if (gObj.groupSettings.columns.length) {
            isGrouping = true;
        }
        if (gObj.childGrid && !isNullOrUndefined(pdfExportProperties)) {
            gObj.hierarchyPrintMode = pdfExportProperties.hierarchyExportMode || 'Expanded';
        }
        // create a grid
        let pdfGrid = new PdfGrid();
        // get header theme style
        const headerThemeStyle = this.getHeaderThemeStyle();
        let border = headerThemeStyle.border;
        const headerFont = headerThemeStyle.font;
        const headerBrush = headerThemeStyle.brush;
        const returnValue = helper.getHeaders(columns, this.hideColumnInclude);
        // Column collection with respect to the records in the grid
        const gridColumns = returnValue.columns;
        // process grid header content
        pdfGrid = this.processGridHeaders(gObj.groupSettings.columns.length, pdfGrid, returnValue.rows, gridColumns, border, headerFont, headerBrush, gObj, allowHorizontalOverflow, columns);
        // set alignment, width and type of the values of the column
        this.setColumnProperties(gridColumns, pdfGrid, helper, gObj, allowHorizontalOverflow);
        const captionThemeStyle = this.getSummaryCaptionThemeStyle();
        if (!isNullOrUndefined(dataSource) && dataSource.length) {
            if (isGrouping) {
                if (!isNullOrUndefined(captionThemeStyle.border)) {
                    border = captionThemeStyle.border;
                }
                this.processGroupedRecords(pdfGrid, dataSource, gridColumns, gObj, border, 0, captionThemeStyle.font, captionThemeStyle.
                    brush, captionThemeStyle.backgroundBrush, returnType, pdfExportProperties, helper, 0);
            }
            else {
                this.processRecord(border, gridColumns, gObj, dataSource, pdfGrid, 0, pdfExportProperties, helper, 0);
            }
            if (!isNullOrUndefined(returnType.aggregates)) {
                const summaryModel = new SummaryModelGenerator(gObj);
                let sRows;
                let column = summaryModel.getColumns();
                column = column.filter((col) => { return isNullOrUndefined(col.commands) && col.type !== 'checkbox'; });
                if (gObj.aggregates.length && this.parent !== gObj) {
                    gObj.aggregateModule.prepareSummaryInfo();
                }
                if (this.customDataSource) {
                    sRows = summaryModel.generateRows(dataSource, returnType.aggregates);
                }
                else if (this.currentViewData) {
                    sRows = summaryModel.generateRows(this.parent.getCurrentViewRecords(), returnType.aggregates);
                }
                else if (isGrouping) {
                    sRows = summaryModel.generateRows(dataSource.records, returnType.aggregates);
                }
                else {
                    sRows = summaryModel.generateRows(returnType.result, returnType.aggregates, null, null, column);
                }
                this.processAggregates(sRows, pdfGrid, border, captionThemeStyle.font, captionThemeStyle.brush, captionThemeStyle.backgroundBrush, false, null, null, null, isGrouping ? false : true);
            }
        }
        else {
            const row = pdfGrid.rows.addRow();
            row.style.setBorder(border);
        }
        return pdfGrid;
    }
    getSummaryCaptionThemeStyle() {
        if (!isNullOrUndefined(this.gridTheme) && !isNullOrUndefined(this.gridTheme.caption)) {
            const fontSize = !isNullOrUndefined(this.gridTheme.caption.fontSize) ? this.gridTheme.caption.fontSize : 9.75;
            const fontFamily = !isNullOrUndefined(this.gridTheme.caption.fontName) ?
                this.getFontFamily(this.gridTheme.caption.fontName) : PdfFontFamily.Helvetica;
            const fontStyle = this.getFontStyle(this.gridTheme.caption);
            let pdfColor = new PdfColor(0, 0, 0);
            if (!isNullOrUndefined(this.gridTheme.caption.fontColor)) {
                const penBrushColor = this.hexToRgb(this.gridTheme.caption.fontColor);
                pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
            }
            const borderCaption = this.gridTheme.caption.border ? this.getBorderStyle(this.gridTheme.caption.border) : null;
            let font = new PdfStandardFont(fontFamily, fontSize, fontStyle);
            if (!isNullOrUndefined(this.gridTheme.caption.font)) {
                font = this.gridTheme.caption.font;
            }
            return { font: font, brush: new PdfSolidBrush(pdfColor), backgroundBrush: new PdfSolidBrush(new PdfColor(246, 246, 246)),
                border: borderCaption };
        }
        else {
            //Material theme
            return { font: new PdfStandardFont(PdfFontFamily.Helvetica, 9.75), brush: new PdfSolidBrush(new PdfColor(0, 0, 0)),
                backgroundBrush: new PdfSolidBrush(new PdfColor(246, 246, 246)) };
        }
    }
    getGridPdfFont(args) {
        const fontFamily = 'fontFamily';
        const fontSize = 'fontSize';
        const fontStyle = 'fontStyle';
        const isTrueType = 'isTrueType';
        let style = 0;
        if (args.header && args.header.font) {
            const headerFont = args.header.font[fontFamily];
            const headerSize = args.header.font[fontSize];
            const headerStyle = args.header.font[fontStyle];
            style = (isNullOrUndefined(PdfFontStyle[headerStyle]) ? 0 : PdfFontStyle[headerStyle]);
            if (args.header.font[isTrueType]) {
                args.header.font = new PdfTrueTypeFont(headerFont, headerSize, style);
            }
            else {
                const fontFamily = !isNullOrUndefined(headerFont) ?
                    this.getFontFamily(headerFont) : PdfFontFamily.Helvetica;
                args.header.font = new PdfStandardFont(fontFamily, headerSize, style);
            }
        }
        if (args.caption && args.caption.font) {
            const captionFont = args.caption.font[fontFamily];
            const captionSize = args.caption.font[fontSize];
            const captionStyle = args.caption.font[fontStyle];
            style = (isNullOrUndefined(PdfFontStyle[captionStyle]) ? 0 : PdfFontStyle[captionStyle]);
            if (args.caption.font[isTrueType]) {
                args.caption.font = new PdfTrueTypeFont(captionFont, captionSize, style);
            }
            else {
                const fontFamily = !isNullOrUndefined(captionFont) ?
                    this.getFontFamily(captionFont) : PdfFontFamily.Helvetica;
                args.caption.font = new PdfStandardFont(fontFamily, captionSize, style);
            }
        }
        if (args.record && args.record.font) {
            const recordFont = args.record.font[fontFamily];
            const recordSize = args.record.font[fontSize];
            const recordStyle = args.record.font[fontStyle];
            style = (isNullOrUndefined(PdfFontStyle[recordStyle]) ? 0 : PdfFontStyle[recordStyle]);
            if (args.record.font[isTrueType]) {
                args.record.font = new PdfTrueTypeFont(recordFont, recordSize, style);
            }
            else {
                const fontFamily = !isNullOrUndefined(recordFont) ?
                    this.getFontFamily(recordFont) : PdfFontFamily.Helvetica;
                args.record.font = new PdfStandardFont(fontFamily, recordSize, style);
            }
        }
    }
    getHeaderThemeStyle() {
        const border = new PdfBorders();
        if (!isNullOrUndefined(this.gridTheme) && !isNullOrUndefined(this.gridTheme.header)) {
            const fontFamily = !isNullOrUndefined(this.gridTheme.header.fontName) ?
                this.getFontFamily(this.gridTheme.header.fontName) : PdfFontFamily.Helvetica;
            const fontStyle = this.getFontStyle(this.gridTheme.header);
            const fontSize = !isNullOrUndefined(this.gridTheme.header.fontSize) ? this.gridTheme.header.fontSize : 10.5;
            let pdfColor = new PdfColor();
            if (!isNullOrUndefined(this.gridTheme.header.fontColor)) {
                const penBrushColor = this.hexToRgb(this.gridTheme.header.fontColor);
                pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
            }
            let font = new PdfStandardFont(fontFamily, fontSize, fontStyle);
            if (!isNullOrUndefined(this.gridTheme.header.font)) {
                font = this.gridTheme.header.font;
            }
            return { border: this.getBorderStyle(this.gridTheme.header.border), font: font, brush: new PdfSolidBrush(pdfColor) };
        }
        else {
            //Material theme
            border.all = new PdfPen(new PdfColor(234, 234, 234));
            return { border: border, font: new PdfStandardFont(PdfFontFamily.Helvetica, 10.5),
                brush: new PdfSolidBrush(new PdfColor(102, 102, 102)) };
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    processGroupedRecords(pdfGrid, dataSource, gridColumns, gObj, border, level, font, brush, backgroundBrush, returnType, pdfExportProperties, helper, index) {
        const groupIndex = level;
        for (const dataSourceItems of dataSource) {
            const row = pdfGrid.rows.addRow();
            const col = gObj.getColumnByField(dataSourceItems.field);
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const args = {
                value: dataSourceItems.key,
                column: col,
                style: undefined,
                isForeignKey: col.isForeignColumn()
            };
            const value = this.parent.getColumnByField(dataSourceItems.field).headerText + ': ' + (!col.enableGroupByFormat ? this.exportValueFormatter.formatCellValue(args) : dataSourceItems.key) + ' - ' + dataSourceItems.count + (dataSource.count > 1 ? ' items' : ' item');
            const cArgs = { captionText: value, type: 'PDF', data: dataSourceItems, style: undefined };
            this.parent.trigger(exportGroupCaption, cArgs, (cArgs) => {
                row.cells.getCell(groupIndex).value = cArgs.captionText;
                row.cells.getCell(groupIndex).style.stringFormat = new PdfStringFormat(PdfTextAlignment.Left);
                row.style.setBorder(border);
                row.style.setFont(font);
                row.style.setTextBrush(brush);
                row.style.setBackgroundBrush(backgroundBrush);
                if (!isNullOrUndefined(cArgs.style)) {
                    this.processCellStyle(row.cells.getCell(groupIndex), cArgs);
                }
                let sRows;
                const captionSummaryModel = new CaptionSummaryModelGenerator(gObj);
                if (!isNullOrUndefined(dataSourceItems.items.records)) {
                    sRows = captionSummaryModel.generateRows(dataSourceItems.items.records, dataSourceItems);
                }
                else {
                    sRows = captionSummaryModel.generateRows(dataSourceItems.items, dataSourceItems);
                }
                if (!isNullOrUndefined(sRows) && sRows.length === 0) {
                    row.cells.getCell(groupIndex + 1).columnSpan = pdfGrid.columns.count - (groupIndex + 1);
                }
                if (!isNullOrUndefined(dataSource.childLevels) && dataSource.childLevels > 0) {
                    this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, true, row, groupIndex);
                    this.processGroupedRecords(pdfGrid, dataSourceItems.items, gridColumns, gObj, border, (groupIndex + 1), font, brush, backgroundBrush, returnType, pdfExportProperties, helper, index);
                    const groupSummaryModel = new GroupSummaryModelGenerator(gObj);
                    sRows = groupSummaryModel.generateRows(dataSourceItems.items.records, dataSourceItems);
                    this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, false);
                }
                else {
                    this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, true, row, groupIndex);
                    index = this.processRecord(border, gridColumns, gObj, dataSourceItems.items, pdfGrid, (groupIndex + 1), pdfExportProperties, helper, index);
                    const groupSummaryModel = new GroupSummaryModelGenerator(gObj);
                    sRows = groupSummaryModel.generateRows(dataSourceItems.items, dataSourceItems);
                    const isGroupedFooter = true;
                    this.processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, false, null, null, isGroupedFooter);
                }
            });
        }
    }
    processGridHeaders(childLevels, pdfGrid, rows, gridColumn, border, headerFont, headerBrush, grid, allowHorizontalOverflow, eCols) {
        let columnCount = gridColumn.length + childLevels;
        const depth = measureColumnDepth(eCols);
        const cols = eCols;
        let index = 0;
        let rowNumber = [];
        for (let i = 0; i < rows.length; i++) {
            rowNumber[i] = 0;
        }
        if (this.parent.groupSettings.columns.length) {
            index = this.parent.groupSettings.columns.length - 1;
            columnCount = columnCount - 1;
        }
        pdfGrid.columns.add(columnCount);
        pdfGrid.headers.add(rows.length);
        const applyTextAndSpan = (rowIdx, colIdx, col, rowSpan, colSpan) => {
            const gridHeader = pdfGrid.headers.getHeader(rowIdx);
            const pdfCell = gridHeader.cells.getCell(colIdx);
            const cell = rows[rowIdx].cells[this.parent.groupSettings.columns.length ? colIdx : rowNumber[rowIdx]];
            rowNumber[rowIdx] = rowNumber[rowIdx] + 1;
            if (!isNullOrUndefined(col.headerTextAlign)) {
                pdfCell.style.stringFormat = this.getHorizontalAlignment(col.headerTextAlign);
            }
            if (rowSpan > 0) {
                pdfCell.rowSpan = rowSpan;
                pdfCell.style.stringFormat = this.getVerticalAlignment('Bottom', pdfCell.style.stringFormat, col.textAlign);
            }
            if (colSpan > 0) {
                pdfCell.columnSpan = colSpan;
            }
            gridHeader.style.setBorder(border);
            gridHeader.style.setFont(headerFont);
            gridHeader.style.setTextBrush(headerBrush);
            pdfCell.value = col.headerText;
            if (!isNullOrUndefined(cell) && (cell.cellType === CellType.HeaderIndent || cell.cellType === CellType.DetailHeader)) {
                pdfCell.value = '';
                pdfCell.width = 20;
            }
            const args = {
                cell: pdfCell,
                gridCell: cell,
                style: pdfCell.style
            };
            this.parent.trigger(pdfHeaderQueryCellInfo, args);
            const evtArgs = args;
            const setCellBorder = args.style.borders;
            const setCellFont = args.style.font;
            const setHeaderBrush = args.style.textBrush;
            gridHeader.style.setBorder(setCellBorder);
            gridHeader.style.setFont(setCellFont);
            gridHeader.style.setTextBrush(setHeaderBrush);
            if (!isNullOrUndefined(evtArgs.image)) {
                pdfCell.value = new PdfBitmap(evtArgs.image.base64);
            }
            if (!isNullOrUndefined(evtArgs.hyperLink)) {
                pdfCell.value = this.setHyperLink(evtArgs);
            }
        };
        const recuHeader = (cols, depth, spanCnt, colIndex, rowIndex, isRoot) => {
            let cidx = 0;
            for (let i = 0; i < cols.length; i++) {
                if (isRoot) {
                    cidx = cidx + spanCnt + (i === 0 ? 0 : -1);
                    colIndex = cidx;
                    spanCnt = 0;
                }
                if (!isRoot && !cols[i].visible) {
                    colIndex = colIndex - 1;
                }
                if (cols[i].columns && cols[i].columns.length) {
                    const newSpanCnt = recuHeader(cols[i].columns, depth - 1, 0, i + colIndex, rowIndex + 1, false);
                    applyTextAndSpan(rowIndex, i + colIndex + index, cols[i], 0, newSpanCnt);
                    spanCnt = spanCnt + newSpanCnt;
                    colIndex = colIndex + newSpanCnt - 1;
                }
                else if (cols[i].visible || this.hideColumnInclude) {
                    spanCnt++;
                    applyTextAndSpan(rowIndex, i + colIndex + index, cols[i], depth, 0);
                }
            }
            return spanCnt;
        };
        recuHeader(cols, depth, 0, 0, 0, true);
        if (pdfGrid.columns.count >= 6 && allowHorizontalOverflow) {
            pdfGrid.style.allowHorizontalOverflow = true;
        }
        return pdfGrid;
    }
    processExportProperties(pdfExportProperties, dataSource) {
        if (!isNullOrUndefined(pdfExportProperties)) {
            if (!isNullOrUndefined(pdfExportProperties.theme)) {
                this.gridTheme = pdfExportProperties.theme;
            }
            const clientSize = this.pdfPageSettings.size;
            this.drawHeader(pdfExportProperties);
            if (!isNullOrUndefined(pdfExportProperties.footer)) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const footer = pdfExportProperties.footer;
                const position = new PointF(0, ((clientSize.width - 80) - (footer.fromBottom * 0.75)));
                const size = new SizeF((clientSize.width - 80), (footer.height * 0.75));
                const bounds = new RectangleF(position, size);
                this.pdfDocument.template.bottom = this.drawPageTemplate(new PdfPageTemplateElement(bounds), footer);
            }
            if (!isNullOrUndefined(pdfExportProperties.includeHiddenColumn) && !this.isGrouping) {
                this.hideColumnInclude = pdfExportProperties.includeHiddenColumn;
            }
            if (!isNullOrUndefined(pdfExportProperties.dataSource)) {
                if (!(pdfExportProperties.dataSource instanceof DataManager)) {
                    dataSource = pdfExportProperties.dataSource;
                }
                this.customDataSource = true;
                this.currentViewData = false;
            }
            else if (!isNullOrUndefined(pdfExportProperties.exportType)) {
                if (pdfExportProperties.exportType === 'CurrentPage') {
                    dataSource = this.parent.currentViewData;
                    this.currentViewData = true;
                    this.customDataSource = false;
                }
                else {
                    this.currentViewData = false;
                    this.customDataSource = false;
                }
            }
            else {
                this.currentViewData = false;
                this.customDataSource = false;
            }
        }
        else {
            this.currentViewData = false;
            this.customDataSource = false;
        }
        return dataSource;
    }
    drawHeader(pdfExportProperties) {
        const clientSize = this.pdfPageSettings.size;
        if (!isNullOrUndefined(pdfExportProperties) && !isNullOrUndefined(pdfExportProperties.header)) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const header = pdfExportProperties.header;
            const position = new PointF(0, header.fromTop);
            const size = new SizeF((clientSize.width - 80), (header.height * 0.75));
            const bounds = new RectangleF(position, size);
            if (!this.headerOnPages.length) {
                this.pdfDocument.template.top = this.drawPageTemplate(new PdfPageTemplateElement(bounds), header);
            }
            else {
                const headerTemplate = this.drawPageTemplate(new PdfPageTemplateElement(bounds), header);
                this.headerOnPages.filter((index) => {
                    if (index - 1 >= 0 && index - 1 < this.pdfDocument.pages.count - 1) {
                        this.pdfDocument.pages.getPageByIndex(index - 1).graphics
                            .drawPdfTemplate(headerTemplate.template, new PointF(0, 0));
                    }
                });
            }
        }
    }
    drawPageTemplate(template, element) {
        for (const content of element.contents) {
            this.processContentValidation(content);
            switch (content.type) {
                case 'Text':
                    if (content.value === '' || content.value === undefined || content.value === null || typeof content.value !== 'string') {
                        throw new Error('please enter the valid input value in text content...');
                    }
                    this.drawText(template, content);
                    break;
                case 'PageNumber':
                    this.drawPageNumber(template, content);
                    break;
                case 'Image':
                    if (content.src === undefined || content.src === null || content.src === '') {
                        throw new Error('please enter the valid base64 string in image content...');
                    }
                    this.drawImage(template, content);
                    break;
                case 'Line':
                    this.drawLine(template, content);
                    break;
                default:
                    throw new Error('Please set valid content type...');
            }
        }
        return template;
    }
    processContentValidation(content) {
        if (content.type === undefined || content.type === null) {
            throw new Error('please set valid content type...');
        }
        else {
            if (content.type === 'Line') {
                if (content.points === undefined || content.points === null) {
                    throw new Error('please enter valid points in ' + content.type + ' content...');
                }
                else {
                    if (content.points.x1 === undefined || content.points.x1 === null || typeof content.points.x1 !== 'number') {
                        throw new Error('please enter valid x1 co-ordinate in ' + content.type + ' points...');
                    }
                    if (content.points.y1 === undefined || content.points.y1 === null || typeof content.points.y1 !== 'number') {
                        throw new Error('please enter valid y1 co-ordinate in ' + content.type + ' points...');
                    }
                    if (content.points.x2 === undefined || content.points.x2 === null || typeof content.points.x2 !== 'number') {
                        throw new Error('please enter valid x2 co-ordinate in ' + content.type + ' points...');
                    }
                    if (content.points.y2 === undefined || content.points.y2 === null || typeof content.points.y2 !== 'number') {
                        throw new Error('please enter valid y2 co-ordinate in ' + content.type + ' points...');
                    }
                }
            }
            else {
                if (content.position === undefined || content.position === null) {
                    throw new Error('please enter valid position in ' + content.type + ' content...');
                }
                else {
                    if (content.position.x === undefined || content.position.x === null || typeof content.position.x !== 'number') {
                        throw new Error('please enter valid x co-ordinate in ' + content.type + ' position...');
                    }
                    if (content.position.y === undefined || content.position.y === null || typeof content.position.y !== 'number') {
                        throw new Error('please enter valid y co-ordinate in ' + content.type + ' position...');
                    }
                }
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    drawText(pageTemplate, content) {
        const font = this.getFont(content);
        let brush = this.getBrushFromContent(content);
        let pen = null;
        if (!isNullOrUndefined(content.style.textPenColor)) {
            const penColor = this.hexToRgb(content.style.textPenColor);
            pen = new PdfPen(new PdfColor(penColor.r, penColor.g, penColor.b));
        }
        if (brush == null && pen == null) {
            brush = new PdfSolidBrush(new PdfColor(0, 0, 0));
        }
        const value = content.value.toString();
        const x = content.position.x * 0.75;
        const y = content.position.y * 0.75;
        const format = new PdfStringFormat();
        const result = this.setContentFormat(content, format);
        if (result !== null && !isNullOrUndefined(result.format) && !isNullOrUndefined(result.size)) {
            pageTemplate.graphics.drawString(value, font, pen, brush, x, y, result.size.width, result.size.height, result.format);
        }
        else {
            pageTemplate.graphics.drawString(value, font, pen, brush, x, y, format);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    drawPageNumber(documentHeader, content) {
        const font = this.getFont(content);
        let brush = null;
        if (!isNullOrUndefined(content.style.textBrushColor)) {
            const brushColor = this.hexToRgb(content.style.textBrushColor);
            brush = new PdfSolidBrush(new PdfColor(brushColor.r, brushColor.g, brushColor.b));
        }
        else {
            brush = new PdfSolidBrush(new PdfColor(0, 0, 0));
        }
        const pageNumber = new PdfPageNumberField(font, brush);
        pageNumber.numberStyle = this.getPageNumberStyle(content.pageNumberType);
        let compositeField;
        let format;
        if (!isNullOrUndefined(content.format)) {
            const total = '$total';
            const current = '$current';
            if (content.format.indexOf(total) !== -1 && content.format.indexOf(current) !== -1) {
                const pageCount = new PdfPageCountField(font);
                pageCount.numberStyle = this.getPageNumberStyle(content.pageNumberType);
                if (content.format.indexOf(total) > content.format.indexOf(current)) {
                    format = content.format.replace(current, '0');
                    format = format.replace(total, '1');
                }
                else {
                    format = content.format.replace(current, '1');
                    format = format.replace(total, '0');
                }
                compositeField = new PdfCompositeField(font, brush, format, pageNumber, pageCount);
            }
            else if (content.format.indexOf(current) !== -1 && content.format.indexOf(total) === -1) {
                format = content.format.replace(current, '0');
                compositeField = new PdfCompositeField(font, brush, format, pageNumber);
            }
            else {
                const pageCount = new PdfPageCountField(font);
                format = content.format.replace(total, '0');
                compositeField = new PdfCompositeField(font, brush, format, pageCount);
            }
        }
        else {
            format = '{0}';
            compositeField = new PdfCompositeField(font, brush, format, pageNumber);
        }
        const x = content.position.x * 0.75;
        const y = content.position.y * 0.75;
        const result = this.setContentFormat(content, compositeField.stringFormat);
        if (result !== null && !isNullOrUndefined(result.format) && !isNullOrUndefined(result.size)) {
            compositeField.stringFormat = result.format;
            compositeField.bounds = new RectangleF(x, y, result.size.width, result.size.height);
        }
        compositeField.draw(documentHeader.graphics, x, y);
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    drawImage(documentHeader, content) {
        const x = content.position.x * 0.75;
        const y = content.position.y * 0.75;
        const width = (!isNullOrUndefined(content.size)) ? (content.size.width * 0.75) : undefined;
        const height = (!isNullOrUndefined(content.size)) ? (content.size.height * 0.75) : undefined;
        const image = new PdfBitmap(content.src);
        if (!isNullOrUndefined(width)) {
            documentHeader.graphics.drawImage(image, x, y, width, height);
        }
        else {
            documentHeader.graphics.drawImage(image, x, y);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    drawLine(documentHeader, content) {
        const x1 = content.points.x1 * 0.75;
        const y1 = content.points.y1 * 0.75;
        const x2 = content.points.x2 * 0.75;
        const y2 = content.points.y2 * 0.75;
        const pen = this.getPenFromContent(content);
        if (!isNullOrUndefined(content.style) && content.style !== null) {
            if (!isNullOrUndefined(content.style.penSize) && content.style.penSize !== null && typeof content.style.penSize === 'number') {
                pen.width = content.style.penSize * 0.75;
            }
            pen.dashStyle = this.getDashStyle(content.style.dashStyle);
        }
        documentHeader.graphics.drawLine(pen, x1, y1, x2, y2);
    }
    processAggregates(sRows, pdfGrid, border, font, brush, backgroundBrush, isCaption, captionRow, groupIndex, isGroupedFooter, isAggregate) {
        for (const row of sRows) {
            let leastCaptionSummaryIndex = -1;
            let index = 0;
            let isEmpty = true;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const value = [];
            const aggIdx = isAggregate ? 0 : 1;
            for (let i = 0; i < pdfGrid.columns.count + aggIdx; i++) {
                let cell = row.cells[index];
                if (cell.cellType === CellType.DetailFooterIntent) {
                    i--;
                    index++;
                    continue;
                }
                if (!this.hideColumnInclude) {
                    while (cell.visible === undefined) {
                        if (cell.cellType === CellType.DetailFooterIntent) {
                            continue;
                        }
                        if (!isNullOrUndefined(captionRow)) {
                            if (!isNullOrUndefined(captionRow.cells.getCell(i).value)) {
                                const args = { row: row, type: 'GroupCaption', style: captionRow.cells };
                                this.parent.trigger(pdfAggregateQueryCellInfo, args);
                                value.push(captionRow.cells.getCell(i).value);
                                isEmpty = false;
                                if (!isCaption) {
                                    i += 1;
                                }
                            }
                            else {
                                value.push('');
                            }
                        }
                        else {
                            value.push('');
                        }
                        i += 1;
                        index = index + 1;
                        cell = row.cells[index];
                    }
                    while (!isNullOrUndefined(cell.visible) && !cell.visible) {
                        index = index + 1;
                        cell = row.cells[index];
                    }
                }
                if (cell.isDataCell) {
                    let templateFn = {};
                    if (!isNullOrUndefined(cell.column.footerTemplate) || !isNullOrUndefined(cell.column.groupCaptionTemplate)
                        || !isNullOrUndefined(cell.column.groupFooterTemplate)) {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        const result = this.getTemplateFunction(templateFn, i, leastCaptionSummaryIndex, cell);
                        templateFn = result.templateFunction;
                        leastCaptionSummaryIndex = result.leastCaptionSummaryIndex;
                        let txt;
                        const data = row.data[cell.column.field ? cell.column.field : cell.column.columnName];
                        if (this.parent.isReact || this.parent.isVue) {
                            txt = (templateFn[getEnumValue(CellType, cell.cellType)](data, this.parent));
                            if (this.parent.isReact) {
                                this.parent.renderTemplates();
                            }
                        }
                        else {
                            txt = (templateFn[getEnumValue(CellType, cell.cellType)](data));
                        }
                        value.push(txt[0].textContent);
                        isEmpty = false;
                    }
                    else {
                        // eslint-disable-next-line @typescript-eslint/no-explicit-any
                        const result = this.getSummaryWithoutTemplate(row.data[cell.column.field]);
                        if (!isNullOrUndefined(result)) {
                            value.push(result);
                        }
                    }
                }
                else {
                    value.push('');
                }
                if (isEmpty && value[i] !== '' && !isNullOrUndefined(value[i]) && value[i] !== null) {
                    isEmpty = false;
                }
                index += 1;
            }
            if (!isAggregate) {
                if (!isCaption) {
                    value.splice(0, 1);
                }
                else {
                    for (let i = this.parent.groupSettings.columns.length; i < value.length - 1; i++) {
                        value[i] = value[i + 1];
                        value[i + 1] = value[i + 2] ? value[i + 2] : '';
                    }
                }
            }
            if (!isEmpty) {
                if (!isCaption) {
                    const gridRow = pdfGrid.rows.addRow();
                    gridRow.style.setBorder(border);
                    gridRow.style.setFont(font);
                    gridRow.style.setTextBrush(brush);
                    gridRow.style.setBackgroundBrush(backgroundBrush);
                    const args = {
                        row: row, type: isGroupedFooter ? 'GroupFooter' : 'Footer', style: gridRow.cells
                    };
                    this.parent.trigger(pdfAggregateQueryCellInfo, args);
                    for (let i = 0; i < pdfGrid.columns.count; i++) {
                        gridRow.cells.getCell(i).value = value[i].toString();
                    }
                }
                else {
                    for (let i = 0; i < pdfGrid.columns.count; i++) {
                        captionRow.cells.getCell(i).value = value[i].toString();
                        if (i === groupIndex && leastCaptionSummaryIndex !== -1 && leastCaptionSummaryIndex !== 1) {
                            captionRow.cells.getCell(i).columnSpan = (leastCaptionSummaryIndex - 1) - groupIndex;
                        }
                        else if (i === groupIndex && leastCaptionSummaryIndex === -1) {
                            captionRow.cells.getCell(i).columnSpan = pdfGrid.columns.count - groupIndex;
                        }
                    }
                }
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getTemplateFunction(templateFn, index, leastCaptionSummaryIndex, cell) {
        if (!isNullOrUndefined(cell.column.footerTemplate) && cell.cellType === CellType.Summary) {
            templateFn[getEnumValue(CellType, CellType.Summary)] = compile(cell.column.footerTemplate);
        }
        else if (!isNullOrUndefined(cell.column.groupCaptionTemplate)) {
            if (leastCaptionSummaryIndex === -1) {
                leastCaptionSummaryIndex = index;
            }
            templateFn[getEnumValue(CellType, CellType.CaptionSummary)] = compile(cell.column.groupCaptionTemplate);
        }
        else {
            templateFn[getEnumValue(CellType, CellType.GroupSummary)] = compile(cell.column.groupFooterTemplate);
        }
        return { templateFunction: templateFn, leastCaptionSummaryIndex: leastCaptionSummaryIndex };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getSummaryWithoutTemplate(data) {
        if (!isNullOrUndefined(data.Sum)) {
            return data.Sum;
        }
        else if (!isNullOrUndefined(data.Average)) {
            return data.Average;
        }
        else if (!isNullOrUndefined(data.Max)) {
            return data.Max;
        }
        else if (!isNullOrUndefined(data.Min)) {
            return data.Min;
        }
        else if (!isNullOrUndefined(data.Count)) {
            return data.Count;
        }
        else if (!isNullOrUndefined(data.TrueCount)) {
            return data.TrueCount;
        }
        else if (!isNullOrUndefined(data.FalseCount)) {
            return data.FalseCount;
        }
        else if (!isNullOrUndefined(data.Custom)) {
            return data.Custom;
        }
    }
    /**
     * Set alignment, width and type of the values of the column
     *
     * @param {Column[]} gridColumns - specifies the grid column
     * @param {PdfGrid} pdfGrid - specifies the pdfGrid
     * @param {ExportHelper} helper - specifies the helper
     * @param {IGrid} gObj - specifies the IGrid
     * @param {boolean} allowHorizontalOverflow - specifies the allowHorizontalOverflow
     * @returns {void}
     */
    setColumnProperties(gridColumns, pdfGrid, helper, gObj, allowHorizontalOverflow) {
        const startIndex = gObj.groupSettings.columns.length ? gObj.groupSettings.columns.length - 1 : 0;
        for (let i = 0; i < startIndex; i++) {
            pdfGrid.columns.getColumn(i).width = 20;
        }
        for (let i = 0; i < gridColumns.length; i++) {
            if (!isNullOrUndefined(gridColumns[i].textAlign)) {
                pdfGrid.columns.getColumn(i + startIndex).format = this.getHorizontalAlignment(gridColumns[i].textAlign);
            }
            // Need to add width consideration with % value
            if (pdfGrid.style.allowHorizontalOverflow && !isNullOrUndefined(gridColumns[i].width) && allowHorizontalOverflow) {
                pdfGrid.columns.getColumn(i + startIndex).width = typeof gridColumns[i].width === 'number' ?
                    gridColumns[i].width * 0.75 : helper.getConvertedWidth(gridColumns[i].width) * 0.75;
            }
        }
    }
    /**
     * set default style properties of each rows in exporting grid
     *
     * @param {PdfGridRow} row - specifies the PdfGridRow
     * @param {PdfBorders} border - specifies the PdfBorders
     * @returns {PdfGrid} returns the pdfgrid
     * @private
     */
    setRecordThemeStyle(row, border) {
        if (!isNullOrUndefined(this.gridTheme) && !isNullOrUndefined(this.gridTheme.record)) {
            const fontFamily = !isNullOrUndefined(this.gridTheme.record.fontName) ?
                this.getFontFamily(this.gridTheme.record.fontName) : PdfFontFamily.Helvetica;
            const fontSize = !isNullOrUndefined(this.gridTheme.record.fontSize) ? this.gridTheme.record.fontSize : 9.75;
            const fontStyle = this.getFontStyle(this.gridTheme.record);
            let font = new PdfStandardFont(fontFamily, fontSize, fontStyle);
            if (!isNullOrUndefined(this.gridTheme.record.font)) {
                font = this.gridTheme.record.font;
            }
            row.style.setFont(font);
            let pdfColor = new PdfColor();
            if (!isNullOrUndefined(this.gridTheme.record.fontColor)) {
                const penBrushColor = this.hexToRgb(this.gridTheme.record.fontColor);
                pdfColor = new PdfColor(penBrushColor.r, penBrushColor.g, penBrushColor.b);
            }
            row.style.setTextBrush(new PdfSolidBrush(pdfColor));
        }
        else {
            row.style.setTextBrush(new PdfSolidBrush(new PdfColor(0, 0, 0)));
        }
        const borderRecord = this.gridTheme && this.gridTheme.record &&
            this.gridTheme.record.border ? this.getBorderStyle(this.gridTheme.record.border) : border;
        row.style.setBorder(borderRecord);
        return row;
    }
    /**
     * generate the formatted cell values
     *
     * @param {PdfBorders} border - specifies the border
     * @param {Column[]} columns - specifies the columns
     * @param {IGrid} gObj - specifies the IGrid
     * @param {Object[]} dataSource - specifies the datasource
     * @param {PdfGrid} pdfGrid - specifies the pdfGrid
     * @param {number} startIndex - specifies the startindex
     * @param {PdfExportProperties} pdfExportProperties - specifies the pdfExportProperties
     * @param {ExportHelper} helper - specifies the helper
     * @param {number} rowIndex - specifies the rowIndex
     * @returns {number} returns the number of records
     * @private
     */
    processRecord(border, columns, gObj, dataSource, pdfGrid, startIndex, pdfExportProperties, helper, rowIndex) {
        const rows = helper.getGridRowModel(columns, dataSource, gObj, rowIndex);
        for (const row of rows) {
            rowIndex++;
            // create a new row and set default style properties
            const gridRow = this.setRecordThemeStyle(pdfGrid.rows.addRow(), border);
            const cellLength = row.cells.length;
            for (let j = 0; j < cellLength; j++) {
                const gridCell = row.cells[j];
                if (gridCell.cellType !== CellType.Data) {
                    continue;
                }
                const column = gridCell.column;
                const field = column.field;
                const cellValue = !isNullOrUndefined(field) ? column.valueAccessor(field, row.data, column) : '';
                let value = !isNullOrUndefined(cellValue) ? cellValue : '';
                let foreignKeyData$$1;
                if (column.isForeignColumn && column.isForeignColumn()) {
                    foreignKeyData$$1 = helper.getFData(value, column);
                    value = getValue(column.foreignKeyValue, foreignKeyData$$1);
                }
                const data = row.data;
                const cell = gridRow.cells.getCell(j);
                const args = {
                    data: data,
                    value: value,
                    column: column,
                    style: undefined,
                    colSpan: 1,
                    cell: cell
                };
                args.value = args.column.type === 'boolean' && typeof args.value === 'string' ? args.value :
                    this.exportValueFormatter.formatCellValue(args);
                this.parent.trigger(pdfQueryCellInfo, args);
                if (!isNullOrUndefined(args.image)) {
                    args.value = new PdfBitmap(args.image.base64);
                    args.value.height = args.image.height || args.value.height;
                    args.value.width = args.image.width || args.value.width;
                }
                cell.value = args.value;
                if (!isNullOrUndefined(args.hyperLink)) {
                    cell.value = this.setHyperLink(args);
                }
                if (!isNullOrUndefined(args.style)) {
                    this.processCellStyle(cell, args);
                }
                if (args.colSpan > 1) {
                    if ((j + 1 + args.colSpan) > gridRow.cells.count) {
                        args.colSpan = gridRow.cells.count - (j + 1);
                    }
                    cell.columnSpan = args.colSpan;
                    for (let i = 1; i < cell.columnSpan; i++) {
                        const spanCell = gridRow.cells.getCell(j + i);
                        spanCell.value = '';
                    }
                    j += (args.colSpan - 1);
                }
            }
            if (row.isExpand) {
                const gridRow = this.setRecordThemeStyle(pdfGrid.rows.addRow(), border);
                const cell = gridRow.cells.getCell(startIndex);
                cell.columnSpan = gridRow.cells.count - (startIndex);
                cell.style.cellPadding = new PdfPaddings(10, 10, 10, 10);
                gObj.isPrinting = true;
                const exportType = (!isNullOrUndefined(pdfExportProperties) && pdfExportProperties.exportType) ?
                    pdfExportProperties.exportType : 'AllPages';
                const returnValue = this.helper.createChildGrid(gObj, row, exportType, this.gridPool);
                const childGridObj = returnValue.childGrid;
                const element = returnValue.element;
                childGridObj.actionFailure =
                    helper.failureHandler(this.gridPool, childGridObj, this.globalResolve);
                const args = { childGrid: childGridObj, row, cell, exportProperties: pdfExportProperties };
                this.parent.trigger(exportDetailDataBound, args);
                childGridObj.beforeDataBound = this.childGridCell(cell, childGridObj, pdfExportProperties);
                childGridObj.appendTo(element);
            }
            this.parent.notify(exportRowDataBound, { type: 'pdf', rowObj: row });
        }
        return rowIndex;
    }
    setHyperLink(args) {
        // create the Text Web Link
        const textLink = new PdfTextWebLink();
        // set the hyperlink
        textLink.url = args.hyperLink.target;
        // set the link text
        textLink.text = args.hyperLink.displayText || args.hyperLink.target;
        // set the font
        textLink.font = new PdfStandardFont(PdfFontFamily.Helvetica, 9.75);
        // set the brush and pen for the text color
        textLink.brush = new PdfSolidBrush(new PdfColor(51, 102, 187));
        return textLink;
    }
    childGridCell(cell, childGridObj, pdfExportProperties) {
        return (result) => {
            childGridObj.beforeDataBound = null;
            result.cancel = true;
            cell.value = this.processGridExport(childGridObj, result, pdfExportProperties);
            childGridObj.destroy();
            detach(childGridObj.element);
            this.gridPool[childGridObj.id] = true;
            this.helper.checkAndExport(this.gridPool, this.globalResolve);
            return cell;
        };
    }
    processCellStyle(cell, args) {
        if (!isNullOrUndefined(args.style.backgroundColor)) {
            const backColor = this.hexToRgb(args.style.backgroundColor);
            cell.style.backgroundBrush = new PdfSolidBrush(new PdfColor(backColor.r, backColor.g, backColor.b));
        }
        if (!isNullOrUndefined(args.style.textAlignment)) {
            cell.style.stringFormat = this.getHorizontalAlignment(args.style.textAlignment);
        }
        if (!isNullOrUndefined(args.style.cellPadding)) {
            cell.style.cellPadding = args.style.cellPadding;
        }
        if (!isNullOrUndefined(args.style.verticalAlignment)) {
            cell.style.stringFormat = this.getVerticalAlignment(args.style.verticalAlignment, cell.style.stringFormat);
        }
        if (!isNullOrUndefined(args.style.textBrushColor)) {
            const textBrushColor = this.hexToRgb(args.style.textBrushColor);
            cell.style.textBrush = new PdfSolidBrush(new PdfColor(textBrushColor.r, textBrushColor.g, textBrushColor.b));
        }
        if (!isNullOrUndefined(args.style.textPenColor)) {
            const textPenColor = this.hexToRgb(args.style.textPenColor);
            cell.style.textPen = new PdfPen(new PdfColor(textPenColor.r, textPenColor.g, textPenColor.b));
        }
        if (!isNullOrUndefined(args.style.fontFamily) || !isNullOrUndefined(args.style.fontSize) || !isNullOrUndefined(args.style.bold) ||
            !isNullOrUndefined(args.style.italic) || !isNullOrUndefined(args.style.underline) || !isNullOrUndefined(args.style.strikeout)) {
            cell.style.font = this.getFont(args);
        }
        if (!isNullOrUndefined(args.style.border)) {
            const border = new PdfBorders();
            const borderWidth = args.style.border.width;
            // set border width
            const width = (!isNullOrUndefined(borderWidth) && typeof borderWidth === 'number') ? (borderWidth * 0.75) : (undefined);
            // set border color
            let color = new PdfColor(196, 196, 196);
            if (!isNullOrUndefined(args.style.border.color)) {
                const borderColor = this.hexToRgb(args.style.border.color);
                color = new PdfColor(borderColor.r, borderColor.g, borderColor.b);
            }
            const pen = new PdfPen(color, width);
            // set border dashStyle 'Solid <default>, Dash, Dot, DashDot, DashDotDot'
            if (!isNullOrUndefined(args.style.border.dashStyle)) {
                pen.dashStyle = this.getDashStyle(args.style.border.dashStyle);
            }
            border.all = pen;
            cell.style.borders = border;
        }
        if (!isNullOrUndefined(args.style.paragraphIndent)) {
            cell.style.stringFormat = new PdfStringFormat();
            cell.style.stringFormat.paragraphIndent = args.style.paragraphIndent;
        }
    }
    /**
     * set text alignment of each columns in exporting grid
     *
     * @param {string} textAlign - specifies the textAlign
     * @param {PdfStringFormat} format - specifies the PdfStringFormat
     * @returns {PdfStringFormat} returns the PdfStringFormat
     * @private
     */
    getHorizontalAlignment(textAlign, format) {
        if (format === undefined) {
            format = new PdfStringFormat();
        }
        switch (textAlign) {
            case 'Right':
                format.alignment = PdfTextAlignment.Right;
                break;
            case 'Center':
                format.alignment = PdfTextAlignment.Center;
                break;
            case 'Justify':
                format.alignment = PdfTextAlignment.Justify;
                break;
            case 'Left':
                format.alignment = PdfTextAlignment.Left;
                break;
        }
        return format;
    }
    /**
     * set vertical alignment of each columns in exporting grid
     *
     * @param {string} verticalAlign - specifies the verticalAlign
     * @param {PdfStringFormat} format - specifies the PdfStringFormat
     * @param {string} textAlign - specifies the text align
     * @returns {PdfStringFormat} returns the PdfStringFormat
     * @private
     */
    getVerticalAlignment(verticalAlign, format, textAlign) {
        if (format === undefined) {
            format = new PdfStringFormat();
            format = this.getHorizontalAlignment(textAlign, format);
        }
        switch (verticalAlign) {
            case 'Bottom':
                format.lineAlignment = PdfVerticalAlignment.Bottom;
                break;
            case 'Middle':
                format.lineAlignment = PdfVerticalAlignment.Middle;
                break;
            case 'Top':
                format.lineAlignment = PdfVerticalAlignment.Top;
                break;
        }
        return format;
    }
    getFontFamily(fontFamily) {
        switch (fontFamily) {
            case 'TimesRoman':
                return 2;
            case 'Courier':
                return 1;
            case 'Symbol':
                return 3;
            case 'ZapfDingbats':
                return 4;
            default:
                return 0;
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getFont(content) {
        if (content.font) {
            return content.font;
        }
        const fontSize = (!isNullOrUndefined(content.style.fontSize)) ? (content.style.fontSize * 0.75) : 9.75;
        const fontFamily = (!isNullOrUndefined(content.style.fontFamily)) ?
            (this.getFontFamily(content.style.fontFamily)) : PdfFontFamily.TimesRoman;
        let fontStyle = PdfFontStyle.Regular;
        if (!isNullOrUndefined(content.style.bold) && content.style.bold) {
            fontStyle |= PdfFontStyle.Bold;
        }
        if (!isNullOrUndefined(content.style.italic) && content.style.italic) {
            fontStyle |= PdfFontStyle.Italic;
        }
        if (!isNullOrUndefined(content.style.underline) && content.style.underline) {
            fontStyle |= PdfFontStyle.Underline;
        }
        if (!isNullOrUndefined(content.style.strikeout) && content.style.strikeout) {
            fontStyle |= PdfFontStyle.Strikeout;
        }
        return new PdfStandardFont(fontFamily, fontSize, fontStyle);
    }
    getPageNumberStyle(pageNumberType) {
        switch (pageNumberType) {
            case 'LowerLatin':
                return 2;
            case 'LowerRoman':
                return 3;
            case 'UpperLatin':
                return 4;
            case 'UpperRoman':
                return 5;
            default:
                return 1;
        }
    }
    setContentFormat(content, format) {
        if (!isNullOrUndefined(content.size)) {
            const width = content.size.width * 0.75;
            const height = content.size.height * 0.75;
            format = new PdfStringFormat(PdfTextAlignment.Left, PdfVerticalAlignment.Middle);
            if (!isNullOrUndefined(content.style.hAlign)) {
                switch (content.style.hAlign) {
                    case 'Right':
                        format.alignment = PdfTextAlignment.Right;
                        break;
                    case 'Center':
                        format.alignment = PdfTextAlignment.Center;
                        break;
                    case 'Justify':
                        format.alignment = PdfTextAlignment.Justify;
                        break;
                    default:
                        format.alignment = PdfTextAlignment.Left;
                }
            }
            if (!isNullOrUndefined(content.style.vAlign)) {
                format = this.getVerticalAlignment(content.style.vAlign, format);
            }
            return { format: format, size: new SizeF(width, height) };
        }
        return null;
    }
    getPageSize(pageSize) {
        switch (pageSize) {
            case 'Letter':
                return new SizeF(612, 792);
            case 'Note':
                return new SizeF(540, 720);
            case 'Legal':
                return new SizeF(612, 1008);
            case 'A0':
                return new SizeF(2380, 3368);
            case 'A1':
                return new SizeF(1684, 2380);
            case 'A2':
                return new SizeF(1190, 1684);
            case 'A3':
                return new SizeF(842, 1190);
            case 'A5':
                return new SizeF(421, 595);
            case 'A6':
                return new SizeF(297, 421);
            case 'A7':
                return new SizeF(210, 297);
            case 'A8':
                return new SizeF(148, 210);
            case 'A9':
                return new SizeF(105, 148);
            // case 'A10':
            // return new SizeF(74, 105);
            case 'B0':
                return new SizeF(2836, 4008);
            case 'B1':
                return new SizeF(2004, 2836);
            case 'B2':
                return new SizeF(1418, 2004);
            case 'B3':
                return new SizeF(1002, 1418);
            case 'B4':
                return new SizeF(709, 1002);
            case 'B5':
                return new SizeF(501, 709);
            case 'Archa':
                return new SizeF(648, 864);
            case 'Archb':
                return new SizeF(864, 1296);
            case 'Archc':
                return new SizeF(1296, 1728);
            case 'Archd':
                return new SizeF(1728, 2592);
            case 'Arche':
                return new SizeF(2592, 3456);
            case 'Flsa':
                return new SizeF(612, 936);
            case 'HalfLetter':
                return new SizeF(396, 612);
            case 'Letter11x17':
                return new SizeF(792, 1224);
            case 'Ledger':
                return new SizeF(1224, 792);
            default:
                return new SizeF(595, 842);
        }
    }
    getDashStyle(dashStyle) {
        switch (dashStyle) {
            case 'Dash':
                return 1;
            case 'Dot':
                return 2;
            case 'DashDot':
                return 3;
            case 'DashDotDot':
                return 4;
            default:
                return 0;
        }
    }
    getPenFromContent(content) {
        let pen = new PdfPen(new PdfColor(0, 0, 0));
        if (!isNullOrUndefined(content.style) && content.style !== null && !isNullOrUndefined(content.style.penColor)) {
            const penColor = this.hexToRgb(content.style.penColor);
            pen = new PdfPen(new PdfColor(penColor.r, penColor.g, penColor.b));
        }
        return pen;
    }
    getBrushFromContent(content) {
        let brush = null;
        if (!isNullOrUndefined(content.style.textBrushColor)) {
            /* tslint:disable-next-line:max-line-length */
            const brushColor = this.hexToRgb(content.style.textBrushColor);
            brush = new PdfSolidBrush(new PdfColor(brushColor.r, brushColor.g, brushColor.b));
        }
        return brush;
    }
    hexToRgb(hex) {
        if (hex === null || hex === '' || hex.length !== 7) {
            throw new Error('please set valid hex value for color...');
        }
        hex = hex.substring(1);
        const bigint = parseInt(hex, 16);
        const r = (bigint >> 16) & 255;
        const g = (bigint >> 8) & 255;
        const b = bigint & 255;
        return { r: r, g: g, b: b };
    }
    getFontStyle(theme) {
        let fontStyle = PdfFontStyle.Regular;
        if (!isNullOrUndefined(theme) && theme.bold) {
            fontStyle |= PdfFontStyle.Bold;
        }
        if (!isNullOrUndefined(theme) && theme.italic) {
            fontStyle |= PdfFontStyle.Italic;
        }
        if (!isNullOrUndefined(theme) && theme.underline) {
            fontStyle |= PdfFontStyle.Underline;
        }
        if (!isNullOrUndefined(theme) && theme.strikeout) {
            fontStyle |= PdfFontStyle.Strikeout;
        }
        return fontStyle;
    }
    getBorderStyle(border) {
        const borders = new PdfBorders();
        if (!isNullOrUndefined(border)) {
            const borderWidth = border.width;
            // set border width
            const width = (!isNullOrUndefined(borderWidth) && typeof borderWidth === 'number') ? borderWidth * 0.75 : undefined;
            // set border color
            let color = new PdfColor(196, 196, 196);
            if (!isNullOrUndefined(border.color)) {
                const borderColor = this.hexToRgb(border.color);
                color = new PdfColor(borderColor.r, borderColor.g, borderColor.b);
            }
            const pen = new PdfPen(color, width);
            // set border dashStyle 'Solid <default>, Dash, Dot, DashDot, DashDotDot'
            if (!isNullOrUndefined(border.dashStyle)) {
                pen.dashStyle = this.getDashStyle(border.dashStyle);
            }
            borders.all = pen;
        }
        else {
            borders.all = new PdfPen(new PdfColor(234, 234, 234));
        }
        return borders;
    }
    destroy() {
        //destroy for exporting
    }
}

/**
 * `CommandColumn` used to render command column in grid
 *
 * @hidden
 */
class CommandColumnRenderer extends CellRenderer {
    constructor(parent, locator) {
        super(parent, locator);
        this.buttonElement = this.parent.createElement('button', {});
        this.unbounDiv = this.parent.createElement('div', { className: 'e-unboundcelldiv', styles: 'display: inline-block' });
        this.childRefs = [];
        this.element = this.parent.createElement('TD', {
            className: 'e-rowcell e-unboundcell', attrs: {
                role: 'gridcell', tabindex: '-1'
            }
        });
        this.parent.on(destroy, this.destroyButtons, this);
    }
    destroyButtons() {
        for (let i = 0; i < this.childRefs.length; i++) {
            if (this.childRefs[i] && !this.childRefs[i].isDestroyed) {
                this.childRefs[i].destroy();
            }
        }
        this.parent.off(destroy, this.destroyButtons);
    }
    /**
     * Function to render the cell content based on Column object.
     *
     * @param {cell<Column>} cell - specifies the cell
     * @param {Object} data - specifies the data
     * @param {Object} attributes - specifies the attributes
     * @param {boolean} isVirtualEdit - specifies virtual scroll editing
     * @returns {Element} returns the element
     */
    render(cell, data, attributes$$1, isVirtualEdit) {
        let node = this.element.cloneNode();
        const uid = 'uid';
        node.appendChild(this.unbounDiv.cloneNode());
        node.setAttribute('aria-label', 'is Command column column header ' + cell.column.headerText);
        if (cell.column.commandsTemplate) {
            if (this.parent.isReact && typeof (cell.column.commandsTemplate) !== 'string') {
                const tempID = this.parent + 'commandsTemplate';
                cell.column.getColumnTemplate()(data, this.parent, 'commandsTemplate', tempID, null, null, node.firstElementChild);
                this.parent.renderTemplates();
            }
            else {
                appendChildren(node.firstElementChild, cell.column.getColumnTemplate()(data));
            }
        }
        else {
            for (const command of cell.commands) {
                node = this.renderButton(node, command, attributes$$1.index, command[uid]);
            }
        }
        this.setAttributes(node, cell, attributes$$1);
        if ((!this.parent.enableVirtualization && this.parent.isEdit) || isVirtualEdit) {
            addClass([].slice.call(node.getElementsByClassName('e-edit-delete')), 'e-hide');
            removeClass([].slice.call(node.getElementsByClassName('e-save-cancel')), 'e-hide');
        }
        else {
            addClass([].slice.call(node.getElementsByClassName('e-save-cancel')), 'e-hide');
            removeClass([].slice.call(node.getElementsByClassName('e-edit-delete')), 'e-hide');
        }
        return node;
    }
    renderButton(node, buttonOption, index, uid) {
        const button = this.buttonElement.cloneNode();
        attributes(button, {
            'id': this.parent.element.id + (buttonOption.type || '') + '_' + index + '_' + uid, 'type': 'button',
            title: !isNullOrUndefined(buttonOption.title) ? buttonOption.title :
                buttonOption.buttonOption.content || this.localizer.getConstant(buttonOption.type) || buttonOption.type,
            'data-uid': uid
        });
        button.onclick = buttonOption.buttonOption.click;
        buttonOption.buttonOption.cssClass = this.parent.cssClass ?
            buttonOption.buttonOption.cssClass + ' ' + this.parent.cssClass : buttonOption.buttonOption.cssClass;
        const buttonObj = new Button(buttonOption.buttonOption, button);
        this.childRefs.push(buttonObj);
        buttonObj.commandType = buttonOption.type;
        node.firstElementChild.appendChild(buttonObj.element);
        switch (buttonOption.type) {
            case 'Edit':
            case 'Delete':
                addClass([button], ['e-edit-delete', 'e-' + buttonOption.type.toLowerCase() + 'button']);
                break;
            case 'Cancel':
            case 'Save':
                addClass([button], ['e-save-cancel', 'e-' + buttonOption.type.toLowerCase() + 'button']);
                break;
        }
        return node;
    }
}

/**
 * `CommandColumn` used to handle the command column actions.
 *
 * @hidden
 */
class CommandColumn {
    constructor(parent, locator) {
        this.parent = parent;
        this.locator = locator;
        this.initiateRender();
        this.addEventListener();
    }
    initiateRender() {
        const cellFac = this.locator.getService('cellRendererFactory');
        cellFac.addCellRenderer(CellType.CommandColumn, new CommandColumnRenderer(this.parent, this.locator));
    }
    commandClickHandler(e) {
        const gObj = this.parent;
        const target = closest(e.target, 'button');
        if (!target || !closest(e.target, '.e-unboundcell')) {
            return;
        }
        const buttonObj = target.ej2_instances[0];
        const type = buttonObj.commandType;
        const uid = target.getAttribute('data-uid');
        let commandColumn;
        const row$$1 = gObj.getRowObjectFromUID(closest(target, '.' + row).getAttribute('data-uid'));
        const cols = this.parent.columnModel;
        for (let i = 0; i < cols.length; i++) {
            if (cols[i].commands) {
                const commandCols = cols[i].commands;
                for (let j = 0; j < commandCols.length; j++) {
                    const idInString = 'uid';
                    const typeInString = 'type';
                    if (commandCols[j][idInString] === uid && commandCols[j][typeInString] === type) {
                        commandColumn = commandCols[j];
                    }
                    else {
                        const buttons = [].slice.call(closest(target, '.e-unboundcell').querySelectorAll('button'));
                        const index = buttons.findIndex((ele) => ele === target);
                        if (index < commandCols.length && commandCols[index][typeInString] === type) {
                            commandColumn = commandCols[index];
                        }
                    }
                }
            }
        }
        const args = {
            cancel: false,
            target: target,
            commandColumn: commandColumn,
            rowData: isNullOrUndefined(row$$1) ? undefined : row$$1.data
        };
        this.parent.trigger(commandClick, args, (commandclickargs) => {
            if (buttonObj.disabled || !gObj.editModule || commandclickargs.cancel) {
                return;
            }
            switch (type) {
                case 'Edit':
                    gObj.editModule.endEdit();
                    gObj.editModule.startEdit(closest(target, 'tr'));
                    break;
                case 'Cancel':
                    gObj.editModule.closeEdit();
                    break;
                case 'Save':
                    gObj.editModule.endEdit();
                    break;
                case 'Delete':
                    if (gObj.editSettings.mode !== 'Batch') {
                        gObj.editModule.endEdit();
                    }
                    gObj.commandDelIndex = parseInt(closest(target, 'tr').getAttribute(ariaRowIndex), 10);
                    gObj.clearSelection();
                    //for toogle issue when dbl click
                    gObj.selectRow(gObj.commandDelIndex, false);
                    gObj.editModule.deleteRecord();
                    gObj.commandDelIndex = undefined;
                    break;
            }
        });
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     */
    getModuleName() {
        return 'commandColumn';
    }
    /**
     * To destroy CommandColumn.
     *
     * @function destroy
     * @returns {void}
     */
    destroy() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.removeEventListener();
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(click, this.commandClickHandler);
        this.parent.off(keyPressed, this.keyPressHandler);
        this.parent.off(initialEnd, this.load);
        this.parent.off(destroy, this.destroy);
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(click, this.commandClickHandler, this);
        this.parent.on(keyPressed, this.keyPressHandler, this);
        this.parent.on(initialEnd, this.load, this);
        this.parent.on(destroy, this.destroy, this);
    }
    keyPressHandler(e) {
        if (e.action === 'enter' && closest(e.target, '.e-unboundcelldiv')) {
            this.commandClickHandler(e);
            e.preventDefault();
        }
    }
    load() {
        const uid = 'uid';
        const col = this.parent.columnModel;
        for (let i = 0; i < col.length; i++) {
            if (col[i].commands) {
                const commandCol = col[i].commands;
                for (let j = 0; j < commandCol.length; j++) {
                    commandCol[j][uid] = getUid('gridcommand');
                }
            }
        }
    }
}

const menuClass = {
    header: '.' + gridHeader,
    content: '.' + gridContent,
    edit: '.e-inline-edit',
    batchEdit: '.e-editedbatchcell',
    editIcon: 'e-edit',
    pager: '.e-gridpager',
    delete: 'e-delete',
    save: 'e-save',
    cancel: 'e-cancel',
    copy: 'e-copy',
    pdf: 'e-pdfexport',
    group: 'e-icon-group',
    ungroup: 'e-icon-ungroup',
    csv: 'e-csvexport',
    excel: 'e-excelexport',
    fPage: 'e-icon-first',
    nPage: 'e-icon-next',
    lPage: 'e-icon-last',
    pPage: 'e-icon-prev',
    ascending: 'e-icon-ascending',
    descending: 'e-icon-descending',
    groupHeader: 'e-groupdroparea',
    touchPop: 'e-gridpopup'
};
/**
 * The `ContextMenu` module is used to handle context menu actions.
 */
class ContextMenu$1 {
    constructor(parent, serviceLocator) {
        this.defaultItems = {};
        this.disableItems = [];
        this.hiddenItems = [];
        this.localeText = this.setLocaleKey();
        this.parent = parent;
        this.gridID = parent.element.id;
        this.serviceLocator = serviceLocator;
        this.addEventListener();
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(uiUpdate, this.enableAfterRenderMenu, this);
        this.parent.on(initialLoad, this.render, this);
        this.parent.on(destroy, this.destroy, this);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(initialLoad, this.render);
        this.parent.off(uiUpdate, this.enableAfterRenderMenu);
        this.parent.off(destroy, this.destroy);
        EventHandler.remove(this.element, 'keydown', this.keyDownHandler.bind(this));
    }
    keyDownHandler(e) {
        if (e.code === 'Tab' || e.which === 9) {
            this.contextMenu.close();
        }
        if (e.code === 'Escape') {
            this.contextMenu.close();
            this.parent.notify(restoreFocus, {});
        }
    }
    render() {
        this.parent.element.classList.add('e-noselect');
        this.l10n = this.serviceLocator.getService('localization');
        this.element = this.parent.createElement('ul', { id: this.gridID + '_cmenu' });
        EventHandler.add(this.element, 'keydown', this.keyDownHandler.bind(this));
        this.parent.element.appendChild(this.element);
        const target = '#' + this.gridID;
        this.contextMenu = new ContextMenu({
            items: this.getMenuItems(),
            enableRtl: this.parent.enableRtl,
            enablePersistence: this.parent.enablePersistence,
            locale: this.parent.locale,
            target: target,
            select: this.contextMenuItemClick.bind(this),
            beforeOpen: this.contextMenuBeforeOpen.bind(this),
            onOpen: this.contextMenuOpen.bind(this),
            onClose: this.contextMenuOnClose.bind(this),
            cssClass: this.parent.cssClass ? 'e-grid-menu' + ' ' + this.parent.cssClass : 'e-grid-menu'
        });
        this.contextMenu.appendTo(this.element);
    }
    enableAfterRenderMenu(e) {
        if (e.module === this.getModuleName() && e.enable) {
            if (this.contextMenu) {
                this.contextMenu.destroy();
                remove(this.element);
                this.parent.element.classList.remove('e-noselect');
            }
            this.render();
        }
    }
    getMenuItems() {
        const menuItems = [];
        const exportItems = [];
        for (const item of this.parent.contextMenuItems) {
            if (typeof item === 'string' && this.getDefaultItems().indexOf(item) !== -1) {
                if (item.toLocaleLowerCase().indexOf('export') !== -1) {
                    exportItems.push(this.buildDefaultItems(item));
                }
                else {
                    menuItems.push(this.buildDefaultItems(item));
                }
            }
            else if (typeof item !== 'string') {
                menuItems.push(item);
            }
        }
        if (exportItems.length > 0) {
            const exportGroup = this.buildDefaultItems('export');
            exportGroup.items = exportItems;
            menuItems.push(exportGroup);
        }
        return menuItems;
    }
    getLastPage() {
        let totalpage = Math.floor(this.parent.pageSettings.totalRecordsCount / this.parent.pageSettings.pageSize);
        if (this.parent.pageSettings.totalRecordsCount % this.parent.pageSettings.pageSize) {
            totalpage += 1;
        }
        return totalpage;
    }
    contextMenuOpen() {
        this.isOpen = true;
    }
    /**
     * @param {ContextMenuClickEventArgs} args - specifies the ContextMenuClickEventArgs argument type
     * @returns {void}
     * @hidden
     */
    contextMenuItemClick(args) {
        const item = this.getKeyFromId(args.item.id);
        switch (item) {
            case 'AutoFitAll':
                this.parent.autoFitColumns([]);
                break;
            case 'AutoFit':
                this.parent.autoFitColumns(this.targetColumn.field);
                break;
            case 'Group':
                this.parent.groupColumn(this.targetColumn.field);
                break;
            case 'Ungroup':
                this.parent.ungroupColumn(this.targetColumn.field);
                break;
            case 'Edit':
                if (this.parent.editModule) {
                    if (this.parent.editSettings.mode === 'Batch') {
                        if (this.row && this.cell && !isNaN(parseInt(this.cell.getAttribute(ariaColIndex), 10))) {
                            this.parent.editModule.editCell(parseInt(this.row.getAttribute(ariaRowIndex), 10), 
                            // eslint-disable-next-line
                            this.parent.getColumns()[parseInt(this.cell.getAttribute(ariaColIndex), 10)].field);
                        }
                    }
                    else {
                        this.parent.editModule.endEdit();
                        this.parent.editModule.startEdit(this.row);
                    }
                }
                break;
            case 'Delete':
                if (this.parent.editModule) {
                    if (this.parent.editSettings.mode !== 'Batch') {
                        this.parent.editModule.endEdit();
                    }
                    if (this.parent.getSelectedRecords().length === 1) {
                        this.parent.editModule.deleteRow(this.row);
                    }
                    else {
                        this.parent.deleteRecord();
                    }
                }
                break;
            case 'Save':
                if (this.parent.editModule) {
                    this.parent.editModule.endEdit();
                }
                break;
            case 'Cancel':
                if (this.parent.editModule) {
                    this.parent.editModule.closeEdit();
                }
                break;
            case 'Copy':
                this.parent.copy();
                break;
            case 'PdfExport':
                this.parent.pdfExport();
                break;
            case 'ExcelExport':
                this.parent.excelExport();
                break;
            case 'CsvExport':
                this.parent.csvExport();
                break;
            case 'SortAscending':
                this.isOpen = false;
                this.parent.sortColumn(this.targetColumn.field, 'Ascending');
                break;
            case 'SortDescending':
                this.isOpen = false;
                this.parent.sortColumn(this.targetColumn.field, 'Descending');
                break;
            case 'FirstPage':
                this.parent.goToPage(1);
                break;
            case 'PrevPage':
                this.parent.goToPage(this.parent.pageSettings.currentPage - 1);
                break;
            case 'LastPage':
                this.parent.goToPage(this.getLastPage());
                break;
            case 'NextPage':
                this.parent.goToPage(this.parent.pageSettings.currentPage + 1);
                break;
        }
        args.column = this.targetColumn;
        args.rowInfo = this.targetRowdata;
        this.parent.trigger(contextMenuClick, args);
    }
    contextMenuOnClose(args) {
        const parent = 'parentObj';
        if (args.items.length > 0 && args.items[0][parent] instanceof ContextMenu) {
            this.updateItemStatus();
        }
        this.parent.notify(selectRowOnContextOpen, { isOpen: false });
    }
    getLocaleText(item) {
        return this.l10n.getConstant(this.localeText[item]);
    }
    updateItemStatus() {
        this.contextMenu.showItems(this.hiddenItems);
        this.contextMenu.enableItems(this.disableItems);
        this.hiddenItems = [];
        this.disableItems = [];
        this.isOpen = false;
    }
    contextMenuBeforeOpen(args) {
        const closestGrid = closest(args.event.target, '.e-grid');
        if (args.event && closestGrid && closestGrid !== this.parent.element) {
            args.cancel = true;
        }
        else if (args.event && (closest(args.event.target, '.' + menuClass.groupHeader)
            || closest(args.event.target, '.' + menuClass.touchPop) ||
            closest(args.event.target, '.e-summarycell') ||
            closest(args.event.target, '.e-groupcaption') ||
            closest(args.event.target, '.e-filterbarcell'))) {
            args.cancel = true;
        }
        else {
            this.targetColumn = this.getColumn(args.event);
            if (parentsUntil(args.event.target, 'e-grid')) {
                this.targetRowdata = this.parent.getRowInfo(args.event.target);
            }
            if ((isNullOrUndefined(args.parentItem)) && this.targetColumn) {
                if (this.targetRowdata.cell) {
                    this.parent.notify(selectRowOnContextOpen, { isOpen: true });
                    this.selectRow(args.event, (this.targetRowdata.cell.classList.contains('e-selectionbackground')
                        && this.parent.selectionSettings.type === 'Multiple') ? false : true);
                }
            }
            const hideSepItems = [];
            const showSepItems = [];
            for (const item of args.items) {
                const key = this.getKeyFromId(item.id);
                const dItem = this.defaultItems[key];
                if (this.getDefaultItems().indexOf(key) !== -1) {
                    if (this.ensureDisabledStatus(key)) {
                        this.disableItems.push(item.text);
                    }
                    if (args.event && (this.ensureTarget(args.event.target, menuClass.edit) ||
                        this.ensureTarget(args.event.target, menuClass.batchEdit))) {
                        if (key !== 'Save' && key !== 'Cancel') {
                            this.hiddenItems.push(item.text);
                        }
                    }
                    else if (this.parent.editModule && this.parent.editSettings.mode === 'Batch' &&
                        ((closest(args.event.target, '.e-gridform')) ||
                            this.parent.editModule.getBatchChanges()[changedRecords].length ||
                            this.parent.editModule.getBatchChanges()[addedRecords].length ||
                            this.parent.editModule.getBatchChanges()[deletedRecords].length) && (key === 'Save' || key === 'Cancel')) {
                        continue;
                    }
                    else if (isNullOrUndefined(args.parentItem) && args.event
                        && !this.ensureTarget(args.event.target, dItem.target)) {
                        this.hiddenItems.push(item.text);
                    }
                }
                else if (item.target && args.event &&
                    !this.ensureTarget(args.event.target, item.target)) {
                    if (item.separator) {
                        hideSepItems.push(item.id);
                    }
                    else {
                        this.hiddenItems.push(item.text);
                    }
                }
                else if (this.ensureTarget(args.event.target, item.target) && item.separator) {
                    showSepItems.push(item.id);
                }
            }
            if (showSepItems.length > 0) {
                this.contextMenu.showItems(showSepItems, true);
            }
            this.contextMenu.enableItems(this.disableItems, false);
            this.contextMenu.hideItems(this.hiddenItems);
            if (hideSepItems.length > 0) {
                this.contextMenu.hideItems(hideSepItems, true);
            }
            this.eventArgs = args.event;
            args.column = this.targetColumn;
            args.rowInfo = this.targetRowdata;
            this.parent.trigger(contextMenuOpen, args);
            if (args.cancel || (this.hiddenItems.length === args.items.length && !args.parentItem)) {
                this.updateItemStatus();
                args.cancel = true;
            }
        }
        applyBiggerTheme(this.parent.element, this.contextMenu.element.parentElement);
    }
    ensureTarget(targetElement, selector) {
        let target = targetElement;
        if (this.ensureFrozenHeader(targetElement) && (selector === menuClass.header || selector === menuClass.content)) {
            target = closest(targetElement, selector === menuClass.header ? 'thead' : tbody);
        }
        else if (selector === menuClass.content || selector === menuClass.header) {
            target = parentsUntil(closest(targetElement, '.' + table), selector.substr(1, selector.length));
        }
        else {
            target = closest(targetElement, selector);
        }
        return target && parentsUntil(target, 'e-grid') === this.parent.element;
    }
    ensureFrozenHeader(targetElement) {
        return (this.parent.isFrozenGrid() || this.parent.frozenRows)
            && closest(targetElement, menuClass.header) ? true : false;
    }
    ensureDisabledStatus(item) {
        let status = false;
        switch (item) {
            case 'AutoFitAll':
            case 'AutoFit':
                status = !(this.parent.ensureModuleInjected(Resize) && !this.parent.isEdit)
                    || (this.targetColumn && !this.targetColumn.field && item === 'AutoFit');
                break;
            case 'Group':
                if (!this.parent.allowGrouping || (this.parent.ensureModuleInjected(Group) && this.targetColumn
                    && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) >= 0) ||
                    (this.targetColumn && !this.targetColumn.field)) {
                    status = true;
                }
                break;
            case 'Ungroup':
                if (!this.parent.allowGrouping || !this.parent.ensureModuleInjected(Group)
                    || (this.parent.ensureModuleInjected(Group) && this.targetColumn
                        && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) < 0)) {
                    status = true;
                }
                break;
            case 'Edit':
            case 'Delete':
            case 'Save':
            case 'Cancel':
                if (!this.parent.editModule || (this.parent.getDataRows().length === 0)) {
                    status = true;
                }
                break;
            case 'Copy':
                if ((this.parent.getSelectedRowIndexes().length === 0 && this.parent.getSelectedRowCellIndexes().length === 0) ||
                    this.parent.getCurrentViewRecords().length === 0) {
                    status = true;
                }
                break;
            case 'export':
                if ((!this.parent.allowExcelExport || !this.parent.excelExport) ||
                    !this.parent.ensureModuleInjected(PdfExport) && !this.parent.ensureModuleInjected(ExcelExport)) {
                    status = true;
                }
                break;
            case 'PdfExport':
                if (!(this.parent.allowPdfExport) || !this.parent.ensureModuleInjected(PdfExport)) {
                    status = true;
                }
                break;
            case 'ExcelExport':
            case 'CsvExport':
                if (!(this.parent.allowExcelExport) || !this.parent.ensureModuleInjected(ExcelExport)) {
                    status = true;
                }
                break;
            case 'SortAscending':
            case 'SortDescending':
                if ((!this.parent.allowSorting) || !this.parent.ensureModuleInjected(Sort) ||
                    (this.targetColumn && !this.targetColumn.field)) {
                    status = true;
                }
                else if (this.parent.ensureModuleInjected(Sort) && this.parent.sortSettings.columns.length > 0 && this.targetColumn) {
                    const sortColumns = this.parent.sortSettings.columns;
                    for (let i = 0; i < sortColumns.length; i++) {
                        if (sortColumns[i].field === this.targetColumn.field
                            && sortColumns[i].direction.toLowerCase() === item.toLowerCase().replace('sort', '').toLocaleLowerCase()) {
                            status = true;
                        }
                    }
                }
                break;
            case 'FirstPage':
            case 'PrevPage':
                if (!this.parent.allowPaging || !this.parent.ensureModuleInjected(Page) ||
                    this.parent.getCurrentViewRecords().length === 0 ||
                    (this.parent.ensureModuleInjected(Page) && this.parent.pageSettings.currentPage === 1)) {
                    status = true;
                }
                break;
            case 'LastPage':
            case 'NextPage':
                if (!this.parent.allowPaging || !this.parent.ensureModuleInjected(Page) ||
                    this.parent.getCurrentViewRecords().length === 0 ||
                    (this.parent.ensureModuleInjected(Page) && this.parent.pageSettings.currentPage === this.getLastPage())) {
                    status = true;
                }
                break;
        }
        return status;
    }
    /**
     * Gets the context menu element from the Grid.
     *
     * @returns {Element} returns the element
     */
    getContextMenu() {
        return this.element;
    }
    /**
     * Destroys the context menu component in the Grid.
     *
     * @function destroy
     * @returns {void}
     * @hidden
     */
    destroy() {
        const gridElement = this.parent.element;
        if (!gridElement || (!gridElement.querySelector('.' + gridHeader) && !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        this.contextMenu.destroy();
        if (this.element.parentNode) {
            remove(this.element);
        }
        this.removeEventListener();
        this.parent.element.classList.remove('e-noselect');
    }
    getModuleName() {
        return 'contextMenu';
    }
    generateID(item) {
        return this.gridID + '_cmenu_' + item;
    }
    getKeyFromId(id) {
        return id.replace(this.gridID + '_cmenu_', '');
    }
    buildDefaultItems(item) {
        let menuItem;
        switch (item) {
            case 'AutoFitAll':
            case 'AutoFit':
                menuItem = { target: menuClass.header };
                break;
            case 'Group':
                menuItem = { target: menuClass.header, iconCss: menuClass.group };
                break;
            case 'Ungroup':
                menuItem = { target: menuClass.header, iconCss: menuClass.ungroup };
                break;
            case 'Edit':
                menuItem = { target: menuClass.content, iconCss: menuClass.editIcon };
                break;
            case 'Delete':
                menuItem = { target: menuClass.content, iconCss: menuClass.delete };
                break;
            case 'Save':
                menuItem = { target: menuClass.edit, iconCss: menuClass.save };
                break;
            case 'Cancel':
                menuItem = { target: menuClass.edit, iconCss: menuClass.cancel };
                break;
            case 'Copy':
                menuItem = { target: menuClass.content, iconCss: menuClass.copy };
                break;
            case 'export':
                menuItem = { target: menuClass.content };
                break;
            case 'PdfExport':
                menuItem = { target: menuClass.content, iconCss: menuClass.pdf };
                break;
            case 'ExcelExport':
                menuItem = { target: menuClass.content, iconCss: menuClass.excel };
                break;
            case 'CsvExport':
                menuItem = { target: menuClass.content, iconCss: menuClass.csv };
                break;
            case 'SortAscending':
                menuItem = { target: menuClass.header, iconCss: menuClass.ascending };
                break;
            case 'SortDescending':
                menuItem = { target: menuClass.header, iconCss: menuClass.descending };
                break;
            case 'FirstPage':
                menuItem = { target: menuClass.pager, iconCss: menuClass.fPage };
                break;
            case 'PrevPage':
                menuItem = { target: menuClass.pager, iconCss: menuClass.pPage };
                break;
            case 'LastPage':
                menuItem = { target: menuClass.pager, iconCss: menuClass.lPage };
                break;
            case 'NextPage':
                menuItem = { target: menuClass.pager, iconCss: menuClass.nPage };
                break;
        }
        this.defaultItems[item] = {
            text: this.getLocaleText(item), id: this.generateID(item),
            target: menuItem.target, iconCss: menuItem.iconCss ? 'e-icons ' + menuItem.iconCss : ''
        };
        return this.defaultItems[item];
    }
    getDefaultItems() {
        return ['AutoFitAll', 'AutoFit',
            'Group', 'Ungroup', 'Edit', 'Delete', 'Save', 'Cancel', 'Copy', 'export',
            'PdfExport', 'ExcelExport', 'CsvExport', 'SortAscending', 'SortDescending',
            'FirstPage', 'PrevPage', 'LastPage', 'NextPage'];
    }
    setLocaleKey() {
        const localeKeys = {
            'AutoFitAll': 'autoFitAll',
            'AutoFit': 'autoFit',
            'Copy': 'Copy',
            'Group': 'Group',
            'Ungroup': 'Ungroup',
            'Edit': 'EditRecord',
            'Delete': 'DeleteRecord',
            'Save': 'Save',
            'Cancel': 'CancelButton',
            'PdfExport': 'Pdfexport',
            'ExcelExport': 'Excelexport',
            'CsvExport': 'Csvexport',
            'export': 'Export',
            'SortAscending': 'SortAscending',
            'SortDescending': 'SortDescending',
            'FirstPage': 'FirstPage',
            'LastPage': 'LastPage',
            'PrevPage': 'PreviousPage',
            'NextPage': 'NextPage'
        };
        return localeKeys;
    }
    getColumn(e) {
        const cell = closest(e.target, 'th.e-headercell');
        if (cell) {
            const uid = cell.querySelector('.e-headercelldiv, .e-stackedheadercelldiv').getAttribute('e-mappinguid');
            return this.parent.getColumnByUid(uid);
        }
        else {
            const ele = (this.parent.getRowInfo(e.target).column);
            return ele || null;
        }
    }
    selectRow(e, isSelectable) {
        this.cell = e.target;
        this.row = closest(e.target, 'tr.e-row') || this.row;
        if (this.row && isSelectable && !parentsUntil(e.target, 'e-gridpager')) {
            this.parent.selectRow(parseInt(this.row.getAttribute(ariaRowIndex), 10));
        }
    }
}

/**
 * FreezeRowModelGenerator is used to generate grid data rows with freeze row and column.
 *
 * @hidden
 */
class FreezeRowModelGenerator {
    constructor(parent) {
        this.parent = parent;
        this.rowModelGenerator = new RowModelGenerator(this.parent);
    }
    generateRows(data, notifyArgs, virtualRows) {
        let tableName;
        if (notifyArgs.renderFrozenRightContent || (notifyArgs.renderMovableContent && !this.parent.enableVirtualization)) {
            tableName = 'frozen-right';
        }
        else if (notifyArgs.renderMovableContent || notifyArgs.isFrozen) {
            tableName = 'movable';
        }
        else {
            tableName = this.parent.getFrozenLeftCount() ? 'frozen-left' : 'frozen-right';
        }
        if (notifyArgs.requestType === 'virtualscroll' && notifyArgs.virtualInfo.sentinelInfo.axis === 'X') {
            if (tableName !== 'movable') {
                return null;
            }
        }
        const row = this.parent.enableVirtualization && !notifyArgs.isFrozenRowsRender ? virtualRows
            : this.rowModelGenerator.generateRows(data, notifyArgs);
        for (let i = 0, len = row.length; i < len; i++) {
            row[i].cells = splitFrozenRowObjectCells(this.parent, row[i].cells, tableName);
        }
        return row;
    }
}

/**
 * Freeze module is used to render grid content with frozen rows and columns
 *
 * @hidden
 */
class FreezeContentRender extends ContentRender {
    constructor(parent, locator) {
        super(parent, locator);
        this.isInitialRender = true;
        this.widthService = locator.getService('widthService');
        this.addEventListener();
    }
    addEventListener() {
        this.parent.addEventListener(actionComplete, this.actionComplete.bind(this));
        this.parent.addEventListener(batchAdd, this.batchAdd.bind(this));
        this.parent.on(batchCancel, this.batchAdd.bind(this));
        this.parent.addEventListener(batchDelete, this.batchAdd.bind(this));
        this.parent.on(setHeightToFrozenElement, this.refreshScrollOffset);
        this.parent.on(columnVisibilityChanged, this.widthService.refreshFrozenScrollbar, this);
    }
    batchAdd(args) {
        const isAdd = args.name !== 'batchCancel'
            && !(this.parent.frozenRows && this.parent.editSettings.newRowPosition === 'Top');
        if (this.parent.height !== 'auto' && (isAdd || args.name === 'batchCancel' || args.name === 'batchDelete')) {
            this.refreshScrollOffset();
            const height = this.getTable().offsetHeight;
            if (args.name === 'add' && this.parent.editSettings.newRowPosition === 'Bottom') {
                this.parent.getContent().firstChild.scroll(0, height);
            }
        }
    }
    setHeightToContent(height) {
        this.getFrozenContent().style.height = height.toString() + 'px';
        this.getMovableContent().style.height = height.toString() + 'px';
    }
    actionComplete(args) {
        if (this.parent.editSettings.mode !== 'Dialog' && (args.requestType === 'add' || (args.requestType === 'cancel'
            && args.row.classList.contains(addedRow)))
            && (!this.parent.frozenRows || this.parent.editSettings.newRowPosition === 'Bottom') && this.parent.height !== 'auto') {
            this.refreshScrollOffset();
            const height = this.getTable().offsetHeight;
            if (args.requestType === 'add' && this.parent.editSettings.newRowPosition === 'Bottom') {
                this.parent.getContent().firstChild.scroll(0, height);
            }
        }
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.removeEventListener(actionComplete, this.actionComplete);
        this.parent.removeEventListener(batchAdd, this.batchAdd);
        this.parent.off(columnVisibilityChanged, this.widthService.refreshFrozenScrollbar);
    }
    renderPanel() {
        super.renderPanel();
        let fDiv = this.parent.element.querySelector('.' + frozenContent);
        let mDiv = this.parent.element.querySelector('.' + movableContent);
        if (isNullOrUndefined(fDiv)) {
            fDiv = this.parent.createElement('div', { className: 'e-frozencontent e-frozen-left-content' });
            mDiv = this.parent.createElement('div', { className: movableContent });
            this.getPanel().querySelector('.' + content).appendChild(fDiv);
            this.getPanel().querySelector('.' + content).appendChild(mDiv);
            mDiv.style.scrollbarWidth = 'none';
        }
        this.setFrozenContent(fDiv);
        this.setMovableContent(mDiv);
        if (Browser.userAgent.indexOf('Mac OS') > -1 && Browser.info.name === 'safari' && !this.parent.enableVirtualization) {
            this.getPanel().firstElementChild.classList.add('e-mac-safari');
        }
    }
    renderFrozenRigthPanel() {
        super.renderPanel();
    }
    renderEmpty(tbody$$1) {
        super.renderEmpty(tbody$$1);
        this.getMovableContent().querySelector(tbody).innerHTML = '<tr><td></td></tr>';
        addClass([this.getMovableContent().querySelector(tbody).querySelector('tr')], ['e-emptyrow']);
        this.getFrozenContent().querySelector('.e-emptyrow').querySelector('td').colSpan = this.parent.getVisibleFrozenColumns();
        this.getFrozenContent().style.borderRightWidth = '0px';
        if (this.parent.frozenRows) {
            this.parent.getHeaderContent().querySelector('.' + frozenHeader).querySelector(tbody).innerHTML = '';
            this.parent.getHeaderContent().querySelector('.' + movableHeader).querySelector(tbody).innerHTML = '';
        }
    }
    renderFrozenRightEmpty(tbody$$1) {
        super.renderEmpty(tbody$$1);
    }
    setFrozenContent(ele) {
        this.frozenContent = ele;
    }
    /**
     * @param {Element} ele - specifies the element
     * @returns {void}
     * @hidden
     */
    setMovableContent(ele) {
        this.movableContent = ele;
    }
    getFrozenContent() {
        return this.frozenContent;
    }
    getMovableContent() {
        return this.movableContent;
    }
    getModelGenerator() {
        return new FreezeRowModelGenerator(this.parent);
    }
    renderFrozenRightTable() {
        super.renderTable();
    }
    renderTable() {
        let mTbl;
        if (this.getFrozenContent().querySelector('.' + table) == null) {
            super.renderTable();
            this.getFrozenContent().appendChild(this.getTable());
            mTbl = this.getTable().cloneNode(true);
            this.getMovableContent().appendChild(mTbl);
        }
        else {
            this.setTable(this.getFrozenContent().querySelector('.' + table));
            this.setColGroup(this.parent.element.querySelector('.' + gridHeader).querySelector(colGroup).cloneNode(true));
            this.getFrozenContent().querySelector('.' + table).appendChild(this.getColGroup());
            mTbl = this.getMovableContent().querySelector('.' + table);
            if (this.parent.frozenRows) {
                this.parent.getHeaderContent().classList.add('e-frozenhdrcont');
            }
        }
        if (this.getMovableContent().querySelector(colGroup)) {
            remove(this.getMovableContent().querySelector(colGroup));
        }
        const colGroup$$1 = ((this.parent.getHeaderContent().querySelector('.' + movableHeader).querySelector(colGroup)).cloneNode(true));
        mTbl.insertBefore(colGroup$$1, mTbl.querySelector(tbody));
        const style = this.parent.enableVirtualization ? '' : 'flex';
        this.getPanel().firstChild.style.display = style;
        this.renderHorizontalScrollbar('e-frozenscrollbar e-frozen-left-scrollbar', this.getScrollbarDisplay());
    }
    getScrollbarDisplay() {
        let frozenDisplay = '';
        if ((this.parent.getFrozenColumns() && !this.parent.getVisibleFrozenColumns())
            || (this.parent.getFrozenLeftColumnsCount() && !this.parent.getVisibleFrozenLeftCount())) {
            frozenDisplay = 'none';
        }
        return frozenDisplay;
    }
    renderHorizontalScrollbar(className, display, isRight) {
        const left = this.parent.createElement('div', { className: className, styles: 'display:' + display });
        const movable = this.parent.createElement('div', { className: 'e-movablescrollbar' });
        const child = this.parent.createElement('div', { className: 'e-movablechild' });
        const scrollbarHeight = getScrollBarWidth().toString();
        this.setScrollbarHeight(movable, scrollbarHeight);
        this.setScrollbarHeight(child, scrollbarHeight);
        movable.appendChild(child);
        this.appendScrollbar(left, movable, isRight);
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    appendScrollbar(frozen, movable, isRight) {
        const parent = this.parent.createElement('div', { className: 'e-scrollbar', styles: 'display: flex' });
        parent.appendChild(frozen);
        parent.appendChild(movable);
        this.parent.getContent().appendChild(parent);
    }
    setScrollbarHeight(ele, height) {
        ele.style.minHeight = height + 'px';
        ele.style.maxHeight = height + 'px';
    }
    /**
     * @param {NotifyArgs} args - specifies the NotifyArgs
     * @param {freezeTable} tableName - specifies the Freeze Table
     * @returns {void}
     * @hidden
     */
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    setIsFrozen(args, tableName) {
        args.isFrozen = !args.isFrozen;
    }
    /**
     * @param {Row<Column>[]} modelData - specifies the modeldata
     * @param {NotifyArgs} args - specifies the args
     * @returns {freezeTable} returns the freeze table
     * @hidden
     */
    setTbody(modelData, args) {
        let tableName;
        if (isNullOrUndefined(modelData[0].cells[0])) {
            this.getMovableContent().querySelector(tbody).innerHTML = '';
        }
        let cell = modelData[0].cells[0];
        let idx = cell.index;
        if (isUndefined(idx) && this.parent.isRowDragable()) {
            cell = modelData[0].cells[1];
            idx = cell.index;
        }
        if (idx === 0) {
            this.getPanel().firstChild.style.overflowX = 'hidden';
            if (this.parent.enableColumnVirtualization) {
                this.getMovableContent().style.overflowX = 'hidden';
            }
        }
        if (this.parent.enableColumnVirtualization && args.renderMovableContent
            && args.requestType === 'virtualscroll' && this.getMovableContent().scrollLeft > 0 && args.virtualInfo.columnIndexes[0] !== 0) {
            idx = this.parent.getFrozenColumns();
        }
        if (cell && cell.column) {
            tableName = cell.column.getFreezeTableName();
        }
        this.setIdx(idx);
        args.tableName = tableName;
        return tableName;
    }
    /**
     * @param {string} tableName - specifies the table name
     * @returns {void}
     * @hidden
     */
    splitRows(tableName) {
        if (tableName === frozenLeft) {
            this.freezeRows = this.rows;
            this.freezeRowElements = this.rowElements;
        }
        else {
            this.movableRows = this.rows;
        }
    }
    /**
     * @param {NotifyArgs} args - specifies the notifyargs
     * @param {string} tableName - specifies the tableName
     * @returns {void}
     * @hidden
     */
    renderNextFrozentPart(args, tableName) {
        const isVFTable = this.parent.enableVirtualization;
        if (tableName === frozenLeft) {
            if (isVFTable) {
                args.renderMovableContent = true;
            }
            this.refreshContentRows(extend({}, args));
        }
    }
    appendContent(tbody$$1, frag, args, tableName) {
        if (this.parent.isReact && !isNullOrUndefined(this.parent.rowTemplate)) {
            tbody$$1 = frag;
        }
        else {
            tbody$$1.appendChild(frag);
        }
        if (tableName === frozenLeft) {
            this.isLoaded = false;
            this.getFrozenContent().querySelector('table').appendChild(tbody$$1);
        }
        else {
            this.refreshTbody(tbody$$1);
            this.isLoaded = true;
            this.getMovableContent().querySelector('table').appendChild(tbody$$1);
            this.refreshHeight();
            this.refreshScrollOffset();
            this.widthService.refreshFrozenScrollbar();
        }
        if (this.isInitialRender) {
            this.parent.scrollModule.setHeight();
            this.isInitialRender = false;
        }
    }
    refreshScrollOffset() {
        if (this.parent.height !== 'auto') {
            const height = this.getTable().offsetHeight + 1;
            this.setHeightToContent(height);
        }
        this.parent.notify(refreshFrozenHeight, {});
    }
    /**
     * @param {string} tableName - specifies the table name
     * @returns {HTMLElement} returns the Html element
     * @hidden
     */
    getFrozenHeader(tableName) {
        if (tableName === frozenLeft) {
            return this.parent.getHeaderContent().querySelector('.' + frozenHeader).querySelector(tbody);
        }
        else {
            return this.parent.getHeaderContent().querySelector('.' + movableHeader).querySelector(tbody);
        }
    }
    refreshTbody(tbody$$1) {
        if (tbody$$1.childElementCount < 1) {
            tbody$$1.appendChild(this.parent.createElement('tr', { attrs: { role: 'row' } }).appendChild(this.parent.createElement('td')));
        }
    }
    refreshHeight() {
        if (!this.parent.allowTextWrap) {
            this.parent.notify(freezeRender, { case: 'refreshHeight' });
        }
        this.getFrozenContent().style.borderRightWidth = '1px';
    }
    setIdx(idx) {
        this.idx = idx;
    }
    getIdx() {
        return this.idx;
    }
    /**
     * @param {freezeTable} tableName - specifies the table name
     * @returns {Element} returns the element
     * @hidden
     */
    getTbody(tableName) {
        if (tableName === frozenLeft) {
            return this.getTable().querySelector(tbody);
        }
        else {
            return this.getMovableContent().querySelector(tbody);
        }
    }
}
class FreezeRender extends HeaderRender {
    constructor(parent, locator) {
        super(parent, locator);
        this.addEventListener();
    }
    addEventListener() {
        this.eventHandler = [{ event: freezeRender, handler: this.refreshFreeze },
            { event: frozenHeight, handler: this.setFrozenHeight },
            { event: uiUpdate, handler: this.enableAfterRender }];
        addRemoveEventListener(this.parent, this.eventHandler, true, this);
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        addRemoveEventListener(this.parent, this.eventHandler, false);
    }
    renderTable() {
        super.renderTable();
        this.rfshMovable();
        this.updateColgroup();
        this.initializeHeaderDrag();
        this.initializeHeaderDrop();
        this.parent.notify(headerRefreshed, { rows: this.rows, args: { isFrozen: false } });
    }
    renderPanel() {
        let fDiv = this.parent.element.querySelector('.' + frozenHeader);
        let mDiv = this.parent.element.querySelector('.' + movableHeader);
        super.renderPanel();
        if (isNullOrUndefined(fDiv)) {
            fDiv = this.parent.createElement('div', { className: 'e-frozenheader e-frozen-left-header' });
            mDiv = this.parent.createElement('div', { className: movableHeader });
            this.getPanel().querySelector('.' + headerContent).appendChild(fDiv);
            this.getPanel().querySelector('.' + headerContent).appendChild(mDiv);
        }
        this.setFrozenHeader(fDiv);
        this.setMovableHeader(mDiv);
    }
    renderFrozenRightPanel() {
        super.renderPanel();
    }
    renderFrozenRightTable() {
        super.renderTable();
    }
    refreshUI() {
        const tbody$$1 = this.getMovableHeader().querySelector(tbody);
        remove(this.getMovableHeader().querySelector('table'));
        super.refreshUI();
        this.rfshMovable();
        this.getMovableHeader().querySelector(tbody).innerHTML = tbody$$1.innerHTML;
        this.updateColgroup();
        this.widthService.setWidthToColumns();
        if (!this.parent.enableVirtualization && !this.parent.isFrozenGrid()) {
            this.widthService.setWidthToTable();
        }
        if (this.parent.allowTextWrap && this.parent.textWrapSettings.wrapMode === 'Header') {
            wrap([].slice.call(this.movableHeader.querySelectorAll('tr.e-columnheader')), true);
        }
        this.parent.updateDefaultCursor();
        renderMovable(this.parent.getContentTable().querySelector(colGroup), this.parent.getFrozenColumns(), this.parent);
        this.widthService.refreshFrozenScrollbar();
        this.initializeHeaderDrag();
        this.parent.notify(headerRefreshed, { rows: this.rows, args: { isFrozen: false } });
    }
    refreshFrozenLeftUI() {
        super.refreshUI();
    }
    rfshMovable() {
        this.getFrozenHeader().appendChild(this.getTable());
        this.getMovableHeader().appendChild(this.createHeader(undefined, 'movable'));
        this.refreshStackedHdrHgt();
        this.addMovableFirstCls();
    }
    addMovableFirstCls() {
        if (this.parent.getVisibleFrozenColumns()) {
            const movablefirstcell = [].slice.call(this.parent.element.querySelector('.' + movableHeader).querySelector('thead').getElementsByClassName('e-columnheader'));
            const len = movablefirstcell.length;
            for (let i = 0; i < len; i++) {
                const cells = 'cells';
                const element = movablefirstcell[i][cells][0];
                if (element) {
                    addClass([element], ['e-movablefirst']);
                    if (movablefirstcell[i][cells][0].rowSpan > 1) {
                        i = i + (movablefirstcell[i][cells][0].rowSpan - 1);
                    }
                }
            }
        }
    }
    refreshFreeze(obj) {
        if (obj.case === 'filter') {
            const filterRow = this.getTable().querySelector('.e-filterbar');
            if (this.parent.allowFiltering && filterRow && this.getMovableHeader().querySelector('thead')) {
                this.getMovableHeader().querySelector('thead')
                    .appendChild(this.filterRenderer(filterRow, this.parent.getFrozenColumns()));
                const elements = [].slice.call(this.getMovableHeader().
                    querySelectorAll('thead .e-filterbarcell .e-input'));
                for (const elem of elements) {
                    const args = {
                        element: elem, floatLabelType: 'Never',
                        properties: {
                            enableRtl: this.parent.enableRtl, showClearButton: true
                        }
                    };
                    Input.bindInitialEvent(args);
                }
            }
        }
        else if (obj.case === 'textwrap' || obj.case === 'refreshHeight') {
            this.refreshHeight(obj);
            this.parent.contentModule.refreshScrollOffset();
        }
    }
    refreshHeight(obj) {
        let fRows;
        let mRows;
        const fHdr = this.getFrozenHeader();
        const mHdr = this.getMovableHeader();
        const cont = this.parent.getContent();
        const wrapMode = this.parent.textWrapSettings.wrapMode;
        const hdrClassList = this.parent.getHeaderContent().querySelector('.' + headerContent).classList;
        if (obj.case === 'textwrap') {
            if (wrapMode !== 'Header' || obj.isModeChg) {
                fRows = cont.querySelector('.' + frozenContent).querySelectorAll('tr');
                mRows = cont.querySelector('.' + movableContent).querySelectorAll('tr');
                this.setWrapHeight(fRows, mRows, obj.isModeChg, true);
            }
            if (wrapMode === 'Content' && this.parent.allowTextWrap) {
                hdrClassList.add('e-wrap');
            }
            else {
                hdrClassList.remove('e-wrap');
            }
            if (wrapMode === 'Both' || obj.isModeChg) {
                fRows = fHdr.querySelectorAll('tr');
                mRows = mHdr.querySelectorAll('tr');
            }
            else {
                mRows = mHdr.querySelector(wrapMode === 'Content' ?
                    tbody : 'thead').querySelectorAll('tr');
                fRows = fHdr.querySelector(wrapMode === 'Content' ?
                    tbody : 'thead').querySelectorAll('tr');
            }
            if (!this.parent.getHeaderContent().getElementsByClassName('e-stackedheadercell').length) {
                this.setWrapHeight(fRows, mRows, obj.isModeChg, false, this.colDepth > 1);
            }
            this.refreshStackedHdrHgt();
        }
        else if (obj.case === 'refreshHeight') {
            this.setWrapHeight(cont.querySelector('.' + frozenContent).querySelectorAll('tr'), cont.querySelector('.' + movableContent).querySelectorAll('tr'), obj.isModeChg);
            if (!this.parent.getHeaderContent().getElementsByClassName('e-stackedheadercell').length) {
                this.setWrapHeight(fHdr.querySelectorAll('tr'), mHdr.querySelectorAll('tr'), obj.isModeChg);
            }
        }
    }
    enableAfterRender(e) {
        if (e.module === 'scroll') {
            this.setFrozenHeight();
        }
    }
    updateResizeHandler() {
        const elements = [].slice.call(this.parent.getHeaderContent().getElementsByClassName('e-rhandler'));
        for (let i = 0; i < elements.length; i++) {
            elements[i].style.height = elements[i].parentElement.offsetHeight + 'px';
        }
    }
    setWrapHeight(fRows, mRows, isModeChg, isContReset, isStackedHdr) {
        let fRowHgt;
        let mRowHgt;
        const isWrap = this.parent.allowTextWrap;
        const wrapMode = this.parent.textWrapSettings.wrapMode;
        const tHead = this.parent.getHeaderContent().querySelector('thead');
        const tBody = this.parent.getHeaderContent().querySelector(tbody);
        const height = [];
        const width = [];
        for (let i = 0, len = fRows.length; i < len; i++) {
            if (isModeChg && ((!this.parent.rowHeight && tBody.className === 'e-hide') || (wrapMode === 'Header' && isContReset) ||
                ((wrapMode === 'Content' && tHead.contains(fRows[i])) || (wrapMode === 'Header' && tBody.contains(fRows[i])))) ||
                isStackedHdr) {
                fRows[i].style.height = null;
                mRows[i].style.height = null;
            }
            if (!isNullOrUndefined(fRows[i]) && !isNullOrUndefined(mRows[i])) {
                height[i] = fRows[i].getBoundingClientRect().height; //https://pagebuildersandwich.com/increased-plugins-performance-200/
                width[i] = mRows[i].getBoundingClientRect().height;
            }
            fRowHgt = height[i];
            mRowHgt = width[i];
            if (!isNullOrUndefined(fRows[i]) && fRows[i].childElementCount && ((isWrap && fRowHgt < mRowHgt) ||
                (!isWrap && fRowHgt < mRowHgt) || (this.parent.allowResizing && this.parent.resizeModule &&
                this.parent.resizeModule.isFrozenColResized === false))) {
                fRows[i].style.height = mRowHgt + 'px';
            }
            if (mRows && !isNullOrUndefined(mRows[i]) && mRows[i].childElementCount && ((isWrap && fRowHgt > mRowHgt) ||
                (!isWrap && fRowHgt > mRowHgt) || (this.parent.allowResizing && this.parent.resizeModule &&
                this.parent.resizeModule.isFrozenColResized === true))) {
                mRows[i].style.height = fRowHgt + 'px';
            }
        }
        if (isWrap && this.parent.height !== 'auto') {
            this.setFrozenHeight();
        }
    }
    setFrozenHeight(height = getScrollBarWidth()) {
        const movableContentHeight = this.parent.element.querySelector('.' + movableContent).getBoundingClientRect().height;
        const movableContent$$1 = this.parent.element.querySelector('.' + movableContent);
        const frozenContent$$1 = this.parent.element.querySelector('.' + frozenContent);
        const contentScrollWidth = this.parent.getContent().scrollWidth;
        const contentTableScrollWidth = this.parent.element.querySelector('.e-movablecontent table').scrollWidth +
            this.parent.getContentTable().scrollWidth;
        if (movableContent$$1.scrollWidth - movableContent$$1.clientWidth) {
            frozenContent$$1.style.height = movableContentHeight -
                height + 'px';
            frozenContent$$1.style.borderBottom = '';
        }
        else {
            frozenContent$$1.style.height = movableContentHeight + 'px';
            if (((frozenContent$$1.scrollHeight <= frozenContent$$1.clientHeight) ||
                (movableContent$$1.scrollHeight <= movableContent$$1.clientHeight))
                && contentScrollWidth === contentTableScrollWidth) {
                this.parent.scrollModule.removePadding();
            }
            frozenContent$$1.style.borderBottom = '0px';
        }
    }
    refreshStackedHdrHgt() {
        let fRowSpan;
        let mRowSpan;
        const fTr = [].slice.call(this.getFrozenHeader().getElementsByClassName('e-columnheader'));
        const mTr = [].slice.call(this.getMovableHeader().getElementsByClassName('e-columnheader'));
        for (let i = 0, len = fTr.length; i < len; i++) {
            fRowSpan = this.getRowSpan(fTr[i]);
            mRowSpan = this.getRowSpan(mTr[i]);
            if (fRowSpan.min > 1) {
                this.updateStackedHdrRowHgt(i, fRowSpan.max, fTr[i], mTr);
            }
            else if (mRowSpan.min > 1) {
                this.updateStackedHdrRowHgt(i, mRowSpan.max, mTr[i], fTr);
            }
        }
        if (this.parent.allowResizing) {
            this.updateResizeHandler();
        }
    }
    getRowSpan(row$$1) {
        let rSpan;
        let minRowSpan;
        let maxRowSpan;
        for (let i = 0, len = row$$1.childElementCount; i < len; i++) {
            if (i === 0) {
                minRowSpan = row$$1.children[0].rowSpan;
            }
            rSpan = row$$1.children[i].rowSpan;
            minRowSpan = Math.min(rSpan, minRowSpan);
            maxRowSpan = Math.max(rSpan, minRowSpan);
        }
        return { min: minRowSpan, max: maxRowSpan };
    }
    updateStackedHdrRowHgt(idx, maxRowSpan, row$$1, rows) {
        let height = 0;
        for (let i = 0; i < maxRowSpan; i++) {
            height += rows[idx + i].style.height ?
                parseInt(rows[idx + i].style.height, 10) : rows[idx + i].offsetHeight;
        }
        row$$1.style.height = height + 'px';
    }
    setFrozenHeader(ele) {
        this.frozenHeader = ele;
    }
    /**
     * @param {Element} ele - specifies the element
     * @returns {void}
     * @hidden
     */
    setMovableHeader(ele) {
        this.movableHeader = ele;
    }
    getFrozenHeader() {
        return this.frozenHeader;
    }
    getMovableHeader() {
        return this.movableHeader;
    }
    /**
     * @returns {void}
     * @hidden
     */
    updateColgroup() {
        const mTable = this.getMovableHeader().querySelector('table');
        remove(this.getMovableHeader().querySelector(colGroup));
        mTable.insertBefore(renderMovable(this.getFrozenHeader().querySelector(colGroup), this.parent.getFrozenColumns(), this.parent), mTable.querySelector('thead'));
    }
    filterRenderer(ele, frozenColumn, total) {
        const clone = ele.cloneNode(true);
        clone.innerHTML = '';
        const end = total ? total : this.parent.getColumns().length;
        for (let i = frozenColumn; i < end; i++) {
            clone.appendChild(ele.removeChild(ele.children[frozenColumn]));
        }
        return clone;
    }
}

/**
 * ColumnFreezeHeaderRenderer is used to freeze the columns header at right and left
 *
 * @hidden
 */
class ColumnFreezeHeaderRenderer extends FreezeRender {
    constructor(parent, locator) {
        super(parent, locator);
        this.addEventListener();
    }
    addEventListener() {
        this.evtHandlers = [{ event: freezeRender, handler: this.refreshFreeze },
            { event: refreshFrozenColumns, handler: this.refreshFrozenColumns },
            { event: setReorderDestinationElement, handler: this.setReorderElement },
            { event: columnVisibilityChanged, handler: this.setVisible }];
        addRemoveEventListener(this.parent, this.evtHandlers, true, this);
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        addRemoveEventListener(this.parent, this.evtHandlers, false);
    }
    setReorderElement(args) {
        this.destEle = args.ele;
    }
    refreshFrozenColumns(args) {
        if (!args.parent) {
            this.parent.setProperties({ columns: args.columns }, true);
        }
        const isFrozenLeft = parentsUntil(this.destEle, 'e-frozen-left-header');
        const isFrozenRight = parentsUntil(this.destEle, 'e-frozen-right-header');
        const left = this.parent.getFrozenLeftColumnsCount();
        const right = this.parent.getFrozenRightColumnsCount();
        args.column.freeze = null;
        if (isFrozenLeft) {
            args.column.freeze = 'Left';
        }
        else if (isFrozenRight) {
            args.column.freeze = 'Right';
        }
        this.parent.setFrozenCount();
        args.cancel = left !== this.parent.getFrozenLeftColumnsCount() || right !== this.parent.getFrozenRightColumnsCount();
        if (args.cancel) {
            this.parent.refreshColumns();
        }
    }
    setWrapHeight(fRows, mRows, isModeChg, isContReset, isStackedHdr, frRows) {
        let fRowHgt;
        let mRowHgt;
        let frRowHgt;
        const isWrap = this.parent.allowTextWrap;
        const tBody = this.parent.getHeaderContent().querySelector(tbody);
        const wrapMode = this.parent.textWrapSettings.wrapMode;
        const tHead = this.parent.getHeaderContent().querySelector('thead');
        const height = [];
        const width = [];
        const rightHeight = [];
        for (let i = 0, len = fRows.length; i < len; i++) { //separate loop for performance issue
            if (!isNullOrUndefined(fRows[i]) && !isNullOrUndefined(mRows[i])) {
                if (frRows) {
                    rightHeight[i] = frRows[i].getBoundingClientRect().height;
                }
                width[i] = mRows[i].getBoundingClientRect().height;
                height[i] = fRows[i].getBoundingClientRect().height; //https://pagebuildersandwich.com/increased-plugins-performance-200/
            }
        }
        for (let i = 0, len = fRows.length; i < len; i++) {
            if (isModeChg && (((wrapMode === 'Content' && tHead.contains(fRows[i]))
                || (wrapMode === 'Header' && tBody.contains(fRows[i]))) || (wrapMode === 'Header' && isContReset)) || isStackedHdr) {
                if (frRows[i]) {
                    frRows[i].style.height = null;
                }
                fRows[i].style.height = null;
                mRows[i].style.height = null;
            }
            fRowHgt = height[i];
            mRowHgt = width[i];
            frRowHgt = rightHeight[i] ? rightHeight[i] : 0;
            const maxHeight = Math.max(fRowHgt, mRowHgt, frRowHgt);
            if (!isNullOrUndefined(fRows[i]) && fRows[i].childElementCount && ((isWrap && fRowHgt < maxHeight) ||
                (!isWrap && fRowHgt < maxHeight) || (this.parent.allowResizing && this.parent.resizeModule &&
                this.parent.resizeModule.isFrozenColResized === false))) {
                fRows[i].style.height = maxHeight + 'px';
            }
            if (mRows && !isNullOrUndefined(mRows[i]) && mRows[i].childElementCount && ((isWrap && maxHeight > mRowHgt) ||
                (!isWrap && maxHeight > mRowHgt) || (this.parent.allowResizing && this.parent.resizeModule &&
                this.parent.resizeModule.isFrozenColResized === true))) {
                mRows[i].style.height = maxHeight + 'px';
            }
            if (frRows && !isNullOrUndefined(frRows[i]) && frRows[i].childElementCount && ((isWrap && maxHeight > frRowHgt) ||
                (!isWrap && maxHeight > frRowHgt) || (this.parent.allowResizing && this.parent.resizeModule &&
                this.parent.resizeModule.isFrozenColResized === true))) {
                frRows[i].style.height = maxHeight + 'px';
            }
        }
        if (isWrap) {
            this.setFrozenHeight();
        }
    }
    refreshHeight(obj) {
        const isLeftRight = this.parent.getFrozenMode() === leftRight;
        let fRows;
        let frRows;
        let mRows;
        const frHdr = this.getFrozenRightHeader();
        const fHdr = this.parent.getHeaderContent().querySelector('.' + frozenHeader);
        const cont = this.parent.getContent();
        const mHdr = this.getMovableHeader();
        const hdrClassList = this.parent.getHeaderContent().querySelector('.' + headerContent).classList;
        const wrapMode = this.parent.textWrapSettings.wrapMode;
        if (obj.case === 'textwrap') {
            if (wrapMode !== 'Header' || obj.isModeChg) {
                if (isLeftRight) {
                    frRows = cont.querySelector('.e-frozen-right-content').querySelectorAll('tr');
                }
                mRows = cont.querySelector('.' + movableContent).querySelectorAll('tr');
                fRows = cont.querySelector('.' + frozenContent).querySelectorAll('tr');
                this.setWrapHeight(fRows, mRows, obj.isModeChg, true, false, frRows);
            }
            if (wrapMode === 'Content' && this.parent.allowTextWrap) {
                hdrClassList.add('e-wrap');
            }
            else {
                hdrClassList.remove('e-wrap');
            }
            if (wrapMode === 'Both' || obj.isModeChg) {
                if (isLeftRight) {
                    frRows = frHdr.querySelectorAll('tr');
                }
                fRows = fHdr.querySelectorAll('tr');
                mRows = mHdr.querySelectorAll('tr');
            }
            else {
                if (isLeftRight) {
                    frRows = frHdr.querySelector(wrapMode === 'Content' ?
                        tbody : 'thead').querySelectorAll('tr');
                }
                fRows = fHdr.querySelector(wrapMode === 'Content' ?
                    tbody : 'thead').querySelectorAll('tr');
                mRows = mHdr.querySelector(wrapMode === 'Content' ?
                    tbody : 'thead').querySelectorAll('tr');
            }
            if (!this.parent.getHeaderContent().getElementsByClassName('e-stackedheadercell').length) {
                this.setWrapHeight(fRows, mRows, obj.isModeChg, false, this.colDepth > 1, frRows);
            }
            this.refreshStackedHdrHgt();
        }
        else if (obj.case === 'refreshHeight') {
            mRows = cont.querySelector('.' + movableContent).querySelectorAll('tr');
            fRows = cont.querySelector('.' + frozenContent).querySelectorAll('tr');
            if (isLeftRight) {
                frRows = cont.querySelector('.e-frozen-right-content').querySelectorAll('tr');
            }
            this.setWrapHeight(fRows, mRows, obj.isModeChg, false, false, frRows);
            if (!this.parent.getHeaderContent().getElementsByClassName('e-stackedheadercell').length) {
                if (isLeftRight) {
                    frRows = frHdr.querySelectorAll('tr');
                }
                fRows = fHdr.querySelectorAll('tr');
                mRows = mHdr.querySelectorAll('tr');
                this.setWrapHeight(fRows, mRows, obj.isModeChg, false, false, frRows);
            }
        }
    }
    /**
     * Function to hide header table column based on visible property
     *
     * @param {Column[]} columns - specifies the column[]
     * @returns {void}
     */
    setVisible(columns) {
        const gObj = this.parent;
        let displayVal;
        let idx;
        const left = this.parent.getFrozenLeftColumnsCount();
        const right = this.parent.getFrozenRightColumnsCount();
        const movable = this.parent.getMovableColumnsCount();
        for (let c = 0, clen = columns.length; c < clen; c++) {
            const column = columns[c];
            idx = gObj.getNormalizedColumnIndex(column.uid);
            displayVal = column.visible ? '' : 'none';
            if (column.freeze === 'Left' || column.freeze === 'Right') {
                if (left && !right) {
                    const leftColGrp = gObj.getHeaderContent().querySelector('.e-frozen-left-header').querySelector(colGroup);
                    setStyleAttribute(leftColGrp.children[idx], { 'display': displayVal });
                }
                else if (!left && right) {
                    const rightColGrp = gObj.getHeaderContent().querySelector('.e-frozen-right-header').querySelector(colGroup);
                    setStyleAttribute(rightColGrp.children[idx - movable], { 'display': displayVal });
                }
            }
            else {
                const mTblColGrp = gObj.getHeaderContent().querySelector('.' + movableHeader).querySelector(colGroup);
                setStyleAttribute(mTblColGrp.children[idx - left], { 'display': displayVal });
            }
        }
        this.refreshUI();
    }
    filterRenderer(ele, frozenColumn, total) {
        return super.filterRenderer(ele, frozenColumn, total);
    }
    refreshUI() {
        let frTbody;
        const tbody$$1 = this.getMovableHeader().querySelector(tbody);
        remove(this.getMovableHeader().querySelector('table'));
        if (this.parent.getFrozenMode() === leftRight) {
            frTbody = this.getFrozenRightHeader().querySelector(tbody);
            remove(this.getFrozenRightHeader().querySelector('table'));
        }
        super.refreshFrozenLeftUI();
        this.rfshMovable();
        this.getMovableHeader().querySelector(tbody).innerHTML = tbody$$1.innerHTML;
        if (frTbody) {
            this.getFrozenRightHeader().querySelector(tbody).innerHTML = frTbody.innerHTML;
        }
        this.updateColgroup();
        this.widthService.setWidthToColumns();
        this.parent.notify(colGroupRefresh, {});
        if (this.parent.allowTextWrap && this.parent.textWrapSettings.wrapMode === 'Header') {
            wrap([].slice.call(this.getMovableHeader().querySelectorAll('tr.e-columnheader')), true);
        }
        this.parent.updateDefaultCursor();
        const mTbl = this.parent.getContent().querySelector('.' + movableContent).querySelector('.' + table);
        remove(mTbl.querySelector(colGroup));
        const mColGroup = (this.getMovableHeader().querySelector(colGroup).cloneNode(true));
        mTbl.insertBefore(mColGroup, mTbl.querySelector(tbody));
        if (frTbody) {
            const frtbl = this.parent.getContent().querySelector('.e-frozen-right-content').querySelector('.' + table);
            remove(frtbl.querySelector(colGroup));
            const frtblColGroup = (this.getFrozenRightHeader().querySelector(colGroup).cloneNode(true));
            frtbl.insertBefore(frtblColGroup, frtbl.querySelector(tbody));
        }
        this.widthService.refreshFrozenScrollbar();
        this.initializeHeaderDrag();
        this.parent.notify(headerRefreshed, { rows: this.rows, args: { isFrozen: false } });
    }
    refreshFreeze(obj) {
        const left = this.parent.getFrozenLeftColumnsCount();
        const right = this.parent.getFrozenRightColumnsCount();
        const movable = this.parent.getMovableColumnsCount();
        if (obj.case === 'filter') {
            const filterRow = this.getTable().querySelector('.e-filterbar');
            if (this.parent.allowFiltering && filterRow && this.getMovableHeader().querySelector('thead')) {
                const isDraggable = this.parent.isRowDragable();
                const index = left ? isDraggable ? left + 1 : left : 0;
                const total = left + movable + (left && isDraggable ? 1 : 0);
                this.getMovableHeader().querySelector('thead')
                    .appendChild(this.filterRenderer(filterRow, index, total));
                if (this.parent.getFrozenMode() === leftRight) {
                    const ele = [].slice.call(this.getMovableHeader().
                        querySelectorAll('thead .e-filterbarcell .e-input'));
                    this.getFrozenRightHeader().querySelector('thead').appendChild(this.filterRenderer(filterRow, index, index + right));
                    this.adjudtFilterBarCell(ele);
                }
                const elements = [].slice.call(this.getMovableHeader().
                    querySelectorAll('thead .e-filterbarcell .e-input'));
                this.adjudtFilterBarCell(elements);
            }
        }
        else if (obj.case === 'textwrap' || obj.case === 'refreshHeight') {
            this.refreshHeight(obj);
            this.parent.contentModule.refreshScrollOffset();
        }
    }
    updateFrozenColGroup(cols, colGroup$$1) {
        if (cols && cols.visible === false) {
            setStyleAttribute(colGroup$$1, { 'display': 'none' });
        }
    }
    adjudtFilterBarCell(elements) {
        for (const elem of elements) {
            const args = {
                element: elem, floatLabelType: 'Never',
                properties: {
                    enableRtl: this.parent.enableRtl, showClearButton: true
                }
            };
            Input.bindInitialEvent(args);
        }
    }
    renderPanel() {
        if (this.parent.getFrozenLeftColumnsCount()) {
            super.renderPanel();
            if (this.parent.getFrozenRightColumnsCount()) {
                this.renderLeftWithRightFrozenPanel();
            }
        }
        else {
            this.renderRightFrozenPanelAlone();
        }
        this.getPanel().firstChild.style.display = 'flex';
        this.getMovableHeader().style.flex = '1';
    }
    renderTable() {
        if (this.parent.getFrozenLeftColumnsCount()) {
            super.renderTable();
        }
        else {
            this.renderFrozenRightTableAlone();
        }
    }
    rfshMovable() {
        if (this.parent.getFrozenLeftColumnsCount()) {
            super.rfshMovable();
            if (this.parent.getFrozenRightColumnsCount()) {
                const rows = this.rows;
                this.getFrozenRightHeader().appendChild(this.createHeader(undefined, 'frozen-right'));
                this.refreshStackedHdrHgt();
                this.parent.notify(headerRefreshed, { rows: this.rows, args: { renderFrozenRightContent: true } });
                this.rows = rows;
            }
        }
        else {
            this.getFrozenRightHeader().appendChild(this.getTable());
            this.getMovableHeader().appendChild(this.createHeader(undefined, 'movable'));
            this.refreshStackedHdrHgt();
            this.addMovableFirstCls();
        }
    }
    refreshStackedHdrHgt() {
        if (this.parent.getFrozenLeftColumnsCount()) {
            super.refreshStackedHdrHgt();
            if (this.parent.getFrozenRightColumnsCount()) {
                this.refreshFrozenRightStackedHdrHgt();
            }
        }
        else {
            this.refreshFrozenRightStackedHdrHgt();
        }
    }
    refreshFrozenRightStackedHdrHgt() {
        let fRowSpan;
        const frTr = [].slice.call(this.getFrozenRightHeader().getElementsByClassName('e-columnheader'));
        const mTr = [].slice.call(this.getMovableHeader().getElementsByClassName('e-columnheader'));
        for (let i = 0, len = frTr.length; i < len; i++) {
            fRowSpan = this.getRowSpan(frTr[i]);
            if (fRowSpan.min > 1) {
                this.updateStackedHdrRowHgt(i, fRowSpan.max, frTr[i], mTr);
            }
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    updateColgroup() {
        this.updateMovableColGroup();
        if (this.parent.getFrozenLeftColumnsCount()) {
            this.updateFrozenLeftColGroup();
        }
        if (this.parent.getFrozenRightColumnsCount()) {
            this.updateFrozenRightColGroup();
        }
    }
    renderRightFrozenPanelAlone() {
        let mDiv = this.parent.element.querySelector('.' + movableHeader);
        let fRightDiv = this.parent.element.querySelector('.e-frozen-right-header');
        super.renderFrozenRightPanel();
        if (isNullOrUndefined(fRightDiv)) {
            mDiv = this.parent.createElement('div', { className: movableHeader });
            fRightDiv = this.parent.createElement('div', { className: 'e-frozenheader e-frozen-right-header' });
            this.getPanel().querySelector('.' + headerContent).appendChild(mDiv);
            this.getPanel().querySelector('.' + headerContent).appendChild(fRightDiv);
        }
        super.setMovableHeader(mDiv);
        this.setFrozenRightHeader(fRightDiv);
    }
    renderLeftWithRightFrozenPanel() {
        let fRightDiv = this.parent.element.querySelector('.e-frozen-right-header');
        super.renderFrozenRightPanel();
        if (isNullOrUndefined(fRightDiv)) {
            fRightDiv = this.parent.createElement('div', { className: 'e-frozenheader e-frozen-right-header' });
            this.getPanel().querySelector('.' + headerContent).appendChild(fRightDiv);
        }
        this.setFrozenRightHeader(fRightDiv);
    }
    renderFrozenRightTableAlone() {
        super.renderFrozenRightTable();
        this.rfshMovable();
        this.updateColgroup();
        this.initializeHeaderDrag();
        this.initializeHeaderDrop();
        this.parent.notify(headerRefreshed, { rows: this.rows, args: { isFrozen: false } });
    }
    updateFrozenLeftColGroup() {
        const leftColGroup = this.getFrozenHeader().querySelector(colGroup).children;
        const start = this.parent.isRowDragable() ? 1 : 0;
        const count = this.parent.isRowDragable() ? this.parent.getFrozenLeftColumnsCount() + 1
            : this.parent.getFrozenLeftColumnsCount();
        for (let i = start; i < leftColGroup.length; i++) {
            if (i >= count) {
                remove(leftColGroup[i]);
                i--;
            }
        }
    }
    updateMovableColGroup() {
        const movableColGroup = this.getMovableHeader().querySelector(colGroup).children;
        if (this.parent.isRowDragable()) {
            remove(movableColGroup[0]);
        }
        const length = movableColGroup.length;
        const left = this.parent.getFrozenLeftColumnsCount();
        const movable = this.parent.getMovableColumnsCount();
        let k = 0;
        for (let i = 0; i < length; i++, k++) {
            if (i < left || i >= left + movable) {
                remove(movableColGroup[k]);
                k--;
            }
        }
    }
    updateFrozenRightColGroup() {
        const isDraggable = this.parent.isRowDragable();
        const rightColumns = this.parent.getFrozenRightColumns();
        const rightColGroup = this.getFrozenRightHeader().querySelector(colGroup).children;
        if (this.parent.getFrozenMode() === leftRight && isDraggable) {
            remove(rightColGroup[0]);
        }
        const length = rightColGroup.length;
        const left = this.parent.getFrozenLeftColumnsCount();
        const movable = this.parent.getMovableColumnsCount();
        let k = 0;
        for (let i = 0; i < length; i++) {
            if (i < left + movable) {
                remove(rightColGroup[0]);
            }
            else {
                this.updateFrozenColGroup(rightColumns[k], rightColGroup[k]);
                k++;
            }
        }
    }
    setFrozenRightHeader(ele) {
        this.frozenRightHeader = ele;
    }
    getFrozenRightHeader() {
        return this.frozenRightHeader;
    }
}
/**
 * ColumnFreezeContentRenderer is used to freeze the columns content at right and left
 *
 * @hidden
 */
class ColumnFreezeContentRenderer extends FreezeContentRender {
    constructor(parent, locator) {
        super(parent, locator);
        this.frzCount = 0;
        this.isColGroupRefresh = false;
        this.widthService = locator.getService('widthService');
    }
    renderPanel() {
        if (this.parent.getFrozenLeftColumnsCount()) {
            super.renderPanel();
            if (this.parent.getFrozenRightColumnsCount()) {
                this.renderFrozenLeftWithRightPanel();
            }
        }
        else {
            this.renderFrozenRightPanelAlone();
        }
        const display = this.parent.enableVirtualization ? '' : 'flex';
        this.getPanel().firstChild.style.display = display;
    }
    renderTable() {
        if (this.parent.getFrozenLeftColumnsCount()) {
            super.renderTable();
            if (this.parent.getFrozenRightColumnsCount()) {
                this.renderFrozenLeftWithRightTable();
                const display = !this.parent.getVisibleFrozenRightCount() ? 'none' : '';
                this.renderHorizontalScrollbar('e-frozenscrollbar e-frozen-right-scrollbar', display, true);
            }
        }
        else {
            this.renderFrozenRightTableAlone();
            const display = !this.parent.getVisibleFrozenRightCount() ? 'none' : '';
            this.renderHorizontalScrollbar('e-frozenscrollbar e-frozen-right-scrollbar', display);
        }
        this.getMovableContent().style.flex = '1';
    }
    appendScrollbar(frozen, movable, isRight) {
        const parent = this.parent.createElement('div', { className: 'e-scrollbar', styles: 'display: flex' });
        if (this.parent.getFrozenLeftColumnsCount()) {
            if (!isRight) {
                parent.appendChild(frozen);
                parent.appendChild(movable);
            }
            else {
                this.parent.getContent().querySelector('.e-scrollbar').appendChild(frozen);
                return;
            }
        }
        else {
            parent.appendChild(movable);
            parent.appendChild(frozen);
        }
        this.parent.getContent().appendChild(parent);
    }
    renderFrozenRightPanelAlone() {
        this.renderFrozenRigthPanel();
        let mDiv = this.parent.element.querySelector('.' + movableContent);
        let fRightContent = this.parent.element.querySelector('.e-frozen-right-content');
        if (isNullOrUndefined(fRightContent)) {
            mDiv = this.parent.createElement('div', { className: movableContent });
            fRightContent = this.parent.createElement('div', { className: 'e-frozencontent e-frozen-right-content' });
            this.getPanel().querySelector('.' + content).appendChild(mDiv);
            this.getPanel().querySelector('.' + content).appendChild(fRightContent);
        }
        super.setMovableContent(mDiv);
        this.setFrozenRightContent(fRightContent);
    }
    renderFrozenLeftWithRightPanel() {
        this.renderFrozenRigthPanel();
        let fRightContent = this.parent.element.querySelector('.e-frozen-right-content');
        if (isNullOrUndefined(fRightContent)) {
            fRightContent = this.parent.createElement('div', { className: 'e-frozencontent e-frozen-right-content' });
            this.getPanel().querySelector('.' + content).appendChild(fRightContent);
        }
        this.setFrozenRightContent(fRightContent);
    }
    renderFrozenRightTableAlone() {
        let mTbl;
        if (this.getFrozenRightContent().querySelector('.' + table) == null) {
            super.renderFrozenRightTable();
            this.getFrozenRightContent().appendChild(this.getTable());
            mTbl = this.getTable().cloneNode(true);
            this.getMovableContent().appendChild(mTbl);
        }
        else {
            if (this.parent.frozenRows) {
                this.parent.getHeaderContent().classList.add('e-frozenhdrcont');
            }
            this.setTable(this.getFrozenRightContent().querySelector('.' + table));
            this.setColGroup(this.getFrozenRightHeaderColGroup());
            mTbl = this.getMovableContent().querySelector('.' + table);
            this.getFrozenRightContent().querySelector('.' + table).appendChild(this.getColGroup());
        }
        if (this.getMovableContent().querySelector(colGroup)) {
            remove(this.getMovableContent().querySelector(colGroup));
        }
        const colgroup = ((this.parent.getHeaderContent().querySelector('.' + movableHeader)
            .querySelector(colGroup)).cloneNode(true));
        mTbl.insertBefore(colgroup, mTbl.querySelector(tbody));
    }
    renderFrozenLeftWithRightTable() {
        const frozenRight$$1 = this.getTable().cloneNode(true);
        this.getFrozenRightContent().appendChild(frozenRight$$1);
        const oldColGroup = this.getFrozenRightContent().querySelector(colGroup);
        if (oldColGroup) {
            remove(oldColGroup);
        }
        const rightTable = this.getFrozenRightContent().querySelector('.' + table);
        rightTable.insertBefore(this.getFrozenRightHeaderColGroup(), rightTable.querySelector(tbody));
    }
    renderFrozenRightEmptyRowAlone(tbody$$1) {
        super.renderFrozenRightEmpty(tbody$$1);
        this.getMovableContent().querySelector(tbody).innerHTML = '<tr><td></td></tr>';
        addClass([this.parent.getMovableContentTbody().querySelector('tr')], ['e-emptyrow']);
        this.getFrozenRightContent().querySelector('.e-emptyrow').querySelector('td').colSpan = this.parent.getVisibleFrozenRightCount();
        if (this.parent.frozenRows) {
            this.parent.getFrozenRightHeaderTbody().innerHTML = '';
            this.parent.getMovableHeaderTbody().innerHTML = '';
        }
    }
    /**
     * @param {string} tableName - specfies the table name
     * @returns {HTMLElement} returns the element
     * @hidden
     */
    getFrozenHeader(tableName) {
        if (tableName === frozenLeft) {
            return this.parent.getHeaderContent().querySelector('.e-frozen-left-header').querySelector(tbody);
        }
        else if (tableName === 'movable') {
            return this.parent.getHeaderContent().querySelector('.' + movableHeader).querySelector(tbody);
        }
        else {
            return this.parent.getHeaderContent().querySelector('.e-frozen-right-header').querySelector(tbody);
        }
    }
    renderFrozenLeftWithRightEmptyRow() {
        this.getFrozenRightContent().querySelector(tbody).innerHTML = '<tr><td></td></tr>';
        addClass([this.getFrozenRightContent().querySelector(tbody).querySelector('tr')], ['e-emptyrow']);
        if (this.parent.frozenRows) {
            this.parent.getHeaderContent().querySelector('.e-frozen-right-header').querySelector(tbody).innerHTML = '';
        }
    }
    setFrozenRightContent(ele) {
        this.frozenRigthContent = ele;
    }
    getFrozenRightContent() {
        return this.frozenRigthContent;
    }
    getHeaderColGroup() {
        let colGroup$$1 = this.parent.element.querySelector('.' + gridHeader).querySelector(colGroup).cloneNode(true);
        if (!this.parent.getFrozenLeftColumnsCount()) {
            const right = this.getFrozenRightHeaderColGroup();
            colGroup$$1 = right && this.frzCount ? right.cloneNode(true) : colGroup$$1;
            this.frzCount++;
            this.isColGroupRefresh = true;
        }
        return colGroup$$1;
    }
    getFrozenRightHeaderColGroup() {
        let col = this.parent.getHeaderContent().querySelector('.e-frozen-right-header').querySelector(colGroup);
        if (!col) {
            col = this.parent.getHeaderContent().querySelector(colGroup);
        }
        return col.cloneNode(true);
    }
    setColGroup(colGroup$$1) {
        if (this.parent.getFrozenLeftColumnsCount()) {
            return super.setColGroup(colGroup$$1);
        }
        else {
            colGroup$$1 = !this.isColGroupRefresh ? this.getFrozenRightHeaderColGroup() : colGroup$$1;
            if (!isNullOrUndefined(colGroup$$1)) {
                colGroup$$1.id = 'content-' + colGroup$$1.id;
            }
            this.isColGroupRefresh = false;
            if (this.frzCount === 2) {
                this.frzCount = 0;
            }
            return this.colgroup = colGroup$$1;
        }
    }
    renderEmpty(tbody$$1) {
        if (this.parent.getFrozenLeftColumnsCount()) {
            super.renderEmpty(tbody$$1);
            this.getFrozenContent().querySelector('.e-emptyrow').querySelector('td').colSpan = this.parent.getVisibleFrozenLeftCount();
            if (this.parent.getFrozenRightColumnsCount()) {
                this.renderFrozenLeftWithRightEmptyRow();
            }
        }
        else {
            this.renderFrozenRightEmptyRowAlone(tbody$$1);
        }
        this.parent.notify(freezeRender, { case: 'refreshHeight' });
    }
    setHeightToContent(height) {
        if (this.parent.getFrozenRightColumnsCount()) {
            this.getFrozenRightContent().style.height = height.toString() + 'px';
        }
        if (this.parent.getFrozenLeftColumnsCount()) {
            this.getFrozenContent().style.height = height.toString() + 'px';
        }
        this.getMovableContent().style.height = height.toString() + 'px';
    }
    actionComplete(args) {
        super.actionComplete(args);
    }
    batchAdd(args) {
        super.batchAdd(args);
    }
    /**
     * @param {freezeTable} tableName - specfies the table name
     * @returns {Element} - returns the element
     * @hidden
     */
    getTbody(tableName) {
        let tbody$$1;
        if (tableName === frozenLeft) {
            tbody$$1 = this.parent.getFrozenLeftContentTbody();
        }
        else if (tableName === 'movable') {
            tbody$$1 = this.parent.getMovableContentTbody();
        }
        else if (tableName === frozenRight) {
            tbody$$1 = this.parent.getFrozenRightContentTbody();
        }
        return tbody$$1;
    }
    /**
     * @param {NotifyArgs} args - specfies the args
     * @param {freezeTable} tableName - specfies the freeze table
     * @returns {void}
     * @hidden
     */
    setIsFrozen(args, tableName) {
        args.isFrozen = (tableName === frozenLeft || (this.parent.getFrozenMode() === 'Right'
            && tableName === frozenRight));
        args.renderFrozenRightContent = this.parent.getFrozenMode() === leftRight && tableName === frozenRight;
        args.renderMovableContent = tableName === 'movable';
    }
    /**
     * @param {Element} tbody - specfies the element
     * @param {DocumentFragment | HTMLElement} frag - specfies the frag
     * @param {NotifyArgs} args - specfies the args
     * @param {freezeTable} tableName - specfies the tableName
     * @returns {void}
     * @hidden
     */
    appendContent(tbody$$1, frag, args, tableName) {
        if (!isNullOrUndefined(this.parent.rowTemplate) && this.parent.isReact) {
            tbody$$1 = frag;
        }
        else {
            tbody$$1.appendChild(frag);
        }
        if (this.parent.getFrozenMode() === 'Left') {
            if (tableName === frozenLeft) {
                this.isLoaded = false;
                this.getFrozenContent().querySelector('table').appendChild(tbody$$1);
                this.refreshContentRows(extend({}, args));
            }
            else {
                this.refreshTbody(tbody$$1);
                this.isLoaded = true;
                this.getMovableContent().querySelector('table').appendChild(tbody$$1);
                this.refreshHeight();
                this.refreshScrollOffset();
            }
        }
        else if (this.parent.getFrozenMode() === 'Right') {
            if (tableName === 'movable') {
                this.refreshTbody(tbody$$1);
                this.isLoaded = true;
                this.getMovableContent().querySelector('table').appendChild(tbody$$1);
                this.refreshHeight();
                this.refreshScrollOffset();
            }
            else {
                this.isLoaded = false;
                this.getFrozenRightContent().querySelector('table').appendChild(tbody$$1);
                this.refreshContentRows(extend({}, args));
            }
        }
        else if (this.parent.getFrozenMode() === leftRight) {
            if (tableName === frozenLeft) {
                this.isLoaded = false;
                this.getFrozenContent().querySelector('table').appendChild(tbody$$1);
                this.refreshContentRows(extend({}, args));
            }
            else if (tableName === 'movable') {
                this.refreshTbody(tbody$$1);
                this.isLoaded = false;
                this.getMovableContent().querySelector('table').appendChild(tbody$$1);
                this.refreshContentRows(extend({}, args));
            }
            else {
                this.isLoaded = true;
                this.getFrozenRightContent().querySelector('table').appendChild(tbody$$1);
                this.refreshHeight();
                this.refreshScrollOffset();
            }
        }
        if (this.isInitialRender) {
            this.parent.scrollModule.setHeight();
            this.isInitialRender = false;
        }
        this.widthService.refreshFrozenScrollbar();
    }
    refreshHeight() {
        if (!this.parent.allowTextWrap) {
            this.parent.notify(freezeRender, { case: 'refreshHeight' });
        }
    }
    /**
     * @param {freezeTable} tableName - specifies the table
     * @returns {void}
     * @hidden
     */
    splitRows(tableName) {
        const left = this.parent.getFrozenLeftColumnsCount();
        const right = this.parent.getFrozenRightColumnsCount();
        if (left && !right) {
            if (tableName === frozenLeft) {
                this.freezeRows = this.rows;
                this.freezeRowElements = this.rowElements;
            }
            else {
                this.movableRows = this.rows;
            }
        }
        else if (!left && right) {
            if (tableName === 'movable') {
                this.movableRows = this.rows;
            }
            else {
                this.freezeRows = this.rows;
                this.freezeRowElements = this.rowElements;
            }
        }
        else if (left && right) {
            if (tableName === frozenLeft) {
                this.freezeRows = this.rows;
                this.freezeRowElements = this.rowElements;
            }
            else if (tableName === 'movable') {
                this.movableRows = this.rows;
                this.movableRowElements = this.rowElements;
            }
            else {
                this.frozenRightRows = this.rows;
                this.frozenRightRowElements = this.rowElements;
            }
        }
    }
    /**
     * Get the Freeze pane movable content table data row elements
     *
     * @returns {Element} returns the element
     */
    getMovableRowElements() {
        if (this.parent.getFrozenMode() !== leftRight) {
            return this.rowElements;
        }
        else {
            return this.movableRowElements;
        }
    }
    /**
     * Get the Freeze pane frozen right content table data row elements
     *
     * @returns {Element} returns the Element
     */
    getFrozenRightRowElements() {
        if (this.parent.getFrozenMode() !== leftRight) {
            return this.freezeRowElements;
        }
        else {
            return this.frozenRightRowElements;
        }
    }
    /**
     * Get the frozen right row collection in the Freeze pane Grid.
     *
     * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row object
     */
    getFrozenRightRows() {
        if (this.parent.getFrozenMode() === leftRight) {
            if (this.parent.enableInfiniteScrolling) {
                return this.rightFreezeRows;
            }
            return this.frozenRightRows;
        }
        else {
            return this.getRows();
        }
    }
    /**
     * @param {number} index - specifies the index
     * @returns {Element} returns the element
     * @hidden
     */
    getFrozenRightRowByIndex(index) {
        return this.parent.getFrozenRightDataRows()[index];
    }
    /**
     * Get the Row collection in the Grid.
     *
     * @returns {Row[] | HTMLCollectionOf<HTMLTableRowElement>} returns the row object
     */
    getRows() {
        const infiniteRows = this.getInfiniteRows();
        return infiniteRows.length ? infiniteRows : this.freezeRows;
    }
    /**
     * Get the content table data row elements
     *
     * @returns {Element} returns the element
     */
    getRowElements() {
        return this.freezeRowElements;
    }
}

/**
 * VirtualFreezeRenderer is used to render the virtual table within the frozen and movable content table
 *
 * @hidden
 */
class VirtualFreezeRenderer extends FreezeContentRender {
    constructor(parent, locator) {
        super(parent, locator);
        /** @hidden */
        this.frzRows = [];
        /** @hidden */
        this.mvblRows = [];
        /** @hidden */
        this.frRows = [];
        this.serviceLoc = locator;
        this.eventListener('on');
        this.rowModelGenerator = new RowModelGenerator(this.parent);
    }
    eventListener(action) {
        this.parent[action](getVirtualData, this.getVirtualData, this);
        this.parent[action](setFreezeSelection, this.setFreezeSelection, this);
        this.parent[action](refreshVirtualFrozenRows, this.refreshVirtualFrozenRows, this);
        this.parent.addEventListener(actionComplete, this.actionComplete.bind(this));
    }
    actionComplete(args) {
        if (args.requestType === 'delete' && this.parent.frozenRows) {
            for (let i = 0; i < this.parent.frozenRows; i++) {
                setCache(this, i);
            }
        }
    }
    refreshVirtualFrozenRows(args) {
        const gObj = this.parent;
        if (args.requestType === 'delete' && gObj.frozenRows) {
            args.isFrozenRowsRender = true;
            const query = gObj.renderModule.data.generateQuery(true).clone();
            query.page(1, gObj.pageSettings.pageSize);
            gObj.renderModule.data.getData({}, query).then((e) => {
                renderFrozenRows(args, e.result, gObj.getSelectedRowIndexes(), gObj, this.rowModelGenerator, this.serviceLoc, this.virtualRenderer, this);
            });
        }
    }
    getVirtualData(data) {
        this.virtualRenderer.getVirtualData(data);
    }
    setFreezeSelection(args) {
        setFreezeSelection$1(args, this.virtualRenderer);
    }
    /**
     * @returns {void}
     * @hidden
     */
    renderTable() {
        this.freezeRowGenerator = new FreezeRowModelGenerator(this.parent);
        this.virtualRenderer = new VirtualContentRenderer(this.parent, this.serviceLoc);
        this.virtualRenderer.header = this.serviceLoc.getService('rendererFactory')
            .getRenderer(RenderType.Header).virtualHdrRenderer;
        super.renderTable();
        this.virtualRenderer.setPanel(this.parent.getContent());
        this.scrollbar = this.parent.getContent().querySelector('.e-movablescrollbar');
        const movableCont = this.getMovableContent();
        const minHeight = this.parent.height;
        this.virtualRenderer.virtualEle.content = this.virtualRenderer.content = this.getPanel().querySelector('.' + content);
        this.virtualRenderer.virtualEle.content.style.overflowX = 'hidden';
        this.virtualRenderer.virtualEle.renderFrozenWrapper(minHeight);
        this.virtualRenderer.virtualEle.renderFrozenPlaceHolder();
        if (this.parent.enableColumnVirtualization) {
            this.virtualRenderer.virtualEle.movableContent = this.virtualRenderer.movableContent
                = this.getPanel().querySelector('.' + movableContent);
            this.virtualRenderer.virtualEle.renderMovableWrapper(minHeight);
            this.virtualRenderer.virtualEle.renderMovablePlaceHolder();
            const tbl = movableCont.querySelector('table');
            this.virtualRenderer.virtualEle.movableTable = tbl;
            this.virtualRenderer.virtualEle.movableWrapper.appendChild(tbl);
            movableCont.appendChild(this.virtualRenderer.virtualEle.movableWrapper);
            movableCont.appendChild(this.virtualRenderer.virtualEle.movablePlaceholder);
        }
        this.virtualRenderer.virtualEle.wrapper.appendChild(this.getFrozenContent());
        this.virtualRenderer.virtualEle.wrapper.appendChild(movableCont);
        this.virtualRenderer.virtualEle.table = this.getTable();
        setDebounce(this.parent, this.virtualRenderer, this.scrollbar, this.getMovableContent());
    }
    /**
     * @param {HTMLElement} target - specifies the target
     * @param {DocumentFragment} newChild - specifies the newChild
     * @param {NotifyArgs} e - specifies the notifyargs
     * @returns {void}
     * @hidden
     */
    appendContent(target, newChild, e) {
        appendContent(this.virtualRenderer, this.widthService, target, newChild, e);
    }
    /**
     * @param {Object[]} data - specifies the data
     * @param {NotifyArgs} notifyArgs - specifies the notifyargs
     * @returns {Row<Column>[]} returns the row
     * @hidden
     */
    generateRows(data, notifyArgs) {
        if (!this.firstPageRecords) {
            this.firstPageRecords = data;
        }
        return generateRows(this.virtualRenderer, data, notifyArgs, this.freezeRowGenerator, this.parent);
    }
    /**
     * @param {number} index - specifies the index
     * @returns {Element} returns the element
     * @hidden
     */
    getRowByIndex(index) {
        return this.virtualRenderer.getRowByIndex(index);
    }
    /**
     * @param {number} index - specifies the index
     * @returns {Element} returns the element
     * @hidden
     */
    getMovableRowByIndex(index) {
        return this.virtualRenderer.getMovableVirtualRowByIndex(index);
    }
    collectRows(tableName) {
        return collectRows(tableName, this.virtualRenderer, this.parent);
    }
    /**
     * @returns {HTMLCollection} returns the Htmlcollection
     * @hidden
     */
    getMovableRows() {
        return this.collectRows('movable');
    }
    /**
     * @returns {HTMLCollectionOf<HTMLTableRowElement>} returns the html collection
     * @hidden
     */
    getRows() {
        return this.collectRows('frozen-left');
    }
    /**
     * @returns {Element} returns the element
     * @hidden
     */
    getColGroup() {
        const mCol = this.parent.getMovableVirtualContent();
        return this.isXaxis() ? mCol.querySelector(colGroup) : this.colgroup;
    }
    /**
     * @param {NotifyArgs} args - specifies the args
     * @returns {Row<Column>[]} returns the row
     * @hidden
     */
    getReorderedFrozenRows(args) {
        return getReorderedFrozenRows(args, this.virtualRenderer, this.parent, this.freezeRowGenerator, this.firstPageRecords);
    }
    isXaxis() {
        return isXaxis(this.virtualRenderer);
    }
    getHeaderCells() {
        return getHeaderCells(this.virtualRenderer, this.parent);
    }
    getVirtualFreezeHeader() {
        return getVirtualFreezeHeader(this.virtualRenderer, this.parent);
    }
    ensureFrozenCols(columns) {
        return ensureFrozenCols(columns, this.parent);
    }
    /**
     * @param {number} index - specifies the index
     * @returns {object} returns the object
     * @hidden
     */
    getRowObjectByIndex(index) {
        return this.virtualRenderer.getRowObjectByIndex(index);
    }
    /**
     * Set the header colgroup element
     *
     * @param {Element} colGroup - specifies the colgroup
     * @returns {Element} returns the element
     */
    setColGroup(colGroup$$1) {
        return setColGroup(colGroup$$1, this.virtualRenderer, this);
    }
}
/**
 * VirtualFreezeHdrRenderer is used to render the virtual table within the frozen and movable header table
 *
 * @hidden
 */
class VirtualFreezeHdrRenderer extends FreezeRender {
    constructor(parent, locator) {
        super(parent, locator);
        this.serviceLoc = locator;
    }
    /**
     * @returns {void}
     * @hidden
     */
    renderTable() {
        this.virtualHdrRenderer = new VirtualHeaderRenderer(this.parent, this.serviceLoc);
        this.virtualHdrRenderer.gen.refreshColOffsets();
        this.parent.setColumnIndexesInView(this.virtualHdrRenderer.gen.getColumnIndexes(this.getPanel()
            .querySelector('.' + headerContent)));
        this.virtualHdrRenderer.virtualEle.content = this.getPanel().querySelector('.' + headerContent);
        this.virtualHdrRenderer.virtualEle.renderFrozenWrapper();
        this.virtualHdrRenderer.virtualEle.renderFrozenPlaceHolder();
        if (this.parent.enableColumnVirtualization) {
            this.virtualHdrRenderer.virtualEle.movableContent = this.getPanel().querySelector('.' + movableHeader);
            this.virtualHdrRenderer.virtualEle.renderMovableWrapper();
            this.virtualHdrRenderer.virtualEle.renderMovablePlaceHolder();
        }
        super.renderTable();
        this.virtualHdrRenderer.setPanel(this.parent.getHeaderContent());
    }
    rfshMovable() {
        this.getFrozenHeader().appendChild(this.getTable());
        this.virtualHdrRenderer.virtualEle.wrapper.appendChild(this.getFrozenHeader());
        if (this.parent.enableColumnVirtualization) {
            this.virtualHdrRenderer.virtualEle.movableWrapper.appendChild(this.createHeader(undefined, 'movable'));
        }
        else {
            this.getMovableHeader().appendChild(this.createTable());
        }
        this.virtualHdrRenderer.virtualEle.wrapper.appendChild(this.getMovableHeader());
    }
}
/**
 * @param {NotifyArgs} args - specifies the args
 * @param {Object[]} data - specifies the data
 * @param {number[]}selectedIdx - specifies the selected index
 * @param {IGrid} parent - specifies the IGrid
 * @param {IModelGenerator} rowModelGenerator - specifies the rowModeGenerator
 * @param {ServiceLocator} locator - specifies the locator
 * @param {VirtualContentRenderer} virtualRenderer - specifies the virtual renderer
 * @param {VirtualFreezeRenderer} instance - specifies the instance
 * @returns {void}
 * @hidden
 */
function renderFrozenRows(args, data, selectedIdx, parent, rowModelGenerator, locator, virtualRenderer, instance) {
    parent.clearSelection();
    args.startIndex = 0;
    const rowRenderer = new RowRenderer(locator, null, parent);
    let rows = rowModelGenerator.generateRows(data, args);
    if (args.renderMovableContent) {
        virtualRenderer.vgenerator.movableCache[1] = rows;
        rows = parent.getMovableRowsObject();
    }
    else if (!args.renderFrozenRightContent && !args.renderMovableContent) {
        virtualRenderer.vgenerator.cache[1] = rows;
        rows = parent.getRowsObject();
    }
    else if (args.renderFrozenRightContent) {
        virtualRenderer.vgenerator.frozenRightCache[1] = rows;
        rows = parent.getFrozenRightRowsObject();
    }
    const hdr = !args.renderMovableContent && !args.renderFrozenRightContent
        ? parent.getHeaderContent().querySelector('.' + frozenHeader).querySelector(tbody) : args.renderMovableContent
        ? parent.getHeaderContent().querySelector('.' + movableHeader).querySelector(tbody)
        : parent.getHeaderContent().querySelector('.e-frozen-right-header').querySelector(tbody);
    hdr.innerHTML = '';
    for (let i = 0; i < parent.frozenRows; i++) {
        hdr.appendChild(rowRenderer.render(rows[i], parent.getColumns()));
        if (selectedIdx.indexOf(i) > -1) {
            rows[i].isSelected = true;
            for (let k = 0; k < rows[i].cells.length; k++) {
                rows[i].cells[k].isSelected = true;
            }
        }
    }
    if (args.renderMovableContent) {
        instance.mvblRows = virtualRenderer.vgenerator.movableCache[1];
    }
    else if (!args.renderMovableContent && !args.renderFrozenRightContent) {
        instance.frzRows = virtualRenderer.vgenerator.cache[1];
    }
    else if (args.renderFrozenRightContent) {
        instance.frRows = virtualRenderer.vgenerator.frozenRightCache[1];
    }
    args.renderMovableContent = !args.renderMovableContent && !args.renderFrozenRightContent;
    args.renderFrozenRightContent = parent.getFrozenMode() === leftRight
        && !args.renderMovableContent && !args.renderFrozenRightContent;
    if (args.renderMovableContent || args.renderFrozenRightContent) {
        renderFrozenRows(args, data, selectedIdx, parent, rowModelGenerator, locator, virtualRenderer, instance);
        if (!args.renderMovableContent && !args.renderFrozenRightContent) {
            args.isFrozenRowsRender = false;
        }
    }
}
/**
 * @param {Row<Column>[]} data - specifies the data
 * @param {freezeTable} tableName -specifies the table
 * @param {IGrid} parent - specifies the IGrid
 * @returns {Row<Column>[]} returns the row
 * @hidden
 */
function splitCells(data, tableName, parent) {
    const rows = [];
    for (let i = 0; i < data.length; i++) {
        rows.push(extend({}, data[i]));
        rows[i].cells = splitFrozenRowObjectCells(parent, rows[i].cells, tableName);
    }
    return rows;
}
/**
 * @param {freezeTable} tableName - specifies the freeze tabel
 * @param {VirtualContentRenderer} virtualRenderer - specifies the virtual renderer
 * @param {IGrid} parent - specifies the IGrid
 * @returns {Row<Column>[]} returns the row
 * @hidden
 */
function collectRows(tableName, virtualRenderer, parent) {
    let rows = [];
    let cache;
    if (tableName === frozenLeft) {
        cache = virtualRenderer.vgenerator.cache;
    }
    else if (tableName === 'movable') {
        cache = virtualRenderer.vgenerator.movableCache;
    }
    else if (tableName === frozenRight) {
        cache = parent.getFrozenMode() === 'Right' ? virtualRenderer.vgenerator.cache : virtualRenderer.vgenerator.frozenRightCache;
    }
    const keys = Object.keys(cache);
    for (let i = 0; i < keys.length; i++) {
        rows = [...rows, ...splitCells(cache[keys[i]], tableName, parent)];
    }
    return rows;
}
/**
 * @param {object} args - specifies the args
 * @param {string} args.uid - specifirs the uid
 * @param {boolean} args.set - specifies the set
 * @param {boolean} args.clearAll - specifies the boolean to clearall
 * @param {VirtualContentRenderer} virtualRenderer - specifies the virtual renderer
 * @returns {void}
 * @hidden
 */
function setFreezeSelection$1(args, virtualRenderer) {
    const leftKeys = Object.keys(virtualRenderer.vgenerator.cache);
    const movableKeys = Object.keys(virtualRenderer.vgenerator.movableCache);
    const rightKeys = Object.keys(virtualRenderer.vgenerator.frozenRightCache);
    for (let i = 0; i < leftKeys.length; i++) {
        selectFreezeRows(args, virtualRenderer.vgenerator.cache[leftKeys[i]]);
    }
    for (let i = 0; i < movableKeys.length; i++) {
        selectFreezeRows(args, virtualRenderer.vgenerator.movableCache[movableKeys[i]]);
    }
    for (let i = 0; i < rightKeys.length; i++) {
        selectFreezeRows(args, virtualRenderer.vgenerator.frozenRightCache[rightKeys[i]]);
    }
}
/**
 * @param {Object} args - specifies the args
 * @param {string} args.uid - specifirs the uid
 * @param {boolean} args.set - specifies the set
 * @param {boolean} args.clearAll - specifies the boolean to clearall
 * @param {Row<Column>[]} cache - specifies the cache
 * @returns {void}
 * @hidden
 */
function selectFreezeRows(args, cache) {
    const rows = cache.filter((row$$1) => args.clearAll || args.uid === row$$1.uid);
    for (let j = 0; j < rows.length; j++) {
        rows[j].isSelected = args.set;
        const cells = rows[j].cells;
        for (let k = 0; k < cells.length; k++) {
            cells[k].isSelected = args.set;
        }
    }
}
/**
 * @param {VirtualContentRenderer} virtualRenderer - specifies the virtual renderer
 * @param {ColumnWidthService} widthService - specifies the width service
 * @param {HTMLElement} target - specifies the target
 * @param {DocumentFragment} newChild - specifies the newchild
 * @param {NotifyArgs} e - specifies the notifyargs
 * @returns {void}
 * @hidden
 */
function appendContent(virtualRenderer, widthService, target, newChild, e) {
    virtualRenderer.appendContent(target, newChild, e);
    widthService.refreshFrozenScrollbar();
}
/**
 * @param {VirtualContentRenderer} virtualRenderer - specifies the virtual renderer
 * @param {object[]} data - specifies the data
 * @param {NotifyArgs} notifyArgs - specifies the notifyargs
 * @param {FreezeRowModelGenerator} freezeRowGenerator - specifies the freeze row generator
 * @param {IGrid} parent - specifies the IGrid
 * @returns {Row<Column>[]} returns the row
 * @hidden
 */
function generateRows(virtualRenderer, data, notifyArgs, freezeRowGenerator, parent) {
    const virtualRows = virtualRenderer.vgenerator.generateRows(data, notifyArgs);
    let arr = [];
    arr = virtualRows.map((row$$1) => extend({}, row$$1));
    let rows = freezeRowGenerator.generateRows(data, notifyArgs, arr);
    if (parent.frozenRows && notifyArgs.requestType === 'delete' && parent.pageSettings.currentPage === 1) {
        rows = rows.slice(parent.frozenRows);
    }
    return rows;
}
/**
 * @param {NotifyArgs} args -specifies the args
 * @param {VirtualContentRenderer} virtualRenderer - specifies the virtual renderer
 * @param {IGrid} parent - specifies the IGrid
 * @param {FreezeRowModelGenerator} freezeRowGenerator - specifies the freezeRowGenerator
 * @param {Object[]} firstPageRecords - specifies the first page records
 * @returns {Row<Column>[]} returns the row
 * @hidden
 */
function getReorderedFrozenRows(args, virtualRenderer, parent, freezeRowGenerator, firstPageRecords) {
    const bIndex = args.virtualInfo.blockIndexes;
    const colIndex = args.virtualInfo.columnIndexes;
    const page = args.virtualInfo.page;
    args.virtualInfo.blockIndexes = [1, 2];
    args.virtualInfo.page = 1;
    if (!args.renderMovableContent) {
        args.virtualInfo.columnIndexes = [];
    }
    const firstRecordslength = parent.getCurrentViewRecords().length;
    firstPageRecords = parent.renderModule.data.dataManager.dataSource.json.slice(0, firstRecordslength);
    const virtualRows = virtualRenderer.vgenerator.generateRows(firstPageRecords, args);
    const rows = splitReorderedRows(virtualRows, parent, args, freezeRowGenerator);
    args.virtualInfo.blockIndexes = bIndex;
    args.virtualInfo.columnIndexes = colIndex;
    args.virtualInfo.page = page;
    return rows.splice(0, parent.frozenRows);
}
/**
 * @param {Row<Column>[]} rows - specifies the row
 * @param {IGrid} parent - specifies the IGrid
 * @param {NotifyArgs} args - specifies the notify arguments
 * @param {FreezeRowModelGenerator} freezeRowGenerator - specifies the freezerowgenerator
 * @returns {Row<Column>[]} returns the row
 * @hidden
 */
function splitReorderedRows(
// eslint-disable-next-line @typescript-eslint/no-unused-vars
rows, parent, args, freezeRowGenerator) {
    let tableName;
    if (args.renderMovableContent) {
        tableName = 'movable';
    }
    else if (args.renderFrozenRightContent) {
        tableName = 'frozen-right';
    }
    else {
        tableName = 'frozen-left';
    }
    for (let i = 0, len = rows.length; i < len; i++) {
        rows[i].cells = splitFrozenRowObjectCells(parent, rows[i].cells, tableName);
    }
    return rows;
}
/**
 * @param {VirtualContentRenderer} virtualRenderer - specifies the VirtualRenderer
 * @returns {boolean} returns the isXaxis
 * @hidden
 */
function isXaxis(virtualRenderer) {
    let value = false;
    if (virtualRenderer) {
        value = virtualRenderer.requestType === 'virtualscroll'
            && virtualRenderer.currentInfo.sentinelInfo.axis === 'X';
    }
    return value;
}
/**
 * @param {VirtualContentRenderer} virtualRenderer - specifies the virtualrenderer
 * @param {IGrid} parent - specifies the IGrid
 * @returns {Element[]} returns the element
 * @hidden
 */
function getHeaderCells(virtualRenderer, parent) {
    const content$$1 = isXaxis(virtualRenderer) ? parent.getMovableVirtualHeader() : parent.getHeaderContent();
    return content$$1 ? [].slice.call(content$$1.querySelectorAll('.e-headercell:not(.e-stackedheadercell)')) : [];
}
/**
 * @param {VirtualContentRenderer} virtualRenderer - specifies the virtual Renderer
 * @param {IGrid} parent - specifies the IGrid
 * @returns {Element} returns the element
 * @hidden
 */
function getVirtualFreezeHeader(virtualRenderer, parent) {
    let headerTable;
    if (isXaxis(virtualRenderer)) {
        headerTable = parent.getMovableVirtualHeader().querySelector('.' + table);
    }
    else {
        headerTable = parent.getFrozenVirtualHeader().querySelector('.' + table);
    }
    return headerTable;
}
/**
 * @param {Column[]} columns - specifies the columns
 * @param {IGrid} parent - specifies the IGrid
 * @returns {Column[]} returns the column[]
 * @hidden
 */
function ensureFrozenCols(columns, parent) {
    const frozenCols = parent.columns.slice(0, parent.getFrozenColumns());
    columns = frozenCols.concat(columns);
    return columns;
}
/**
 * @param {Element} colGroup - specifies the colGroup
 * @param {VirtualContentRenderer} virtualRenderer - specifies the virtual renderer
 * @param {ColumnVirtualFreezeRenderer} instance - specifies the instances
 * @returns {Element} returns the element
 * @hidden
 */
function setColGroup(colGroup$$1, virtualRenderer, instance) {
    if (!isXaxis(virtualRenderer)) {
        if (!isNullOrUndefined(colGroup$$1)) {
            colGroup$$1.id = 'content-' + colGroup$$1.id;
        }
        instance.colgroup = colGroup$$1;
    }
    return instance.colgroup;
}
/**
 * @param {VirtualFreezeRenderer} instance - specifies the instance
 * @param {number} index - specifies the index
 * @returns {void}
 * @hidden
 */
function setCache(instance, index) {
    if (instance.virtualRenderer.vgenerator.cache[1]) {
        instance.virtualRenderer.vgenerator.cache[1][index] = instance.frzRows[index];
    }
    else {
        instance.virtualRenderer.vgenerator.cache[1] = instance.frzRows;
    }
    if (instance.virtualRenderer.vgenerator.movableCache[1]) {
        instance.virtualRenderer.vgenerator.movableCache[1][index] = instance.mvblRows[index];
    }
    else {
        instance.virtualRenderer.vgenerator.movableCache[1] = instance.mvblRows;
    }
}
/**
 * @param {IGrid} parent - specifies the IGrid
 * @param {VirtualContentRenderer} virtualRenderer - specifies the virtualRenderer
 * @param {Element} scrollbar - specifies the scrollbr
 * @param {Element} mCont - specifies the mCont
 * @returns {void}
 * @hidden
 */
function setDebounce(parent, virtualRenderer, scrollbar, mCont) {
    const debounceEvent = (parent.dataSource instanceof DataManager && !parent.dataSource.dataSource.offline);
    const opt = {
        container: virtualRenderer.content, pageHeight: virtualRenderer.getBlockHeight() * 2, debounceEvent: debounceEvent,
        axes: parent.enableColumnVirtualization ? ['X', 'Y'] : ['Y'], scrollbar: scrollbar,
        movableContainer: mCont
    };
    virtualRenderer.observer = new InterSectionObserver(virtualRenderer.virtualEle.wrapper, opt, virtualRenderer.virtualEle.movableWrapper);
}
/**
 * ColumnVirtualFreezeRenderer is used to render the virtual table within the frozen and movable content table
 *
 * @hidden
 */
class ColumnVirtualFreezeRenderer extends ColumnFreezeContentRenderer {
    constructor(parent, locator) {
        super(parent, locator);
        /** @hidden */
        this.frRows = [];
        /** @hidden */
        this.frzRows = [];
        /** @hidden */
        this.mvblRows = [];
        this.serviceLoc = locator;
        this.eventListener('on');
        this.rowModelGenerator = new RowModelGenerator(this.parent);
    }
    actionComplete(args) {
        if (args.requestType === 'delete' && this.parent.frozenRows) {
            for (let i = 0; i < this.parent.frozenRows; i++) {
                if (this.virtualRenderer.vgenerator.frozenRightCache[1]) {
                    this.virtualRenderer.vgenerator.frozenRightCache[1][i] = this.frRows.length ? this.frRows[i] : this.frzRows[i];
                }
                else {
                    this.virtualRenderer.vgenerator.frozenRightCache[1] = this.frRows.length ? this.frRows : this.frzRows;
                    break;
                }
                setCache(this, i);
            }
        }
    }
    eventListener(action) {
        this.parent.addEventListener(actionComplete, this.actionComplete.bind(this));
        this.parent[action](refreshVirtualFrozenRows, this.refreshVirtualFrozenRows, this);
        this.parent[action](getVirtualData, this.getVirtualData, this);
        this.parent[action](setFreezeSelection, this.setFreezeSelection, this);
    }
    refreshVirtualFrozenRows(args) {
        if (args.requestType === 'delete' && this.parent.frozenRows) {
            args.isFrozenRowsRender = true;
            const query = this.parent.renderModule.data.generateQuery(true).clone();
            query.page(1, this.parent.pageSettings.pageSize);
            const selectedIdx = this.parent.getSelectedRowIndexes();
            this.parent.renderModule.data.getData({}, query).then((e) => {
                renderFrozenRows(args, e.result, selectedIdx, this.parent, this.rowModelGenerator, this.serviceLoc, this.virtualRenderer, this);
            });
        }
    }
    setFreezeSelection(args) {
        setFreezeSelection$1(args, this.virtualRenderer);
    }
    getVirtualData(data) {
        this.virtualRenderer.getVirtualData(data);
    }
    renderNextFrozentPart(e, tableName) {
        e.renderMovableContent = this.parent.getFrozenLeftCount() ? tableName === frozenLeft : tableName === frozenRight;
        e.renderFrozenRightContent = this.parent.getFrozenMode() === leftRight && tableName === 'movable';
        if (e.renderMovableContent || e.renderFrozenRightContent) {
            this.refreshContentRows(extend({}, e));
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    renderTable() {
        this.virtualRenderer = new VirtualContentRenderer(this.parent, this.serviceLoc);
        this.virtualRenderer.header = this.serviceLoc.getService('rendererFactory')
            .getRenderer(RenderType.Header).virtualHdrRenderer;
        this.freezeRowGenerator = new FreezeRowModelGenerator(this.parent);
        super.renderTable();
        this.virtualRenderer.setPanel(this.parent.getContent());
        this.scrollbar = this.parent.getContent().querySelector('.e-movablescrollbar');
        const frozenRightCont = this.getFrozenRightContent();
        let frzCont = this.getFrozenContent();
        const movableCont = this.getMovableContent();
        if (this.parent.getFrozenMode() === 'Right') {
            frzCont = frozenRightCont;
        }
        this.virtualRenderer.virtualEle.content = this.virtualRenderer.content = this.getPanel().querySelector('.' + content);
        this.virtualRenderer.virtualEle.content.style.overflowX = 'hidden';
        const minHeight = this.parent.height;
        this.virtualRenderer.virtualEle.renderFrozenWrapper(minHeight);
        this.virtualRenderer.virtualEle.renderFrozenPlaceHolder();
        this.renderVirtualFrozenLeft(frzCont, movableCont);
        this.renderVirtualFrozenRight(frzCont, movableCont);
        this.renderVirtualFrozenLeftRight(frzCont, movableCont, frozenRightCont);
        this.virtualRenderer.virtualEle.table = this.getTable();
        setDebounce(this.parent, this.virtualRenderer, this.scrollbar, this.getMovableContent());
    }
    renderVirtualFrozenLeft(frzCont, movableCont) {
        if (this.parent.getFrozenMode() === 'Left') {
            this.virtualRenderer.virtualEle.wrapper.appendChild(frzCont);
            this.virtualRenderer.virtualEle.wrapper.appendChild(movableCont);
        }
    }
    renderVirtualFrozenRight(frzCont, movableCont) {
        if (this.parent.getFrozenMode() === 'Right') {
            this.virtualRenderer.virtualEle.wrapper.appendChild(movableCont);
            this.virtualRenderer.virtualEle.wrapper.appendChild(frzCont);
        }
    }
    renderVirtualFrozenLeftRight(frzCont, movableCont, frozenRightCont) {
        if (this.parent.getFrozenMode() === leftRight) {
            this.virtualRenderer.virtualEle.wrapper.appendChild(frzCont);
            this.virtualRenderer.virtualEle.wrapper.appendChild(movableCont);
            this.virtualRenderer.virtualEle.wrapper.appendChild(frozenRightCont);
        }
    }
    /**
     * @param {HTMLElement} target - specifies the target
     * @param {DocumentFragment} newChild - specifies the newchild
     * @param {NotifyArgs} e - specifies the NotifyArgs
     * @returns {void}
     * @hidden
     */
    appendContent(target, newChild, e) {
        appendContent(this.virtualRenderer, this.widthService, target, newChild, e);
        this.refreshScrollOffset();
    }
    /**
     * @param {Object[]} data - specifies the data
     * @param {NotifyArgs} e - specifies the notifyargs
     * @returns {Row<Column>[]} returns the row
     * @hidden
     */
    generateRows(data, e) {
        if (!this.firstPageRecords) {
            this.firstPageRecords = data;
        }
        return generateRows(this.virtualRenderer, data, e, this.freezeRowGenerator, this.parent);
    }
    /**
     * @param {number} index - specifies the number
     * @returns {Element} returns the element
     * @hidden
     */
    getRowByIndex(index) {
        return this.virtualRenderer.getRowByIndex(index);
    }
    /**
     * @param {number} index - specifies the index
     * @returns {Element} - returns the element
     * @hidden
     */
    getFrozenRightRowByIndex(index) {
        return this.virtualRenderer.getFrozenRightVirtualRowByIndex(index);
    }
    collectRows(tableName) {
        return collectRows(tableName, this.virtualRenderer, this.parent);
    }
    /**
     * @param {number} index - specifies the index
     * @returns {Element} returns the element
     * @hidden
     */
    getMovableRowByIndex(index) {
        return this.virtualRenderer.getMovableVirtualRowByIndex(index);
    }
    /**
     * @returns {Row<Column>[]} returns the row
     * @hidden
     */
    getFrozenRightRows() {
        return this.collectRows('frozen-right');
    }
    /**
     * @returns {Row<Column>[]} returns the row
     * @hidden
     */
    getMovableRows() {
        return this.collectRows('movable');
    }
    /**
     * @returns {Element} returns the element
     * @hidden
     */
    getColGroup() {
        const mCol = this.parent.getMovableVirtualContent();
        return isXaxis(this.virtualRenderer) ? mCol.querySelector(colGroup) : this.colgroup;
    }
    /**
     * @returns {Row<Column>[]} returns the row
     * @hidden
     */
    getRows() {
        return this.collectRows(this.parent.getFrozenMode() === 'Right' ? 'frozen-right' : 'frozen-left');
    }
    /**
     * @param {NotifyArgs} args - specifies the args
     * @returns {Row<Column>[]} returns the row object
     * @hidden
     */
    getReorderedFrozenRows(args) {
        return getReorderedFrozenRows(args, this.virtualRenderer, this.parent, this.freezeRowGenerator, this.firstPageRecords);
    }
    getHeaderCells() {
        return getHeaderCells(this.virtualRenderer, this.parent);
    }
    isXaxis() {
        return isXaxis(this.virtualRenderer);
    }
    getVirtualFreezeHeader() {
        return getVirtualFreezeHeader(this.virtualRenderer, this.parent);
    }
    /**
     * @param {number} index - specifies the index
     * @returns {object} - returns the object
     * @hidden
     */
    getRowObjectByIndex(index) {
        return this.virtualRenderer.getRowObjectByIndex(index);
    }
    ensureFrozenCols(columns) {
        return ensureFrozenCols(columns, this.parent);
    }
    /**
     * Set the header colgroup element
     *
     * @param {Element} colGroup - specifies the colgroup
     * @returns {Element} - returns the element
     */
    setColGroup(colGroup$$1) {
        return setColGroup(colGroup$$1, this.virtualRenderer, this);
    }
}

/**
 * `Freeze` module is used to handle Frozen rows and columns.
 *
 * @hidden
 */
class Freeze {
    constructor(parent, locator) {
        this.parent = parent;
        this.locator = locator;
        this.addEventListener();
    }
    getModuleName() {
        return 'freeze';
    }
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(initialLoad, this.instantiateRenderer, this);
        this.parent.on(destroy, this.destroy, this);
    }
    instantiateRenderer() {
        this.parent.log('limitation', this.getModuleName());
        const renderer = this.locator.getService('rendererFactory');
        if (this.parent.getFrozenColumns()) {
            if (this.parent.enableColumnVirtualization) {
                renderer.addRenderer(RenderType.Header, new VirtualFreezeHdrRenderer(this.parent, this.locator));
            }
            else {
                renderer.addRenderer(RenderType.Header, new FreezeRender(this.parent, this.locator));
            }
            if (this.parent.enableVirtualization) {
                renderer.addRenderer(RenderType.Content, new VirtualFreezeRenderer(this.parent, this.locator));
            }
            else {
                renderer.addRenderer(RenderType.Content, new FreezeContentRender(this.parent, this.locator));
            }
        }
        if (this.parent.getFrozenLeftColumnsCount() || this.parent.getFrozenRightColumnsCount()) {
            renderer.addRenderer(RenderType.Header, new ColumnFreezeHeaderRenderer(this.parent, this.locator));
            if (this.parent.enableVirtualization) {
                renderer.addRenderer(RenderType.Content, new ColumnVirtualFreezeRenderer(this.parent, this.locator));
            }
            else {
                renderer.addRenderer(RenderType.Content, new ColumnFreezeContentRenderer(this.parent, this.locator));
            }
        }
    }
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(initialLoad, this.instantiateRenderer);
        this.parent.off(destroy, this.destroy);
    }
    destroy() {
        this.removeEventListener();
    }
}

/**
 * 'column menu module used to handle column menu actions'
 *
 * @hidden
 */
class ColumnMenu {
    constructor(parent, serviceLocator) {
        this.defaultItems = {};
        this.localeText = this.setLocaleKey();
        this.disableItems = [];
        this.hiddenItems = [];
        this.isOpen = false;
        // default class names
        this.GROUP = 'e-icon-group';
        this.UNGROUP = 'e-icon-ungroup';
        this.ASCENDING = 'e-icon-ascending';
        this.DESCENDING = 'e-icon-descending';
        this.ROOT = 'e-columnmenu';
        this.FILTER = 'e-icon-filter';
        this.POP = 'e-filter-popup';
        this.WRAP = 'e-col-menu';
        this.CHOOSER = '_chooser_';
        this.parent = parent;
        this.gridID = parent.element.id;
        this.serviceLocator = serviceLocator;
        this.addEventListener();
    }
    wireEvents() {
        const elements = this.getColumnMenuHandlers();
        for (let i = 0; i < elements.length; i++) {
            EventHandler.add(elements[i], 'mousedown', this.columnMenuHandlerDown, this);
        }
    }
    unwireEvents() {
        const elements = this.getColumnMenuHandlers();
        for (let i = 0; i < elements.length; i++) {
            EventHandler.remove(elements[i], 'mousedown', this.columnMenuHandlerDown);
        }
    }
    /**
     * To destroy the resize
     *
     * @returns {void}
     * @hidden
     */
    destroy() {
        const gridElement = this.parent.element;
        if (!gridElement || (!gridElement.querySelector('.' + gridHeader) && !gridElement.querySelector('.' + gridContent))) {
            return;
        }
        this.columnMenu.destroy();
        this.removeEventListener();
        this.unwireFilterEvents();
        this.unwireEvents();
        if (this.element.parentNode) {
            remove(this.element);
        }
    }
    columnMenuHandlerClick(e) {
        if (e.target.classList.contains('e-columnmenu')) {
            this.columnMenu.items = this.getItems();
            this.columnMenu.dataBind();
            if ((this.isOpen && this.headerCell !== this.getHeaderCell(e)) || document.querySelector('.e-grid-menu .e-menu-parent.e-ul')) {
                this.columnMenu.close();
                this.openColumnMenu(e);
            }
            else if (!this.isOpen) {
                this.openColumnMenu(e);
            }
            else {
                this.columnMenu.close();
            }
        }
    }
    /**
     * @param {string} field - specifies the field name
     * @returns {void}
     * @hidden
     */
    openColumnMenuByField(field) {
        this.openColumnMenu({ target: this.parent.getColumnHeaderByField(field).querySelector('.e-columnmenu') });
    }
    afterFilterColumnMenuClose() {
        if (this.columnMenu) {
            this.columnMenu.items = this.getItems();
            this.columnMenu.dataBind();
            this.columnMenu.close();
        }
    }
    openColumnMenu(e) {
        let pos = { top: 0, left: 0 };
        this.element.style.cssText = 'display:block;visibility:hidden';
        const elePos = this.element.getBoundingClientRect();
        const gClient = this.parent.element.getBoundingClientRect();
        this.element.style.cssText = 'display:none;visibility:visible';
        this.headerCell = this.getHeaderCell(e);
        if (Browser.isDevice) {
            pos.top = ((window.innerHeight / 2) - (elePos.height / 2));
            pos.left = ((window.innerWidth / 2) - (elePos.width / 2));
        }
        else {
            if (this.parent.enableRtl) {
                pos = calculatePosition(this.headerCell, 'left', 'bottom');
            }
            else {
                pos = calculatePosition(this.headerCell, 'right', 'bottom');
                pos.left -= elePos.width;
                if ((pos.left + elePos.width + 1) >= gClient.right) {
                    pos.left -= 35;
                }
            }
        }
        this.columnMenu.open(pos.top, pos.left);
        if (e.preventDefault) {
            e.preventDefault();
        }
        applyBiggerTheme(this.parent.element, this.columnMenu.element.parentElement);
    }
    columnMenuHandlerDown() {
        this.isOpen = !(this.element.style.display === 'none' || this.element.style.display === '');
    }
    getColumnMenuHandlers() {
        return [].slice.call(this.parent.getHeaderTable().getElementsByClassName(this.ROOT));
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(headerRefreshed, this.wireEvents, this);
        this.parent.on(uiUpdate, this.enableAfterRenderMenu, this);
        this.parent.on(initialEnd, this.render, this);
        if (this.isFilterItemAdded()) {
            this.parent.on(filterDialogCreated, this.filterPosition, this);
        }
        this.parent.on(click, this.columnMenuHandlerClick, this);
        this.parent.on(afterFilterColumnMenuClose, this.afterFilterColumnMenuClose, this);
        this.parent.on(keyPressed, this.keyPressHandler, this);
        this.parent.on(destroy, this.destroy, this);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(headerRefreshed, this.unwireEvents);
        this.parent.off(uiUpdate, this.enableAfterRenderMenu);
        this.parent.off(initialEnd, this.render);
        if (this.isFilterItemAdded()) {
            this.parent.off(filterDialogCreated, this.filterPosition);
        }
        this.parent.off(click, this.columnMenuHandlerClick);
        this.parent.on(afterFilterColumnMenuClose, this.afterFilterColumnMenuClose);
        this.parent.off(keyPressed, this.keyPressHandler);
        this.parent.off(destroy, this.destroy);
    }
    keyPressHandler(e) {
        const gObj = this.parent;
        if (e.action === 'altDownArrow') {
            const element = gObj.focusModule.currentInfo.element;
            if (element && element.classList.contains('e-headercell')) {
                const column = gObj.getColumnByUid(element.firstElementChild.getAttribute('e-mappinguid'));
                this.openColumnMenuByField(column.field);
            }
        }
    }
    enableAfterRenderMenu(e) {
        if (e.module === this.getModuleName() && e.enable) {
            if (this.columnMenu) {
                this.columnMenu.destroy();
                remove(this.element);
            }
            this.render();
        }
    }
    render() {
        this.l10n = this.serviceLocator.getService('localization');
        this.element = this.parent.createElement('ul', { id: this.gridID + '_columnmenu', className: 'e-colmenu' });
        this.element.setAttribute('aria-label', this.l10n.getConstant('ColumnMenuDialogARIA'));
        this.parent.element.appendChild(this.element);
        this.columnMenu = new ContextMenu({
            cssClass: this.parent.cssClass ? 'e-grid-menu' + ' ' + this.parent.cssClass : 'e-grid-menu',
            enableRtl: this.parent.enableRtl,
            enablePersistence: this.parent.enablePersistence,
            locale: this.parent.locale,
            items: this.getItems(),
            select: this.columnMenuItemClick.bind(this),
            beforeOpen: this.columnMenuBeforeOpen.bind(this),
            onOpen: this.columnMenuOnOpen.bind(this),
            onClose: this.columnMenuOnClose.bind(this),
            beforeItemRender: this.beforeMenuItemRender.bind(this),
            beforeClose: this.columnMenuBeforeClose.bind(this)
        });
        this.columnMenu.appendTo(this.element);
        this.wireFilterEvents();
    }
    wireFilterEvents() {
        if (!Browser.isDevice && this.isFilterItemAdded()) {
            EventHandler.add(this.element, 'mouseover', this.appendFilter, this);
        }
    }
    unwireFilterEvents() {
        if (!Browser.isDevice && this.isFilterItemAdded()) {
            EventHandler.remove(this.element, 'mouseover', this.appendFilter);
        }
    }
    beforeMenuItemRender(args) {
        if (this.isChooserItem(args.item)) {
            const field = this.getKeyFromId(args.item.id, this.CHOOSER);
            const column = this.parent.columnModel.filter((col) => col.field === field);
            const check = createCheckBox(this.parent.createElement, false, {
                label: args.item.text,
                checked: column[0].visible
            });
            if (this.parent.enableRtl) {
                check.classList.add('e-rtl');
            }
            args.element.innerHTML = '';
            args.element.appendChild(check);
        }
        else if (args.item.id && this.getKeyFromId(args.item.id) === 'Filter') {
            args.element.appendChild(this.parent.createElement('span', { className: 'e-icons e-caret' }));
            args.element.className += 'e-filter-item e-menu-caret-icon';
        }
    }
    columnMenuBeforeClose(args) {
        const colChooser = args.event ? closest(args.event.target, '.e-menu-item') : null;
        if (!isNullOrUndefined(args.parentItem) &&
            this.getKeyFromId(args.parentItem.id) === 'ColumnChooser' &&
            colChooser && this.isChooserItem(colChooser)) {
            args.cancel = true;
        }
        else if (args.event && (closest(args.event.target, '.' + this.POP)
            || (args.event.currentTarget && args.event.currentTarget.activeElement &&
                parentsUntil(args.event.currentTarget.activeElement, 'e-filter-popup'))
            || parentsUntil(args.event.target, 'e-popup') ||
            (parentsUntil(args.event.target, 'e-popup-wrapper'))) && !Browser.isDevice) {
            args.cancel = true;
        }
    }
    isChooserItem(item) {
        return item.id && item.id.indexOf('_colmenu_') >= 0 &&
            this.getKeyFromId(item.id, this.CHOOSER).indexOf('_colmenu_') === -1;
    }
    columnMenuBeforeOpen(args) {
        args.column = this.targetColumn = this.getColumn();
        this.parent.trigger(columnMenuOpen, args);
        for (const item of args.items) {
            const key = this.getKeyFromId(item.id);
            const dItem = this.defaultItems[key];
            if (this.getDefaultItems().indexOf(key) !== -1 && this.ensureDisabledStatus(key) && !dItem.hide) {
                this.disableItems.push(item.text);
            }
            if (item.hide) {
                this.hiddenItems.push(item.text);
            }
        }
        this.columnMenu.enableItems(this.disableItems, false);
        this.columnMenu.hideItems(this.hiddenItems);
    }
    columnMenuOnOpen(args) {
        if (args.element.className === 'e-menu-parent e-ul ') {
            if (args.element.offsetHeight > window.innerHeight || this.parent.element.offsetHeight > window.innerHeight) {
                args.element.style.maxHeight = (window.innerHeight) * 0.8 + 'px';
                args.element.style.overflowY = 'auto';
            }
        }
    }
    ensureDisabledStatus(item) {
        let status = false;
        switch (item) {
            case 'Group':
                if (!this.parent.allowGrouping || (this.parent.ensureModuleInjected(Group) && this.targetColumn
                    && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) >= 0 ||
                    this.targetColumn && !this.targetColumn.allowGrouping)) {
                    status = true;
                }
                break;
            case 'AutoFitAll':
            case 'AutoFit':
                status = !this.parent.ensureModuleInjected(Resize);
                break;
            case 'Ungroup':
                if (!this.parent.ensureModuleInjected(Group) || (this.parent.ensureModuleInjected(Group) && this.targetColumn
                    && this.parent.groupSettings.columns.indexOf(this.targetColumn.field) < 0)) {
                    status = true;
                }
                break;
            case 'SortDescending':
            case 'SortAscending':
                if (this.parent.allowSorting && this.parent.ensureModuleInjected(Sort)
                    && this.parent.sortSettings.columns.length > 0 && this.targetColumn && this.targetColumn.allowSorting) {
                    const sortColumns = this.parent.sortSettings.columns;
                    for (let i = 0; i < sortColumns.length; i++) {
                        if (sortColumns[i].field === this.targetColumn.field
                            && sortColumns[i].direction.toLocaleLowerCase() === item.toLocaleLowerCase().replace('sort', '')) {
                            status = true;
                        }
                    }
                }
                else if (!this.parent.allowSorting || !this.parent.ensureModuleInjected(Sort) ||
                    this.parent.allowSorting && this.targetColumn && !this.targetColumn.allowSorting) {
                    status = true;
                }
                break;
            case 'Filter':
                if (this.parent.allowFiltering && (this.parent.filterSettings.type !== 'FilterBar')
                    && this.parent.ensureModuleInjected(Filter) && this.targetColumn && this.targetColumn.allowFiltering) {
                    status = false;
                }
                else if (this.parent.ensureModuleInjected(Filter) && this.parent.allowFiltering
                    && this.targetColumn && (!this.targetColumn.allowFiltering || this.parent.filterSettings.type === 'FilterBar')) {
                    status = true;
                }
        }
        return status;
    }
    columnMenuItemClick(args) {
        const item = this.isChooserItem(args.item) ? 'ColumnChooser' : this.getKeyFromId(args.item.id);
        switch (item) {
            case 'AutoFit':
                this.parent.autoFitColumns(this.targetColumn.field);
                break;
            case 'AutoFitAll':
                this.parent.autoFitColumns([]);
                break;
            case 'Ungroup':
                this.parent.ungroupColumn(this.targetColumn.field);
                break;
            case 'Group':
                this.parent.groupColumn(this.targetColumn.field);
                break;
            case 'SortAscending':
                this.parent.sortColumn(this.targetColumn.field, 'Ascending');
                break;
            case 'SortDescending':
                this.parent.sortColumn(this.targetColumn.field, 'Descending');
                break;
            case 'ColumnChooser':
                // eslint-disable-next-line no-case-declarations
                const key = this.getKeyFromId(args.item.id, this.CHOOSER);
                // eslint-disable-next-line no-case-declarations
                const checkbox = args.element.querySelector('.e-checkbox-wrapper .e-frame');
                if (checkbox && checkbox.classList.contains('e-check')) {
                    checkbox.classList.remove('e-check');
                    this.parent.hideColumns(key, 'field');
                }
                else if (checkbox) {
                    this.parent.showColumns(key, 'field');
                    checkbox.classList.add('e-check');
                }
                break;
            case 'Filter':
                this.getFilter(args.element, args.item.id);
                break;
        }
        args.column = this.targetColumn;
        this.parent.trigger(columnMenuClick, args);
    }
    columnMenuOnClose(args) {
        const parent = 'parentObj';
        if (args.items.length > 0 && args.items[0][parent] instanceof ContextMenu) {
            this.columnMenu.enableItems(this.disableItems, false);
            this.disableItems = [];
            this.columnMenu.showItems(this.hiddenItems);
            this.hiddenItems = [];
            if (this.isFilterPopupOpen()) {
                this.getFilter(args.element, args.element.id, true);
            }
        }
        if (!this.parent.isFrozenGrid()) {
            this.parent.notify(restoreFocus, {});
        }
    }
    getDefaultItems() {
        return ['AutoFitAll', 'AutoFit', 'SortAscending', 'SortDescending', 'Group', 'Ungroup', 'ColumnChooser', 'Filter'];
    }
    getItems() {
        const items = [];
        const defultItems = this.parent.columnMenuItems ? this.parent.columnMenuItems : this.getDefault();
        for (const item of defultItems) {
            if (typeof item === 'string') {
                if (item === 'ColumnChooser') {
                    const col = this.getDefaultItem(item);
                    col.items = this.createChooserItems();
                    items.push(col);
                }
                else {
                    items.push(this.getDefaultItem(item));
                }
            }
            else {
                items.push(item);
            }
        }
        return items;
    }
    getDefaultItem(item) {
        let menuItem = {};
        switch (item) {
            case 'SortAscending':
                menuItem = { iconCss: this.ASCENDING };
                break;
            case 'SortDescending':
                menuItem = { iconCss: this.DESCENDING };
                break;
            case 'Group':
                menuItem = { iconCss: this.GROUP };
                break;
            case 'Ungroup':
                menuItem = { iconCss: this.UNGROUP };
                break;
            case 'Filter':
                menuItem = { iconCss: this.FILTER };
                break;
        }
        this.defaultItems[item] = {
            text: this.getLocaleText(item), id: this.generateID(item),
            iconCss: menuItem.iconCss ? 'e-icons ' + menuItem.iconCss : null
        };
        return this.defaultItems[item];
    }
    getLocaleText(item) {
        return this.l10n.getConstant(this.localeText[item]);
    }
    generateID(item, append$$1) {
        return this.gridID + '_colmenu_' + (append$$1 ? append$$1 + item : item);
    }
    getKeyFromId(id, append$$1) {
        return id.indexOf('_colmenu_') > 0 &&
            id.replace(this.gridID + '_colmenu_' + (append$$1 ? append$$1 : ''), '');
    }
    /**
     * @returns {HTMLElement} returns the HTMLElement
     * @hidden
     */
    getColumnMenu() {
        return this.element;
    }
    getModuleName() {
        return 'columnMenu';
    }
    setLocaleKey() {
        const localeKeys = {
            'AutoFitAll': 'autoFitAll',
            'AutoFit': 'autoFit',
            'Group': 'Group',
            'Ungroup': 'Ungroup',
            'SortAscending': 'SortAscending',
            'SortDescending': 'SortDescending',
            'ColumnChooser': 'Columnchooser',
            'Filter': 'FilterMenu'
        };
        return localeKeys;
    }
    getHeaderCell(e) {
        return closest(e.target, 'th.e-headercell');
    }
    getColumn() {
        if (this.headerCell) {
            const uid = this.headerCell.querySelector('.e-headercelldiv').getAttribute('e-mappinguid');
            return this.parent.getColumnByUid(uid);
        }
        return null;
    }
    createChooserItems() {
        const items = [];
        for (const col of this.parent.columnModel) {
            if (col.showInColumnChooser && col.field) {
                items.push({ id: this.generateID(col.field, this.CHOOSER), text: col.headerText ? col.headerText : col.field });
            }
        }
        return items;
    }
    appendFilter(e) {
        const filter = 'Filter';
        if (!this.defaultItems[filter]) {
            return;
        }
        else {
            const key = this.defaultItems[filter].id;
            if (closest(e.target, '#' + key) && !this.isFilterPopupOpen()) {
                this.getFilter(e.target, key);
            }
            else if (!closest(e.target, '#' + key) && this.isFilterPopupOpen()) {
                this.getFilter(e.target, key, true);
            }
        }
    }
    getFilter(target, id, isClose) {
        const filterPopup = this.getFilterPop();
        if (filterPopup) {
            filterPopup.style.display = !Browser.isDevice && isClose ? 'none' : 'block';
        }
        else {
            this.parent.notify(filterOpen, {
                col: this.targetColumn, target: target, isClose: isClose, id: id
            });
        }
    }
    setPosition(li, ul) {
        const gridPos = this.parent.element.getBoundingClientRect();
        const liPos = li.getBoundingClientRect();
        let left = liPos.left - gridPos.left;
        let top = liPos.top - gridPos.top;
        if (gridPos.height < top) {
            top = top - ul.offsetHeight + liPos.height;
        }
        else if (gridPos.height < top + ul.offsetHeight) {
            top = gridPos.height - ul.offsetHeight;
        }
        if (window.innerHeight < ul.offsetHeight + top + gridPos.top) {
            top = window.innerHeight - ul.offsetHeight - gridPos.top;
        }
        if (top + gridPos.top < 0) {
            top = 0;
        }
        left += (this.parent.enableRtl ? -ul.offsetWidth : liPos.width);
        if (gridPos.width <= left + ul.offsetWidth) {
            left -= liPos.width + ul.offsetWidth;
            if (liPos.left < ul.offsetWidth) {
                left = liPos.left + ul.offsetWidth / 2;
            }
        }
        else if (left < 0) {
            left += ul.offsetWidth + liPos.width;
        }
        ul.style.top = top + 'px';
        ul.style.left = left + 'px';
    }
    filterPosition() {
        const filterPopup = this.getFilterPop();
        filterPopup.classList.add(this.WRAP);
        if (!Browser.isDevice) {
            const disp = filterPopup.style.display;
            filterPopup.style.cssText += 'display:block;visibility:hidden';
            const li = this.element.querySelector('.' + this.FILTER);
            if (li) {
                this.setPosition(li.parentElement, filterPopup);
                filterPopup.style.cssText += 'display:' + disp + ';visibility:visible';
            }
        }
    }
    getDefault() {
        const items = [];
        if (this.parent.ensureModuleInjected(Resize)) {
            items.push('AutoFitAll');
            items.push('AutoFit');
        }
        if (this.parent.allowGrouping && this.parent.ensureModuleInjected(Group)) {
            items.push('Group');
            items.push('Ungroup');
        }
        if (this.parent.allowSorting && this.parent.ensureModuleInjected(Sort)) {
            items.push('SortAscending');
            items.push('SortDescending');
        }
        items.push('ColumnChooser');
        if (this.parent.allowFiltering && (this.parent.filterSettings.type !== 'FilterBar') &&
            this.parent.ensureModuleInjected(Filter)) {
            items.push('Filter');
        }
        return items;
    }
    isFilterPopupOpen() {
        const filterPopup = this.getFilterPop();
        return filterPopup && filterPopup.style.display !== 'none';
    }
    getFilterPop() {
        if (Browser.isDevice && this.targetColumn !== null && this.parent.filterSettings.type === 'Menu') {
            return document.getElementById(this.targetColumn.uid + '-flmdlg');
        }
        return this.parent.element.querySelector('.' + this.POP);
    }
    isFilterItemAdded() {
        return (this.parent.columnMenuItems &&
            this.parent.columnMenuItems.indexOf('Filter') >= 0) || !this.parent.columnMenuItems;
    }
}

/**
 * `ForeignKey` module is used to handle foreign key column's actions.
 */
class ForeignKey extends Data {
    constructor(parent, serviceLocator) {
        super(parent, serviceLocator);
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.initEvent();
    }
    initEvent() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(initForeignKeyColumn, this.initForeignKeyColumns, this);
        this.parent.on(getForeignKeyData, this.getForeignKeyData, this);
        this.parent.on(generateQuery, this.generateQueryFormData, this);
    }
    initForeignKeyColumns(columns) {
        for (let i = 0; i < columns.length; i++) {
            columns[i].dataSource = (columns[i].dataSource instanceof DataManager ? columns[i].dataSource :
                (isNullOrUndefined(columns[i].dataSource) ? new DataManager() : 'result' in columns[i].dataSource ? columns[i].dataSource :
                    new DataManager(columns[i].dataSource)));
        }
    }
    eventfPromise(args, query, key, column) {
        const state = this.getStateEventArgument(query);
        const def = new Deferred();
        const deff = new Deferred();
        state.action = args.action;
        const dataModule = this.parent.getDataModule();
        if (!isNullOrUndefined(args.action) && args.action.requestType && dataModule.foreignKeyDataState.isDataChanged !== false) {
            dataModule.setForeignKeyDataState({
                isPending: true, resolver: deff.resolve
            });
            deff.promise.then(() => {
                def.resolve(column.dataSource);
            });
            state.setColumnData = this.parent.setForeignKeyData.bind(this.parent);
            this.parent.trigger(columnDataStateChange, state);
        }
        else {
            dataModule.setForeignKeyDataState({});
            def.resolve(key);
        }
        return def;
    }
    getForeignKeyData(args) {
        const foreignColumns = args.column ? [args.column] : this.parent.getForeignKeyColumns();
        const allPromise = [];
        for (let i = 0; i < foreignColumns.length; i++) {
            let promise;
            const query = args.isComplex ? this.genarateColumnQuery(foreignColumns[i]) :
                this.genarateQuery(foreignColumns[i], args.result.result, false, true);
            query.params = this.parent.query.params;
            const dataSource = foreignColumns[i].dataSource;
            if (dataSource && 'result' in dataSource) {
                const def = this.eventfPromise(args, query, dataSource, foreignColumns[i]);
                promise = def.promise;
            }
            else if (!dataSource.ready || dataSource.dataSource.offline) {
                promise = dataSource.executeQuery(query);
            }
            else {
                promise = dataSource.ready.then(() => {
                    return dataSource.executeQuery(query);
                });
            }
            allPromise.push(promise);
        }
        Promise.all(allPromise).then((responses) => {
            for (let i = 0; i < responses.length; i++) {
                foreignColumns[i].columnData = responses[i].result;
                if (foreignColumns[i].editType === 'dropdownedit' && 'result' in foreignColumns[i].dataSource) {
                    foreignColumns[i].edit.params = extend(foreignColumns[i].edit.params, {
                        dataSource: responses[i].result,
                        query: new Query(), fields: {
                            value: foreignColumns[i].foreignKeyField || foreignColumns[i].field,
                            text: foreignColumns[i].foreignKeyValue
                        }
                    });
                }
            }
            args.promise.resolve(args.result);
        }).catch((e) => {
            this.parent.log(['actionfailure', 'foreign_key_failure']);
            if (args.promise && args.promise.reject) {
                args.promise.reject(e);
            }
            return e;
        });
    }
    generateQueryFormData(args) {
        args.predicate.predicate = this.genarateQuery(args.column, args.column.columnData, true);
    }
    genarateQuery(column, e, fromData, needQuery) {
        const gObj = this.parent;
        const predicates = [];
        const query = new Query();
        let field = fromData ? column.foreignKeyField : column.field;
        if (gObj.allowPaging || gObj.enableVirtualization || fromData) {
            e = new DataManager(((gObj.allowGrouping && gObj.groupSettings.columns.length && !fromData) ?
                e.records : e)).executeLocal(new Query().select(field));
            const filteredValue = DataUtil.distinct(e, field, false);
            field = fromData ? column.field : column.foreignKeyField;
            for (let i = 0; i < filteredValue.length; i++) {
                if (filteredValue[i] && filteredValue[i].getDay) {
                    predicates.push(getDatePredicate({ field: field, operator: 'equal', value: filteredValue[i], matchCase: false }));
                }
                else {
                    predicates.push(new Predicate(field, 'equal', filteredValue[i], false));
                }
            }
        }
        if (needQuery) {
            return predicates.length ? query.where(Predicate.or(predicates)) : query;
        }
        return (predicates.length ? Predicate.or(predicates) : { predicates: [] });
    }
    genarateColumnQuery(column) {
        const gObj = this.parent;
        let query = new Query();
        const queryColumn = this.isFiltered(column);
        if (queryColumn.isTrue) {
            query = this.filterQuery(query, queryColumn.column, true);
        }
        if (gObj.searchSettings.key.length) {
            const sSettings = gObj.searchSettings;
            if (column.dataSource instanceof DataManager && (column.dataSource.adaptor.getModuleName &&
                column.dataSource.adaptor.getModuleName() === 'ODataV4Adaptor')) {
                query = this.searchQuery(query, column, true);
            }
            else {
                query.search(sSettings.key, column.foreignKeyValue, sSettings.operator, sSettings.ignoreCase);
            }
        }
        return query;
    }
    isFiltered(column) {
        const filterColumn = this.parent.filterSettings.columns.filter((fColumn) => {
            return (fColumn.field === column.foreignKeyValue && fColumn.uid === column.uid);
        });
        return {
            column: filterColumn, isTrue: !!filterColumn.length
        };
    }
    getModuleName() {
        return 'foreignKey';
    }
    destroy() {
        this.destroyEvent();
    }
    destroyEvent() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(initForeignKeyColumn, this.initForeignKeyColumns);
        this.parent.off(getForeignKeyData, this.getForeignKeyData);
        this.parent.off(generateQuery, this.generateQueryFormData);
    }
}

/**
 *
 * `Logger` class
 */
const BASE_DOC_URL = 'https://ej2.syncfusion.com/documentation/grid';
const DOC_URL = 'https://ej2.syncfusion.com/documentation/';
const WARNING = '[EJ2Grid.Warning]';
const ERROR = '[EJ2Grid.Error]';
const INFO = '[EJ2Grid.Info]';
class Logger {
    constructor(parent) {
        this.parent = parent;
        this.parent.on('initial-end', this.patchadaptor, this);
    }
    getModuleName() {
        return 'logger';
    }
    log(types, args) {
        if (!(types instanceof Array)) {
            types = [types];
        }
        const type = types;
        for (let i = 0; i < type.length; i++) {
            const item = detailLists[type[i]];
            const cOp = item.check(args, this.parent);
            if (cOp.success) {
                // eslint-disable-next-line no-console
                console[item.logType](item.generateMessage(args, this.parent, cOp.options));
            }
        }
    }
    patchadaptor() {
        const adaptor = this.parent.getDataModule().dataManager.adaptor;
        const original = adaptor.beforeSend;
        if (original) {
            adaptor.beforeSend = (dm, request, settings) => {
                original.call(adaptor, dm, request, settings);
            };
        }
    }
    destroy() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off('initial-end', this.patchadaptor);
    }
}
const detailLists = {
    // eslint-disable-next-line camelcase
    module_missing: {
        type: 'module_missing',
        logType: 'warn',
        check(args, parent) {
            const injected = parent.getInjectedModules().map((m) => m.prototype.getModuleName());
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const modules = parent.requiredModules().map((m) => m.member)
                .filter((name) => injected.indexOf(name) === -1);
            return { success: modules.filter((m) => m !== 'resize').length > 0, options: modules };
        },
        generateMessage(args, parent, modules) {
            modules = modules.filter((m) => m !== 'resize')
                .reduce((prev, cur) => prev + `* ${cur}\n`, '');
            return WARNING + ': MODULES MISSING\n' + 'The following modules are not injected:.\n' +
                `${modules}` +
                `Refer to ${BASE_DOC_URL}/module.html for documentation on importing feature modules.`;
        }
    },
    // eslint-disable-next-line camelcase
    promise_enabled: {
        type: 'promise_enabled',
        logType: 'error',
        check() {
            return { success: typeof Promise === 'undefined' };
        },
        generateMessage() {
            return ERROR + ': PROMISE UNDEFINED\n' +
                'Promise object is not present in the global environment,' +
                'please use polyfil to support Promise object in your environment.\n' +
                `Refer to ${DOC_URL}/base/browser.html?#required-polyfills for more information.`;
        }
    },
    // eslint-disable-next-line camelcase
    primary_column_missing: {
        type: 'primary_column_missing',
        logType: 'warn',
        check(args, parent) {
            return { success: parent.getColumns().filter((column) => column.isPrimaryKey).length === 0 };
        },
        generateMessage() {
            return WARNING + ': PRIMARY KEY MISSING\n' + 'Editing is enabled but primary key column is not specified.\n' +
                `Refer to ${BASE_DOC_URL}/api-column.html?#isprimarykey for documentation on providing primary key columns.`;
        }
    },
    // eslint-disable-next-line camelcase
    selection_key_missing: {
        type: 'selection_key_missing',
        logType: 'warn',
        check(args, parent) {
            return { success: parent.selectionSettings.persistSelection &&
                    parent.getColumns().filter((column) => column.isPrimaryKey).length === 0 };
        },
        generateMessage() {
            return WARNING + ': PRIMARY KEY MISSING\n' +
                'selectionSettings.persistSelection property is enabled. It requires one primary key column to persist selection.\n' +
                `Refer to ${BASE_DOC_URL}/api-column.html?#isprimarykey for documentation on providing primary key columns.`;
        }
    },
    actionfailure: {
        type: 'actionfailure',
        logType: 'error',
        check() {
            return { success: true };
        },
        generateMessage(args, parent) {
            let message = '';
            const formatError = formatErrorHandler(args, parent);
            const ajaxError = ajaxErrorHandler(args, parent);
            if (ajaxError !== '') {
                message = ajaxError;
            }
            else if (formatError !== '') {
                message = formatError;
            }
            else {
                message = args.error;
            }
            return WARNING + ': ' + message;
        }
    },
    // eslint-disable-next-line camelcase
    locale_missing: {
        type: 'locale_missing',
        logType: 'warn',
        check(args, parent) {
            const lObj = DataUtil.getObject(`locale.${parent.locale}.grid`, L10n);
            return { success: parent.locale !== 'en-US' && isNullOrUndefined(lObj) };
        },
        generateMessage(args, parent) {
            return WARNING + ': LOCALE CONFIG MISSING\n' + `Locale configuration for '${parent.locale}' is not provided.\n` +
                `Refer to ${BASE_DOC_URL}/globalization-and-localization.html?#localization 
             for documentation on setting locale configuration.`;
        }
    },
    limitation: {
        type: 'limitation',
        logType: 'warn',
        check(args, parent) {
            const name = args;
            let opt;
            switch (name) {
                case 'freeze':
                    opt = {
                        success: parent.allowGrouping || !isUndefined(parent.detailTemplate) || !isUndefined(parent.childGrid)
                            || !isUndefined(parent.rowTemplate) || parent.enableVirtualization,
                        options: { name: 'freeze' }
                    };
                    break;
                case 'virtualization':
                    opt = {
                        success: !isUndefined(parent.detailTemplate) || !isUndefined(parent.childGrid) || parent.frozenRows !== 0
                            || parent.frozenColumns !== 0,
                        options: { name: 'virtualization' }
                    };
                    break;
                default:
                    opt = { success: false };
                    break;
            }
            return opt;
        },
        generateMessage(args, parent, options) {
            const name = options.name;
            let opt;
            switch (name) {
                case 'freeze':
                    opt = 'Frozen rows and columns do not support the following features:\n' +
                        '* Virtualization\n' +
                        '* Row Template\n' +
                        '* Details Template\n' +
                        '* Hierarchy Grid\n' +
                        '* Grouping';
                    break;
                case 'virtualization':
                    opt = 'Virtualization does not support the following features.\n' +
                        '* Freeze rows and columns.\n' +
                        '* Details Template.\n' +
                        '* Hierarchy Grid.\n';
                    break;
                default:
                    opt = '';
                    break;
            }
            return WARNING + `: ${name.toUpperCase()} LIMITATIONS\n` + opt;
        }
    },
    // eslint-disable-next-line camelcase
    check_datasource_columns: {
        type: 'check_datasource_columns',
        logType: 'warn',
        check(args, parent) {
            return { success: !(parent.columns.length ||
                    (parent.dataSource instanceof DataManager) || parent.dataSource.length) };
        },
        generateMessage() {
            return WARNING + ': GRID CONFIG MISSING\n' + 'dataSource and columns are not provided in the grid. ' +
                'At least one of either must be provided for grid configuration.\n' +
                `Refer to ${BASE_DOC_URL}/columns.html for documentation on configuring the grid data and columns.`;
        }
    },
    // eslint-disable-next-line camelcase
    virtual_height: {
        type: 'virtual_height',
        logType: 'error',
        check(args, parent) {
            return { success: isNullOrUndefined(parent.height) || parent.height === 'auto' };
        },
        generateMessage() {
            return ERROR + ': GRID HEIGHT MISSING \n' + 'height property is required to use virtualization.\n' +
                `Refer to ${BASE_DOC_URL}/virtual.html for documentation on configuring the virtual grid.`;
        }
    },
    // eslint-disable-next-line camelcase
    grid_remote_edit: {
        type: 'grid_remote_edit',
        logType: 'error',
        check(args) {
            return { success: Array.isArray(args) || Array.isArray(args.result) };
        },
        generateMessage() {
            return ERROR + ': RETRUN VALUE MISSING  \n' +
                'Remote service returns invalid data. \n' +
                `Refer to ${BASE_DOC_URL}/edit.html for documentation on configuring editing with remote data.`;
        }
    },
    // eslint-disable-next-line camelcase
    grid_sort_comparer: {
        type: 'grid_sort_comparer',
        logType: 'warn',
        check(args, parent) {
            return { success: parent.getDataModule().isRemote() };
        },
        generateMessage() {
            return WARNING + ': SORT COMPARER NOT WORKING  \n' + 'Sort comparer will not work with remote data.' +
                `Refer to ${BASE_DOC_URL}/sorting/#custom-sort-comparer for documentation on using the sort comparer.`;
        }
    },
    // eslint-disable-next-line camelcase
    resize_min_max: {
        type: 'resize_min_max',
        logType: 'info',
        check(args) {
            return { success: (args.column.minWidth && args.column.minWidth >= args.width) ||
                    (args.column.maxWidth && args.column.maxWidth <= args.width) };
        },
        generateMessage() {
            return INFO + ': RESIZING COLUMN REACHED MIN OR MAX  \n' + 'The column resizing width is at its min or max.';
        }
    },
    // eslint-disable-next-line camelcase
    action_disabled_column: {
        type: 'action_disabled_column',
        logType: 'info',
        check(args) {
            const success = true;
            let fn;
            switch (args.moduleName) {
                case 'reorder':
                    if (isNullOrUndefined(args.destColumn)) {
                        fn = `reordering action is disabled for the ${args.column.headerText} column`;
                    }
                    else {
                        fn = `reordering action is disabled for the ${args.column.allowReordering ?
                            args.destColumn.headerText : args.column.headerText} column`;
                    }
                    break;
                case 'group':
                    fn = `grouping action is disabled for the ${args.columnName} column.`;
                    break;
                case 'filter':
                    fn = `filtering action is disabled for the ${args.columnName} column.`;
                    break;
                case 'sort':
                    fn = `sorting action is disabled for the ${args.columnName} column.`;
                    break;
            }
            return { success: success, options: { fn } };
        },
        generateMessage(args, parent, options) {
            return INFO + `: ACTION DISABLED \n ${options.fn}`;
        }
    },
    // eslint-disable-next-line camelcase
    exporting_begin: {
        type: 'exporting_begin',
        logType: 'info',
        check(args) {
            return { success: true, options: { args } };
        },
        generateMessage(args, parent, options) {
            return INFO + `: EXPORTNIG INPROGRESS \n Grid ${options.args}ing is in progress`;
        }
    },
    // eslint-disable-next-line camelcase
    exporting_complete: {
        type: 'exporting_complete',
        logType: 'info',
        check(args) {
            return { success: true, options: { args } };
        },
        generateMessage(args, parent, options) {
            return INFO + `: EXPORTNIG COMPLETED \n Grid ${options.args}ing is complete`;
        }
    },
    // eslint-disable-next-line camelcase
    foreign_key_failure: {
        type: 'foreign_key_failure',
        logType: 'error',
        check() {
            return { success: true };
        },
        generateMessage() {
            return ERROR + ': FOREIGNKEY CONFIG \n  Grid foreign key column needs a valid data source/service.' +
                `Refer to ${BASE_DOC_URL}/columns/#foreign-key-column for documentation on configuring foreign key columns.`;
        }
    },
    // eslint-disable-next-line camelcase
    initial_action: {
        type: 'initial_action',
        logType: 'error',
        check(args) {
            const success = true;
            let fn;
            switch (args.moduleName) {
                case 'group':
                    fn = `The ${args.columnName} column is not available in the grid's column model.` +
                        'Please provide a valid field name to group the column';
                    break;
                case 'filter':
                    fn = `The ${args.columnName} column is not available in the grid's column model.` +
                        'Please provide a valid field name to filter the column.';
                    break;
                case 'sort':
                    fn = `The ${args.columnName} column is not available in the grid's column model.` +
                        'Please provide a valid field name to sort the column.';
                    break;
            }
            return { success: success, options: { fn } };
        },
        generateMessage(args, parent, options) {
            return ERROR + `: INITIAL ACTION FAILURE \n ${options.fn}`;
        }
    },
    // eslint-disable-next-line camelcase
    frozen_rows_columns: {
        type: 'frozen_rows_columns',
        logType: 'error',
        check(args, parent) {
            return { success: parent.getColumns().length <= parent.frozenColumns || parent.frozenRows >= parent.currentViewData.length };
        },
        generateMessage(args, parent) {
            return ERROR + `: OUT OF RANGE ERROR-\n ${parent.getColumns().length <= parent.frozenColumns ? 'FROZEN COLUMNS,' : ''}` +
                `${parent.frozenRows >= parent.currentViewData.length ? 'FROZEN ROWS' : ''} invalid`;
        }
    },
    // eslint-disable-next-line camelcase
    column_type_missing: {
        type: 'column_type_missing',
        logType: 'error',
        check(args) {
            return { success: isNullOrUndefined(args.column.type), options: args.column.headerText };
        },
        generateMessage(args, parent, options) {
            return ERROR + `: COLUMN TYPE MISSING-\n  ${options} column type was invalid or not defined.` +
                `Please go through below help link: ${DOC_URL}/grid/columns/#column-type`;
        }
    },
    // eslint-disable-next-line camelcase
    datasource_syntax_mismatch: {
        type: 'datasource_syntax_mismatch',
        logType: 'warn',
        check(args) {
            return { success: args.dataState.dataSource && !(args.dataState.dataSource instanceof DataManager ||
                    'result' in args.dataState.dataSource || args.dataState.dataSource instanceof Array) &&
                    !(isNullOrUndefined(args.dataState.dataStateChange)) };
        },
        generateMessage() {
            return WARNING + ': DATASOURCE SYNTAX WARNING\n' +
                'DataSource should be in the form of {result: Object[], count: number}' +
                'when dataStateChangeEvent used';
        }
    }
};
const formatErrorHandler = (args) => {
    const error = args.error;
    if (error.indexOf && error.indexOf('Format options') !== 0) {
        return '';
    }
    return 'INVALID FORMAT\n' +
        'For more information, refer to the following documentation links:\n' +
        `Number format: ${DOC_URL}/base/intl.html?#supported-format-string.\n` +
        `Date format: ${DOC_URL}/base/intl.html?#manipulating-datetime.\n` +
        `Message: ${error}`;
};
const ajaxErrorHandler = (args) => {
    const error = DataUtil.getObject('error.error', args);
    if (isNullOrUndefined(error)) {
        return '';
    }
    let jsonResult = '';
    try {
        jsonResult = JSON.parse(error.responseText);
    }
    catch (_a) {
        jsonResult = '';
    }
    return 'XMLHTTPREQUEST FAILED\n' +
        `Url: ${error.responseURL}\n` +
        `Status: ${error.status} - ${error.statusText}\n` +
        `${jsonResult !== '' ? 'Message: ' + jsonResult : ''}`;
};

/**
 * Infinite Scrolling class
 *
 * @hidden
 */
class InfiniteScroll {
    /**
     * Constructor for the Grid infinite scrolling.
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator
     * @hidden
     */
    constructor(parent, serviceLocator) {
        this.infiniteCache = {};
        this.infiniteCurrentViewData = {};
        this.infiniteFrozenCache = {};
        this.isDownScroll = false;
        this.isUpScroll = false;
        this.isScroll = true;
        this.enableContinuousScroll = false;
        this.initialRender = true;
        this.isRemove = false;
        this.isInitialCollapse = false;
        this.prevScrollTop = 0;
        this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting', 'refresh'];
        this.keys = [downArrow, upArrow, enter, shiftEnter];
        this.rowTop = 0;
        this.isInitialMovableRender = true;
        this.virtualInfiniteData = {};
        this.isCancel = false;
        this.emptyRowData = {};
        this.isNormaledit = false;
        this.isInfiniteScroll = false;
        this.isLastPage = false;
        this.isInitialRender = true;
        this.isFocusScroll = false;
        this.isGroupCollapse = false;
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.isNormaledit = this.parent.editSettings.mode === 'Normal';
        this.addEventListener();
        this.widthService = serviceLocator.getService('widthService');
        this.rowModelGenerator = this.parent.isFrozenGrid() ? new FreezeRowModelGenerator(this.parent)
            : new RowModelGenerator(this.parent);
    }
    getModuleName() {
        return 'infiniteScroll';
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        this.parent.on(dataReady, this.onDataReady, this);
        this.parent.on(dataSourceModified, this.dataSourceModified, this);
        this.parent.on(infinitePageQuery, this.infinitePageQuery, this);
        this.parent.on(infiniteScrollHandler, this.infiniteScrollHandler, this);
        this.parent.on(beforeCellFocused, this.infiniteCellFocus, this);
        this.parent.on(appendInfiniteContent, this.appendInfiniteRows, this);
        this.parent.on(removeInfiniteRows, this.removeInfiniteCacheRows, this);
        this.parent.on(resetInfiniteBlocks, this.resetInfiniteBlocks, this);
        this.parent.on(setInfiniteCache, this.setCache, this);
        this.parent.on(initialCollapse, this.ensureIntialCollapse, this);
        this.parent.on(keyPressed, this.infiniteCellFocus, this);
        this.parent.on(infiniteShowHide, this.setDisplayNone, this);
        this.parent.on(virtualScrollEditActionBegin, this.editActionBegin, this);
        this.parent.on(getVirtualData, this.getVirtualInfiniteData, this);
        this.parent.on(editReset, this.resetInfiniteEdit, this);
        this.parent.on(virtualScrollEditSuccess, this.infiniteEditSuccess, this);
        this.parent.on(refreshVirtualCache, this.refreshInfiniteCache, this);
        this.parent.on(refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex, this);
        this.parent.on(infiniteEditHandler, this.infiniteEditHandler, this);
        this.parent.on(virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);
        this.parent.on(modelChanged, this.modelChanged, this);
        this.parent.on(refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData, this);
        this.parent.on(destroy, this.destroy, this);
        this.parent.on(contentReady, this.selectNewRow, this);
        this.parent.on(captionActionComplete, this.captionActionComplete, this);
        this.parent.on(setVirtualPageQuery, this.setGroupCollapsePageQuery, this);
        this.actionBeginFunction = this.actionBegin.bind(this);
        this.actionCompleteFunction = this.actionComplete.bind(this);
        this.dataBoundFunction = this.dataBound.bind(this);
        this.parent.on(deleteComplete, this.deleteComplate, this);
        this.parent.addEventListener(actionBegin, this.actionBeginFunction);
        this.parent.addEventListener(actionComplete, this.actionCompleteFunction);
        this.parent.addEventListener(dataBound, this.dataBoundFunction);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(dataReady, this.onDataReady);
        this.parent.off(dataSourceModified, this.dataSourceModified);
        this.parent.off(infinitePageQuery, this.infinitePageQuery);
        this.parent.off(infiniteScrollHandler, this.infiniteScrollHandler);
        this.parent.off(beforeCellFocused, this.infiniteCellFocus);
        this.parent.off(appendInfiniteContent, this.appendInfiniteRows);
        this.parent.off(removeInfiniteRows, this.removeInfiniteCacheRows);
        this.parent.off(resetInfiniteBlocks, this.resetInfiniteBlocks);
        this.parent.off(setInfiniteCache, this.setCache);
        this.parent.off(initialCollapse, this.ensureIntialCollapse);
        this.parent.off(keyPressed, this.infiniteCellFocus);
        this.parent.off(infiniteShowHide, this.setDisplayNone);
        this.parent.off(virtualScrollEditActionBegin, this.editActionBegin);
        this.parent.off(getVirtualData, this.getVirtualInfiniteData);
        this.parent.off(editReset, this.resetInfiniteEdit);
        this.parent.off(virtualScrollEditSuccess, this.infiniteEditSuccess);
        this.parent.off(refreshVirtualCache, this.refreshInfiniteCache);
        this.parent.on(refreshInfiniteEditrowindex, this.refreshInfiniteEditrowindex);
        this.parent.off(infiniteEditHandler, this.infiniteEditHandler);
        this.parent.off(virtualScrollAddActionBegin, this.infiniteAddActionBegin);
        this.parent.off(modelChanged, this.modelChanged);
        this.parent.off(refreshInfiniteCurrentViewData, this.refreshInfiniteCurrentViewData);
        this.parent.off(destroy, this.destroy);
        this.parent.off(contentReady, this.selectNewRow);
        this.parent.off(captionActionComplete, this.captionActionComplete);
        this.parent.off(setVirtualPageQuery, this.setGroupCollapsePageQuery);
        this.parent.removeEventListener(actionBegin, this.actionBeginFunction);
        this.parent.removeEventListener(actionComplete, this.actionCompleteFunction);
        this.parent.removeEventListener(dataBound, this.dataBoundFunction);
    }
    dataBound() {
        if (this.groupCaptionAction === 'collapse') {
            this.groupCaptionAction = 'refresh';
            this.makeGroupCollapseRequest();
        }
        else if (this.groupCaptionAction === 'refresh') {
            this.parent.hideSpinner();
            this.groupCaptionAction = this.empty;
        }
    }
    setGroupCollapsePageQuery(args) {
        const gObj = this.parent;
        if (!gObj.infiniteScrollSettings.enableCache && this.isGroupCollapse) {
            args.skipPage = true;
            this.isGroupCollapse = false;
            if (this.groupCaptionAction === 'collapse') {
                const captionRow = gObj.getRowObjectFromUID(this.parentCapUid);
                const rowObjs = gObj.getRowsObject();
                let childCount = 0;
                for (let i = rowObjs.length - 1; i >= 0; i--) {
                    if (rowObjs[i].indent === captionRow.indent) {
                        break;
                    }
                    if (rowObjs[i].isDataRow) {
                        childCount++;
                    }
                }
                const key = getGroupKeysAndFields(rowObjs.indexOf(captionRow), rowObjs);
                let pred = generateExpandPredicates(key.fields, key.keys, this);
                const predicateList = getPredicates(pred);
                pred = predicateList[predicateList.length - 1];
                for (let i = predicateList.length - 2; i >= 0; i--) {
                    pred = pred.and(predicateList[i]);
                }
                args.query.where(pred);
                args.query.skip(childCount);
                this.parentCapUid = this.empty;
            }
            else {
                const rows = gObj.getRows();
                const size = gObj.pageSettings.pageSize;
                const skip = getRowIndexFromElement(rows[rows.length - 1]) + 1;
                let additionalCnt = ((skip - (skip % size)) + size) - skip;
                if ((skip % size) === 0) {
                    additionalCnt = 0;
                }
                args.query.skip(skip);
                args.query.take((gObj.infiniteScrollSettings.initialBlocks * gObj.pageSettings.pageSize) + additionalCnt);
            }
        }
    }
    captionActionComplete(args) {
        const gObj = this.parent;
        if (!gObj.infiniteScrollSettings.enableCache && args.isCollapse) {
            const contetRect = gObj.getContent().firstElementChild.getBoundingClientRect();
            const tableReact = gObj.contentModule.getTable().getBoundingClientRect();
            if (Math.round(tableReact.bottom - gObj.getRowHeight()) <= Math.round(contetRect.bottom)) {
                this.parentCapUid = args.parentUid;
                this.groupCaptionAction = 'collapse';
                gObj.showSpinner();
                const caption = gObj.getRowObjectFromUID(args.parentUid);
                const childCount = this.getCaptionChildCount(caption);
                if (!childCount) {
                    this.groupCaptionAction = 'refresh';
                    this.makeGroupCollapseRequest();
                }
                else {
                    this.makeGroupCollapseRequest(args.parentUid);
                }
            }
        }
    }
    makeGroupCollapseRequest(parentUid) {
        const gObj = this.parent;
        const rows = gObj.getRows();
        const index = getRowIndexFromElement(rows[rows.length - 1]);
        const prevPage = this.parent.pageSettings.currentPage;
        this.parent.pageSettings.currentPage = Math.ceil(index / this.parent.pageSettings.pageSize) + 1;
        if (this.parent.pageSettings.currentPage > this.maxPage) {
            gObj.hideSpinner();
            return;
        }
        const scrollArg = {
            requestType: 'infiniteScroll',
            currentPage: this.parent.pageSettings.currentPage,
            prevPage: prevPage,
            startIndex: index + 1,
            direction: 'down',
            isCaptionCollapse: true,
            parentUid: parentUid
        };
        this.isGroupCollapse = true;
        this.parent.notify('model-changed', scrollArg);
    }
    getCaptionChildCount(caption) {
        const rowObj = this.parent.getRowsObject();
        const index = rowObj.indexOf(caption);
        let make = false;
        for (let i = index; i < rowObj.length; i++) {
            if ((rowObj[i].indent === caption.indent || rowObj[i].indent < caption.indent)
                && rowObj[i].data.key !== caption.data.key) {
                break;
            }
            if (rowObj[i].isCaptionRow && !this.childCheck(rowObj, rowObj[i], i)) {
                make = true;
                break;
            }
        }
        return make;
    }
    childCheck(rowObj, row$$1, index) {
        let childCount = 0;
        for (let i = index + 1; i < rowObj.length; i++) {
            if (rowObj[i].indent === row$$1.indent) {
                break;
            }
            if (rowObj[i].indent === (row$$1.indent + 1) && rowObj[i].parentUid === row$$1.uid) {
                childCount++;
            }
        }
        return row$$1.data.count === childCount;
    }
    updateCurrentViewData() {
        const gObj = this.parent;
        if (gObj.groupSettings.columns.length) {
            return;
        }
        const keys = Object.keys(this.infiniteCurrentViewData);
        gObj.currentViewData = [];
        const page = gObj.pageSettings.currentPage;
        const isCache = gObj.infiniteScrollSettings.enableCache;
        const blocks = gObj.infiniteScrollSettings.maxBlocks;
        const isMiddlePage = isCache && (page > blocks || (this.isUpScroll && page > 1));
        const start = isMiddlePage ? this.isUpScroll ? page : (page - blocks) + 1 : 1;
        const end = isMiddlePage ? (start + blocks) - 1 : isCache ? blocks : keys.length;
        for (let i = start; i <= end; i++) {
            if (this.infiniteCurrentViewData[i]) {
                gObj.currentViewData = gObj.currentViewData.concat(this.infiniteCurrentViewData[i]);
            }
        }
    }
    refreshInfiniteCurrentViewData(e) {
        const page = this.parent.pageSettings.currentPage;
        const size = this.parent.pageSettings.pageSize;
        const blocks = this.parent.infiniteScrollSettings.initialBlocks;
        const keys = Object.keys(this.infiniteCurrentViewData);
        const cache = this.parent.infiniteScrollSettings.enableCache;
        if (!this.parent.groupSettings.columns.length) {
            const isAdd = e.args.requestType === 'save';
            const isDelete = e.args.requestType === 'delete';
            if (!cache && (isAdd || isDelete)) {
                if (isAdd) {
                    let indexCount = 0;
                    for (let i = 1; i <= keys.length; i++) {
                        indexCount += this.infiniteCurrentViewData[i].length - 1;
                        if (e.args.index <= indexCount) {
                            this.resetCurrentViewData(i);
                            this.infiniteCurrentViewData[i].splice(e.args.index, 0, e.args.data);
                            break;
                        }
                    }
                }
                else {
                    this.infiniteCurrentViewData[keys[keys.length - 1]].push(e.data[0]);
                }
            }
            else {
                if (blocks > 1 && e.data.length === (blocks * size)) {
                    this.setInitialCache(e.data.slice(), {}, cache && e.args.requestType === 'delete', true);
                }
                else {
                    this.infiniteCurrentViewData[page] = e.data.slice();
                }
            }
        }
    }
    resetCurrentViewData(startIndex) {
        const keys = Object.keys(this.infiniteCurrentViewData);
        for (let i = startIndex; i <= keys.length; i++) {
            const lastViewData = this.infiniteCurrentViewData[i][this.infiniteCurrentViewData[i].length - 1];
            if (this.infiniteCurrentViewData[i + 1]) {
                this.infiniteCurrentViewData[i + 1].splice(0, 0, lastViewData);
            }
            this.infiniteCurrentViewData[i].pop();
        }
    }
    deleteComplate() {
        if (this.parent.isFrozenGrid() && !this.parent.infiniteScrollSettings.enableCache) {
            this.parent.contentModule.refreshScrollOffset();
        }
    }
    modelChanged(args) {
        const rows = this.parent.getRows();
        if (args.requestType === 'save' && args.index && args.data) {
            this.addRowIndex = args.index;
        }
        if (rows && rows.length && args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {
            this.firstIndex = getRowIndexFromElement(rows[0]);
            this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);
            this.lastIndex = getRowIndexFromElement(rows[rows.length - 1]);
            if (args.requestType === 'delete') {
                const rowObj = this.parent.getRowsObject();
                args.startIndex = this.parent.infiniteScrollSettings.enableCache
                    ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;
            }
            else {
                args.startIndex = this.firstIndex;
            }
            if (!this.parent.infiniteScrollSettings.enableCache
                && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {
                this.isLastPage = true;
                this.lastIndex = this.lastIndex - 1;
            }
        }
    }
    infiniteAddActionBegin(args) {
        if (this.isNormaledit) {
            this.isAdd = true;
            if (this.parent.infiniteScrollSettings.enableCache) {
                if (!Object.keys(this.emptyRowData).length) {
                    this.createEmptyRowdata();
                }
                if (this.parent.pageSettings.currentPage > 1) {
                    args.startEdit = false;
                    this.resetInfiniteBlocks({}, true);
                    this.makeRequest({ currentPage: 1 });
                }
            }
        }
    }
    infiniteEditHandler(args) {
        if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete'
            || (args.e.requestType === 'save' && this.requestType === 'add'))) {
            const frozenCols = this.parent.isFrozenGrid();
            const rowElms = this.parent.getRows();
            const rows = this.parent.getRowsObject();
            if (this.ensureRowAvailability(rows, args.result[0])) {
                if (rowElms.length && !(this.addRowIndex && this.addRowIndex >= rowElms.length)) {
                    this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add', true);
                    if (frozenCols) {
                        const rows = this.parent.getMovableRowsObject();
                        this.resetRowIndex(rows, args.e, this.parent.getMovableDataRows(), this.requestType === 'add');
                        if (this.parent.getFrozenMode() === leftRight) {
                            const frRows = this.parent.getFrozenRightRowsObject();
                            this.resetRowIndex(frRows, args.e, this.parent.getFrozenRightRows(), this.requestType === 'add');
                        }
                    }
                }
                if (!this.isLastPage) {
                    this.createRow(rows, args);
                }
                else {
                    this.isLastPage = false;
                    this.parent.pageSettings.currentPage = this.maxPage;
                    if (this.parent.selectionModule.index < this.parent.frozenRows) {
                        remove(rowElms[this.parent.frozenRows - 1]);
                        this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);
                        if (frozenCols) {
                            const movableRows = this.parent.getMovableDataRows();
                            remove(movableRows[this.parent.frozenRows]);
                            this.createRow([this.parent.getMovableRowsObject()[this.parent.frozenRows - 1]], args, true, true);
                            if (this.parent.getFrozenMode() === leftRight) {
                                const rightRows = this.parent.getFrozenRightDataRows();
                                remove(rightRows[this.parent.frozenRows]);
                                this.createRow([this.parent.getFrozenRightRowsObject()[this.parent.frozenRows - 1]], args, false, true, true);
                            }
                        }
                        setRowElements(this.parent);
                    }
                }
            }
            this.parent.hideSpinner();
            this.parent.notify(refreshInfinitePersistSelection, {});
            if (this.requestType === 'delete') {
                this.parent.notify(deleteComplete, args.e);
            }
            else {
                this.parent.notify(saveComplete, args.e);
            }
        }
        this.parent.notify(freezeRender, { case: 'refreshHeight' });
    }
    createRow(rows, args, isMovable, isFrozenRows, isFrozenRight) {
        const row$$1 = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;
        const rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);
        if (args.e.requestType === 'save' && args.e.index && args.e.data) {
            row$$1[0].index = this.addRowIndex;
            this.addRowIndex = null;
            if (row$$1[0].index >= rows.length) {
                return;
            }
        }
        let tbody$$1;
        if (isFrozenRight) {
            tbody$$1 = this.parent.element.querySelector('.e-frozen-right-content').querySelector(tbody);
        }
        else {
            tbody$$1 = !this.parent.isFrozenGrid() ? this.parent.getContent().querySelector(tbody) : isMovable
                ? this.parent.getMovableVirtualContent().querySelector(tbody)
                : this.parent.getFrozenVirtualContent().querySelector(tbody);
        }
        if (this.parent.frozenRows) {
            tbody$$1 = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add'
                ? !this.parent.isFrozenGrid() ? this.parent.getHeaderContent().querySelector(tbody)
                    : isMovable ? this.parent.getMovableVirtualHeader().querySelector(tbody)
                        : isFrozenRight ? this.parent.element.querySelector('.e-frozen-right-header').querySelector(tbody)
                            : this.parent.getFrozenVirtualHeader().querySelector(tbody) : tbody$$1;
        }
        const notifyArgs = {
            rows: rows, cancel: false, args: args, isMovable: isMovable,
            isFrozenRows: isFrozenRows, isFrozenRight: isFrozenRows, row: row$$1
        };
        this.parent.notify(infiniteCrudCancel, notifyArgs);
        if (!notifyArgs.cancel) {
            for (let i = row$$1.length - 1; i >= 0; i--) {
                if (this.requestType === 'delete') {
                    tbody$$1.appendChild(rowRenderer.render(row$$1[i], this.parent.getColumns()));
                }
                else {
                    tbody$$1.insertBefore(rowRenderer.render(row$$1[i], this.parent.getColumns()), tbody$$1.rows[(args.e.index)]);
                }
            }
        }
        if (!isFrozenRows && this.parent.frozenRows
            && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {
            const rowElems = isMovable ? this.parent.getMovableDataRows() : isFrozenRight ? this.parent.getFrozenRightDataRows()
                : this.parent.getRows();
            const index = (isMovable || isFrozenRight) && this.requestType === 'add'
                ? this.parent.frozenRows : this.parent.frozenRows - 1;
            remove(rowElems[index]);
            this.createRow([rows[this.parent.frozenRows - 1]], args, isMovable, true, isFrozenRight);
        }
        if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {
            if (isFrozenRight) {
                setRowElements(this.parent);
                this.parent.contentModule.rightFreezeRows = this.requestType === 'add'
                    ? row$$1.concat(rows) : rows.concat(row$$1);
            }
            else if (!this.parent.isFrozenGrid() || isMovable) {
                setRowElements(this.parent);
                this.parent.contentModule.visibleRows = this.requestType === 'add'
                    ? row$$1.concat(rows) : rows.concat(row$$1);
                if (this.parent.getFrozenMode() === leftRight) {
                    args.e.renderMovableContent = true;
                    this.createRow(this.parent.getFrozenRightRowsObject(), args, false, false, true);
                }
            }
            else {
                this.parent.contentModule.visibleFrozenRows = this.requestType === 'add'
                    ? row$$1.concat(rows) : rows.concat(row$$1);
                args.e.isFrozen = true;
                this.createRow(this.parent.getMovableRowsObject(), args, true);
            }
        }
    }
    ensureRowAvailability(rows, data) {
        let resume = true;
        if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache
            && this.parent.sortSettings.columns && this.requestType === 'add') {
            const key = this.parent.getPrimaryKeyFieldNames()[0];
            for (let i = 0; i < rows.length; i++) {
                if (rows[i].data[key] === data[key]) {
                    resume = false;
                    break;
                }
            }
        }
        return resume;
    }
    generateRows(data, args) {
        return this.rowModelGenerator.generateRows(data, args);
    }
    resetRowIndex(rows, args, rowElms, isAdd, isFrozen) {
        const keyField = this.parent.getPrimaryKeyFieldNames()[0];
        const isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);
        if (isAdd) {
            if (isRemove) {
                if (isFrozen && !this.parent.groupSettings.columns.length) {
                    this.swapCurrentViewData(1, true);
                }
                remove(rowElms[rows.length - 1]);
                rowElms.splice(rows.length - 1, 1);
                rows.splice(rows.length - 1, 1);
            }
        }
        else {
            rows.filter((e, index) => {
                if (e.data[keyField] === args.data[0][keyField]) {
                    if (isFrozen && !this.parent.groupSettings.columns.length) {
                        const page = Math.ceil((index + 1) / this.parent.pageSettings.pageSize);
                        this.resetInfiniteCurrentViewData(page, index);
                    }
                    rows.splice(index, 1);
                    remove(rowElms[index]);
                    rowElms.splice(index, 1);
                }
            });
        }
        const startIndex = isAdd ? this.addRowIndex ? this.addRowIndex + 1 : 1 : 0;
        resetRowIndex(this.parent, rows, rowElms, startIndex, this.addRowIndex ? this.addRowIndex : 0);
    }
    resetInfiniteCurrentViewData(page, index) {
        index = index - ((page - 1) * this.parent.pageSettings.pageSize);
        this.infiniteCurrentViewData[page].splice(index, 1);
        this.swapCurrentViewData(page, false);
    }
    swapCurrentViewData(page, isAdd) {
        const keys = Object.keys(this.infiniteCurrentViewData);
        const end = isAdd ? keys.length + 1 : keys.length;
        for (let i = page; i < end; i++) {
            if (this.infiniteCurrentViewData[i + 1]) {
                const pageIndex = isAdd ? i : i + 1;
                const index = isAdd ? this.infiniteCurrentViewData[i].length - 1 : 0;
                const data = this.infiniteCurrentViewData[pageIndex].splice(index, 1);
                if (isAdd) {
                    this.infiniteCurrentViewData[i + 1] = data.concat(this.infiniteCurrentViewData[i + 1]);
                    if ((i + 1) === end - 1) {
                        this.infiniteCurrentViewData[i + 1].splice(this.infiniteCurrentViewData[i + 1].length - 1, 1);
                    }
                }
                else {
                    this.infiniteCurrentViewData[i].push(data[0]);
                }
            }
        }
        this.updateCurrentViewData();
    }
    setDisplayNone(args) {
        if (this.parent.infiniteScrollSettings.enableCache) {
            const frozenCols = this.parent.isFrozenGrid();
            const keys = frozenCols ? Object.keys(this.infiniteFrozenCache) : Object.keys(this.infiniteCache);
            for (let i = 1; i <= keys.length; i++) {
                const cache = frozenCols ? args.isFreeze ? this.infiniteFrozenCache[i][0]
                    : this.infiniteFrozenCache[i][1] : this.infiniteCache[i];
                cache.filter((e) => {
                    e.cells[args.index].visible = args.visible === '';
                });
            }
            this.resetContentModuleCache(frozenCols ? this.infiniteFrozenCache : this.infiniteCache);
        }
    }
    refreshInfiniteCache(args) {
        this.getEditedRowObject().data = args.data;
    }
    refreshInfiniteCacheRowVisibleLength(args, currentPage) {
        let cPageRowArray = args[currentPage];
        if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {
            let length = 0;
            let vRowLen = 0;
            let hRowLen = 0;
            for (let i = 0; i < cPageRowArray.length; i++) {
                if (cPageRowArray[i].visible || isNullOrUndefined(cPageRowArray[i].visible)) {
                    vRowLen++;
                }
                else {
                    hRowLen++;
                }
            }
            if (hRowLen > vRowLen) {
                length = hRowLen - vRowLen;
                if (length > vRowLen) {
                    length = vRowLen;
                }
            }
            else {
                length = vRowLen - hRowLen;
                if (length > hRowLen) {
                    length = hRowLen;
                }
            }
            if (length === 0) {
                length = 1;
            }
            return length;
        }
        else {
            return cPageRowArray.length;
        }
    }
    refreshInfiniteEditrowindex(args) {
        this.editRowIndex = args.index;
    }
    getEditedRowObject() {
        const rowObjects = this.parent.getRowsObject();
        let editedrow;
        for (let i = 0; i < rowObjects.length; i++) {
            if (rowObjects[i].index === this.editRowIndex) {
                editedrow = rowObjects[i];
            }
        }
        return editedrow;
    }
    infiniteEditSuccess(args) {
        if (this.isNormaledit) {
            if (!this.isAdd && args.data) {
                this.updateCurrentViewRecords(args.data);
            }
            this.isAdd = false;
        }
    }
    updateCurrentViewRecords(data) {
        const index = getEditedDataIndex(this.parent, data);
        if (!isNullOrUndefined(index)) {
            this.parent.getCurrentViewRecords()[index] = data;
        }
    }
    actionBegin(args) {
        if (args.requestType === 'add' || args.requestType === 'delete') {
            this.requestType = args.requestType;
        }
        else if (args.action === 'add' && args.requestType === 'save') {
            this.requestType = args.action;
        }
        if (this.parent.isFrozenGrid() && !args.cancel && args.requestType === 'searching'
            || args.requestType === 'sorting' || args.requestType === 'filtering') {
            this.isInitialRender = true;
        }
    }
    actionComplete(args) {
        if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {
            this.requestType = this.empty;
            this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';
            this.isAdd = this.isEdit = false;
            if (this.isNormaledit) {
                this.editRowIndex = this.empty;
                this.virtualInfiniteData = {};
                this.parent.editModule.previousVirtualData = {};
            }
        }
    }
    resetInfiniteEdit() {
        if (this.parent.enableInfiniteScrolling && this.isNormaledit) {
            if ((this.parent.editSettings.allowEditing && this.isEdit) || (this.parent.editSettings.allowAdding && this.isAdd)) {
                this.parent.isEdit = true;
            }
        }
    }
    getVirtualInfiniteData(data) {
        this.getVirtualInfiniteEditedData();
        data.virtualData = this.virtualInfiniteData;
        data.isAdd = this.isAdd;
        data.isCancel = this.isCancel;
    }
    editActionBegin(e) {
        this.isEdit = true;
        this.editRowIndex = e.index;
        const rowObject = extend({}, this.getEditedRowObject().data);
        e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;
    }
    dataSourceModified() {
        this.resetInfiniteBlocks({ requestType: this.empty }, true);
    }
    onDataReady(e) {
        if (!isNullOrUndefined(e.count) && e.requestType !== 'infiniteScroll') {
            this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);
        }
    }
    ensureIntialCollapse(isExpand) {
        this.isInitialCollapse = !isExpand;
    }
    infiniteScrollHandler(e) {
        this.restoreInfiniteEdit();
        this.restoreInfiniteAdd();
        const targetEle = e.target;
        const isInfinite = targetEle.classList.contains(content);
        if (isInfinite && this.parent.enableInfiniteScrolling && !e.isLeft) {
            const scrollEle = this.parent.getContent().firstElementChild;
            this.prevScrollTop = scrollEle.scrollTop;
            const rows = this.parent.getRows();
            if (!rows.length) {
                return;
            }
            const index = getRowIndexFromElement(rows[rows.length - 1]) + 1;
            const prevPage = this.parent.pageSettings.currentPage;
            let args;
            const offset = targetEle.scrollHeight - targetEle.scrollTop;
            const round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);
            let floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);
            if (floor > targetEle.clientHeight) {
                floor = floor - 1;
            }
            const isBottom = (floor === targetEle.clientHeight || round === targetEle.clientHeight);
            if (!isNullOrUndefined(this.groupCaptionAction)) {
                return;
            }
            if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {
                if (this.parent.infiniteScrollSettings.enableCache) {
                    this.isUpScroll = false;
                    this.isDownScroll = true;
                }
                const rows = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));
                const row$$1 = rows[rows.length - 1];
                const rowIndex = getRowIndexFromElement(row$$1);
                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;
                args = {
                    requestType: 'infiniteScroll',
                    currentPage: this.parent.pageSettings.currentPage,
                    prevPage: prevPage,
                    startIndex: index,
                    direction: 'down'
                };
                this.makeRequest(args);
            }
            if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0
                && this.parent.pageSettings.currentPage !== 1) {
                if (this.parent.infiniteScrollSettings.enableCache) {
                    this.isDownScroll = false;
                    this.isUpScroll = true;
                }
                const row$$1 = [].slice.call(scrollEle.getElementsByClassName(row));
                const rowIndex = getRowIndexFromElement(row$$1[this.parent.pageSettings.pageSize - 1]);
                const startIndex = getRowIndexFromElement(row$$1[0]) - this.parent.pageSettings.pageSize;
                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;
                if (this.parent.pageSettings.currentPage) {
                    args = {
                        requestType: 'infiniteScroll',
                        currentPage: this.parent.pageSettings.currentPage,
                        prevPage: prevPage,
                        startIndex: startIndex,
                        direction: 'up'
                    };
                    this.makeRequest(args);
                }
            }
            if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {
                if (this.isDownScroll || this.isUpScroll) {
                    scrollEle.scrollTop = this.top;
                }
            }
        }
    }
    makeRequest(args) {
        if (this.parent.pageSettings.currentPage !== args.prevPage) {
            const initBlocks = this.parent.infiniteScrollSettings.initialBlocks;
            if (initBlocks < this.maxPage && this.parent.pageSettings.currentPage <= this.maxPage) {
                this.isInfiniteScroll = true;
                if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {
                    setTimeout(() => {
                        this.getVirtualInfiniteEditedData();
                        this.parent.notify('model-changed', args);
                    }, 100);
                }
                else {
                    setTimeout(() => {
                        this.getVirtualInfiniteEditedData();
                        this.parent.notify(refreshInfiniteModeBlocks, args);
                    }, 100);
                }
            }
            else {
                this.parent.pageSettings.currentPage = this.maxPage;
            }
        }
    }
    infinitePageQuery(query) {
        if (this.initialRender) {
            this.initialRender = false;
            this.intialPageQuery(query);
        }
        else {
            if (!this.isInfiniteScroll && (this.requestType === 'delete' || this.requestType === 'add')) {
                this.editPageQuery(query);
            }
            else {
                query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);
            }
        }
    }
    editPageQuery(query) {
        const initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;
        const isCache = this.parent.infiniteScrollSettings.enableCache;
        if (isCache) {
            this.infiniteCache = {};
            this.infiniteFrozenCache = {};
            this.infiniteCurrentViewData = {};
            query.skip(this.firstIndex);
            query.take(initialBlocks * this.parent.pageSettings.pageSize);
        }
        else {
            if (this.parent.editSettings.mode === 'Dialog') {
                this.parent.clearSelection();
            }
            const index = this.requestType === 'delete' ? this.lastIndex : this.addRowIndex ? this.addRowIndex : this.firstIndex;
            query.skip(index);
            query.take(1);
        }
    }
    intialPageQuery(query) {
        if (this.parent.infiniteScrollSettings.enableCache
            && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {
            this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;
        }
        const pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;
        query.page(1, pageSize);
    }
    scrollToLastFocusedCell(e) {
        const gObj = this.parent;
        const rowIdx = this.lastFocusInfo.rowIdx + (e.keyArgs.action === upArrow ? -1 : 1);
        const cellIdx = this.lastFocusInfo.cellIdx;
        let row$$1 = gObj.getRowByIndex(rowIdx);
        const content$$1 = gObj.getContent().firstElementChild;
        if (!row$$1) {
            const rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);
            const page = Math.floor(rowIdx / this.parent.pageSettings.pageSize) + 1;
            gObj.pageSettings.currentPage = page;
            const cols = gObj.getColumns();
            remove(gObj.getContent().querySelector('tbody'));
            gObj.getContent().querySelector('table').appendChild(gObj.createElement('tbody', { attrs: { 'role': 'rowgroup' } }));
            let focusRows = [];
            for (let i = (page === 1 || this.maxPage === page) ? 0 : -1, k = 0; k < gObj.infiniteScrollSettings.maxBlocks; this.maxPage === page ? i-- : i++, k++) {
                const rows = this.infiniteCache[page + i];
                if (rows) {
                    focusRows = focusRows.concat(rows);
                    for (let j = 0; j < rows.length; j++) {
                        gObj.getContent().querySelector('tbody').appendChild(rowRenderer.render(rows[j], cols));
                    }
                }
            }
            gObj.notify(contentReady, { rows: focusRows, args: {} });
            setRowElements(gObj);
        }
        row$$1 = gObj.getRowByIndex(rowIdx);
        const target = row$$1.cells[cellIdx];
        gObj.focusModule.isInfiniteScroll = true;
        gObj.focusModule.onClick({ target }, true);
        gObj.selectRow(rowIdx);
        target.focus();
        this.isFocusScroll = false;
        e.cancel = true;
    }
    setLastCellFocusInfo(e) {
        const cell = ((e.byClick && e.clickArgs.target) || (e.byKey && e.keyArgs.target)
            || (!this.isFocusScroll && e).target);
        if (cell && cell.classList.contains('e-rowcell')) {
            const cellIdx = parseInt(cell.getAttribute('aria-colindex'), 10);
            const rowIdx = parseInt(cell.parentElement.getAttribute('aria-rowindex'));
            this.lastFocusInfo = { rowIdx: rowIdx, cellIdx: cellIdx };
        }
    }
    infiniteCellFocus(e) {
        const gObj = this.parent;
        const cache = gObj.infiniteScrollSettings.enableCache;
        if (e.byKey) {
            if (cache && this.isFocusScroll) {
                this.scrollToLastFocusedCell(e);
                return;
            }
            const cell = document.activeElement;
            let rowIndex = getRowIndexFromElement(cell.parentElement);
            this.cellIndex = parseInt(cell.getAttribute(ariaColIndex), 10);
            const content$$1 = gObj.getContent().firstElementChild;
            const totalRowsCount = (this.maxPage * gObj.pageSettings.pageSize) - 1;
            const visibleRowCount = Math.floor(content$$1.offsetHeight / this.parent.getRowHeight());
            const contentRect = content$$1.getBoundingClientRect();
            if (!isNaN(rowIndex)) {
                if (e.keyArgs.action === downArrow || e.keyArgs.action === enter) {
                    this.rowIndex = rowIndex += 1;
                    const row$$1 = gObj.getRowByIndex(rowIndex);
                    const rowRect = row$$1 && row$$1.getBoundingClientRect();
                    if (cache) {
                        rowIndex = cell.parentElement.rowIndex + 1;
                    }
                    if (this.isFocusScroll || (!row$$1 && rowIndex < totalRowsCount)
                        || (rowRect && rowRect.bottom >= contentRect.bottom)) {
                        if (!this.isFocusScroll) {
                            this.pressedKey = e.keyArgs.action;
                        }
                        this.isFocusScroll = false;
                        content$$1.scrollTop = ((rowIndex - visibleRowCount) + 1) * this.parent.getRowHeight();
                    }
                    else if (!cache && row$$1) {
                        if (rowRect && (rowRect.bottom >= contentRect.bottom || rowRect.top < contentRect.top)) {
                            row$$1.cells[this.cellIndex].scrollIntoView();
                        }
                    }
                }
                else if (e.keyArgs.action === upArrow || e.keyArgs.action === shiftEnter) {
                    this.rowIndex = rowIndex -= 1;
                    const row$$1 = gObj.getRowByIndex(rowIndex);
                    const rowRect = row$$1 && row$$1.getBoundingClientRect();
                    if (cache) {
                        rowIndex = cell.parentElement.rowIndex - 1;
                    }
                    if (!row$$1 || rowRect.top <= contentRect.top) {
                        this.pressedKey = e.keyArgs.action;
                        content$$1.scrollTop = rowIndex * this.parent.getRowHeight();
                    }
                }
            }
        }
        else if (e.key === 'PageDown' || e.key === 'PageUp') {
            this.pressedKey = e.key;
        }
        this.setLastCellFocusInfo(e);
    }
    createEmptyRowdata() {
        this.parent.getColumns().filter((e) => {
            this.emptyRowData[e.field] = this.empty;
        });
    }
    getVirtualInfiniteEditedData() {
        const editForm = this.parent.element.querySelector('.' + editedRow);
        const addForm = this.parent.element.querySelector('.' + addedRow);
        const gridForm = this.parent.element.querySelector('.e-gridform');
        if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {
            const rowData = editForm ? extend({}, this.getEditedRowObject().data)
                : extend({}, this.emptyRowData);
            this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);
            if (this.parent.isFrozenGrid()) {
                this.virtualInfiniteData = this.parent.editModule
                    .getCurrentEditedData(this.parent.getMovableVirtualContent().querySelector('.e-gridform'), rowData);
            }
        }
    }
    restoreInfiniteEdit() {
        const content$$1 = this.parent.getContent().firstElementChild;
        const frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;
        if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {
            if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {
                const row$$1 = this.parent.getRowByIndex(this.editRowIndex);
                if (Object.keys(this.virtualInfiniteData).length && row$$1 && !this.parent.getContent().querySelector('.' + editedRow)) {
                    const top = row$$1.getBoundingClientRect().top;
                    if (top < content$$1.offsetHeight && top > this.parent.getRowHeight()) {
                        this.parent.isEdit = false;
                        this.parent.editModule.startEdit(row$$1);
                    }
                }
            }
        }
    }
    restoreInfiniteAdd() {
        const content$$1 = this.parent.getContent().firstElementChild;
        if (this.parent.getCurrentViewRecords().length && this.parent.getRowByIndex(0) && this.isNormaledit &&
            this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content$$1.querySelector('.' + addedRow)) {
            const isTop = content$$1.scrollTop < this.parent.getRowHeight();
            if (isTop) {
                this.parent.isEdit = false;
                this.parent.addRecord();
            }
        }
    }
    appendInfiniteRows(e) {
        const frozenCols = this.parent.isFrozenGrid();
        const scrollEle = this.parent.getContent().firstElementChild;
        const isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';
        const isMovable = this.parent.getFrozenMode() === leftRight && e.tableName === 'movable';
        if ((isInfiniteScroll && !e.args.isFrozen && !isMovable) || !isInfiniteScroll) {
            if (isInfiniteScroll && e.args.direction === 'up') {
                e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);
            }
            else {
                e.tbody.appendChild(e.frag);
            }
        }
        if (!frozenCols) {
            this.parent.contentModule.getTable().appendChild(e.tbody);
            this.updateCurrentViewData();
        }
        else {
            if (isInfiniteScroll) {
                if (e.tableName === frozenLeft || (this.parent.getFrozenMode() === 'Right' && e.tableName === frozenRight)) {
                    this.frozenFrag = e.frag;
                }
                else if (this.parent.getFrozenMode() === leftRight && e.tableName === 'movable') {
                    this.movableFrag = e.frag;
                }
                else {
                    const tbody$$1 = this.parent.getFrozenVirtualContent().querySelector(tbody);
                    if (e.args.direction === 'up') {
                        tbody$$1.insertBefore(this.frozenFrag, tbody$$1.firstElementChild);
                    }
                    else {
                        tbody$$1.appendChild(this.frozenFrag);
                    }
                    if (e.tableName === frozenRight) {
                        this.parent.getMovableVirtualContent().querySelector(tbody).appendChild(this.movableFrag);
                        this.parent.element.querySelector('.e-frozen-right-content').querySelector(tbody).appendChild(e.frag);
                    }
                    else {
                        this.parent.getMovableVirtualContent().querySelector('.' + table).appendChild(e.tbody);
                    }
                    this.parent.contentModule.refreshScrollOffset();
                    this.updateCurrentViewData();
                }
            }
            else {
                let table$$1;
                if (e.tableName === frozenLeft) {
                    table$$1 = this.parent.getFrozenVirtualContent().querySelector('.' + table);
                }
                else if (e.tableName === 'movable') {
                    table$$1 = this.parent.getMovableVirtualContent().querySelector('.' + table);
                    if (this.parent.getFrozenMode() !== leftRight) {
                        this.parent.contentModule.refreshScrollOffset();
                        this.updateCurrentViewData();
                    }
                }
                else {
                    table$$1 = this.parent.element.querySelector('.e-frozen-right-content').querySelector('.' + table);
                    if (this.parent.getFrozenMode() === leftRight) {
                        this.parent.contentModule.refreshScrollOffset();
                        this.updateCurrentViewData();
                    }
                }
                table$$1.appendChild(e.tbody);
                this.widthService.refreshFrozenScrollbar();
            }
        }
        if (this.isInitialRender && !e.args.isFrozen) {
            this.isInitialRender = false;
            this.parent.scrollModule.setHeight();
        }
        if (!e.args.isFrozen) {
            this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;
            if (isInfiniteScroll) {
                if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {
                    scrollEle.scrollTop = this.top;
                }
                setRowElements(this.parent);
            }
            this.restoreInfiniteAdd();
            this.isScroll = true;
        }
        this.isInfiniteScroll = false;
    }
    selectNewRow(args) {
        const gObj = this.parent;
        const row$$1 = gObj.getRowByIndex(this.rowIndex);
        const cache = gObj.infiniteScrollSettings.enableCache;
        if (row$$1 && this.keys.some((value) => value === this.pressedKey)) {
            const content$$1 = gObj.getContent().firstElementChild;
            const rowHeight = gObj.getRowHeight();
            const target = row$$1.cells[this.cellIndex];
            if ((this.pressedKey === downArrow || this.pressedKey === enter)
                || (cache && (this.pressedKey === upArrow || this.pressedKey === shiftEnter))) {
                if (!cache && this.pressedKey !== upArrow && this.pressedKey !== shiftEnter) {
                    content$$1.scrollTop = content$$1.scrollTop + rowHeight;
                }
                gObj.focusModule.isInfiniteScroll = true;
                gObj.focusModule.onClick({ target }, true);
                gObj.selectRow(this.rowIndex);
            }
        }
        else if (this.lastFocusInfo && (this.pressedKey === pageDown || this.pressedKey === pageUp)) {
            const idx = cache ? 0 : this.lastFocusInfo.rowIdx;
            if (gObj.getRowByIndex(idx)) {
                const target = gObj.getCellFromIndex(idx, this.lastFocusInfo.cellIdx);
                if (target) {
                    this.isFocusScroll = true;
                    if (!cache) {
                        gObj.focusModule.isInfiniteScroll = true;
                        gObj.focusModule.onClick({ target }, true);
                    }
                    else {
                        target.focus({ preventScroll: true });
                    }
                }
            }
        }
        this.pressedKey = undefined;
    }
    removeInfiniteCacheRows(e) {
        const isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';
        if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {
            const rows = [].slice.call(this.parent.getContentTable().getElementsByClassName(row));
            if (e.args.direction === 'down') {
                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
                    const captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));
                    this.removeCaptionRows(captionRows, e.args);
                }
                const addRowCount = this.parent.element.querySelector('.' + addedRow) ? 0 : 1;
                this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);
            }
            if (e.args.direction === 'up') {
                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {
                    const captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));
                    this.removeCaptionRows(captionRows, e.args);
                }
                else {
                    this.removeBottomRows(rows, rows.length - 1, e.args);
                }
            }
            this.isScroll = false;
            this.top = this.calculateScrollTop(e.args);
        }
    }
    calculateScrollTop(args) {
        let top = 0;
        const scrollCnt = this.parent.getContent().firstElementChild;
        if (args.direction === 'down') {
            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {
                top = this.captionRowHeight();
            }
            const captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));
            let captionCount = 0;
            if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {
                captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);
            }
            const value = captionCount ? captionCount
                : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);
            let currentViewRowCount = 0;
            let i = 0;
            while (currentViewRowCount < scrollCnt.clientHeight) {
                i++;
                currentViewRowCount = i * this.parent.getRowHeight();
            }
            i = i - 1;
            top += (value - i) * this.parent.getRowHeight();
        }
        if (args.direction === 'up') {
            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {
                let len = this.refreshInfiniteCacheRowVisibleLength(this.infiniteCache, this.parent.pageSettings.currentPage);
                top = len * this.parent.getRowHeight();
            }
            else if (this.isInitialCollapse) {
                const groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];
                let count = 0;
                for (let i = 0; i < groupedData.length; i++) {
                    if (groupedData[i].isCaptionRow) {
                        count++;
                    }
                }
                top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();
            }
            else {
                top += (this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth());
            }
        }
        return top;
    }
    captionRowHeight() {
        const rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));
        return rows.length * this.parent.getRowHeight();
    }
    removeTopRows(rows, maxIndx) {
        const frozeCols = this.parent.isFrozenGrid();
        const frRows = this.parent.getFrozenMode() === leftRight
            ? [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(row)) : null;
        const movableRows = frozeCols ?
            [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(row)) : null;
        for (let i = 0; i <= maxIndx; i++) {
            if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1
                && i > (maxIndx - this.parent.frozenRows)) {
                continue;
            }
            remove(rows[i]);
            if (movableRows) {
                remove(movableRows[i]);
            }
            if (frRows) {
                remove(frRows[i]);
            }
        }
    }
    removeBottomRows(rows, maxIndx, args) {
        let cnt = 0;
        const frozeCols = this.parent.isFrozenGrid();
        const movableRows = frozeCols ?
            [].slice.call(this.parent.getMovableVirtualContent().getElementsByClassName(row)) : null;
        const frRows = this.parent.getFrozenMode() === leftRight ?
            [].slice.call(this.parent.element.querySelector('.e-frozen-right-content').getElementsByClassName(row)) : null;
        const pageSize = this.parent.pageSettings.pageSize;
        if (!frozeCols && this.infiniteCache[args.prevPage].length < pageSize) {
            cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;
        }
        if (frozeCols && this.infiniteFrozenCache[args.prevPage][1].length < pageSize) {
            cnt = this.parent.pageSettings.pageSize - this.infiniteFrozenCache[args.prevPage][1].length;
        }
        for (let i = maxIndx; cnt < pageSize; i--) {
            cnt++;
            remove(rows[i]);
            if (movableRows) {
                remove(movableRows[i]);
            }
            if (frRows) {
                remove(frRows[i]);
            }
        }
    }
    removeCaptionRows(rows, args) {
        const rowElements = [].slice.call(this.parent.getContent().getElementsByClassName(row));
        if (args.direction === 'down') {
            const lastRow = rowElements[this.parent.pageSettings.pageSize - 1];
            const lastRowIndex = getRowIndexFromElement(lastRow) - 1;
            let k = 0;
            for (let i = 0; k < lastRowIndex; i++) {
                if (!rows[i].classList.contains(row)) {
                    remove(rows[i]);
                }
                else {
                    k = getRowIndexFromElement(rows[i]);
                }
            }
        }
        if (args.direction === 'up') {
            const lastIndex = getRowIndexFromElement(rowElements[rowElements.length - 1]);
            const page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);
            let startIndex = 0;
            for (let i = this.parent.pageSettings.currentPage + 1; i < page; i++) {
                startIndex += this.infiniteCache[i].length;
            }
            for (let i = startIndex; i < rows.length; i++) {
                remove(rows[i]);
            }
        }
    }
    resetInfiniteBlocks(args, isDataModified) {
        const isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';
        if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {
            if (this.actions.some((value) => value === args.requestType) || isDataModified) {
                const scrollEle = this.parent.getContent().firstElementChild;
                this.initialRender = true;
                scrollEle.scrollTop = 0;
                this.parent.pageSettings.currentPage = 1;
                this.infiniteCache = this.infiniteFrozenCache = {};
                this.infiniteCurrentViewData = {};
                this.resetContentModuleCache({});
                this.isRemove = false;
                this.top = 0;
                this.isInitialMovableRender = true;
                this.isInitialCollapse = false;
                this.parent.contentModule.isRemove = this.isRemove;
                this.parent.contentModule.isAddRows = this.isRemove;
                this.parent.contentModule.visibleRows = [];
                this.parent.contentModule.visibleFrozenRows = [];
            }
        }
    }
    setCache(e) {
        if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {
            const frozeCols = this.parent.isFrozenGrid();
            const idx = e.args.isFrozen ? 1 : 0;
            const isEdit = e.args.requestType !== 'infiniteScroll'
                && (this.requestType === 'delete' || this.requestType === 'add');
            const currentPage = this.parent.pageSettings.currentPage;
            if ((frozeCols && this.isInitialMovableRender) || (!frozeCols && !Object.keys(this.infiniteCache).length) || isEdit) {
                this.isInitialMovableRender = !e.args.isFrozen;
                this.setInitialCache(e.modelData, e.args, isEdit);
            }
            if (!frozeCols && isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {
                this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;
                this.resetContentModuleCache(this.infiniteCache);
            }
            if (frozeCols) {
                if ((idx === 0 && isNullOrUndefined(this.infiniteFrozenCache[currentPage]))
                    || !this.infiniteFrozenCache[currentPage][idx].length) {
                    this.createFrozenCache(currentPage);
                    this.infiniteFrozenCache[currentPage][idx] = e.modelData;
                    if (idx === 1) {
                        this.resetContentModuleCache(this.infiniteFrozenCache);
                    }
                }
            }
            if (e.isInfiniteScroll && !this.isRemove) {
                this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;
                this.parent.contentModule.isRemove = this.isRemove;
            }
        }
    }
    setInitialCache(data, args, isEdit, isCurrentViewData) {
        const frozenCols = this.parent.isFrozenGrid();
        const idx = args.isFrozen ? 1 : 0;
        let k = !isEdit ? 1 : this.firstBlock;
        for (let i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {
            const startIndex = (i - 1) * this.parent.pageSettings.pageSize;
            const endIndex = i * this.parent.pageSettings.pageSize;
            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !isCurrentViewData) {
                this.setInitialGroupCache(data, k, startIndex, endIndex);
            }
            else {
                if (isCurrentViewData) {
                    this.infiniteCurrentViewData[k] = data.slice(startIndex, endIndex);
                }
                else {
                    if (frozenCols) {
                        this.createFrozenCache(k);
                        this.infiniteFrozenCache[k][idx] = data.slice(startIndex, endIndex);
                        this.resetContentModuleCache(this.infiniteFrozenCache);
                    }
                    else {
                        this.infiniteCache[k] = data.slice(startIndex, endIndex);
                        this.resetContentModuleCache(this.infiniteCache);
                    }
                }
            }
            k++;
        }
    }
    createFrozenCache(index) {
        if (!this.infiniteFrozenCache[index]) {
            this.infiniteFrozenCache[index] = [[], []];
        }
    }
    setInitialGroupCache(data, index, sIndex, eIndex) {
        const pageData = [];
        let startIndex = 0;
        for (let i = 1; i <= Object.keys(this.infiniteCache).length; i++) {
            startIndex += this.infiniteCache[i].length;
        }
        let k = sIndex;
        for (let i = startIndex; i < data.length && k < eIndex; i++) {
            if (data[i].index < eIndex || data[i].isCaptionRow) {
                k = data[i].isCaptionRow ? k : data[i].index;
                pageData.push(data[i]);
            }
            if (data[i].index >= eIndex || data[i].index === eIndex - 1) {
                break;
            }
        }
        this.infiniteCache[index] = pageData;
        this.resetContentModuleCache(this.infiniteCache);
    }
    resetContentModuleCache(data) {
        this.parent.contentModule
            .infiniteCache = data;
    }
    /**
     * @returns {void}
     * @hidden
     */
    destroy() {
        this.removeEventListener();
    }
}

/**
 * GroupLazyLoadRenderer is used to perform lazy load grouping
 *
 * @hidden
 */
class GroupLazyLoadRenderer extends ContentRender {
    constructor(parent, locator) {
        super(parent, locator);
        this.childCount = 0;
        this.scrollData = [];
        this.isFirstChildRow = false;
        this.isScrollDown = false;
        this.isScrollUp = false;
        this.groupCache = {};
        this.startIndexes = {};
        this.captionCounts = {};
        this.rowsByUid = {};
        this.objIdxByUid = {};
        this.initialGroupCaptions = {};
        this.requestType = ['paging', 'columnstate', 'reorder', 'cancel', 'save', 'beginEdit', 'add', 'delete',
            'filterbeforeopen', 'filterchoicerequest'];
        /** @hidden */
        this.cacheMode = false;
        /** @hidden */
        this.cacheBlockSize = 5;
        /** @hidden */
        this.ignoreAccent = this.parent.allowFiltering ? this.parent.filterSettings.ignoreAccent : false;
        /** @hidden */
        this.allowCaseSensitive = false;
        this.locator = locator;
        this.groupGenerator = new GroupModelGenerator(this.parent);
        this.summaryModelGen = new GroupSummaryModelGenerator(this.parent);
        this.captionModelGen = new CaptionSummaryModelGenerator(this.parent);
        this.rowRenderer = new RowRenderer(this.locator, null, this.parent);
        this.eventListener();
    }
    eventListener() {
        this.parent.addEventListener(actionBegin, this.actionBegin.bind(this));
        this.parent.addEventListener(actionComplete, this.actionComplete.bind(this));
        this.parent.on(initialEnd, this.setLazyLoadPageSize, this);
        this.parent.on(setGroupCache, this.setCache, this);
        this.parent.on(lazyLoadScrollHandler, this.scrollHandler, this);
        this.parent.on(columnVisibilityChanged, this.setVisible, this);
        this.parent.on(groupCollapse, this.collapseShortcut, this);
    }
    /**
     * @param {HTMLTableRowElement} tr - specifies the table row element
     * @returns {void}
     * @hidden
     */
    captionExpand(tr) {
        const page = this.parent.pageSettings.currentPage;
        const rowsObject = this.groupCache[page];
        const uid = tr.getAttribute('data-uid');
        const oriIndex = this.getRowObjectIndexByUid(uid);
        const isRowExist = rowsObject[oriIndex + 1] ? rowsObject[oriIndex].indent < rowsObject[oriIndex + 1].indent : false;
        const data = rowsObject[oriIndex];
        const key = getGroupKeysAndFields(oriIndex, rowsObject);
        const e = { captionRowElement: tr, groupInfo: data, enableCaching: true, cancel: false };
        this.parent.trigger(lazyLoadGroupExpand, e, (args) => {
            if (args.cancel) {
                return;
            }
            args.keys = key.keys;
            args.fields = key.fields;
            args.rowIndex = tr.rowIndex;
            args.makeRequest = !args.enableCaching || !isRowExist;
            if (!args.enableCaching && isRowExist) {
                this.clearCache([uid]);
            }
            args.skip = 0;
            args.take = this.pageSize;
            data.isExpand = this.rowsByUid[page][data.uid].isExpand = true;
            this.captionRowExpand(args);
        });
    }
    /**
     * @param {HTMLTableRowElement} tr - specifies the table row element
     * @returns {void}
     * @hidden
     */
    captionCollapse(tr) {
        const cache = this.groupCache[this.parent.pageSettings.currentPage];
        const rowIdx = tr.rowIndex;
        const uid = tr.getAttribute('data-uid');
        const captionIndex = this.getRowObjectIndexByUid(uid);
        const e = {
            captionRowElement: tr, groupInfo: cache[captionIndex], cancel: false
        };
        this.parent.trigger(lazyLoadGroupCollapse, e, (args) => {
            if (args.cancel) {
                return;
            }
            args.isExpand = false;
            this.removeRows(captionIndex, rowIdx);
        });
    }
    /**
     * @returns {void}
     * @hidden */
    setLazyLoadPageSize() {
        const scrollEle = this.parent.getContent().firstElementChild;
        const blockSize = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight()) - 1;
        this.pageSize = this.pageSize ? this.pageSize : blockSize * 3;
        this.blockSize = Math.ceil(this.pageSize / 2);
    }
    /**
     * @returns {void}
     * @hidden */
    clearLazyGroupCache() {
        this.clearCache();
    }
    clearCache(uids) {
        uids = uids ? uids : this.getInitialCaptionIndexes();
        const cache = this.groupCache[this.parent.pageSettings.currentPage];
        if (uids.length) {
            for (let i = 0; i < uids.length; i++) {
                const capIdx = this.getRowObjectIndexByUid(uids[i]);
                const capRow = cache[capIdx];
                if (!capRow) {
                    continue;
                }
                if (this.captionCounts[this.parent.pageSettings.currentPage][capRow.uid]) {
                    for (let i = capIdx + 1; i < cache.length; i++) {
                        if (cache[i].indent === capRow.indent || cache[i].indent < capRow.indent) {
                            delete this.captionCounts[this.parent.pageSettings.currentPage][capRow.uid];
                            break;
                        }
                        if (cache[i].isCaptionRow) {
                            delete this.captionCounts[this.parent.pageSettings.currentPage][cache[i].uid];
                        }
                    }
                }
                if (capRow.isExpand) {
                    const tr = this.parent.getRowElementByUID(capRow.uid);
                    if (!tr) {
                        return;
                    }
                    this.parent.groupModule.expandCollapseRows(tr.querySelector('.e-recordplusexpand'));
                }
                const child = this.getNextChilds(capIdx);
                if (!child.length) {
                    continue;
                }
                let subChild = [];
                if (child[child.length - 1].isCaptionRow) {
                    subChild = this.getChildRowsByParentIndex(cache.indexOf(child[child.length - 1]), false, false, null, true, true);
                }
                const start = cache.indexOf(child[0]);
                const end = subChild.length ? cache.indexOf(subChild[subChild.length - 1]) : cache.indexOf(child[child.length - 1]);
                cache.splice(start, end - (start - 1));
                this.refreshCaches();
            }
        }
    }
    refreshCaches() {
        const page = this.parent.pageSettings.currentPage;
        const cache = this.groupCache[page];
        this.rowsByUid = {};
        this.objIdxByUid = {};
        for (let i = 0; i < cache.length; i++) {
            this.maintainRows(cache[i], i);
        }
    }
    getInitialCaptionIndexes() {
        const page = this.parent.pageSettings.currentPage;
        const uids = [];
        for (let i = 0; i < this.initialGroupCaptions[page].length; i++) {
            uids.push(this.initialGroupCaptions[page][i].uid);
        }
        return uids;
    }
    /**
     * @param {string} uid - specifies the uid
     * @returns {number} returns the row object uid
     * @hidden
     */
    getRowObjectIndexByUid(uid) {
        return this.objIdxByUid[this.parent.pageSettings.currentPage][uid];
    }
    collapseShortcut(args) {
        if (this.parent.groupSettings.columns.length &&
            args.target && parentsUntil(args.target, content) && args.target.parentElement.tagName === 'TR') {
            if (!args.collapse && parentsUntil(args.target, row)) {
                return;
            }
            const row$$1 = args.target.parentElement;
            const uid = row$$1.getAttribute('data-uid');
            if (args.collapse) {
                const rowObj = this.getRowByUid(uid);
                const capRow = this.getRowByUid(rowObj.parentUid);
                if (capRow.isCaptionRow && capRow.isExpand) {
                    const capEle = this.getRowElementByUid(rowObj.parentUid);
                    this.parent.groupModule.expandCollapseRows(capEle.cells[rowObj.indent - 1]);
                }
            }
            else {
                const capRow = this.getRowByUid(uid);
                if (capRow.isCaptionRow && !capRow.isExpand) {
                    const capEle = this.getRowElementByUid(uid);
                    this.parent.groupModule.expandCollapseRows(capEle.cells[capRow.indent]);
                }
            }
        }
    }
    getRowByUid(uid) {
        return this.rowsByUid[this.parent.pageSettings.currentPage][uid];
    }
    actionBegin(args) {
        if (!args.cancel) {
            if (!this.requestType.some((value) => value === args.requestType)) {
                this.groupCache = {};
                this.resetRowMaintenance();
            }
            if (args.requestType === 'reorder' && this.parent.groupSettings.columns.length) {
                const keys = Object.keys(this.groupCache);
                for (let j = 0; j < keys.length; j++) {
                    const cache = this.groupCache[keys[j]];
                    for (let i = 0; i < cache.length; i++) {
                        if (cache[i].isCaptionRow && !this.captionModelGen.isEmpty()) {
                            this.changeCaptionRow(cache[i], null, keys[j]);
                        }
                        if (cache[i].isDataRow) {
                            const from = args.fromIndex + cache[i].indent;
                            const to = args.toIndex + cache[i].indent;
                            this.moveCells(cache[i].cells, from, to);
                        }
                    }
                }
            }
            if (args.requestType === 'delete'
                || (args.action === 'add' && args.requestType === 'save')) {
                this.groupCache = {};
                this.resetRowMaintenance();
            }
        }
    }
    actionComplete(args) {
        if (!args.cancel && args.requestType !== 'columnstate' && args.requestType !== 'beginEdit'
            && args.requestType !== 'delete' && args.requestType !== 'save' && args.requestType !== 'reorder') {
            this.scrollReset();
        }
    }
    resetRowMaintenance() {
        this.startIndexes = {};
        this.captionCounts = {};
        this.rowsByUid = {};
        this.objIdxByUid = {};
        this.initialGroupCaptions = {};
    }
    moveCells(arr, from, to) {
        if (from >= arr.length) {
            let k = from - arr.length;
            while ((k--) + 1) {
                arr.push(undefined);
            }
        }
        arr.splice(from, 0, arr.splice(to, 1)[0]);
    }
    removeRows(idx, trIdx) {
        const page = this.parent.pageSettings.currentPage;
        const rows = this.groupCache[page];
        const trs = [].slice.call(this.parent.getContent().querySelectorAll('tr'));
        let aggUid;
        if (this.parent.aggregates.length) {
            const agg = this.getAggregateByCaptionIndex(idx);
            aggUid = agg.length ? agg[agg.length - 1].uid : undefined;
        }
        const indent = rows[idx].indent;
        this.addClass(this.getNextChilds(idx));
        rows[idx].isExpand = this.rowsByUid[page][rows[idx].uid].isExpand = false;
        let capUid;
        for (let i = idx + 1; i < rows.length; i++) {
            if (rows[i].indent === indent || rows[i].indent < indent) {
                capUid = rows[i].uid;
                break;
            }
            if (rows[i].isCaptionRow && rows[i].isExpand) {
                this.addClass(this.getNextChilds(i));
            }
        }
        for (let i = trIdx + 1; i < trs.length; i++) {
            if (trs[i].getAttribute('data-uid') === capUid) {
                break;
            }
            else if (trs[i].getAttribute('data-uid') === aggUid) {
                remove(trs[i]);
                break;
            }
            else {
                remove(trs[i]);
            }
        }
    }
    addClass(rows) {
        const last = rows[this.blockSize];
        if (last) {
            last.lazyLoadCssClass = 'e-lazyload-middle-down';
        }
    }
    getNextChilds(index, rowObjects) {
        const group = this.groupCache[this.parent.pageSettings.currentPage];
        const rows = rowObjects ? rowObjects : group;
        const indent = group[index].indent + 1;
        const childRows = [];
        for (let i = rowObjects ? 0 : index + 1; i < rows.length; i++) {
            if (rows[i].indent < indent) {
                break;
            }
            if (rows[i].indent === indent) {
                childRows.push(rows[i]);
            }
        }
        return childRows;
    }
    lazyLoadHandler(args) {
        this.setStartIndexes();
        const tr = this.parent.getContent().querySelectorAll('tr')[args.index];
        const uid = tr.getAttribute('data-uid');
        const captionIndex = this.getRowObjectIndexByUid(uid);
        const captionRow = this.groupCache[this.parent.pageSettings.currentPage][captionIndex];
        let rows = args.isRowExist ? args.isScroll ? this.scrollData
            : this.getChildRowsByParentIndex(captionIndex, true, true, null, true) : [];
        this.scrollData = [];
        if (!args.isRowExist) {
            this.setRowIndexes(captionIndex, captionRow);
            this.refreshCaptionRowCount(this.groupCache[this.parent.pageSettings.currentPage][captionIndex], args.count);
            if (Object.keys(args.data).indexOf('GroupGuid') !== -1) {
                for (let i = 0; i < args.data.length; i++) {
                    const data = this.groupGenerator.generateCaptionRow(args.data[i], args.level, captionRow.parentGid, undefined, 0, captionRow.uid);
                    rows.push(data);
                    if (this.parent.aggregates.length) {
                        rows = rows.concat((this.summaryModelGen.generateRows(args.data[i], { level: args.level + 1, parentUid: data.uid })));
                    }
                }
            }
            else {
                this.groupGenerator.index = this.getStartIndex(captionIndex, args.isScroll);
                rows = this.groupGenerator.generateDataRows(args.data, args.level, captionRow.parentGid, 0, captionRow.uid);
            }
        }
        const trIdx = args.isScroll ? this.rowIndex : args.index;
        const nxtChild = this.getNextChilds(captionIndex, rows);
        const lastRow = !args.up ? this.hasLastChildRow(args.isScroll, args.count, nxtChild.length) : true;
        if (!args.isRowExist && !lastRow) {
            nxtChild[this.blockSize].lazyLoadCssClass = 'e-lazyload-middle-down';
        }
        if (!lastRow) {
            nxtChild[nxtChild.length - 1].lazyLoadCssClass = 'e-not-lazyload-end';
        }
        const aggregates = !args.isScroll && !args.isRowExist ? this.getAggregateByCaptionIndex(captionIndex) : [];
        if (!args.up) {
            if (!args.isRowExist) {
                this.refreshRowObjects(rows, args.isScroll ? this.rowObjectIndex : captionIndex);
            }
        }
        this.render(trIdx, rows, lastRow, aggregates);
        if (this.isFirstChildRow && !args.up) {
            this.parent.getContent().firstElementChild.scrollTop = rows.length * this.parent.getRowHeight();
        }
        this.isFirstChildRow = false;
        this.rowIndex = undefined;
        this.rowObjectIndex = undefined;
        this.childCount = 0;
    }
    setRowIndexes(capIdx, row$$1) {
        if (!this.captionCounts[this.parent.pageSettings.currentPage]) {
            this.captionCounts[this.parent.pageSettings.currentPage] = {};
        }
        if (row$$1.isCaptionRow) {
            this.captionCounts[this.parent.pageSettings.currentPage][row$$1.uid] = row$$1.data.count;
        }
    }
    getStartIndex(capIdx, isScroll) {
        const page = this.parent.pageSettings.currentPage;
        const cache = this.groupCache[page];
        if (isScroll) {
            return cache[this.rowObjectIndex].index + 1;
        }
        let count = 0;
        let idx = 0;
        const prevCapRow = this.getRowByUid(cache[capIdx].parentUid);
        if (prevCapRow) {
            idx = this.prevCaptionCount(prevCapRow);
        }
        if (cache[capIdx].indent > 0) {
            for (let i = capIdx - 1; i >= 0; i--) {
                if (cache[i].indent < cache[capIdx].indent) {
                    break;
                }
                if (cache[i].isCaptionRow && cache[i].indent === cache[capIdx].indent) {
                    count = count + cache[i].data.count;
                }
            }
        }
        const index = count + idx + this.startIndexes[page][cache[capIdx].parentGid];
        return index;
    }
    prevCaptionCount(prevCapRow) {
        const page = this.parent.pageSettings.currentPage;
        const cache = this.groupCache[page];
        let idx = 0;
        for (let i = cache.indexOf(prevCapRow) - 1; i >= 0; i--) {
            if (cache[i].indent === 0) {
                break;
            }
            if (cache[i].indent < prevCapRow.indent) {
                break;
            }
            if (cache[i].isCaptionRow && cache[i].indent === prevCapRow.indent) {
                const count = this.captionCounts[page][cache[i].uid];
                idx = idx + (count ? count : cache[i].data.count);
            }
        }
        const capRow = this.getRowByUid(prevCapRow.parentUid);
        if (capRow) {
            idx = idx + this.prevCaptionCount(capRow);
        }
        return idx;
    }
    setStartIndexes() {
        const cache = this.groupCache[this.parent.pageSettings.currentPage];
        if (!this.startIndexes[this.parent.pageSettings.currentPage]) {
            const indexes = [];
            let idx;
            for (let i = 0; i < cache.length; i++) {
                if (cache[i].isCaptionRow) {
                    if (!indexes.length) {
                        indexes.push(0);
                    }
                    else {
                        indexes.push(cache[idx].data.count + indexes[indexes.length - 1]);
                    }
                    idx = i;
                }
            }
            this.startIndexes[this.parent.pageSettings.currentPage] = indexes;
        }
    }
    hasLastChildRow(isScroll, captionCount, rowCount) {
        return isScroll ? captionCount === this.childCount + rowCount : captionCount === rowCount;
    }
    refreshCaptionRowCount(row$$1, count) {
        row$$1.data.count = count;
    }
    render(trIdx, rows, hasLastChildRow, aggregates) {
        const tr = this.parent.getContent().querySelectorAll('tr')[trIdx];
        const scrollEle = this.parent.getContent().firstElementChild;
        const rowHeight = this.parent.getRowHeight();
        if (tr && aggregates.length) {
            for (let i = aggregates.length - 1; i >= 0; i--) {
                tr.insertAdjacentElement('afterend', this.rowRenderer.render(aggregates[i], this.parent.getColumns()));
            }
        }
        if (tr && rows.length) {
            for (let i = rows.length - 1; i >= 0; i--) {
                if (this.confirmRowRendering(rows[i])) {
                    tr.insertAdjacentElement('afterend', this.rowRenderer.render(rows[i], this.parent.getColumns()));
                    if (this.isScrollDown) {
                        scrollEle.scrollTop = scrollEle.scrollTop - rowHeight;
                    }
                    if (this.isScrollUp) {
                        scrollEle.scrollTop = scrollEle.scrollTop + rowHeight;
                    }
                }
            }
        }
        this.isScrollDown = false;
        this.isScrollUp = false;
    }
    /**
     * @param {Row<Column>} row - specifies the row
     * @param {number} index - specifies the index
     * @returns {void}
     * @hidden
     */
    maintainRows(row$$1, index) {
        const page = this.parent.pageSettings.currentPage;
        if (!this.rowsByUid[page]) {
            this.rowsByUid[page] = {};
            this.objIdxByUid[page] = {};
        }
        if (row$$1.uid) {
            this.rowsByUid[page][row$$1.uid] = row$$1;
        }
        this.objIdxByUid[page][row$$1.uid] = index;
    }
    confirmRowRendering(row$$1) {
        let check = true;
        if (isNullOrUndefined(row$$1.indent) && !row$$1.isDataRow && !row$$1.isCaptionRow) {
            const cap = this.getRowByUid(row$$1.parentUid);
            if (cap.isCaptionRow && !cap.isExpand) {
                check = false;
            }
        }
        return check;
    }
    refreshRowObjects(newRows, index) {
        const page = this.parent.pageSettings.currentPage;
        const rowsObject = this.groupCache[page];
        this.rowsByUid[page] = {};
        this.objIdxByUid[page] = {};
        const newRowsObject = [];
        let k = 0;
        for (let i = 0; i < rowsObject.length; i++) {
            if (i === index) {
                this.maintainRows(rowsObject[i], k);
                newRowsObject.push(rowsObject[i]);
                k++;
                for (let j = 0; j < newRows.length; j++) {
                    this.maintainRows(newRows[j], k);
                    newRowsObject.push(newRows[j]);
                    k++;
                }
            }
            else {
                this.maintainRows(rowsObject[i], k);
                newRowsObject.push(rowsObject[i]);
                k++;
            }
        }
        this.groupCache[this.parent.pageSettings.currentPage] = extend([], newRowsObject);
        this.updateCurrentViewData();
    }
    getAggregateByCaptionIndex(index) {
        const cache = this.groupCache[this.parent.pageSettings.currentPage];
        const parent = cache[index];
        const indent = parent.indent;
        const uid = parent.uid;
        const agg = [];
        for (let i = index + 1; i < cache.length; i++) {
            if (cache[i].indent === indent) {
                break;
            }
            if (isNullOrUndefined(cache[i].indent) && cache[i].parentUid === uid) {
                agg.push(cache[i]);
            }
        }
        return agg;
    }
    getChildRowsByParentIndex(index, deep, block, data, includeAgg, includeCollapseAgg) {
        const cache = data ? data : this.groupCache[this.parent.pageSettings.currentPage];
        const parentRow = cache[index];
        let agg = [];
        if (!parentRow.isCaptionRow || (parentRow.isCaptionRow && !parentRow.isExpand && !includeCollapseAgg)) {
            return [];
        }
        if (includeAgg && this.parent.aggregates.length) {
            agg = this.getAggregateByCaptionIndex(index);
        }
        const indent = parentRow.indent;
        const uid = parentRow.uid;
        let rows = [];
        let count = 0;
        for (let i = index + 1; i < cache.length; i++) {
            if (cache[i].parentUid === uid) {
                if (isNullOrUndefined(cache[i].indent)) {
                    continue;
                }
                count++;
                rows.push(cache[i]);
                if (deep && cache[i].isCaptionRow) {
                    rows = rows.concat(this.getChildRowsByParentIndex(i, deep, block, data, includeAgg));
                }
                if (block && count === this.pageSize) {
                    break;
                }
            }
            if (cache[i].indent === indent) {
                break;
            }
        }
        return rows.concat(agg);
    }
    /**
     * @param {boolean} isReorder - specifies the isreorder
     * @returns {Row<Column>[]} returns the row
     * @hidden
     */
    initialGroupRows(isReorder) {
        let rows = [];
        const cache = this.groupCache[this.parent.pageSettings.currentPage];
        if (isReorder) {
            return this.getRenderedRowsObject();
        }
        for (let i = 0; i < cache.length; i++) {
            if (cache[i].indent === 0) {
                rows.push(cache[i]);
                rows = rows.concat(this.getChildRowsByParentIndex(i, true, true, cache, true));
            }
        }
        return rows;
    }
    /**
     * @returns {Row<Column>[]} retruns the row
     * @hidden */
    getRenderedRowsObject() {
        const rows = [];
        const trs = [].slice.call(this.parent.getContent().querySelectorAll('tr'));
        for (let i = 0; i < trs.length; i++) {
            rows.push(this.getRowByUid(trs[i].getAttribute('data-uid')));
        }
        return rows;
    }
    getCacheRowsOnDownScroll(index) {
        let rows = [];
        const rowsObject = this.groupCache[this.parent.pageSettings.currentPage];
        let k = index;
        for (let i = 0; i < this.pageSize; i++) {
            if (!rowsObject[k] || rowsObject[k].indent < rowsObject[index].indent) {
                break;
            }
            if (rowsObject[k].indent === rowsObject[index].indent) {
                rows.push(rowsObject[k]);
                if (rowsObject[k].isCaptionRow && rowsObject[k].isExpand) {
                    rows = rows.concat(this.getChildRowsByParentIndex(k, true, true, null, true));
                }
            }
            if (rowsObject[k].indent > rowsObject[index].indent || isNullOrUndefined(rowsObject[k].indent)) {
                i--;
            }
            k++;
        }
        return rows;
    }
    getCacheRowsOnUpScroll(start, end, index) {
        let rows = [];
        const rowsObject = this.groupCache[this.parent.pageSettings.currentPage];
        let str = false;
        for (let i = 0; i < rowsObject.length; i++) {
            if (str && (!rowsObject[i] || rowsObject[i].indent < rowsObject[index].indent || rowsObject[i].uid === end)) {
                break;
            }
            if (!str && rowsObject[i].uid === start) {
                str = true;
            }
            if (str && rowsObject[i].indent === rowsObject[index].indent) {
                rows.push(rowsObject[i]);
                if (rowsObject[i].isCaptionRow && rowsObject[i].isExpand) {
                    rows = rows.concat(this.getChildRowsByParentIndex(i, true, true, null, true));
                }
            }
        }
        return rows;
    }
    scrollHandler(e) {
        if (this.parent.isDestroyed || this.childCount) {
            return;
        }
        const downTrs = [].slice.call(this.parent.getContent().getElementsByClassName('e-lazyload-middle-down'));
        const upTrs = [].slice.call(this.parent.getContent().getElementsByClassName('e-lazyload-middle-up'));
        const endTrs = [].slice.call(this.parent.getContent().getElementsByClassName('e-not-lazyload-end'));
        let tr;
        let lazyLoadDown = false;
        let lazyLoadUp = false;
        let lazyLoadEnd = false;
        if (e.scrollDown && downTrs.length) {
            const result = this.findRowElements(downTrs);
            tr = result.tr;
            lazyLoadDown = result.entered;
        }
        if (!e.scrollDown && endTrs) {
            for (let i = 0; i < endTrs.length; i++) {
                const top = endTrs[i].getBoundingClientRect().top;
                const scrollHeight = this.parent.getContent().scrollHeight;
                if (top > 0 && top < scrollHeight) {
                    tr = endTrs[i];
                    lazyLoadEnd = true;
                    this.rowIndex = tr.rowIndex;
                    break;
                }
            }
        }
        if (!e.scrollDown && upTrs.length && !lazyLoadEnd) {
            const result = this.findRowElements(upTrs);
            tr = result.tr;
            lazyLoadUp = result.entered;
        }
        if (tr) {
            if (lazyLoadDown && e.scrollDown && lazyLoadDown && tr) {
                this.scrollDownHandler(tr);
            }
            if (!e.scrollDown && lazyLoadEnd && tr) {
                this.scrollUpEndRowHandler(tr);
            }
            if (this.cacheMode && !e.scrollDown && !lazyLoadEnd && lazyLoadUp && tr) {
                this.scrollUpHandler(tr);
            }
        }
    }
    scrollUpEndRowHandler(tr) {
        const page = this.parent.pageSettings.currentPage;
        const rows = this.groupCache[page];
        const uid = tr.getAttribute('data-uid');
        let index = this.rowObjectIndex = this.getRowObjectIndexByUid(uid);
        const idx = index;
        const childRow = rows[index];
        const parentCapRow = this.getRowByUid(childRow.parentUid);
        const capRowObjIdx = this.getRowObjectIndexByUid(parentCapRow.uid);
        const captionRowEle = this.parent.getContent().querySelector('tr[data-uid=' + parentCapRow.uid + ']');
        const capRowEleIndex = captionRowEle.rowIndex;
        const child = this.getChildRowsByParentIndex(capRowObjIdx);
        const childIdx = child.indexOf(childRow);
        const currentPage = Math.ceil(childIdx / this.pageSize);
        if (currentPage === 1) {
            return;
        }
        this.childCount = currentPage * this.pageSize;
        index = this.getCurrentBlockEndIndex(childRow, index);
        if (this.childCount < parentCapRow.data.count) {
            tr.classList.remove('e-not-lazyload-end');
            childRow.lazyLoadCssClass = '';
            const isRowExist = rows[index + 1] ? childRow.indent === rows[index + 1].indent : false;
            this.scrollData = isRowExist ? this.getCacheRowsOnDownScroll(index + 1) : [];
            const key = getGroupKeysAndFields(capRowObjIdx, rows);
            const args = {
                rowIndex: capRowEleIndex, makeRequest: !isRowExist, groupInfo: parentCapRow, fields: key.fields,
                keys: key.keys, skip: this.childCount, take: this.pageSize, isScroll: true
            };
            if (this.cacheMode && this.childCount >= (this.pageSize * this.cacheBlockSize)) {
                const child = this.getChildRowsByParentIndex(capRowObjIdx);
                const currenBlock = Math.ceil((child.indexOf(rows[idx]) / this.pageSize));
                const removeBlock = currenBlock - (this.cacheBlockSize - 1);
                this.removeBlock(uid, isRowExist, removeBlock, child);
                args.cachedRowIndex = (removeBlock * this.pageSize);
            }
            this.captionRowExpand(args);
        }
        else {
            this.childCount = 0;
        }
    }
    scrollDownHandler(tr) {
        const page = this.parent.pageSettings.currentPage;
        const rows = this.groupCache[page];
        const uid = tr.getAttribute('data-uid');
        let index = this.getRowObjectIndexByUid(uid);
        const idx = index;
        const childRow = rows[index];
        const parentCapRow = this.getRowByUid(childRow.parentUid);
        const capRowObjIdx = this.getRowObjectIndexByUid(parentCapRow.uid);
        const captionRowEle = this.getRowElementByUid(parentCapRow.uid);
        const capRowEleIndex = captionRowEle.rowIndex;
        const child = this.getChildRowsByParentIndex(capRowObjIdx);
        const childIdx = child.indexOf(childRow);
        const currentPage = Math.ceil(childIdx / this.pageSize);
        this.childCount = currentPage * this.pageSize;
        index = this.rowObjectIndex = this.getRowObjectIndexByUid(child[this.childCount - 1].uid);
        const lastchild = rows[index];
        const lastRow = this.getRowElementByUid(lastchild.uid);
        this.rowIndex = lastRow.rowIndex;
        index = this.getCurrentBlockEndIndex(lastchild, index);
        if (this.childCount < parentCapRow.data.count) {
            const isRowExist = rows[index + 1] ? childRow.indent === rows[index + 1].indent : false;
            if (isRowExist && !isNullOrUndefined(this.getRowElementByUid(rows[index + 1].uid))) {
                this.childCount = 0;
                return;
            }
            if (currentPage > 1 || !this.cacheMode) {
                tr.classList.remove('e-lazyload-middle-down');
                lastRow.classList.remove('e-not-lazyload-end');
                lastchild.lazyLoadCssClass = '';
            }
            this.scrollData = isRowExist ? this.getCacheRowsOnDownScroll(this.rowObjectIndex + 1) : [];
            const query = getGroupKeysAndFields(capRowObjIdx, rows);
            const args = {
                rowIndex: capRowEleIndex, makeRequest: !isRowExist, groupInfo: parentCapRow, fields: query.fields,
                keys: query.keys, skip: this.childCount, take: this.pageSize, isScroll: true
            };
            if (this.cacheMode && (this.childCount - this.pageSize) >= (this.pageSize * this.cacheBlockSize)) {
                this.isScrollDown = true;
                const child = this.getChildRowsByParentIndex(capRowObjIdx);
                const currenBlock = Math.ceil((child.indexOf(rows[idx]) / this.pageSize)) - 1;
                const removeBlock = (currenBlock - (this.cacheBlockSize - 1)) + 1;
                this.removeBlock(uid, isRowExist, removeBlock, child, lastchild);
                args.cachedRowIndex = (removeBlock * this.pageSize);
            }
            this.captionRowExpand(args);
        }
        else {
            this.childCount = 0;
        }
    }
    getCurrentBlockEndIndex(row$$1, index) {
        const page = this.parent.pageSettings.currentPage;
        const rows = this.groupCache[page];
        if (row$$1.isCaptionRow) {
            if (row$$1.isExpand) {
                const childCount = this.getChildRowsByParentIndex(index, true).length;
                this.rowIndex = this.rowIndex + childCount;
            }
            const agg = this.getAggregateByCaptionIndex(index);
            this.rowObjectIndex = this.rowObjectIndex + agg.length;
            let idx = index;
            for (let i = idx + 1; i < rows.length; i++) {
                if (rows[i].indent === rows[index].indent || rows[i].indent < rows[index].indent) {
                    index = idx;
                    break;
                }
                else {
                    idx++;
                }
            }
        }
        return index;
    }
    removeBlock(uid, isRowExist, removeBlock, child, lastchild) {
        const page = this.parent.pageSettings.currentPage;
        const rows = this.groupCache[page];
        const uid1 = child[(((removeBlock + 1) * this.pageSize) - 1) - this.blockSize].uid;
        const uid2 = child[(removeBlock * this.pageSize) - this.pageSize].uid;
        const uid3 = child[(removeBlock * this.pageSize)].uid;
        const firstIdx = this.getRowObjectIndexByUid(uid1);
        rows[firstIdx].lazyLoadCssClass = 'e-lazyload-middle-up';
        this.getRowElementByUid(uid1).classList.add('e-lazyload-middle-up');
        if (lastchild) {
            this.getRowElementByUid(uid3).classList.add('e-not-lazyload-first');
            this.getRowByUid(uid3).lazyLoadCssClass = 'e-not-lazyload-first';
            this.getRowByUid(uid2).lazyLoadCssClass = '';
        }
        if (isRowExist) {
            this.removeTopRows(lastchild ? lastchild.uid : uid, uid2, uid3);
        }
        else {
            this.uid1 = uid2;
            this.uid2 = uid3;
            this.uid3 = lastchild ? lastchild.uid : uid;
        }
    }
    scrollUpHandler(tr) {
        const page = this.parent.pageSettings.currentPage;
        const rows = this.groupCache[page];
        const uid = tr.getAttribute('data-uid');
        const row$$1 = this.getRowByUid(uid);
        const index = this.rowObjectIndex = this.getRowObjectIndexByUid(uid);
        const parentCapRow = this.getRowByUid(row$$1.parentUid);
        const capRowObjIdx = this.rowIndex = this.getRowObjectIndexByUid(parentCapRow.uid);
        const captionRowEle = this.parent.getRowElementByUID(parentCapRow.uid);
        const capRowEleIndex = captionRowEle.rowIndex;
        const child = this.getChildRowsByParentIndex(capRowObjIdx);
        const childIdx = child.indexOf(rows[index]);
        const currenBlock = Math.floor((childIdx / this.pageSize));
        let idx = this.blockSize;
        if ((this.blockSize * 2) > this.pageSize) {
            idx = (this.blockSize * 2) - this.pageSize;
            idx = this.blockSize - idx;
        }
        const start = child[(childIdx - (idx - 1)) - this.pageSize].uid;
        const end = child[childIdx - (idx - 1)].uid;
        this.scrollData = this.getCacheRowsOnUpScroll(start, end, index - (idx - 1));
        this.isFirstChildRow = currenBlock > 1;
        if (this.isFirstChildRow) {
            this.scrollData[0].lazyLoadCssClass = 'e-not-lazyload-first';
        }
        this.getRowByUid(end).lazyLoadCssClass = '';
        this.getRowElementByUid(end).classList.remove('e-not-lazyload-first');
        const removeBlock = currenBlock + this.cacheBlockSize;
        if (child.length !== parentCapRow.data.count && (removeBlock * this.pageSize > child.length)) {
            this.isFirstChildRow = false;
            this.scrollData[0].lazyLoadCssClass = '';
            this.getRowElementByUid(end).classList.add('e-not-lazyload-first');
            return;
        }
        const count = removeBlock * this.pageSize > parentCapRow.data.count
            ? parentCapRow.data.count : removeBlock * this.pageSize;
        const size = removeBlock * this.pageSize > parentCapRow.data.count
            ? (this.pageSize - ((this.pageSize * removeBlock) - parentCapRow.data.count)) : this.pageSize;
        const childRows = this.getChildRowsByParentIndex(rows.indexOf(child[count - 1]), true, false, null, true);
        const uid1 = childRows.length ? childRows[childRows.length - 1].uid : child[(count - 1)].uid;
        const uid2 = child[count - size].uid;
        const uid3 = child[(count - size) - 1].uid;
        const lastIdx = this.objIdxByUid[page][uid2] - idx;
        if (rows[lastIdx].lazyLoadCssClass === 'e-lazyload-middle-down') {
            const trEle = this.getRowElementByUid(rows[lastIdx].uid);
            if (trEle) {
                trEle.classList.add('e-lazyload-middle-down');
            }
        }
        this.getRowByUid(uid1).lazyLoadCssClass = '';
        this.getRowByUid(uid3).lazyLoadCssClass = 'e-not-lazyload-end';
        this.getRowElementByUid(uid3).classList.add('e-not-lazyload-end');
        this.removeBottomRows(uid1, uid2, uid3);
        this.rowIndex = tr.rowIndex - idx;
        if (tr.classList.length > 1) {
            tr.classList.remove('e-lazyload-middle-up');
        }
        else {
            tr.removeAttribute('class');
        }
        if (!isNullOrUndefined(this.getRowElementByUid(start))) {
            this.childCount = 0;
            this.scrollData = [];
            return;
        }
        const key = getGroupKeysAndFields(this.getRowObjectIndexByUid(parentCapRow.uid), rows);
        const args = {
            rowIndex: capRowEleIndex, makeRequest: false, groupInfo: parentCapRow, fields: key.fields,
            keys: key.keys, skip: this.childCount, take: this.pageSize, isScroll: true, scrollUp: true
        };
        this.isScrollUp = true;
        this.captionRowExpand(args);
    }
    findRowElements(rows) {
        let entered = false;
        let tr;
        for (let i = 0; i < rows.length; i++) {
            const rowIdx = rows[i].rowIndex;
            if (isRowEnteredInGrid(rowIdx, this.parent)) {
                entered = true;
                this.rowIndex = rowIdx;
                tr = rows[i];
                break;
            }
        }
        return { entered, tr };
    }
    getRowElementByUid(uid) {
        return this.parent.getContent().querySelector('tr[data-uid=' + uid + ']');
    }
    removeTopRows(uid1, uid2, uid3) {
        const trs = [].slice.call(this.parent.getContent().querySelectorAll('tr'));
        let start = false;
        for (let i = 0; i < trs.length; i++) {
            if (trs[i].getAttribute('data-uid') === uid3) {
                const tr = this.parent.getContent().querySelector('tr[data-uid=' + uid1 + ']');
                if (tr) {
                    this.rowIndex = tr.rowIndex;
                }
                break;
            }
            if (trs[i].getAttribute('data-uid') === uid2) {
                start = true;
            }
            if (start) {
                remove(trs[i]);
            }
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    removeBottomRows(uid1, uid2, uid3) {
        const trs = [].slice.call(this.parent.getContent().querySelectorAll('tr'));
        let trigger = false;
        for (let i = 0; i < trs.length; i++) {
            if (trs[i].getAttribute('data-uid') === uid2) {
                trigger = true;
            }
            if (trigger) {
                remove(trs[i]);
                if (trs[i].getAttribute('data-uid') === uid1) {
                    break;
                }
            }
        }
    }
    setCache(e) {
        const page = this.parent.pageSettings.currentPage;
        this.groupCache[page] = this.initialGroupCaptions[page] = extend([], e.data);
    }
    captionRowExpand(args) {
        const captionRow = args.groupInfo;
        const level = this.parent.groupSettings.columns.indexOf(captionRow.data.field) + 1;
        const pred = generateExpandPredicates(args.fields, args.keys, this);
        const predicateList = getPredicates(pred);
        const lazyLoad = { level: level, skip: args.skip, take: args.take, where: predicateList };
        if (args.makeRequest) {
            const query = this.parent.renderModule.data.generateQuery(true);
            if (!query.isCountRequired) {
                query.isCountRequired = true;
            }
            query.lazyLoad.push({ key: 'onDemandGroupInfo', value: lazyLoad });
            this.parent.showSpinner();
            this.parent.renderModule.data.getData({}, query).then((e) => {
                this.parent.hideSpinner();
                if (e.result.length === 0) {
                    return;
                }
                if (this.cacheMode && this.uid1 && this.uid2) {
                    this.removeTopRows(this.uid3, this.uid1, this.uid2);
                    this.uid1 = this.uid2 = this.uid3 = undefined;
                }
                this.lazyLoadHandler({
                    data: e.result, count: e.count, level: level, index: args.rowIndex,
                    isRowExist: false, isScroll: args.isScroll, up: false, rowIndex: args.cachedRowIndex
                });
            })
                .catch((e) => this.parent.renderModule.dataManagerFailure(e, { requestType: 'grouping' }));
        }
        else {
            this.lazyLoadHandler({
                data: null, count: args.groupInfo.data.count, level: level, index: args.rowIndex,
                isRowExist: true, isScroll: args.isScroll, up: args.scrollUp, rowIndex: args.cachedRowIndex
            });
        }
    }
    scrollReset(top) {
        this.parent.getContent().firstElementChild.scrollTop = top ? this.parent.getContent().firstElementChild.scrollTop + top : 0;
    }
    updateCurrentViewData() {
        const records = [];
        this.getRows().filter((row$$1) => {
            if (row$$1.isDataRow) {
                records[row$$1.index] = row$$1.data;
            }
        });
        this.parent.currentViewData = records.length ? records : this.parent.currentViewData;
    }
    /**
     * @returns {Row<Column>[]} returns the row
     * @hidden */
    getGroupCache() {
        return this.groupCache;
    }
    /**
     * @returns {Row<Column>[]} returns the row
     * @hidden */
    getRows() {
        return this.groupCache[this.parent.pageSettings.currentPage] || [];
    }
    /**
     * @returns {Element} returns the element
     * @hidden */
    getRowElements() {
        return [].slice.call(this.parent.getContent().getElementsByClassName(row));
    }
    /**
     * @param {number} index - specifies the index
     * @returns {Element} returns the element
     * @hidden
     */
    getRowByIndex(index) {
        const tr = [].slice.call(this.parent.getContent().getElementsByClassName(row));
        let row$$1;
        for (let i = 0; !isNullOrUndefined(index) && i < tr.length; i++) {
            if (tr[i].getAttribute(ariaRowIndex) === index.toString()) {
                row$$1 = tr[i];
                break;
            }
        }
        return row$$1;
    }
    /**
     * Tucntion to set the column visibility
     *
     * @param {Column[]} columns - specifies the column
     * @returns {void}
     * @hidden
     */
    setVisible(columns) {
        const gObj = this.parent;
        const rows = this.getRows();
        let testRow;
        rows.some((r) => { if (r.isDataRow) {
            testRow = r;
        } return r.isDataRow; });
        const contentrows = this.getRows().filter((row$$1) => !row$$1.isDetailRow);
        for (let i = 0; i < columns.length; i++) {
            const column = columns[i];
            const idx = this.parent.getNormalizedColumnIndex(column.uid);
            const colIdx = this.parent.getColumnIndexByUid(column.uid);
            const displayVal = column.visible === true ? '' : 'none';
            if (idx !== -1 && testRow && idx < testRow.cells.length) {
                setStyleAttribute(this.getColGroup().childNodes[idx], { 'display': displayVal });
            }
            this.setDisplayNone(gObj.getDataRows(), colIdx, displayVal, contentrows, idx);
            if (!this.parent.invokedFromMedia && column.hideAtMedia) {
                this.parent.updateMediaColumns(column);
            }
            this.parent.invokedFromMedia = false;
        }
    }
    /**
     * Function to set display.
     *
     * @param {Object} tr - specifies the row object
     * @param {number} idx - specifies the index
     * @param {string} displayVal - specifies the display value
     * @param {Row<Column>[]} rows - specifies the array of rows
     * @param {number} oriIdx - specifies the index
     * @returns {void}
     * @hidden
     */
    setDisplayNone(tr, idx, displayVal, rows, oriIdx) {
        if (!this.parent.groupSettings.columns.length) {
            setDisplayValue(tr, idx, displayVal, rows);
        }
        else {
            const keys = Object.keys(this.groupCache);
            for (let j = 0; j < keys.length; j++) {
                const uids = this.rowsByUid[keys[j]];
                const idxs = Object.keys(uids);
                for (let i = 0; i < idxs.length; i++) {
                    const tr = this.parent.getContent().querySelector('tr[data-uid=' + idxs[i] + ']');
                    const row$$1 = uids[idxs[i]];
                    if (row$$1.isCaptionRow) {
                        if (!this.captionModelGen.isEmpty()) {
                            this.changeCaptionRow(row$$1, tr, keys[j]);
                        }
                        else {
                            row$$1.cells[row$$1.indent + 1].colSpan = displayVal === '' ? row$$1.cells[row$$1.indent + 1].colSpan + 1
                                : row$$1.cells[row$$1.indent + 1].colSpan - 1;
                            if (tr) {
                                tr.cells[row$$1.indent + 1].colSpan = row$$1.cells[row$$1.indent + 1].colSpan;
                            }
                        }
                    }
                    if (row$$1.isDataRow) {
                        this.showAndHideCells(tr, idx, displayVal, false);
                        row$$1.cells[oriIdx].visible = displayVal === '' ? true : false;
                    }
                    if (!row$$1.isCaptionRow && !row$$1.isDataRow && isNullOrUndefined(row$$1.indent)) {
                        row$$1.cells[oriIdx].visible = displayVal === '' ? true : false;
                        row$$1.visible = row$$1.cells.some((cell) => cell.isDataCell && cell.visible);
                        this.showAndHideCells(tr, idx, displayVal, true, row$$1);
                    }
                }
            }
        }
    }
    changeCaptionRow(row$$1, tr, index) {
        const capRow = row$$1;
        const captionData = row$$1.data;
        const data = this.groupGenerator.generateCaptionRow(captionData, capRow.indent, capRow.parentGid, undefined, capRow.tIndex, capRow.parentUid);
        data.uid = row$$1.uid;
        data.isExpand = row$$1.isExpand;
        data.lazyLoadCssClass = row$$1.lazyLoadCssClass;
        this.rowsByUid[index][row$$1.uid] = data;
        this.groupCache[index][this.objIdxByUid[index][row$$1.uid]] = data;
        if (tr) {
            const tbody$$1 = this.parent.getContentTable().querySelector(tbody);
            tbody$$1.replaceChild(this.rowRenderer.render(data, this.parent.getColumns()), tr);
        }
    }
    showAndHideCells(tr, idx, displayVal, isSummary, row$$1) {
        if (tr) {
            const cls = isSummary ? 'td.e-summarycell' : 'td.e-rowcell';
            setStyleAttribute(tr.querySelectorAll(cls)[idx], { 'display': displayVal });
            if (tr.querySelectorAll(cls)[idx].classList.contains('e-hide')) {
                removeClass([tr.querySelectorAll(cls)[idx]], ['e-hide']);
            }
            if (isSummary) {
                if (row$$1.visible && tr.classList.contains('e-hide')) {
                    removeClass([tr], ['e-hide']);
                }
                else if (!row$$1.visible) {
                    addClass([tr], ['e-hide']);
                }
            }
        }
    }
}

/**
 * Group lazy load class
 */
class LazyLoadGroup {
    /**
     * Constructor for Grid group lazy load module
     *
     * @param {IGrid} parent - specifies the IGrid
     * @param {ServiceLocator} serviceLocator - specifies the ServiceLocator
     * @hidden
     */
    constructor(parent, serviceLocator) {
        this.parent = parent;
        this.serviceLocator = serviceLocator;
        this.addEventListener();
    }
    /**
     * For internal use only - Get the module name.
     *
     * @returns {string} returns the module name
     * @private
     */
    getModuleName() {
        return 'lazyLoadGroup';
    }
    /**
     * @returns {void}
     * @hidden
     */
    addEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.on(initialLoad, this.instantiateRenderer, this);
        this.parent.on(destroy, this.destroy, this);
    }
    /**
     * @returns {void}
     * @hidden
     */
    removeEventListener() {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(initialLoad, this.instantiateRenderer);
        this.parent.off(destroy, this.destroy);
    }
    instantiateRenderer() {
        if (this.parent.height === 'auto') {
            this.parent.height = this.parent.pageSettings.pageSize * this.parent.getRowHeight();
        }
        const renderer = this.serviceLocator.getService('rendererFactory');
        if (this.parent.groupSettings.enableLazyLoading) {
            renderer.addRenderer(RenderType.Content, new GroupLazyLoadRenderer(this.parent, this.serviceLocator));
        }
    }
    /**
     * @returns {void}
     * @hidden
     */
    destroy() {
        this.removeEventListener();
    }
}

/**
 * Action export
 */

/**
 * Models
 */

/**
 * `AutoCompleteEditCell` is used to handle autocomplete cell type editing.
 *
 * @hidden
 */
class AutoCompleteEditCell extends EditCellBase {
    write(args) {
        this.column = args.column;
        const isInlineEdit = this.parent.editSettings.mode !== 'Dialog';
        this.object = new AutoComplete(extend({
            dataSource: this.parent.dataSource instanceof DataManager ?
                this.parent.dataSource : new DataManager(this.parent.dataSource),
            query: new Query().select(args.column.field), enabled: isEditable(args.column, args.requestType, args.element),
            fields: { value: args.column.field },
            value: getObject(args.column.field, args.rowData),
            // enableRtl: this.parentect.enableRtl,
            actionComplete: this.selectedValues.bind(this),
            placeholder: isInlineEdit ? '' : args.column.headerText,
            floatLabelType: isInlineEdit ? 'Never' : 'Always'
        }, args.column.edit.params));
        this.object.appendTo(args.element);
        /* tslint:disable-next-line:no-any */
        args.element.setAttribute('name', getComplexFieldID(args.column.field));
    }
    selectedValues(valObj) {
        valObj.result = DataUtil.distinct(valObj.result, this.object.fields.value, true);
        if (this.column.dataSource) {
            this.column.dataSource.dataSource.json = valObj.result;
        }
    }
}

/**
 * `ComboBoxEditCell` is used to handle ComboBoxEdit cell type editing.
 *
 * @hidden
 */
class ComboboxEditCell extends EditCellBase {
    write(args) {
        this.column = args.column;
        const isInlineMode = this.parent.editSettings.mode !== 'Dialog';
        this.obj = new ComboBox(extend({
            dataSource: this.parent.dataSource instanceof DataManager ?
                this.parent.dataSource : new DataManager(this.parent.dataSource),
            query: new Query().select(args.column.field),
            fields: { value: args.column.field },
            value: getObject(args.column.field, args.rowData),
            enableRtl: this.parent.enableRtl, actionComplete: this.finalValue.bind(this),
            placeholder: isInlineMode ? '' : args.column.headerText,
            floatLabelType: isInlineMode ? 'Never' : 'Always',
            enabled: isEditable(args.column, args.requestType, args.element),
            cssClass: this.parent.cssClass ? this.parent.cssClass : null
        }, args.column.edit.params));
        this.obj.appendTo(args.element);
    }
    finalValue(val) {
        val.result = DataUtil.distinct(val.result, this.obj.fields.value, true);
        if (this.column.dataSource) {
            this.column.dataSource.dataSource.json = val.result;
        }
    }
}

/**
 * `MultiSelectEditCell` is used to handle multiselect dropdown cell type editing.
 *
 * @hidden
 */
class MultiSelectEditCell extends EditCellBase {
    write(args) {
        this.column = args.column;
        const isInline = this.parent.editSettings.mode !== 'Dialog';
        this.obj = new MultiSelect(extend({
            fields: { text: args.column.field, value: args.column.field },
            value: getValue(args.column.field, args.rowData),
            enableRtl: this.parent.enableRtl,
            placeholder: isInline ? '' : args.column.headerText, popupHeight: '200px',
            floatLabelType: isInline ? 'Never' : 'Always',
            cssClass: this.parent.cssClass ? this.parent.cssClass : null
        }, args.column.edit.params));
        this.obj.appendTo(args.element);
        args.element.setAttribute('name', getComplexFieldID(args.column.field));
    }
}

/**
 * `TimePickerEditCell` is used to handle Timepicker cell type editing.
 *
 * @hidden
 */
class TimePickerEditCell extends EditCellBase {
    write(args) {
        const isInlineEdit = this.parent.editSettings.mode !== 'Dialog';
        let rowDataValue = getObject(args.column.field, args.rowData);
        rowDataValue = rowDataValue ? new Date(rowDataValue) : null;
        this.obj = new TimePicker(extend({
            floatLabelType: isInlineEdit ? 'Never' : 'Always',
            value: rowDataValue,
            placeholder: isInlineEdit ?
                '' : args.column.headerText, enableRtl: this.parent.enableRtl,
            enabled: isEditable(args.column, args.requestType, args.element),
            cssClass: this.parent.cssClass ? this.parent.cssClass : null
        }, args.column.edit.params));
        this.obj.appendTo(args.element);
    }
}

/**
 * `ToggleEditCell` is used to handle boolean cell type editing.
 *
 * @hidden
 */
class ToggleEditCell extends EditCellBase {
    constructor() {
        super(...arguments);
        this.activeClasses = ['e-selectionbackground', 'e-active'];
    }
    create(args) {
        let clsNames = 'e-field e-boolcell';
        if (args.column.type === 'checkbox') {
            clsNames = 'e-field e-boolcell e-edit-checkselect';
        }
        return createEditElement(this.parent, args.column, clsNames, { type: 'checkbox', value: args.value });
    }
    read(element) {
        return element.checked;
    }
    write(args) {
        const chkBoxElement = !isNullOrUndefined(args.row) && args.row.querySelector('.e-edit-checkselect');
        const data = getObject(args.column.field, args.rowData);
        let checkState = data && JSON.parse(data.toString().toLowerCase());
        if (!isNullOrUndefined(chkBoxElement)) {
            this.editType = this.parent.editSettings.mode;
            this.editRow = args.row;
            if (args.requestType !== 'add') {
                const row$$1 = this.parent.getRowObjectFromUID(args.row.getAttribute('data-uid'));
                checkState = row$$1 ? row$$1.isSelected : false;
            }
            addRemoveActiveClasses([].slice.call(args.row.getElementsByClassName(rowCell)), checkState, ...this.activeClasses);
        }
        this.obj = new Switch(extend({
            label: this.parent.editSettings.mode !== 'Dialog' ? ' ' : args.column.headerText,
            checked: checkState,
            disabled: !isEditable(args.column, args.requestType, args.element), enableRtl: this.parent.enableRtl,
            change: this.switchModeChange.bind(this),
            cssClass: this.parent.cssClass ? this.parent.cssClass : ''
        }, args.column.edit.params));
        this.obj.appendTo(args.element);
    }
    switchModeChange(args) {
        if (this.editRow && this.editType !== 'Dialog') {
            let addClass$$1 = false;
            if (!args.checked) {
                this.editRow.removeAttribute('aria-selected');
            }
            else {
                addClass$$1 = true;
                this.editRow.setAttribute('aria-selected', addClass$$1.toString());
            }
            addRemoveActiveClasses([].slice.call(this.editRow.getElementsByClassName(rowCell)), addClass$$1, ...this.activeClasses);
        }
    }
}

/**
 * `MaskedTextBoxCellEdit` is used to handle masked input cell type editing.
 *
 * @hidden
 */
class MaskedTextBoxCellEdit extends EditCellBase {
    write(args) {
        this.column = args.column;
        const isInlineEdit = this.parent.editSettings.mode !== 'Dialog';
        this.obj = new MaskedTextBox(extend({
            fields: { value: args.column.field },
            value: getObject(args.column.field, args.rowData),
            floatLabelType: isInlineEdit ? 'Never' : 'Always',
            mask: '000-000-0000',
            enabled: isEditable(args.column, args.requestType, args.element),
            cssClass: this.parent.cssClass ? this.parent.cssClass : null
        }, args.column.edit.params));
        this.obj.appendTo(args.element);
    }
}

/**
 * Models
 */

/**
 * Services
 */

/**
 * Grid component exported items
 */

/**
 * Pager component exported items
 */

/**
 * Export Grid components
 */

export { CheckBoxFilterBase, ExcelFilterBase, SortDescriptor, SortSettings, Predicate$1 as Predicate, InfiniteScrollSettings, FilterSettings, SelectionSettings, SearchSettings, RowDropSettings, TextWrapSettings, ResizeSettings, GroupSettings, EditSettings, Grid, CellType, RenderType, ToolbarItem, ResponsiveDialogAction, ResponsiveToolbarAction, doesImplementInterface, valueAccessor, headerValueAccessor, getUpdateUsingRaf, isExportColumns, updateColumnTypeForExportColumns, updatecloneRow, getCollapsedRowsCount, recursive, iterateArrayOrObject, iterateExtend, templateCompiler, setStyleAndAttributes, extend$1 as extend, setColumnIndex, prepareColumns, setCssInGridPopUp, getActualProperties, parentsUntil, getElementIndex, inArray, getActualPropFromColl, removeElement, getPosition, getUid, appendChildren, parents, calculateAggregate, getScrollBarWidth, getRowHeight, getActualRowHeight, isComplexField, getComplexFieldID, setComplexFieldID, isEditable, isActionPrevent, wrap, setFormatter, addRemoveActiveClasses, distinctStringValues, getFilterMenuPostion, getZIndexCalcualtion, toogleCheckbox, setChecked, createCboxWithWrap, removeAddCboxClasses, refreshForeignData, getForeignData, getColumnByForeignKeyValue, getDatePredicate, renderMovable, isGroupAdaptive, getObject, getCustomDateFormat, getExpandedState, getPrintGridModel, extendObjWithFn, measureColumnDepth, checkDepth, refreshFilteredColsUid, Global, getTransformValues, applyBiggerTheme, alignFrozenEditForm, ensureLastRow, ensureFirstRow, isRowEnteredInGrid, getEditedDataIndex, eventPromise, getStateEventArgument, ispercentageWidth, resetRowIndex, compareChanges, setRowElements, splitFrozenRowObjectCells, gridActionHandler, getGridRowObjects, getGridRowElements, sliceElements, getCellsByTableName, getCellByColAndRowIndex, setValidationRuels, getMovableTbody, getFrozenRightTbody, setRowsInTbody, getNumberFormat, addBiggerDialog, performComplexDataOperation, setDisplayValue, addRemoveEventListener, createEditElement, getColumnModelByUid, getColumnModelByFieldName, registerEventHandlers, removeEventHandlers, clearReactVueTemplates, getRowIndexFromElement, generateExpandPredicates, getPredicates, getGroupKeysAndFields, created, destroyed, load, rowDataBound, queryCellInfo, headerCellInfo, actionBegin, actionComplete, actionFailure, dataBound, rowSelecting, rowSelected, rowDeselecting, rowDeselected, cellSelecting, cellSelected, cellDeselecting, cellDeselected, columnSelecting, columnSelected, columnDeselecting, columnDeselected, columnDragStart, columnDrag, columnDrop, rowDragStartHelper, rowDragStart, rowDrag, rowDrop, beforePrint, printComplete, detailDataBound, toolbarClick, batchAdd, batchCancel, batchDelete, beforeBatchAdd, beforeBatchDelete, beforeBatchSave, beginEdit, cellEdit, cellSave, cellSaved, endAdd, endDelete, endEdit, recordDoubleClick, recordClick, beforeDataBound, beforeOpenColumnChooser, beforeOpenAdaptiveDialog, resizeStart, onResize, resizeStop, checkBoxChange, beforeCopy, beforePaste, beforeAutoFill, filterChoiceRequest, filterAfterOpen, filterBeforeOpen, filterSearchBegin, commandClick, exportGroupCaption, lazyLoadGroupExpand, lazyLoadGroupCollapse, initialLoad, initialEnd, dataReady, contentReady, uiUpdate, onEmpty, inBoundModelChanged, modelChanged, colGroupRefresh, headerRefreshed, pageBegin, pageComplete, sortBegin, sortComplete, filterBegin, filterComplete, searchBegin, searchComplete, reorderBegin, reorderComplete, rowDragAndDropBegin, rowDragAndDropComplete, groupBegin, groupComplete, ungroupBegin, ungroupComplete, groupAggregates, refreshFooterRenderer, refreshAggregateCell, refreshAggregates, rowSelectionBegin, rowSelectionComplete, columnSelectionBegin, columnSelectionComplete, cellSelectionBegin, cellSelectionComplete, beforeCellFocused, cellFocused, keyPressed, click, destroy, columnVisibilityChanged, scroll, columnWidthChanged, columnPositionChanged, rowDragAndDrop, rowsAdded, rowsRemoved, columnDragStop, headerDrop, dataSourceModified, refreshComplete, refreshVirtualBlock, dblclick, toolbarRefresh, bulkSave, autoCol, tooltipDestroy, updateData, editBegin, editComplete, addBegin, addComplete, saveComplete, deleteBegin, deleteComplete, preventBatch, dialogDestroy, crudAction, addDeleteAction, destroyForm, doubleTap, beforeExcelExport, excelExportComplete, excelQueryCellInfo, excelHeaderQueryCellInfo, exportDetailDataBound, beforePdfExport, pdfExportComplete, pdfQueryCellInfo, pdfHeaderQueryCellInfo, accessPredicate, contextMenuClick, freezeRender, freezeRefresh, contextMenuOpen, columnMenuClick, columnMenuOpen, filterOpen, filterDialogCreated, filterMenuClose, initForeignKeyColumn, getForeignKeyData, generateQuery, showEmptyGrid, foreignKeyData, columnDataStateChange, dataStateChange, dataSourceChanged, rtlUpdated, beforeFragAppend, frozenHeight, textWrapRefresh, recordAdded, cancelBegin, editNextValCell, hierarchyPrint, expandChildGrid, printGridInit, exportRowDataBound, exportDataBound, rowPositionChanged, columnChooserOpened, batchForm, beforeStartEdit, beforeBatchCancel, batchEditFormRendered, partialRefresh, beforeCustomFilterOpen, selectVirtualRow, columnsPrepared, cBoxFltrBegin, cBoxFltrComplete, fltrPrevent, beforeFltrcMenuOpen, valCustomPlacement, filterCboxValue, componentRendered, restoreFocus, detailStateChange, detailIndentCellInfo, virtaulKeyHandler, virtaulCellFocus, virtualScrollEditActionBegin, virtualScrollEditSuccess, virtualScrollEditCancel, virtualScrollEdit, refreshVirtualCache, editReset, virtualScrollAddActionBegin, getVirtualData, refreshInfiniteModeBlocks, resetInfiniteBlocks, infiniteScrollHandler, infinitePageQuery, infiniteShowHide, appendInfiniteContent, removeInfiniteRows, setInfiniteCache, infiniteEditHandler, initialCollapse, getAggregateQuery, closeFilterDialog, columnChooserCancelBtnClick, getFilterBarOperator, resetColumns, pdfAggregateQueryCellInfo, excelAggregateQueryCellInfo, setGroupCache, lazyLoadScrollHandler, groupCollapse, beforeCheckboxRenderer, refreshHandlers, refreshFrozenColumns, setReorderDestinationElement, refreshVirtualFrozenHeight, setFreezeSelection, setInfiniteFrozenHeight, setInfiniteColFrozenHeight, beforeRefreshOnDataChange, immutableBatchCancel, refreshVirtualFrozenRows, checkScrollReset, refreshFrozenHeight, setHeightToFrozenElement, preventFrozenScrollRefresh, nextCellIndex, refreshInfiniteCurrentViewData, infiniteCrudCancel, filterDialogClose, refreshCustomFilterOkBtn, refreshCustomFilterClearBtn, renderResponsiveCmenu, filterCmenuSelect, customFilterClose, setFullScreenDialog, refreshExpandandCollapse, rowModeChange, enterKeyHandler, refreshVirtualMaxPage, setVirtualPageQuery, selectRowOnContextOpen, pagerRefresh, closeInline, closeBatch, closeEdit, resetVirtualFocus, afterContentRender, refreshVirtualEditFormCells, scrollToEdit, beforeCheckboxRendererQuery, createVirtualValidationForm, validateVirtualForm, destroyChildGrid, stickyScrollComplete, captionActionComplete, refreshInfinitePersistSelection, refreshInfiniteEditrowindex, afterFilterColumnMenuClose, beforeCheckboxfilterRenderer, rowCell, gridHeader, gridContent, gridFooter, headerContent, movableContent, movableHeader, frozenContent, frozenHeader, content, table, row, gridChkBox, editedRow, addedRow, changedRecords, addedRecords, deletedRecords, leftRight, frozenRight, frozenLeft, ariaColIndex, ariaRowIndex, tbody, colGroup, open, change, focus, create, beforeOpen, downArrow, upArrow, pageUp, pageDown, enter, shiftEnter, tab, shiftTab, Data, Sort, Page, Selection, Filter, Search, Scroll, resizeClassList, Resize, Reorder, RowDD, Group, getCloneProperties, Print, DetailRow, Toolbar$1 as Toolbar, Aggregate, summaryIterator, VirtualScroll, Edit, BatchEdit, InlineEdit, NormalEdit, DialogEdit, ColumnChooser, ExcelExport, PdfExport, ExportHelper, ExportValueFormatter, Clipboard, CommandColumn, CheckBoxFilter, menuClass, ContextMenu$1 as ContextMenu, Freeze, ColumnMenu, ExcelFilter, ForeignKey, Logger, detailLists, InfiniteScroll, LazyLoadGroup, Column, CommandColumnModel, GridColumn, StackedColumn, Row, Cell, HeaderRender, ContentRender, RowRenderer, CellRenderer, HeaderCellRenderer, FilterCellRenderer, StackedHeaderCellRenderer, Render, IndentCellRenderer, GroupCaptionCellRenderer, GroupCaptionEmptyCellRenderer, BatchEditRender, DialogEditRender, InlineEditRender, EditRender, BooleanEditCell, DefaultEditCell, DropDownEditCell, NumericEditCell, DatePickerEditCell, CommandColumnRenderer, FreezeContentRender, FreezeRender, StringFilterUI, NumberFilterUI, DateFilterUI, BooleanFilterUI, FlMenuOptrUI, AutoCompleteEditCell, ComboboxEditCell, MultiSelectEditCell, TimePickerEditCell, ToggleEditCell, MaskedTextBoxCellEdit, VirtualContentRenderer, VirtualHeaderRenderer, VirtualElementHandler, GroupLazyLoadRenderer, ColumnFreezeHeaderRenderer, ColumnFreezeContentRenderer, ResponsiveDialogRenderer, EditCellBase, CellRendererFactory, ServiceLocator, RowModelGenerator, GroupModelGenerator, FreezeRowModelGenerator, ValueFormatter, VirtualRowModelGenerator, InterSectionObserver, Pager, ExternalMessage, NumericContainer, PagerMessage, PagerDropDown };
//# sourceMappingURL=ej2-grids.es2015.js.map
